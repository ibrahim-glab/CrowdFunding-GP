import { ITableProps } from '.';
interface PaginationTextProps {
    isActive: boolean;
}
interface PaginationTag {
    active: boolean;
}
declare const PaginationTag: import("styled-components").StyledComponent<"div", any, PaginationTag, never>;
declare const _default: {
    DivSpinnerLoaderParent: import("styled-components").StyledComponent<"div", any, {}, never>;
    DivStyledCustomData: import("styled-components").StyledComponent<"div", any, {}, never>;
    DivTableCell: import("styled-components").StyledComponent<"div", any, Pick<ITableProps, "cellPadding" | "alignCellItems" | "justifyCellItems">, never>;
    Divider: import("styled-components").StyledComponent<"div", any, {}, never>;
    NoData: import("styled-components").StyledComponent<"div", any, {}, never>;
    Pagination: import("styled-components").StyledComponent<"div", any, {}, never>;
    PaginationTag: import("styled-components").StyledComponent<"div", any, PaginationTag, never>;
    PaginationText: import("styled-components").StyledComponent<"div", any, PaginationTextProps, never>;
    TableGrid: import("styled-components").StyledComponent<"div", any, {
        columns: any;
        columnGapSize: any;
        tableBackgroundColor: any;
        headerBgColor: any;
        headerTextColor: any;
        cellPadding: any;
    }, "cellPadding" | "columns" | "columnGapSize" | "tableBackgroundColor" | "headerTextColor" | "headerBgColor">;
    TableGridContainer: import("styled-components").StyledComponent<"div", any, {
        isScrollableOnOverflow: boolean;
        customTableBorder?: string | undefined;
    }, never>;
    TableParent: import("styled-components").StyledComponent<"div", any, {}, never>;
};
export default _default;
//# sourceMappingURL=Table.styles.d.ts.map