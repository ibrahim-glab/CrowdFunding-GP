import { ProviderAccounts } from 'eip1193-provider';
import BloctoProvider from './blocto';
import { EIP1193RequestPayload, EthereumProviderConfig, EthereumProviderInterface, JsonRpcRequest, JsonRpcResponse, JsonRpcCallback, SwitchableNetwork, IUserOperation } from './types/ethereum.d';
import { KEY_SESSION } from '../lib/storage';
import { EvmSupportMapping } from '../lib/getEvmSupport';
export default class EthereumProvider extends BloctoProvider implements EthereumProviderInterface {
    #private;
    chainId: `0x${string}`;
    networkVersion: `${number}`;
    rpc: string;
    injectedWalletServer?: string;
    appId: string;
    _blocto: {
        sessionKey: KEY_SESSION;
        walletServer: string;
        blockchainName: string;
        networkType: string;
        supportNetworkList: EvmSupportMapping;
        switchableNetwork: SwitchableNetwork;
    };
    constructor({ chainId, rpc, walletServer, appId }: EthereumProviderConfig);
    send(methodOrPayload: string | JsonRpcRequest, paramsOrCallback: Array<unknown> | JsonRpcCallback): Promise<void | JsonRpcResponse>;
    sendAsync(payload: JsonRpcRequest | Array<JsonRpcRequest>, callback?: JsonRpcCallback): Promise<JsonRpcResponse | Array<JsonRpcResponse> | void>;
    /**
     * Sending userOperation using Blocto SDK.
     * @param {IUserOperation} userOp - userOperation object
     * @remarks No need to include nonce, initCode, and signature as parameters when using BloctoSDK to send userOperation.
     * These parameters will be ignored.
     * @returns {Promise<string>} - userOperation hash
     */
    sendUserOperation(userOp: IUserOperation): Promise<string>;
    request(payload: EIP1193RequestPayload): Promise<any>;
    bloctoApi<T>(url: string, options?: RequestInit): Promise<T>;
    responseListener(frame: HTMLIFrameElement, objectKey: string): Promise<any>;
    setIframe(url: string): Promise<HTMLIFrameElement>;
    enable(email?: string): Promise<ProviderAccounts>;
    fetchAccounts(): Promise<ProviderAccounts>;
    handleReadRequests(payload: EIP1193RequestPayload): Promise<any>;
    handleSign({ method, params }: EIP1193RequestPayload): Promise<string>;
    handleSendTransaction(payload: EIP1193RequestPayload): Promise<string>;
    handleSendBatchTransaction(payload: EIP1193RequestPayload): Promise<string>;
    handleSendUserOperation(payload: EIP1193RequestPayload): Promise<string>;
    handleBundler(payload: EIP1193RequestPayload): Promise<JSON>;
    handleDisconnect(): Promise<void>;
    loadSwitchableNetwork(networkList: {
        chainId: string;
        rpcUrls?: string[];
    }[]): Promise<null>;
}
