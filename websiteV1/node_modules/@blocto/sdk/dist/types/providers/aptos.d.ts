import type { Types as AptosTypes } from 'aptos';
import BloctoProvider from './blocto';
import { AptosProviderConfig, AptosProviderInterface, NetworkInfo, PublicAccount, WalletAdapterNetwork, TxOptions, SignMessagePayload, SignMessageResponse } from './types/aptos.d';
import { KEY_SESSION } from '../lib/storage';
export default class AptosProvider extends BloctoProvider implements AptosProviderInterface {
    publicKey: string[];
    authKey: string;
    server: string;
    chainId: number;
    networkName: WalletAdapterNetwork;
    api?: string;
    sessionKey: KEY_SESSION;
    constructor({ chainId, server, appId }: AptosProviderConfig);
    get publicAccount(): PublicAccount;
    network(): Promise<NetworkInfo>;
    isConnected(): Promise<boolean>;
    signTransaction(transaction: unknown): Promise<AptosTypes.SubmitTransactionRequest>;
    disconnect(): Promise<void>;
    signAndSubmitTransaction(transaction: AptosTypes.TransactionPayload, txOptions?: TxOptions): Promise<{
        hash: AptosTypes.HexEncodedBytes;
    }>;
    signMessage(payload: SignMessagePayload): Promise<SignMessageResponse>;
    connect(): Promise<PublicAccount>;
    fetchAddress(): Promise<string>;
}
