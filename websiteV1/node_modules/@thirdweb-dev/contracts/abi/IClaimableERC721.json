{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "verifyClaim",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "claim(address,uint256)": "aad3ec96",
    "verifyClaim(address,uint256)": "2f92023a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"thirdweb\",\"events\":{\"TokensClaimed(address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are claimed\"}},\"kind\":\"dev\",\"methods\":{\"claim(address,uint256)\":{\"details\":\"The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.\",\"params\":{\"_quantity\":\"The number of NFTs to mint.\",\"_receiver\":\"The recipient of the NFT to mint.\"}},\"verifyClaim(address,uint256)\":{\"details\":\"Checks a request to claim NFTs against a custom condition.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   Contract creators should override this function to create custom logic for claiming,                   for e.g. price collection, allowlist, max quantity, etc.\"},\"verifyClaim(address,uint256)\":{\"notice\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IClaimableERC721.sol\":\"IClaimableERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IClaimableERC721.sol\":{\"keccak256\":\"0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929\",\"dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "claim(address,uint256)": {
            "details": "The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.",
            "params": {
              "_quantity": "The number of NFTs to mint.",
              "_receiver": "The recipient of the NFT to mint."
            }
          },
          "verifyClaim(address,uint256)": {
            "details": "Checks a request to claim NFTs against a custom condition.",
            "params": {
              "_claimer": "Caller of the claim function.",
              "_quantity": "The number of NFTs being claimed."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "claim(address,uint256)": {
            "notice": "Lets an address claim multiple lazy minted NFTs at once to a recipient.                   Contract creators should override this function to create custom logic for claiming,                   for e.g. price collection, allowlist, max quantity, etc."
          },
          "verifyClaim(address,uint256)": {
            "notice": "Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/extension/interface/IClaimableERC721.sol": "IClaimableERC721"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/extension/interface/IClaimableERC721.sol": {
        "keccak256": "0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960",
        "urls": [
          "bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929",
          "dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/extension/interface/IClaimableERC721.sol",
    "id": 32399,
    "exportedSymbols": {
      "IClaimableERC721": [
        32398
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:1406:105",
    "nodes": [
      {
        "id": 32369,
        "nodeType": "PragmaDirective",
        "src": "39:23:105",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 32398,
        "nodeType": "ContractDefinition",
        "src": "86:1358:105",
        "nodes": [
          {
            "id": 32381,
            "nodeType": "EventDefinition",
            "src": "164:164:105",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 32371,
              "nodeType": "StructuredDocumentation",
              "src": "119:40:105",
              "text": "@dev Emitted when tokens are claimed"
            },
            "name": "TokensClaimed",
            "nameLocation": "170:13:105",
            "parameters": {
              "id": 32380,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32373,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimer",
                  "nameLocation": "209:7:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 32381,
                  "src": "193:23:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 32372,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "193:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32375,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "242:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 32381,
                  "src": "226:24:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 32374,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "226:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32377,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "startTokenId",
                  "nameLocation": "276:12:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 32381,
                  "src": "260:28:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 32376,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "260:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32379,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "quantityClaimed",
                  "nameLocation": "306:15:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 32381,
                  "src": "298:23:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 32378,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "298:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "183:144:105"
            }
          },
          {
            "id": 32389,
            "nodeType": "FunctionDefinition",
            "src": "890:70:105",
            "nodes": [],
            "documentation": {
              "id": 32382,
              "nodeType": "StructuredDocumentation",
              "src": "334:551:105",
              "text": "  @notice          Lets an address claim multiple lazy minted NFTs at once to a recipient.\n                   Contract creators should override this function to create custom logic for claiming,\n                   for e.g. price collection, allowlist, max quantity, etc.\n  @dev             The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.\n  @param _receiver  The recipient of the NFT to mint.\n  @param _quantity  The number of NFTs to mint."
            },
            "functionSelector": "aad3ec96",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claim",
            "nameLocation": "899:5:105",
            "parameters": {
              "id": 32387,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32384,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "913:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 32389,
                  "src": "905:17:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 32383,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "905:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32386,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "932:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 32389,
                  "src": "924:17:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 32385,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "924:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "904:38:105"
            },
            "returnParameters": {
              "id": 32388,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "959:0:105"
            },
            "scope": 32398,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 32397,
            "nodeType": "FunctionDefinition",
            "src": "1370:72:105",
            "nodes": [],
            "documentation": {
              "id": 32390,
              "nodeType": "StructuredDocumentation",
              "src": "966:399:105",
              "text": "  @notice          Override this function to add logic for claim verification, based on conditions\n                   such as allowlist, price, max quantity etc.\n  @dev             Checks a request to claim NFTs against a custom condition.\n  @param _claimer   Caller of the claim function.\n  @param _quantity  The number of NFTs being claimed."
            },
            "functionSelector": "2f92023a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "verifyClaim",
            "nameLocation": "1379:11:105",
            "parameters": {
              "id": 32395,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32392,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "1399:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 32397,
                  "src": "1391:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 32391,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1391:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32394,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "1417:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 32397,
                  "src": "1409:17:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 32393,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1409:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1390:37:105"
            },
            "returnParameters": {
              "id": 32396,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1441:0:105"
            },
            "scope": 32398,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IClaimableERC721",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 32370,
          "nodeType": "StructuredDocumentation",
          "src": "64:21:105",
          "text": "@author thirdweb"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          32398
        ],
        "name": "IClaimableERC721",
        "nameLocation": "96:16:105",
        "scope": 32399,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 105
}