{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "name": "TokenURIRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        }
      ],
      "name": "encryptDecrypt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "encryptedData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        }
      ],
      "name": "getRevealURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        }
      ],
      "name": "isEncryptedBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        }
      ],
      "name": "reveal",
      "outputs": [
        {
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "verifyClaim",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "943:3797:1:-:0;;;1226:254;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1415:13;1430:5;1437:7;1446:17;1465:11;3132:5:3;3139:7;1090:5:20;1083:4;:12;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1105:16:20;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;;202:1:218;307:7;:22;-1:-1:-1;3158:26:3::1;3170:13:::0;3158:11:::1;:26::i;:::-;3194:56;3219:17:::0;-1:-1:-1;;;;;3194:56:3;::::1;:24;:56::i;:::-;2951:306:::0;;;;;1226:254:1;;;;;943:3797;;1421:172:68;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3430:334:75:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:75;;2326:2:644;3571:25:75;;;2308:21:644;2365:2;2345:18;;;2338:30;-1:-1:-1;;;2384:18:644;;;2377:45;2439:18;;3571:25:75;;;;;;;3531:76;3617:16;:36;;-1:-1:-1;;;;;3617:36:75;;-1:-1:-1;;;;;;3663:32:75;;;;;-1:-1:-1;;;3663:32:75;;;;;;;;3711:46;;2614:25:644;;;3711:46:75;;2602:2:644;2587:18;3711:46:75;;;;;;;3430:334;;:::o;943:3797:1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;943:3797:1;;;-1:-1:-1;943:3797:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:644;93:13;;-1:-1:-1;;;;;135:31:644;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:885;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:644;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:644;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;912:3;907:2;902;894:6;890:15;886:24;883:33;880:53;;;929:1;926;919:12;880:53;951:1;942:10;;961:133;975:2;972:1;969:9;961:133;;;1063:14;;;1059:23;;1053:30;1032:14;;;1028:23;;1021:63;986:10;;;;961:133;;;1112:2;1109:1;1106:9;1103:80;;;1171:1;1166:2;1161;1153:6;1149:15;1145:24;1138:35;1103:80;1201:6;328:885;-1:-1:-1;;;;;;328:885:644:o;1218:901::-;1344:6;1352;1360;1368;1376;1429:3;1417:9;1408:7;1404:23;1400:33;1397:53;;;1446:1;1443;1436:12;1397:53;1469:40;1499:9;1469:40;:::i;:::-;1553:2;1538:18;;1532:25;1459:50;;-1:-1:-1;;;;;;1606:14:644;;;1603:34;;;1633:1;1630;1623:12;1603:34;1656:61;1709:7;1700:6;1689:9;1685:22;1656:61;:::i;:::-;1646:71;;1763:2;1752:9;1748:18;1742:25;1726:41;;1792:2;1782:8;1779:16;1776:36;;;1808:1;1805;1798:12;1776:36;;1831:63;1886:7;1875:8;1864:9;1860:24;1831:63;:::i;:::-;1821:73;;;1913:49;1958:2;1947:9;1943:18;1913:49;:::i;:::-;2005:3;1990:19;;1984:26;1903:59;;-1:-1:-1;;;;;;2039:31:644;;2029:42;;2019:70;;2085:1;2082;2075:12;2019:70;2108:5;2098:15;;;1218:901;;;;;;;;:::o;2650:380::-;2729:1;2725:12;;;;2772;;;2793:61;;2847:4;2839:6;2835:17;2825:27;;2793:61;2900:2;2892:6;2889:14;2869:18;2866:38;2863:161;;;2946:10;2941:3;2937:20;2934:1;2927:31;2981:4;2978:1;2971:15;3009:4;3006:1;2999:15;2863:161;;2650:380;;;:::o;:::-;943:3797:1;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "943:3797:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;645:64:20;;;;;;;;;;-1:-1:-1;645:64:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;597:25:644;;;585:2;570:18;645:64:20;;;;;;;;7968:449:3;;;;;;;;;;-1:-1:-1;7968:449:3;;;;;:::i;:::-;;:::i;:::-;;;1184:14:644;;1177:22;1159:41;;1147:2;1132:18;7968:449:3;1019:187:644;418:18:20;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1896:405:1:-;;;;;;;;;;-1:-1:-1;1896:405:1;;;;;:::i;:::-;;:::i;1133:173:68:-;;;;;;;;;;-1:-1:-1;1133:173:68;;;;;:::i;:::-;;:::i;:::-;;1973:203:52;;;;;;;;;;-1:-1:-1;1973:203:52;;;;;:::i;:::-;;:::i;1421:347:75:-;;;;;;;;;;-1:-1:-1;1421:347:75;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;2783:32:644;;;2765:51;;2847:2;2832:18;;2825:34;;;;2738:18;1421:347:75;2591:274:644;5015:534:3;;;;;;:::i;:::-;;:::i;3088:360:20:-;;;;;;;;;;-1:-1:-1;3088:360:20;;;;;:::i;:::-;;:::i;8681:112:3:-;;;;;;;;;;-1:-1:-1;8765:21:3;;8681:112;;3937:129:55;;;;;;;;;;-1:-1:-1;3937:129:55;;;;;:::i;:::-;;:::i;6029:128:3:-;;;;;;;;;;-1:-1:-1;6029:128:3;;;;;:::i;:::-;;;;;2008:381:75;;;;;;;;;;-1:-1:-1;2008:381:75;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;6478:32:644;;;6460:51;;6559:6;6547:19;;;6542:2;6527:18;;6520:47;6433:18;2008:381:75;6288:285:644;1788:482:20;;;;;;;;;;-1:-1:-1;1788:482:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3087:256:75:-;;;;;;;;;;-1:-1:-1;3087:256:75;;;;;:::i;:::-;;:::i;1655:96:52:-;;;;;;;;;;-1:-1:-1;1729:8:52;:15;1655:96;;7112:564:3;;;;;;;;;;-1:-1:-1;7112:564:3;;;;;:::i;:::-;;:::i;898:43:52:-;;;;;;;;;;-1:-1:-1;898:43:52;;;;;:::i;:::-;;;;;;;;;;;;;;;;871:86:68;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;9335:32:644;;;9317:51;;9305:2;9290:18;871:86:68;9171:203:644;1003:188:54;;;;;;;;;;-1:-1:-1;1003:188:54;;;;;:::i;:::-;;:::i;442:20:20:-;;;;;;;;;;;;;:::i;4281:288:75:-;;;;;;;;;;-1:-1:-1;4281:288:75;;;;;:::i;:::-;;:::i;1383:534:55:-;;;;;;;;;;-1:-1:-1;1383:534:55;;;;;:::i;:::-;;:::i;568:46::-;;;;;;;;;;-1:-1:-1;568:46:55;;;;;:::i;:::-;;:::i;2457:291:20:-;;;;;;;;;;-1:-1:-1;2457:291:20;;;;;:::i;:::-;;:::i;698:319:63:-;;;;;;;;;;-1:-1:-1;698:319:63;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2499:144:75:-;;;;;;;;;;-1:-1:-1;2599:16:75;;-1:-1:-1;;;;;2599:16:75;;;-1:-1:-1;;;2624:10:75;;;;2499:144;;2273:46:3;;;;;;;;;;-1:-1:-1;2273:46:3;;;;;:::i;:::-;;;;;;;;;;;;;;4134:413:1;;;;;;;;;;-1:-1:-1;4134:413:1;;;;;:::i;:::-;;:::i;3108:548::-;;;;;;;;;;-1:-1:-1;3108:548:1;;;;;:::i;:::-;;:::i;2409:1283:55:-;;;;;;;;;;-1:-1:-1;2409:1283:55;;;;;:::i;:::-;;:::i;565:34:54:-;;;;;;;;;;;;;:::i;716:68:20:-;;;;;;;;;;-1:-1:-1;716:68:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:328;;;;;;;;;;-1:-1:-1;2754:328:20;;;;;:::i;:::-;;:::i;6442:376:3:-;;;;;;;;;;-1:-1:-1;6442:376:3;;;;;:::i;:::-;;:::i;7968:449::-;8071:4;-1:-1:-1;;;;;;;;;8106:25:3;;;;:100;;-1:-1:-1;;;;;;;;;;8181:25:3;;;8106:100;:176;;;-1:-1:-1;;;;;;;;;;8257:25:3;;;8106:176;:279;;;-1:-1:-1;;;;;;;8344:41:3;;-1:-1:-1;;;8344:41:3;8106:279;8087:298;7968:449;-1:-1:-1;;7968:449:3:o;418:18:20:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1896:405:1:-;1965:13;1991:15;2012:21;2024:8;2012:11;:21::i;:::-;1990:43;;;2043:22;2068:21;2080:8;2068:11;:21::i;:::-;2043:46;;2104:25;2121:7;2104:16;:25::i;:::-;2100:195;;;2176:8;2159:31;;;;;;;;:::i;:::-;;;;;;;;;;;;;2145:46;;;;1896:405;;;:::o;2100:195::-;2253:8;2263:19;:8;:17;:19::i;:::-;2236:47;;;;;;;;;:::i;1133:173:68:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:68;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;1973:203:52:-;2037:7;2070:17;1729:8;:15;;1655:96;2070:17;2060:6;:27;2056:81;;2103:23;;-1:-1:-1;;;2103:23:52;;17156:2:644;2103:23:52;;;17138:21:644;17195:2;17175:18;;;17168:30;-1:-1:-1;;;17214:18:644;;;17207:43;17267:18;;2103:23:52;16954:337:644;2056:81:52;2153:8;2162:6;2153:16;;;;;;;;:::i;:::-;;;;;;;;;2146:23;;1973:203;;;:::o;1421:347:75:-;1558:16;1576:21;1614:17;1633:11;1648:31;1671:7;1648:22;:31::i;:::-;1613:66;;-1:-1:-1;1613:66:75;;-1:-1:-1;1613:66:75;;;-1:-1:-1;1755:6:75;1736:15;1613:66;1736:9;:15;:::i;:::-;1735:26;;;;:::i;:::-;1719:42;;1603:165;;1421:347;;;;;:::o;5015:534:3:-;245:1:218;548:7;;:19;;540:63;;;;-1:-1:-1;;;540:63:218;;18192:2:644;540:63:218;;;18174:21:644;18231:2;18211:18;;;18204:30;18270:33;18250:18;;;18243:61;18321:18;;540:63:218;17990:355:644;540:63:218;245:1;678:7;:18;8765:21:3;;5170:8:::1;:30;5162:53;;;::::0;-1:-1:-1;;;5162:53:3;;18552:2:644;5162:53:3::1;::::0;::::1;18534:21:644::0;18591:2;18571:18;;;18564:30;-1:-1:-1;;;18610:18:644;;;18603:40;18660:18;;5162:53:3::1;18350:334:644::0;5162:53:3::1;5346:54;5369:9;5380:8;5390:9;5346:22;:54::i;:::-;5522:8;5511:9;-1:-1:-1::0;;;;;5485:57:3::1;5499:10;-1:-1:-1::0;;;;;5485:57:3::1;;5532:9;5485:57;;;;597:25:644::0;;585:2;570:18;;451:177;5485:57:3::1;;;;;;;;-1:-1:-1::0;;202:1:218;851:7;:22;-1:-1:-1;5015:534:3:o;3088:360:20:-;-1:-1:-1;;;;;3300:18:20;;3308:10;3300:18;;:56;;-1:-1:-1;;;;;;3322:22:20;;;;;;:16;:22;;;;;;;;3345:10;3322:34;;;;;;;;;;3300:56;3292:87;;;;-1:-1:-1;;;3292:87:20;;;;;;;:::i;:::-;3389:52;3412:4;3418:2;3422:3;3427:7;3436:4;3389:22;:52::i;:::-;3088:360;;;;;:::o;3937:129:55:-;4002:4;4025:23;;;:13;:23;;;;;:30;;4002:4;;4025:23;:30;;;:::i;:::-;;;:34;4018:41;;3937:129;;;:::o;2008:381:75:-;2088:7;2152:29;;;:19;:29;;;;;;;;2115:66;;;;;;;;;;-1:-1:-1;;;;;2115:66:75;;;;;;;;;;;;;;;;2088:7;;2211:39;:171;;2327:25;;2361:19;;;;2211:171;;;2270:16;;-1:-1:-1;;;;;2270:16:75;;;-1:-1:-1;;;2295:10:75;;;;2211:171;2192:190;;;;;2008:381;;;:::o;1788:482:20:-;1939:16;1998:3;:10;1979:8;:15;:29;1971:57;;;;-1:-1:-1;;;1971:57:20;;;;;;;:::i;:::-;2039:30;2086:8;:15;-1:-1:-1;;;;;2072:30:20;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2072:30:20;;2039:63;;2118:9;2113:120;2137:8;:15;2133:1;:19;2113:120;;;2192:9;:22;2202:8;2211:1;2202:11;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;2192:22:20;-1:-1:-1;;;;;2192:22:20;;;;;;;;;;;;:30;2215:3;2219:1;2215:6;;;;;;;;:::i;:::-;;;;;;;2192:30;;;;;;;;;;;;2173:13;2187:1;2173:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2154:3;;;:::i;:::-;;;2113:120;;;-1:-1:-1;2250:13:20;1788:482;-1:-1:-1;;;1788:482:20:o;3087:256:75:-;3199:20;:18;:20::i;:::-;3194:76;;3235:24;;-1:-1:-1;;;3235:24:75;;;;;;;:::i;3194:76::-;3280:56;3305:17;3324:11;3280:24;:56::i;:::-;3087:256;;:::o;7112:564:3:-;7276:10;-1:-1:-1;;;;;7305:16:3;;;;;:52;;-1:-1:-1;;;;;;7325:24:3;;;;;;;:16;:24;;;;;;;;:32;;;;;;;;;;;;7305:52;7297:82;;;;-1:-1:-1;;;7297:82:3;;;;;;;:::i;:::-;7417:8;:15;7397:9;:16;:35;7389:63;;;;-1:-1:-1;;;7389:63:3;;20068:2:644;7389:63:3;;;20050:21:644;20107:2;20087:18;;;20080:30;-1:-1:-1;;;20126:18:644;;;20119:45;20181:18;;7389:63:3;19866:339:644;7389:63:3;7468:9;7463:157;7487:9;:16;7483:1;:20;7463:157;;;7570:8;7579:1;7570:11;;;;;;;;:::i;:::-;;;;;;;7535:9;:17;7545:6;-1:-1:-1;;;;;7535:17:3;-1:-1:-1;;;;;7535:17:3;;;;;;;;;;;;:31;7553:9;7563:1;7553:12;;;;;;;;:::i;:::-;;;;;;;7535:31;;;;;;;;;;;;:46;;7527:82;;;;-1:-1:-1;;;7527:82:3;;;;;;;:::i;:::-;7505:6;7510:1;7505:6;;:::i;:::-;;;7463:157;;;;7630:39;7641:6;7649:9;7660:8;7630:10;:39::i;:::-;7249:427;7112:564;;;:::o;871:86:68:-;944:6;;-1:-1:-1;;;;;944:6:68;;871:86::o;1003:188:54:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:54;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;442:20:20:-;;;;;;;:::i;4281:288:75:-;4428:20;:18;:20::i;:::-;4423:76;;4464:24;;-1:-1:-1;;;4464:24:75;;;;;;;:::i;4423:76::-;4509:53;4535:8;4545:10;4557:4;4509:25;:53::i;1383:534:55:-;1502:17;1522:23;;;:13;:23;;;;;1502:43;;1465:25;;1502:17;1522:23;1502:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1559:4;:11;1574:1;1559:16;1555:74;;;1591:27;;-1:-1:-1;;;1591:27:55;;20897:2:644;1591:27:55;;;20879:21:644;20936:2;20916:18;;;20909:30;-1:-1:-1;;;20955:18:644;;;20948:47;21012:18;;1591:27:55;20695:341:644;1555:74:55;1640:25;1667:22;1704:4;1693:34;;;;;;;;;;;;:::i;:::-;1639:88;;;;1759:34;1774:12;1788:4;;1759:14;:34::i;:::-;1738:56;;1878:14;1840:11;1853:4;;1859:13;1823:50;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1813:61;;;;;;:79;1805:105;;;;-1:-1:-1;;;1805:105:55;;22536:2:644;1805:105:55;;;22518:21:644;22575:2;22555:18;;;22548:30;-1:-1:-1;;;22594:18:644;;;22587:43;22647:18;;1805:105:55;22334:337:644;1805:105:55;1492:425;;;1383:534;;;;;:::o;568:46::-;;;;;;;;;;;;;;;;:::i;2457:291:20:-;2567:10;-1:-1:-1;;;;;2595:17:20;;;;;2587:44;;;;-1:-1:-1;;;2587:44:20;;22878:2:644;2587:44:20;;;22860:21:644;22917:2;22897:18;;;22890:30;-1:-1:-1;;;22936:18:644;;;22929:44;22990:18;;2587:44:20;22676:338:644;2587:44:20;-1:-1:-1;;;;;2641:23:20;;;;;;;:16;:23;;;;;;;;:33;;;;;;;;;;;;;:44;;-1:-1:-1;;2641:44:20;;;;;;;;;;2700:41;;1159::644;;;2700::20;;1132:18:644;2700:41:20;;;;;;;;2541:207;2457:291;;:::o;698:319:63:-;775:22;831:4;-1:-1:-1;;;;;819:24:63;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:34;;858:9;853:134;873:15;;;853:134;;;922:54;961:4;968;;973:1;968:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;922:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;922:30:63;;-1:-1:-1;;;922:54:63:i;:::-;909:7;917:1;909:10;;;;;;;;:::i;:::-;;;;;;:67;;;;890:3;;;;;:::i;:::-;;;;853:134;;;;698:319;;;;:::o;4134:413:1:-;4222:25;4267:12;:10;:12::i;:::-;4259:39;;;;-1:-1:-1;;;4259:39:1;;;;;;;:::i;:::-;4309:15;4327:25;4345:6;4327:17;:25::i;:::-;4309:43;;4376:27;4389:7;4398:4;;4376:12;:27::i;:::-;4362:41;;4414:30;4432:7;4414:30;;;;;;;;;;;;:17;:30::i;:::-;4454:33;4466:7;4475:11;4454;:33::i;:::-;4520:6;4503:37;4528:11;4503:37;;;;;;:::i;:::-;;;;;;;;4249:298;4134:413;;;;;:::o;3108:548::-;3263:15;3294:16;;3290:293;;3327:25;;3380:35;;;;3391:5;3380:35;:::i;:::-;3326:89;;;;3433:12;:19;3456:1;3433:24;;:48;;;;-1:-1:-1;3461:20:1;;;3433:48;3429:144;;;3501:57;3543:7;3519:21;;:31;;;;:::i;:::-;3552:5;;3501:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3501:17:1;;-1:-1:-1;;;3501:57:1:i;:::-;3312:271;;3290:293;3600:49;3615:7;3624:17;;3643:5;;3600:14;:49::i;:::-;3593:56;3108:548;-1:-1:-1;;;;;;3108:548:1:o;2409:1283:55:-;2602:11;;2768:4;2762:11;;2862:19;;;2883:2;2858:28;2845:42;;;2933:22;;;2762:11;2585:14;3029:657;3053:6;3049:1;:10;3029:657;;;3135:12;3177:3;;3182:1;3160:24;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3160:24:55;;;;;;;;;3150:35;;3160:24;3150:35;;;;3373:21;;;;;3367:28;3461:13;3631:23;;;;;3624:38;3061:7;;-1:-1:-1;3387:1:55;3061:7;:::i;:::-;;;3029:657;;;;2523:1169;2409:1283;;;;;:::o;565:34:54:-;;;;;;;:::i;2754:328:20:-;-1:-1:-1;;;;;2941:18:20;;2949:10;2941:18;;:56;;-1:-1:-1;;;;;;2963:22:20;;;;;;:16;:22;;;;;;;;2986:10;2963:34;;;;;;;;;;2941:56;2933:87;;;;-1:-1:-1;;;2933:87:20;;;;;;;:::i;:::-;3030:45;3048:4;3054:2;3058;3062:6;3070:4;3030:17;:45::i;6442:376:3:-;6581:10;-1:-1:-1;;;;;6610:16:3;;;;;:52;;-1:-1:-1;;;;;;6630:24:3;;;;;;;:16;:24;;;;;;;;:32;;;;;;;;;;;;6610:52;6602:82;;;;-1:-1:-1;;;6602:82:3;;;;;;;:::i;:::-;-1:-1:-1;;;;;6702:17:3;;;;;;:9;:17;;;;;;;;:27;;;;;;;;;:38;-1:-1:-1;6702:38:3;6694:74;;;;-1:-1:-1;;;6694:74:3;;;;;;;:::i;:::-;6779:32;6785:6;6793:8;6803:7;6779:5;:32::i;2264:471:52:-;2326:15;2343:13;2368:25;2396:17;1729:8;:15;;1655:96;2396:17;2368:45;;2423:24;2450:8;2423:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2474:9;2469:224;2493:17;2489:1;:21;2469:224;;;2549:7;2557:1;2549:10;;;;;;;;:::i;:::-;;;;;;;2538:8;:21;2534:149;;;2587:1;2579:9;;2616:7;2624:1;2616:10;;;;;;;;:::i;:::-;;;;;;;2606:20;;2645:23;;;2264:471;;;:::o;2534:149::-;2512:6;2517:1;2512:6;;:::i;:::-;;;2469:224;;;-1:-1:-1;2703:25:52;;-1:-1:-1;;;2703:25:52;;24480:2:644;2703:25:52;;;24462:21:644;24519:2;24499:18;;;24492:30;-1:-1:-1;;;24538:18:644;;;24531:45;24593:18;;2703:25:52;24278:339:644;2849:390:52;2911:13;2936:25;2964:17;1729:8;:15;;1655:96;2964:17;2936:45;;2991:24;3018:8;2991:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3042:9;3037:161;3061:17;3057:1;:21;3037:161;;;3117:7;3125:1;3117:10;;;;;;;;:::i;:::-;;;;;;;3106:8;:21;3102:86;;;3154:7;:19;3162:7;3170:1;3162:10;;;;;;;;:::i;:::-;;;;;;;3154:19;;;;;;;;;;;3147:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:390;;;:::o;3102:86::-;3080:6;3085:1;3080:6;;:::i;:::-;;;3037:161;;305:703:292;361:13;578:10;574:51;;-1:-1:-1;;604:10:292;;;;;;;;;;;;-1:-1:-1;;;604:10:292;;;;;305:703::o;574:51::-;649:5;634:12;688:75;695:9;;688:75;;720:8;;;;:::i;:::-;;-1:-1:-1;742:10:292;;-1:-1:-1;750:2:292;742:10;;:::i;:::-;;;688:75;;;772:19;804:6;-1:-1:-1;;;;;794:17:292;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;794:17:292;;772:39;;821:150;828:10;;821:150;;854:11;864:1;854:11;;:::i;:::-;;-1:-1:-1;922:10:292;930:2;922:5;:10;:::i;:::-;909:24;;:2;:24;:::i;:::-;896:39;;879:6;886;879:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;879:56:292;;;;;;;;-1:-1:-1;949:11:292;958:2;949:11;;:::i;:::-;;;821:150;;;994:6;305:703;-1:-1:-1;;;;305:703:292:o;10257:115:3:-;10321:4;10358:7;:5;:7::i;:::-;-1:-1:-1;;;;;10344:21:3;:10;-1:-1:-1;;;;;10344:21:3;;10337:28;;10257:115;:::o;1421:172:68:-;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;9556:193:3:-;9701:41;9707:9;9718:8;9728:9;9701:41;;;;;;;;;;;;:5;:41::i;4386:967:20:-;4606:7;:14;4592:3;:10;:28;4584:56;;;;-1:-1:-1;;;4584:56:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;4658:16:20;;4650:41;;;;-1:-1:-1;;;4650:41:20;;;;;;;:::i;:::-;4721:10;4742:60;4721:10;4773:4;4779:2;4783:3;4788:7;4797:4;4742:20;:60::i;:::-;4818:9;4813:385;4837:3;:10;4833:1;:14;4813:385;;;4868:10;4881:3;4885:1;4881:6;;;;;;;;:::i;:::-;;;;;;;4868:19;;4901:14;4918:7;4926:1;4918:10;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;4965:15:20;;4943:19;4965:15;;;:9;:15;;;;;;:19;;;;;;;;;;;4918:10;;-1:-1:-1;5006:21:20;;;;4998:50;;;;-1:-1:-1;;;4998:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;5090:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;5112:20;;;5090:42;;5160:13;;;;;;;;;;;:17;;;;;;;;:27;;5126:6;;5090:15;5160:27;;5126:6;;5160:27;:::i;:::-;;;;;;;;4854:344;;;4849:3;;;;:::i;:::-;;;4813:385;;;;5243:2;-1:-1:-1;;;;;5213:47:20;5237:4;-1:-1:-1;;;;;5213:47:20;5227:8;-1:-1:-1;;;;;5213:47:20;;5247:3;5252:7;5213:47;;;;;;;:::i;:::-;;;;;;;;5271:75;5307:8;5317:4;5323:2;5327:3;5332:7;5341:4;5271:35;:75::i;:::-;4574:779;4386:967;;;;;:::o;3430:334:75:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:75;;;;;;;:::i;3531:76::-;3617:16;:36;;-1:-1:-1;;;;;3617:36:75;;-1:-1:-1;;;;;;3663:32:75;;;;;-1:-1:-1;;;3663:32:75;;;;;;;;3711:46;;597:25:644;;;3711:46:75;;585:2:644;570:18;3711:46:75;;;;;;;3430:334;;:::o;7284:799:20:-;-1:-1:-1;;;;;7431:18:20;;7423:45;;;;-1:-1:-1;;;7423:45:20;;;;;;;:::i;:::-;7500:7;:14;7486:3;:10;:28;7478:56;;;;-1:-1:-1;;;7478:56:20;;;;;;;:::i;:::-;7545:16;7564:10;7545:29;;7585:66;7606:8;7616:4;7630:1;7634:3;7639:7;7585:66;;;;;;;;;;;;:20;:66::i;:::-;7667:9;7662:344;7686:3;:10;7682:1;:14;7662:344;;;7717:10;7730:3;7734:1;7730:6;;;;;;;;:::i;:::-;;;;;;;7717:19;;7750:14;7767:7;7775:1;7767:10;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;7814:15:20;;7792:19;7814:15;;;:9;:15;;;;;;:19;;;;;;;;;;;7767:10;;-1:-1:-1;7855:21:20;;;;7847:50;;;;-1:-1:-1;;;7847:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;7939:15:20;;;;;;:9;:15;;;;;;;;:19;;;;;;;;;;7961:20;;7939:42;;7698:3;;;;:::i;:::-;;;;7662:344;;;;8059:1;-1:-1:-1;;;;;8021:55:20;8045:4;-1:-1:-1;;;;;8021:55:20;8035:8;-1:-1:-1;;;;;8021:55:20;;8063:3;8068:7;8021:55;;;;;;;:::i;:::-;;;;;;;;7413:670;7284:799;;;:::o;1273:185:54:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1384:18:54;;1339:35;;-1:-1:-1;1384:18:54;;:11;;-1:-1:-1;1384:18:54;;;;-1:-1:-1;1384:18:54;-1:-1:-1;1384:18:54;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4671:362:75:-;4818:6;4811:4;:13;4807:69;;;4840:25;;-1:-1:-1;;;4840:25:75;;;;;;;:::i;4807:69::-;4918:49;;;;;;;;-1:-1:-1;;;;;4918:49:75;;;;;;;;;;;;;-1:-1:-1;4886:29:75;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4886:81:75;;;;;;;;;;;-1:-1:-1;4886:81:75;;;;;;;4983:43;;597:25:644;;;4918:49:75;;4886:29;;4983:43;;570:18:644;4983:43:75;451:177:644;6538:198:288;6621:12;6652:77;6673:6;6681:4;6652:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6645:84;6538:198;-1:-1:-1;;;6538:198:288:o;678:140:55:-;771:23;;;;:13;:23;;;;;;;;:40;;;;;;;;:::i;3851:246:52:-;3942:21;;;;:11;:21;;;;;;;;3941:22;3933:47;;;;-1:-1:-1;;;3933:47:52;;27302:2:644;3933:47:52;;;27284:21:644;27341:2;27321:18;;;27314:30;-1:-1:-1;;;27360:18:644;;;27353:42;27412:18;;3933:47:52;27100:336:644;3933:47:52;3990:17;;;;:7;:17;;;;;;;;:28;;;;;;;;:::i;:::-;;4033:57;4053:26;4070:8;4053:16;:26::i;:::-;4033:57;;;27615:25:644;;;27671:2;27656:18;;27649:34;;;27588:18;4033:57:52;27441:248:644;1254:592:61;1409:15;1441:14;:12;:14::i;:::-;1436:70;;1471:24;;-1:-1:-1;;;1471:24:61;;;;;;;:::i;1436:70::-;1520:12;1516:58;;1548:15;;-1:-1:-1;;;1548:15:61;;27896:2:644;1548:15:61;;;27878:21:644;27935:1;27915:18;;;27908:29;-1:-1:-1;;;27953:18:644;;;27946:35;27998:18;;1548:15:61;27694:328:644;1516:58:61;1584:15;1602:21;;1584:39;;1669:55;1688:7;1697;1706:17;;1669:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:18:61;;-1:-1:-1;;;1669:55:61:i;:::-;1635:21;1634:90;;;;;-1:-1:-1;1757:7:61;1740:74;1786:1;1766:17;1776:7;1757;1766:17;:::i;:::-;:21;;;;:::i;:::-;1789:17;;1808:5;;1740:74;;;;;;;;;;:::i;:::-;;;;;;;;1825:14;1254:592;;;;;;;:::o;3636:744:20:-;-1:-1:-1;;;;;3817:16:20;;3809:41;;;;-1:-1:-1;;;3809:41:20;;;;;;;:::i;:::-;3880:10;3901:96;3880:10;3932:4;3938:2;3942:21;3960:2;3942:17;:21::i;:::-;3965:25;3983:6;3965:17;:25::i;:::-;3992:4;3901:20;:96::i;:::-;-1:-1:-1;;;;;4030:15:20;;4008:19;4030:15;;;:9;:15;;;;;;;;:19;;;;;;;;;4067:21;;;;4059:50;;;;-1:-1:-1;;;4059:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;4143:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;4165:20;;;4143:42;;4205:13;;;;;;;;;;;:17;;;;;;;;:27;;4179:6;;4143:15;4205:27;;4179:6;;4205:27;:::i;:::-;;;;-1:-1:-1;;4248:46:20;;;27615:25:644;;;27671:2;27656:18;;27649:34;;;-1:-1:-1;;;;;4248:46:20;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;4248:46:20;27588:18:644;4248:46:20;;;;;;;4305:68;4336:8;4346:4;4352:2;4356;4360:6;4368:4;4305:30;:68::i;:::-;3799:581;;3636:744;;;;;:::o;6691:587::-;-1:-1:-1;;;;;6813:18:20;;6805:45;;;;-1:-1:-1;;;6805:45:20;;;;;;;:::i;:::-;6880:10;6901:102;6880:10;6932:4;6861:16;6950:21;6968:2;6950:17;:21::i;:::-;6973:25;6991:6;6973:17;:25::i;:::-;6901:102;;;;;;;;;;;;:20;:102::i;:::-;-1:-1:-1;;;;;7036:15:20;;7014:19;7036:15;;;:9;:15;;;;;;;;:19;;;;;;;;;7073:21;;;;7065:50;;;;-1:-1:-1;;;7065:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;7149:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;7171:20;;;7149:42;;7217:54;;27615:25:644;;;27656:18;;;27649:34;;;7149:15:20;;7217:54;;;-1:-1:-1;;;;;;;;;;;7217:54:20;27588:18:644;7217:54:20;;;;;;;6795:483;;6691:587;;;:::o;5482:530::-;-1:-1:-1;;;;;5629:16:20;;5621:41;;;;-1:-1:-1;;;5621:41:20;;;;;;;:::i;:::-;5692:10;5713:102;5692:10;5673:16;5756:2;5760:21;5778:2;5760:17;:21::i;5713:102::-;-1:-1:-1;;;;;5826:13:20;;;;;;:9;:13;;;;;;;;:17;;;;;;;;:27;;5847:6;;5826:13;:27;;5847:6;;5826:27;:::i;:::-;;;;-1:-1:-1;;5868:52:20;;;27615:25:644;;;27671:2;27656:18;;27649:34;;;-1:-1:-1;;;;;5868:52:20;;;;5901:1;;5868:52;;;;-1:-1:-1;;;;;;;;;;;5868:52:20;27588:18:644;5868:52:20;;;;;;;5931:74;5962:8;5980:1;5984:2;5988;5992:6;6000:4;5931:30;:74::i;11109:632:3:-;-1:-1:-1;;;;;11421:18:3;;11417:155;;11460:9;11455:107;11479:3;:10;11475:1;:14;11455:107;;;11537:7;11545:1;11537:10;;;;;;;;:::i;:::-;;;;;;;11514:11;:19;11526:3;11530:1;11526:6;;;;;;;;:::i;:::-;;;;;;;11514:19;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;-1:-1:-1;11491:3:3;;-1:-1:-1;11491:3:3;;:::i;:::-;;;11455:107;;;;11417:155;-1:-1:-1;;;;;11586:16:3;;11582:153;;11623:9;11618:107;11642:3;:10;11638:1;:14;11618:107;;;11700:7;11708:1;11700:10;;;;;;;;:::i;:::-;;;;;;;11677:11;:19;11689:3;11693:1;11689:6;;;;;;;;:::i;:::-;;;;;;;11677:19;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;-1:-1:-1;11654:3:3;;-1:-1:-1;11654:3:3;;:::i;:::-;;;11618:107;;8982:734:20;-1:-1:-1;;;;;9214:14:20;;;:18;9210:500;;9252:79;;-1:-1:-1;;;9252:79:20;;-1:-1:-1;;;;;9252:43:20;;;;;:79;;9296:8;;9306:4;;9312:3;;9317:7;;9326:4;;9252:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9252:79:20;;;;;;;;-1:-1:-1;;9252:79:20;;;;;;;;;;;;:::i;:::-;;;9248:452;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;9612:6;9605:14;;-1:-1:-1;;;9605:14:20;;;;;;;;:::i;9248:452::-;;;9659:26;;-1:-1:-1;;;9659:26:20;;30958:2:644;9659:26:20;;;30940:21:644;30997:2;30977:18;;;30970:30;-1:-1:-1;;;31016:18:644;;;31009:46;31072:18;;9659:26:20;30756:340:644;9248:452:20;-1:-1:-1;;;;;;9410:60:20;;-1:-1:-1;;;9410:60:20;9406:132;;9494:25;;-1:-1:-1;;;9494:25:20;;;;;;;:::i;6922:387:288:-;7063:12;-1:-1:-1;;;;;1427:19:288;;;7087:69;;;;-1:-1:-1;;;7087:69:288;;31647:2:644;7087:69:288;;;31629:21:644;31686:2;31666:18;;;31659:30;31725:34;31705:18;;;31698:62;-1:-1:-1;;;31776:18:644;;;31769:36;31822:19;;7087:69:288;31445:402:644;7087:69:288;7168:12;7182:23;7209:6;-1:-1:-1;;;;;7209:19:288;7229:4;7209:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7167:67;;;;7251:51;7268:7;7277:10;7289:12;7251:16;:51::i;3307:459:52:-;3374:7;3393:25;3421:17;1729:8;:15;;1655:96;3421:17;3393:45;;3448:24;3475:8;3448:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3499:9;3494:231;3518:17;3514:1;:21;3494:231;;;3572:7;3580:1;3572:10;;;;;;;;:::i;:::-;;;;;;;3560:8;:22;3556:159;;;3606:5;;3602:73;;3642:7;3650:5;3654:1;3650;:5;:::i;:::-;3642:14;;;;;;;;:::i;:::-;;;;;;;3635:21;;;;;3307:459;;;:::o;3602:73::-;-1:-1:-1;3699:1:52;;3307:459;-1:-1:-1;;;;3307:459:52:o;3556:159::-;3537:3;;;;:::i;:::-;;;;3494:231;;;-1:-1:-1;3734:25:52;;-1:-1:-1;;;3734:25:52;;32333:2:644;3734:25:52;;;32315:21:644;32372:2;32352:18;;;32345:30;-1:-1:-1;;;32391:18:644;;;32384:45;32446:18;;3734:25:52;32131:339:644;4535:362:52;4685:25;;4749:24;4760:13;4749:8;:24;:::i;:::-;4821:8;:22;;;;;;;;;;;;;-1:-1:-1;4854:16:52;;;:7;4821:22;4854:16;;;;;;;:36;;4739:34;;-1:-1:-1;4739:34:52;;-1:-1:-1;4854:36:52;;:16;;:36;;;;:::i;:::-;;4535:362;;;;;;:::o;9722:193:20:-;9841:16;;;9855:1;9841:16;;;;;;;;;9788;;9816:22;;9841:16;;;;;;;;;;;;-1:-1:-1;9841:16:20;9816:41;;9878:7;9867:5;9873:1;9867:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;9903:5;9722:193;-1:-1:-1;;9722:193:20:o;8309:667::-;-1:-1:-1;;;;;8516:14:20;;;:18;8512:458;;8554:72;;-1:-1:-1;;;8554:72:20;;-1:-1:-1;;;;;8554:38:20;;;;;:72;;8593:8;;8603:4;;8609:2;;8613:6;;8621:4;;8554:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8554:72:20;;;;;;;;-1:-1:-1;;8554:72:20;;;;;;;;;;;;:::i;:::-;;;8550:410;;;;:::i;:::-;-1:-1:-1;;;;;;8675:55:20;;-1:-1:-1;;;8675:55:20;8671:127;;8754:25;;-1:-1:-1;;;8754:25:20;;;;;;;:::i;7529:692:288:-;7675:12;7703:7;7699:516;;;-1:-1:-1;7733:10:288;7726:17;;7699:516;7844:17;;:21;7840:365;;8038:10;8032:17;8098:15;8085:10;8081:2;8077:19;8070:44;7840:365;8177:12;8170:20;;-1:-1:-1;;;8170:20:288;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:173:644;82:20;;-1:-1:-1;;;;;131:31:644;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:644:o;633:131::-;-1:-1:-1;;;;;;707:32:644;;697:43;;687:71;;754:1;751;744:12;769:245;827:6;880:2;868:9;859:7;855:23;851:32;848:52;;;896:1;893;886:12;848:52;935:9;922:23;954:30;978:5;954:30;:::i;1211:258::-;1283:1;1293:113;1307:6;1304:1;1301:13;1293:113;;;1383:11;;;1377:18;1364:11;;;1357:39;1329:2;1322:10;1293:113;;;1424:6;1421:1;1418:13;1415:48;;;-1:-1:-1;;1459:1:644;1441:16;;1434:27;1211:258::o;1474:::-;1516:3;1554:5;1548:12;1581:6;1576:3;1569:19;1597:63;1653:6;1646:4;1641:3;1637:14;1630:4;1623:5;1619:16;1597:63;:::i;:::-;1714:2;1693:15;-1:-1:-1;;1689:29:644;1680:39;;;;1721:4;1676:50;;1474:258;-1:-1:-1;;1474:258:644:o;1737:220::-;1886:2;1875:9;1868:21;1849:4;1906:45;1947:2;1936:9;1932:18;1924:6;1906:45;:::i;1962:180::-;2021:6;2074:2;2062:9;2053:7;2049:23;2045:32;2042:52;;;2090:1;2087;2080:12;2042:52;-1:-1:-1;2113:23:644;;1962:180;-1:-1:-1;1962:180:644:o;2147:186::-;2206:6;2259:2;2247:9;2238:7;2234:23;2230:32;2227:52;;;2275:1;2272;2265:12;2227:52;2298:29;2317:9;2298:29;:::i;2338:248::-;2406:6;2414;2467:2;2455:9;2446:7;2442:23;2438:32;2435:52;;;2483:1;2480;2473:12;2435:52;-1:-1:-1;;2506:23:644;;;2576:2;2561:18;;;2548:32;;-1:-1:-1;2338:248:644:o;2870:322::-;2947:6;2955;2963;3016:2;3004:9;2995:7;2991:23;2987:32;2984:52;;;3032:1;3029;3022:12;2984:52;3055:29;3074:9;3055:29;:::i;:::-;3045:39;3131:2;3116:18;;3103:32;;-1:-1:-1;3182:2:644;3167:18;;;3154:32;;2870:322;-1:-1:-1;;;2870:322:644:o;3197:127::-;3258:10;3253:3;3249:20;3246:1;3239:31;3289:4;3286:1;3279:15;3313:4;3310:1;3303:15;3329:249;3439:2;3420:13;;-1:-1:-1;;3416:27:644;3404:40;;-1:-1:-1;;;;;3459:34:644;;3495:22;;;3456:62;3453:88;;;3521:18;;:::i;:::-;3557:2;3550:22;-1:-1:-1;;3329:249:644:o;3583:183::-;3643:4;-1:-1:-1;;;;;3668:6:644;3665:30;3662:56;;;3698:18;;:::i;:::-;-1:-1:-1;3743:1:644;3739:14;3755:4;3735:25;;3583:183::o;3771:724::-;3825:5;3878:3;3871:4;3863:6;3859:17;3855:27;3845:55;;3896:1;3893;3886:12;3845:55;3932:6;3919:20;3958:4;3981:43;4021:2;3981:43;:::i;:::-;4053:2;4047:9;4065:31;4093:2;4085:6;4065:31;:::i;:::-;4131:18;;;4223:1;4219:10;;;;4207:23;;4203:32;;;4165:15;;;;-1:-1:-1;4247:15:644;;;4244:35;;;4275:1;4272;4265:12;4244:35;4311:2;4303:6;4299:15;4323:142;4339:6;4334:3;4331:15;4323:142;;;4405:17;;4393:30;;4443:12;;;;4356;;4323:142;;;-1:-1:-1;4483:6:644;3771:724;-1:-1:-1;;;;;;3771:724:644:o;4500:186::-;4548:4;-1:-1:-1;;;;;4573:6:644;4570:30;4567:56;;;4603:18;;:::i;:::-;-1:-1:-1;4669:2:644;4648:15;-1:-1:-1;;4644:29:644;4675:4;4640:40;;4500:186::o;4691:419::-;4755:5;4785:35;4813:6;4785:35;:::i;:::-;4849:2;4843:9;4861:31;4889:2;4881:6;4861:31;:::i;:::-;4910:6;4901:15;;4940:6;4932;4925:22;4980:3;4971:6;4966:3;4962:16;4959:25;4956:45;;;4997:1;4994;4987:12;4956:45;5047:6;5042:3;5035:4;5027:6;5023:17;5010:44;5102:1;5095:4;5086:6;5078;5074:19;5070:30;5063:41;;;4691:419;;;;;:::o;5115:220::-;5157:5;5210:3;5203:4;5195:6;5191:17;5187:27;5177:55;;5228:1;5225;5218:12;5177:55;5250:79;5325:3;5316:6;5303:20;5296:4;5288:6;5284:17;5250:79;:::i;5340:943::-;5494:6;5502;5510;5518;5526;5579:3;5567:9;5558:7;5554:23;5550:33;5547:53;;;5596:1;5593;5586:12;5547:53;5619:29;5638:9;5619:29;:::i;:::-;5609:39;;5667:38;5701:2;5690:9;5686:18;5667:38;:::i;:::-;5657:48;;5756:2;5745:9;5741:18;5728:32;-1:-1:-1;;;;;5820:2:644;5812:6;5809:14;5806:34;;;5836:1;5833;5826:12;5806:34;5859:61;5912:7;5903:6;5892:9;5888:22;5859:61;:::i;:::-;5849:71;;5973:2;5962:9;5958:18;5945:32;5929:48;;6002:2;5992:8;5989:16;5986:36;;;6018:1;6015;6008:12;5986:36;6041:63;6096:7;6085:8;6074:9;6070:24;6041:63;:::i;:::-;6031:73;;6157:3;6146:9;6142:19;6129:33;6113:49;;6187:2;6177:8;6174:16;6171:36;;;6203:1;6200;6193:12;6171:36;;6226:51;6269:7;6258:8;6247:9;6243:24;6226:51;:::i;:::-;6216:61;;;5340:943;;;;;;;;:::o;6578:1208::-;6696:6;6704;6757:2;6745:9;6736:7;6732:23;6728:32;6725:52;;;6773:1;6770;6763:12;6725:52;6813:9;6800:23;-1:-1:-1;;;;;6883:2:644;6875:6;6872:14;6869:34;;;6899:1;6896;6889:12;6869:34;6937:6;6926:9;6922:22;6912:32;;6982:7;6975:4;6971:2;6967:13;6963:27;6953:55;;7004:1;7001;6994:12;6953:55;7040:2;7027:16;7062:4;7085:43;7125:2;7085:43;:::i;:::-;7157:2;7151:9;7169:31;7197:2;7189:6;7169:31;:::i;:::-;7235:18;;;7323:1;7319:10;;;;7311:19;;7307:28;;;7269:15;;;;-1:-1:-1;7347:19:644;;;7344:39;;;7379:1;7376;7369:12;7344:39;7403:11;;;;7423:148;7439:6;7434:3;7431:15;7423:148;;;7505:23;7524:3;7505:23;:::i;:::-;7493:36;;7456:12;;;;7549;;;;7423:148;;;7590:6;-1:-1:-1;;7634:18:644;;7621:32;;-1:-1:-1;;7665:16:644;;;7662:36;;;7694:1;7691;7684:12;7662:36;;7717:63;7772:7;7761:8;7750:9;7746:24;7717:63;:::i;:::-;7707:73;;;6578:1208;;;;;:::o;7791:435::-;7844:3;7882:5;7876:12;7909:6;7904:3;7897:19;7935:4;7964:2;7959:3;7955:12;7948:19;;8001:2;7994:5;7990:14;8022:1;8032:169;8046:6;8043:1;8040:13;8032:169;;;8107:13;;8095:26;;8141:12;;;;8176:15;;;;8068:1;8061:9;8032:169;;;-1:-1:-1;8217:3:644;;7791:435;-1:-1:-1;;;;;7791:435:644:o;8231:261::-;8410:2;8399:9;8392:21;8373:4;8430:56;8482:2;8471:9;8467:18;8459:6;8430:56;:::i;8497:669::-;8624:6;8632;8640;8693:2;8681:9;8672:7;8668:23;8664:32;8661:52;;;8709:1;8706;8699:12;8661:52;8732:29;8751:9;8732:29;:::i;:::-;8722:39;;8812:2;8801:9;8797:18;8784:32;-1:-1:-1;;;;;8876:2:644;8868:6;8865:14;8862:34;;;8892:1;8889;8882:12;8862:34;8915:61;8968:7;8959:6;8948:9;8944:22;8915:61;:::i;:::-;8905:71;;9029:2;9018:9;9014:18;9001:32;8985:48;;9058:2;9048:8;9045:16;9042:36;;;9074:1;9071;9064:12;9042:36;;9097:63;9152:7;9141:8;9130:9;9126:24;9097:63;:::i;:::-;9087:73;;;8497:669;;;;;:::o;9379:450::-;9448:6;9501:2;9489:9;9480:7;9476:23;9472:32;9469:52;;;9517:1;9514;9507:12;9469:52;9557:9;9544:23;-1:-1:-1;;;;;9582:6:644;9579:30;9576:50;;;9622:1;9619;9612:12;9576:50;9645:22;;9698:4;9690:13;;9686:27;-1:-1:-1;9676:55:644;;9727:1;9724;9717:12;9676:55;9750:73;9815:7;9810:2;9797:16;9792:2;9788;9784:11;9750:73;:::i;9834:322::-;9911:6;9919;9927;9980:2;9968:9;9959:7;9955:23;9951:32;9948:52;;;9996:1;9993;9986:12;9948:52;10032:9;10019:23;10009:33;;10061:38;10095:2;10084:9;10080:18;10061:38;:::i;:::-;10051:48;;10146:2;10135:9;10131:18;10118:32;10108:42;;9834:322;;;;;:::o;10161:347::-;10212:8;10222:6;10276:3;10269:4;10261:6;10257:17;10253:27;10243:55;;10294:1;10291;10284:12;10243:55;-1:-1:-1;10317:20:644;;-1:-1:-1;;;;;10349:30:644;;10346:50;;;10392:1;10389;10382:12;10346:50;10429:4;10421:6;10417:17;10405:29;;10481:3;10474:4;10465:6;10457;10453:19;10449:30;10446:39;10443:59;;;10498:1;10495;10488:12;10443:59;10161:347;;;;;:::o;10513:477::-;10592:6;10600;10608;10661:2;10649:9;10640:7;10636:23;10632:32;10629:52;;;10677:1;10674;10667:12;10629:52;10713:9;10700:23;10690:33;;10774:2;10763:9;10759:18;10746:32;-1:-1:-1;;;;;10793:6:644;10790:30;10787:50;;;10833:1;10830;10823:12;10787:50;10872:58;10922:7;10913:6;10902:9;10898:22;10872:58;:::i;:::-;10513:477;;10949:8;;-1:-1:-1;10846:84:644;;-1:-1:-1;;;;10513:477:644:o;11218:347::-;11283:6;11291;11344:2;11332:9;11323:7;11319:23;11315:32;11312:52;;;11360:1;11357;11350:12;11312:52;11383:29;11402:9;11383:29;:::i;:::-;11373:39;;11462:2;11451:9;11447:18;11434:32;11509:5;11502:13;11495:21;11488:5;11485:32;11475:60;;11531:1;11528;11521:12;11475:60;11554:5;11544:15;;;11218:347;;;;;:::o;11570:626::-;11667:6;11675;11728:2;11716:9;11707:7;11703:23;11699:32;11696:52;;;11744:1;11741;11734:12;11696:52;11784:9;11771:23;-1:-1:-1;;;;;11854:2:644;11846:6;11843:14;11840:34;;;11870:1;11867;11860:12;11840:34;11908:6;11897:9;11893:22;11883:32;;11953:7;11946:4;11942:2;11938:13;11934:27;11924:55;;11975:1;11972;11965:12;11924:55;12015:2;12002:16;12041:2;12033:6;12030:14;12027:34;;;12057:1;12054;12047:12;12027:34;12110:7;12105:2;12095:6;12092:1;12088:14;12084:2;12080:23;12076:32;12073:45;12070:65;;;12131:1;12128;12121:12;12070:65;12162:2;12154:11;;;;;12184:6;;-1:-1:-1;11570:626:644;;-1:-1:-1;;;;11570:626:644:o;12201:801::-;12361:4;12390:2;12430;12419:9;12415:18;12460:2;12449:9;12442:21;12483:6;12518;12512:13;12549:6;12541;12534:22;12587:2;12576:9;12572:18;12565:25;;12649:2;12639:6;12636:1;12632:14;12621:9;12617:30;12613:39;12599:53;;12687:2;12679:6;12675:15;12708:1;12718:255;12732:6;12729:1;12726:13;12718:255;;;12825:2;12821:7;12809:9;12801:6;12797:22;12793:36;12788:3;12781:49;12853:40;12886:6;12877;12871:13;12853:40;:::i;:::-;12843:50;-1:-1:-1;12951:12:644;;;;12916:15;;;;12754:1;12747:9;12718:255;;;-1:-1:-1;12990:6:644;;12201:801;-1:-1:-1;;;;;;;12201:801:644:o;13007:786::-;13107:6;13115;13123;13131;13139;13192:2;13180:9;13171:7;13167:23;13163:32;13160:52;;;13208:1;13205;13198:12;13160:52;13244:9;13231:23;13221:33;;13305:2;13294:9;13290:18;13277:32;-1:-1:-1;;;;;13369:2:644;13361:6;13358:14;13355:34;;;13385:1;13382;13375:12;13355:34;13424:58;13474:7;13465:6;13454:9;13450:22;13424:58;:::i;:::-;13501:8;;-1:-1:-1;13398:84:644;-1:-1:-1;13589:2:644;13574:18;;13561:32;;-1:-1:-1;13605:16:644;;;13602:36;;;13634:1;13631;13624:12;13602:36;;13673:60;13725:7;13714:8;13703:9;13699:24;13673:60;:::i;:::-;13007:786;;;;-1:-1:-1;13007:786:644;;-1:-1:-1;13752:8:644;;13647:86;13007:786;-1:-1:-1;;;13007:786:644:o;13798:628::-;13886:6;13894;13902;13955:2;13943:9;13934:7;13930:23;13926:32;13923:52;;;13971:1;13968;13961:12;13923:52;14011:9;13998:23;-1:-1:-1;;;;;14081:2:644;14073:6;14070:14;14067:34;;;14097:1;14094;14087:12;14067:34;14120:49;14161:7;14152:6;14141:9;14137:22;14120:49;:::i;:::-;14110:59;;14222:2;14211:9;14207:18;14194:32;14178:48;;14251:2;14241:8;14238:16;14235:36;;;14267:1;14264;14257:12;14235:36;;14306:60;14358:7;14347:8;14336:9;14332:24;14306:60;:::i;14431:260::-;14499:6;14507;14560:2;14548:9;14539:7;14535:23;14531:32;14528:52;;;14576:1;14573;14566:12;14528:52;14599:29;14618:9;14599:29;:::i;:::-;14589:39;;14647:38;14681:2;14670:9;14666:18;14647:38;:::i;:::-;14637:48;;14431:260;;;;;:::o;14696:606::-;14800:6;14808;14816;14824;14832;14885:3;14873:9;14864:7;14860:23;14856:33;14853:53;;;14902:1;14899;14892:12;14853:53;14925:29;14944:9;14925:29;:::i;:::-;14915:39;;14973:38;15007:2;14996:9;14992:18;14973:38;:::i;:::-;14963:48;;15058:2;15047:9;15043:18;15030:32;15020:42;;15109:2;15098:9;15094:18;15081:32;15071:42;;15164:3;15153:9;15149:19;15136:33;-1:-1:-1;;;;;15184:6:644;15181:30;15178:50;;;15224:1;15221;15214:12;15178:50;15247:49;15288:7;15279:6;15268:9;15264:22;15247:49;:::i;15307:380::-;15386:1;15382:12;;;;15429;;;15450:61;;15504:4;15496:6;15492:17;15482:27;;15450:61;15557:2;15549:6;15546:14;15526:18;15523:38;15520:161;;;15603:10;15598:3;15594:20;15591:1;15584:31;15638:4;15635:1;15628:15;15666:4;15663:1;15656:15;15520:161;;15307:380;;;:::o;15692:439::-;15924:3;15962:6;15956:13;15978:53;16024:6;16019:3;16012:4;16004:6;16000:17;15978:53;:::i;:::-;-1:-1:-1;;;16053:16:644;;16078:18;;;-1:-1:-1;16123:1:644;16112:13;;15692:439;-1:-1:-1;15692:439:644:o;16136:470::-;16315:3;16353:6;16347:13;16369:53;16415:6;16410:3;16403:4;16395:6;16391:17;16369:53;:::i;:::-;16485:13;;16444:16;;;;16507:57;16485:13;16444:16;16541:4;16529:17;;16507:57;:::i;:::-;16580:20;;16136:470;-1:-1:-1;;;;16136:470:644:o;16611:338::-;16813:2;16795:21;;;16852:2;16832:18;;;16825:30;-1:-1:-1;;;16886:2:644;16871:18;;16864:44;16940:2;16925:18;;16611:338::o;17296:127::-;17357:10;17352:3;17348:20;17345:1;17338:31;17388:4;17385:1;17378:15;17412:4;17409:1;17402:15;17428:127;17489:10;17484:3;17480:20;17477:1;17470:31;17520:4;17517:1;17510:15;17544:4;17541:1;17534:15;17560:168;17600:7;17666:1;17662;17658:6;17654:14;17651:1;17648:21;17643:1;17636:9;17629:17;17625:45;17622:71;;;17673:18;;:::i;:::-;-1:-1:-1;17713:9:644;;17560:168::o;17733:127::-;17794:10;17789:3;17785:20;17782:1;17775:31;17825:4;17822:1;17815:15;17849:4;17846:1;17839:15;17865:120;17905:1;17931;17921:35;;17936:18;;:::i;:::-;-1:-1:-1;17970:9:644;;17865:120::o;18689:342::-;18891:2;18873:21;;;18930:2;18910:18;;;18903:30;-1:-1:-1;;;18964:2:644;18949:18;;18942:48;19022:2;19007:18;;18689:342::o;19036:339::-;19238:2;19220:21;;;19277:2;19257:18;;;19250:30;-1:-1:-1;;;19311:2:644;19296:18;;19289:45;19366:2;19351:18;;19036:339::o;19380:135::-;19419:3;-1:-1:-1;;19440:17:644;;19437:43;;;19460:18;;:::i;:::-;-1:-1:-1;19507:1:644;19496:13;;19380:135::o;19520:341::-;19722:2;19704:21;;;19761:2;19741:18;;;19734:30;-1:-1:-1;;;19795:2:644;19780:18;;19773:47;19852:2;19837:18;;19520:341::o;20210:347::-;20412:2;20394:21;;;20451:2;20431:18;;;20424:30;-1:-1:-1;;;20485:2:644;20470:18;;20463:53;20548:2;20533:18;;20210:347::o;20562:128::-;20602:3;20633:1;20629:6;20626:1;20623:13;20620:39;;;20639:18;;:::i;:::-;-1:-1:-1;20675:9:644;;20562:128::o;21041:758::-;21129:6;21137;21190:2;21178:9;21169:7;21165:23;21161:32;21158:52;;;21206:1;21203;21196:12;21158:52;21239:9;21233:16;-1:-1:-1;;;;;21264:6:644;21261:30;21258:50;;;21304:1;21301;21294:12;21258:50;21327:22;;21380:4;21372:13;;21368:27;-1:-1:-1;21358:55:644;;21409:1;21406;21399:12;21358:55;21438:2;21432:9;21460:31;21488:2;21460:31;:::i;:::-;21520:2;21514:9;21532:31;21560:2;21552:6;21532:31;:::i;:::-;21587:2;21579:6;21572:18;21629:7;21622:4;21617:2;21613;21609:11;21605:22;21602:35;21599:55;;;21650:1;21647;21640:12;21599:55;21663:59;21719:2;21712:4;21704:6;21700:17;21693:4;21689:2;21685:13;21663:59;:::i;:::-;21787:4;21772:20;;;;21766:27;21741:6;;21766:27;;-1:-1:-1;;;;;;21041:758:644:o;21804:525::-;22019:3;22057:6;22051:13;22073:53;22119:6;22114:3;22107:4;22099:6;22095:17;22073:53;:::i;:::-;22148:16;;22201:6;22193;22148:16;22173:35;22227:18;;;22276;;;-1:-1:-1;22318:4:644;22310:13;;21804:525;-1:-1:-1;;;21804:525:644:o;23019:521::-;23096:4;23102:6;23162:11;23149:25;23256:2;23252:7;23241:8;23225:14;23221:29;23217:43;23197:18;23193:68;23183:96;;23275:1;23272;23265:12;23183:96;23302:33;;23354:20;;;-1:-1:-1;;;;;;23386:30:644;;23383:50;;;23429:1;23426;23419:12;23383:50;23462:4;23450:17;;-1:-1:-1;23493:14:644;23489:27;;;23479:38;;23476:58;;;23530:1;23527;23520:12;23545:388;23622:6;23630;23683:2;23671:9;23662:7;23658:23;23654:32;23651:52;;;23699:1;23696;23689:12;23651:52;23739:9;23726:23;-1:-1:-1;;;;;23764:6:644;23761:30;23758:50;;;23804:1;23801;23794:12;23758:50;23827:49;23868:7;23859:6;23848:9;23844:22;23827:49;:::i;:::-;23817:59;23923:2;23908:18;;;;23895:32;;-1:-1:-1;;;;23545:388:644:o;23938:335::-;24149:6;24141;24136:3;24123:33;24175:16;;;24222:18;;;24264:2;24256:11;;23938:335;-1:-1:-1;23938:335:644:o;24622:125::-;24662:4;24690:1;24687;24684:8;24681:34;;;24695:18;;:::i;:::-;-1:-1:-1;24732:9:644;;24622:125::o;24752:112::-;24784:1;24810;24800:35;;24815:18;;:::i;:::-;-1:-1:-1;24849:9:644;;24752:112::o;24869:336::-;25071:2;25053:21;;;25110:2;25090:18;;;25083:30;-1:-1:-1;;;25144:2:644;25129:18;;25122:42;25196:2;25181:18;;24869:336::o;25210:340::-;25412:2;25394:21;;;25451:2;25431:18;;;25424:30;-1:-1:-1;;;25485:2:644;25470:18;;25463:46;25541:2;25526:18;;25210:340::o;25555:465::-;25812:2;25801:9;25794:21;25775:4;25838:56;25890:2;25879:9;25875:18;25867:6;25838:56;:::i;:::-;25942:9;25934:6;25930:22;25925:2;25914:9;25910:18;25903:50;25970:44;26007:6;25999;25970:44;:::i;:::-;25962:52;25555:465;-1:-1:-1;;;;;25555:465:644:o;26025:339::-;26227:2;26209:21;;;26266:2;26246:18;;;26239:30;-1:-1:-1;;;26300:2:644;26285:18;;26278:45;26355:2;26340:18;;26025:339::o;26369:338::-;26571:2;26553:21;;;26610:2;26590:18;;;26583:30;-1:-1:-1;;;26644:2:644;26629:18;;26622:44;26698:2;26683:18;;26369:338::o;26712:383::-;26909:2;26898:9;26891:21;26872:4;26935:45;26976:2;26965:9;26961:18;26953:6;26935:45;:::i;:::-;27028:9;27020:6;27016:22;27011:2;27000:9;26996:18;26989:50;27056:33;27082:6;27074;27056:33;:::i;28027:267::-;28116:6;28111:3;28104:19;28168:6;28161:5;28154:4;28149:3;28145:14;28132:43;-1:-1:-1;28220:1:644;28195:16;;;28213:4;28191:27;;;28184:38;;;;28276:2;28255:15;;;-1:-1:-1;;28251:29:644;28242:39;;;28238:50;;28027:267::o;28299:506::-;28542:6;28531:9;28524:25;28585:2;28580;28569:9;28565:18;28558:30;28505:4;28611:62;28669:2;28658:9;28654:18;28646:6;28638;28611:62;:::i;:::-;28721:9;28713:6;28709:22;28704:2;28693:9;28689:18;28682:50;28749;28792:6;28784;28776;28749:50;:::i;:::-;28741:58;28299:506;-1:-1:-1;;;;;;;;28299:506:644:o;28810:827::-;-1:-1:-1;;;;;29207:15:644;;;29189:34;;29259:15;;29254:2;29239:18;;29232:43;29169:3;29306:2;29291:18;;29284:31;;;29132:4;;29338:57;;29375:19;;29367:6;29338:57;:::i;:::-;29443:9;29435:6;29431:22;29426:2;29415:9;29411:18;29404:50;29477:44;29514:6;29506;29477:44;:::i;:::-;29463:58;;29570:9;29562:6;29558:22;29552:3;29541:9;29537:19;29530:51;29598:33;29624:6;29616;29598:33;:::i;29642:249::-;29711:6;29764:2;29752:9;29743:7;29739:23;29735:32;29732:52;;;29780:1;29777;29770:12;29732:52;29812:9;29806:16;29831:30;29855:5;29831:30;:::i;29896:179::-;29931:3;29973:1;29955:16;29952:23;29949:120;;;30019:1;30016;30013;29998:23;-1:-1:-1;30056:1:644;30050:8;30045:3;30041:18;29949:120;29896:179;:::o;30080:671::-;30119:3;30161:4;30143:16;30140:26;30137:39;;;30080:671;:::o;30137:39::-;30203:2;30197:9;-1:-1:-1;;30268:16:644;30264:25;;30261:1;30197:9;30240:50;30319:4;30313:11;30343:16;-1:-1:-1;;;;;30449:2:644;30442:4;30434:6;30430:17;30427:25;30422:2;30414:6;30411:14;30408:45;30405:58;;;30456:5;;;;;30080:671;:::o;30405:58::-;30493:6;30487:4;30483:17;30472:28;;30529:3;30523:10;30556:2;30548:6;30545:14;30542:27;;;30562:5;;;;;;30080:671;:::o;30542:27::-;30646:2;30627:16;30621:4;30617:27;30613:36;30606:4;30597:6;30592:3;30588:16;30584:27;30581:69;30578:82;;;30653:5;;;;;;30080:671;:::o;30578:82::-;30669:57;30720:4;30711:6;30703;30699:19;30695:30;30689:4;30669:57;:::i;:::-;-1:-1:-1;30742:3:644;;30080:671;-1:-1:-1;;;;;30080:671:644:o;31101:339::-;31303:2;31285:21;;;31342:2;31322:18;;;31315:30;-1:-1:-1;;;31376:2:644;31361:18;;31354:45;31431:2;31416:18;;31101:339::o;31852:274::-;31981:3;32019:6;32013:13;32035:53;32081:6;32076:3;32069:4;32061:6;32057:17;32035:53;:::i;:::-;32104:16;;;;;31852:274;-1:-1:-1;;31852:274:644:o;32475:561::-;-1:-1:-1;;;;;32772:15:644;;;32754:34;;32824:15;;32819:2;32804:18;;32797:43;32871:2;32856:18;;32849:34;;;32914:2;32899:18;;32892:34;;;32734:3;32957;32942:19;;32935:32;;;32697:4;;32984:46;;33010:19;;33002:6;32984:46;:::i;:::-;32976:54;32475:561;-1:-1:-1;;;;;;;32475:561:644:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "balanceOf(address,uint256)": "00fdd58e",
    "balanceOfBatch(address[],uint256[])": "4e1273f4",
    "batchFrozen(uint256)": "83040532",
    "burn(address,uint256,uint256)": "f5298aca",
    "burnBatch(address,uint256[],uint256[])": "6b20c454",
    "claim(address,uint256,uint256)": "2bc43fd9",
    "contractURI()": "e8a3d485",
    "encryptDecrypt(bytes,bytes)": "e7150322",
    "encryptedData(uint256)": "a05112fc",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRevealURI(uint256,bytes)": "9fc4d68f",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isEncryptedBatch(uint256)": "492e224b",
    "lazyMint(uint256,string,bytes)": "d37c353b",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToMint()": "3b1475a7",
    "owner()": "8da5cb5b",
    "reveal(uint256,bytes)": "ce805642",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
    "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "totalSupply(uint256)": "bd85b039",
    "uri(uint256)": "0e89341c",
    "verifyClaim(address,uint256,uint256)": "4bbb1abf"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"name\":\"TokenURIRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"encryptDecrypt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encryptedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"getRevealURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"}],\"name\":\"isEncryptedBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of the NFT to burn.\",\"_owner\":\"The owner of the NFT to burn.\",\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"burnBatch(address,uint256[],uint256[])\":{\"params\":{\"_amounts\":\"The amounts of the NFTs to burn.\",\"_owner\":\"The owner of the NFTs to burn.\",\"_tokenIds\":\"The tokenIds of the NFTs to burn.\"}},\"claim(address,uint256,uint256)\":{\"details\":\"The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.\",\"params\":{\"_quantity\":\"The number of tokens to mint.\",\"_receiver\":\"The recipient of the tokens to mint.\",\"_tokenId\":\"The tokenId of the lazy minted NFT to mint.\"}},\"encryptDecrypt(bytes,bytes)\":{\"details\":\"Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain\",\"params\":{\"data\":\"Bytes of data to encrypt/decrypt.\",\"key\":\"Secure key used by caller for encryption/decryption.\"},\"returns\":{\"result\":\" Output after encryption/decryption of given data.\"}},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"Index of the desired batch in batchIds array.\"}},\"getRevealURI(uint256,bytes)\":{\"details\":\"Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.\",\"params\":{\"_batchId\":\"ID of the batch for which URI is being revealed.\",\"_key\":\"Secure key used by caller/admin for encryption of baseURI.\"},\"returns\":{\"revealedURI\":\"Decrypted base URI.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"isEncryptedBatch(uint256)\":{\"details\":\"Returns `true` if `_batchId`'s base URI is encrypted.\",\"params\":{\"_batchId\":\"ID of a batch of NFTs.\"}},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"_amount\":\"The number of NFTs to lazy mint.\",\"_baseURIForTokens\":\"The placeholder base URI for the 'n' number of NFTs being lazy minted, where the                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\",\"_data\":\"The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\"},\"returns\":{\"batchId\":\"         A unique integer identifier for the batch of NFTs lazy minted together.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"reveal(uint256,bytes)\":{\"params\":{\"_index\":\"The ID for the batch of delayed-reveal NFTs to reveal.\",\"_key\":\"The key with which the base URI for the relevant batch of NFTs was encrypted.\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"uri(uint256)\":{\"details\":\"See `BatchMintMetadata` for handling of metadata in this contract.\",\"params\":{\"_tokenId\":\"The tokenId of an NFT.\"}},\"verifyClaim(address,uint256,uint256)\":{\"details\":\"Checks a request to claim NFTs against a custom condition.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\",\"_tokenId\":\"The tokenId of the lazy minted NFT to mint.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"notice\":\"So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of an account's Tokens.\"},\"burn(address,uint256,uint256)\":{\"notice\":\"Lets an owner or approved operator burn NFTs of the given tokenId.\"},\"burnBatch(address,uint256[],uint256[])\":{\"notice\":\"Lets an owner or approved operator burn NFTs of the given tokenIds.\"},\"claim(address,uint256,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"encryptDecrypt(bytes,bytes)\":{\"notice\":\"Encrypt/decrypt data on chain.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens at the given index.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRevealURI(uint256,bytes)\":{\"notice\":\"Returns revealed URI for a batch of NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given owner.\"},\"isEncryptedBatch(uint256)\":{\"notice\":\"Returns whether the relvant batch of NFTs is subject to a delayed reveal.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an authorized address lazy mint a given amount of NFTs.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be lazy minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"reveal(uint256,bytes)\":{\"notice\":\"Lets an authorized address reveal a batch of delayed reveal NFTs.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"totalSupply(uint256)\":{\"notice\":\"Returns the total supply of NFTs of a given tokenId\"},\"uri(uint256)\":{\"notice\":\"Returns the metadata URI for an NFT.\"},\"verifyClaim(address,uint256,uint256)\":{\"notice\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\"}},\"notice\":\"BASE:      ERC1155LazyMint      EXTENSION: DelayedReveal  The `ERC1155DelayedReveal` contract uses the `DelayedReveal` extension.  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'  of  NFTs means actually assigning an owner to an NFT.  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,  without paying the gas cost for actually minting the NFTs.  'Delayed reveal' is a mechanism by which you can distribute NFTs to your audience and reveal the metadata of the distributed  NFTs, after the fact.  You can read more about how the `DelayedReveal` extension works, here: https://blog.thirdweb.com/delayed-reveal-nfts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC1155DelayedReveal.sol\":\"ERC1155DelayedReveal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC1155DelayedReveal.sol\":{\"keccak256\":\"0xcb2d6bbfcf099408c1c3cef4896d87fbaaaf1fd06cc2c73798ce194adb602c1c\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0ce6e5b7d89f6006fbe38d7f01fbe7a8fa2a246dd084b042b33766fb1bce7f2a\",\"dweb:/ipfs/QmRfSZNCqXdDcpwaKiQmuHpQPPY2uYVczmS4Q9VxTst89G\"]},\"contracts/base/ERC1155LazyMint.sol\":{\"keccak256\":\"0x551e786d1f916fef5c990e7ac323e75a126ffbd769923a8a4784d7169a94512a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1767b7da078c1ca149339e18591289d06aa70a49b33623b8983fb190b8d899e0\",\"dweb:/ipfs/QmS2SeJeBLmNAYPeLwimi4szd8cHPFbE5Wsp55VscpuxFi\"]},\"contracts/eip/ERC1155.sol\":{\"keccak256\":\"0x378fcbe3a191a44060f66b2b2932391cbf31f945039087b9024bb2eee91ba5b6\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://f36697fa07898c79d77d0b294849de4eab4b6d24679c33f0b448b8d82e172f4b\",\"dweb:/ipfs/QmZ8jqskjHnjHuoDqa9dQdP6KrRDyHcvBKVDZZNXX9e7bS\"]},\"contracts/eip/interface/IERC1155.sol\":{\"keccak256\":\"0x17c265f3f47161c9d2f6c7f7f4040440df9ad4cd7eb74eb411bf25a94b542f9e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4f468eb184f2a08909834b51e33e854741647f9798aa1e6746f3f1b69525552\",\"dweb:/ipfs/QmbCMy9vJLga2dCxGG6nXW7VKGqsMrzU8phPhcd58xkapq\"]},\"contracts/eip/interface/IERC1155Metadata.sol\":{\"keccak256\":\"0xe9d530111d75c5d6db4ca4f30dd76d6a29d9363ab7390e922942a0fc9e3ce32e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8272be1ca643bd3038fd67b00acad09a8dca44536284bcca6b862d09f8b53e43\",\"dweb:/ipfs/Qme9wiWPDfh36xm7TNaxpAYxv5jAptMNLtYksRwc5zNFbU\"]},\"contracts/eip/interface/IERC1155Receiver.sol\":{\"keccak256\":\"0xfef511c703e7ebdb193d35a67e0d9b70728789b2ac45cc5cf5ee56c4ad034f00\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f838e560ba0caddc54ad4ba082e0ff3bf27a721c15bc0cf19791fef7940837a5\",\"dweb:/ipfs/QmTwfwYYK4Ky9PPhdDoVVmZJaJ7y2hZDH8YnBQRfiA8Baz\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf\",\"dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0x1d1ee64f8456dc8b4cdd096e27ac4687babd485f49a728146126744d67f25f2f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9e01b0d51bdccbcce9095f606c8624926b518c1385c1349c41896236a0345ee0\",\"dweb:/ipfs/QmWHTbztwRf9Fyq4617MrVSqF8o7UXMT5nFe6epQ92N6L9\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/DelayedReveal.sol\":{\"keccak256\":\"0x2a860e4b857617a1c87c5fb79df2dd4a70e0e63ec6796f58ce9d0b3b93f1e242\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc4039ae41d23b921c13b500018e333d63dd9b3be65e700e0d05465d3ac680a3\",\"dweb:/ipfs/QmSLCVWqjVzDt9ygXmBffERFCYCo7RiGry2BhQjXcnZjQ6\"]},\"contracts/extension/LazyMint.sol\":{\"keccak256\":\"0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827\",\"dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2\",\"dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485\",\"dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1\"]},\"contracts/extension/interface/IClaimableERC1155.sol\":{\"keccak256\":\"0x022e90a3152a20e95fedacf8282e0c31b768627cb6310fa8ffa0615064fb15db\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c51a34ea5c85413cbb501e8115162897e4e51076905daa488f19870410cf80df\",\"dweb:/ipfs/Qmee9iQDzWTeyKioibkeX67YCRz51AJYkvLS2yuyjy4AwX\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IDelayedReveal.sol\":{\"keccak256\":\"0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138\",\"dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4\"]},\"contracts/extension/interface/ILazyMint.sol\":{\"keccak256\":\"0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3\",\"dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b\",\"dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8\"]},\"contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623\",\"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6\"]},\"contracts/lib/TWAddress.sol\":{\"keccak256\":\"0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e\",\"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6\"]},\"contracts/lib/TWStrings.sol\":{\"keccak256\":\"0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9\",\"dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchMetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "MetadataFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokenURIRevealed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[]",
              "name": "_ids",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "_values",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferBatch",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferSingle",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_value",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "URI",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOfBatch",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "batchFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "_tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "_amounts",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burnBatch"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "key",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "encryptDecrypt",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "result",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "encryptedData",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_batchId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_key",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRevealURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_batchId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isEncryptedBatch",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_key",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reveal",
          "outputs": [
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeBatchTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "uri",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "burn(address,uint256,uint256)": {
            "params": {
              "_amount": "The amount of the NFT to burn.",
              "_owner": "The owner of the NFT to burn.",
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "burnBatch(address,uint256[],uint256[])": {
            "params": {
              "_amounts": "The amounts of the NFTs to burn.",
              "_owner": "The owner of the NFTs to burn.",
              "_tokenIds": "The tokenIds of the NFTs to burn."
            }
          },
          "claim(address,uint256,uint256)": {
            "details": "The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.",
            "params": {
              "_quantity": "The number of tokens to mint.",
              "_receiver": "The recipient of the tokens to mint.",
              "_tokenId": "The tokenId of the lazy minted NFT to mint."
            }
          },
          "encryptDecrypt(bytes,bytes)": {
            "details": "Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain",
            "params": {
              "data": "Bytes of data to encrypt/decrypt.",
              "key": "Secure key used by caller for encryption/decryption."
            },
            "returns": {
              "result": " Output after encryption/decryption of given data."
            }
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "Index of the desired batch in batchIds array."
            }
          },
          "getRevealURI(uint256,bytes)": {
            "details": "Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.",
            "params": {
              "_batchId": "ID of the batch for which URI is being revealed.",
              "_key": "Secure key used by caller/admin for encryption of baseURI."
            },
            "returns": {
              "revealedURI": "Decrypted base URI."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "isEncryptedBatch(uint256)": {
            "details": "Returns `true` if `_batchId`'s base URI is encrypted.",
            "params": {
              "_batchId": "ID of a batch of NFTs."
            }
          },
          "lazyMint(uint256,string,bytes)": {
            "params": {
              "_amount": "The number of NFTs to lazy mint.",
              "_baseURIForTokens": "The placeholder base URI for the 'n' number of NFTs being lazy minted, where the                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.",
              "_data": "The encrypted base URI + provenance hash for the batch of NFTs being lazy minted."
            },
            "returns": {
              "batchId": "         A unique integer identifier for the batch of NFTs lazy minted together."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "reveal(uint256,bytes)": {
            "params": {
              "_index": "The ID for the batch of delayed-reveal NFTs to reveal.",
              "_key": "The key with which the base URI for the relevant batch of NFTs was encrypted."
            }
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "uri(uint256)": {
            "details": "See `BatchMintMetadata` for handling of metadata in this contract.",
            "params": {
              "_tokenId": "The tokenId of an NFT."
            }
          },
          "verifyClaim(address,uint256,uint256)": {
            "details": "Checks a request to claim NFTs against a custom condition.",
            "params": {
              "_claimer": "Caller of the claim function.",
              "_quantity": "The number of NFTs being claimed.",
              "_tokenId": "The tokenId of the lazy minted NFT to mint."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "balanceOf(address,uint256)": {
            "notice": "Get the balance of an account's Tokens."
          },
          "burn(address,uint256,uint256)": {
            "notice": "Lets an owner or approved operator burn NFTs of the given tokenId."
          },
          "burnBatch(address,uint256[],uint256[])": {
            "notice": "Lets an owner or approved operator burn NFTs of the given tokenIds."
          },
          "claim(address,uint256,uint256)": {
            "notice": "Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "encryptDecrypt(bytes,bytes)": {
            "notice": "Encrypt/decrypt data on chain."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens at the given index."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRevealURI(uint256,bytes)": {
            "notice": "Returns revealed URI for a batch of NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "isApprovedForAll(address,address)": {
            "notice": "Queries the approval status of an operator for a given owner."
          },
          "isEncryptedBatch(uint256)": {
            "notice": "Returns whether the relvant batch of NFTs is subject to a delayed reveal."
          },
          "lazyMint(uint256,string,bytes)": {
            "notice": "Lets an authorized address lazy mint a given amount of NFTs."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be lazy minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "reveal(uint256,bytes)": {
            "notice": "Lets an authorized address reveal a batch of delayed reveal NFTs."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "totalSupply(uint256)": {
            "notice": "Returns the total supply of NFTs of a given tokenId"
          },
          "uri(uint256)": {
            "notice": "Returns the metadata URI for an NFT."
          },
          "verifyClaim(address,uint256,uint256)": {
            "notice": "Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC1155DelayedReveal.sol": "ERC1155DelayedReveal"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC1155DelayedReveal.sol": {
        "keccak256": "0xcb2d6bbfcf099408c1c3cef4896d87fbaaaf1fd06cc2c73798ce194adb602c1c",
        "urls": [
          "bzz-raw://0ce6e5b7d89f6006fbe38d7f01fbe7a8fa2a246dd084b042b33766fb1bce7f2a",
          "dweb:/ipfs/QmRfSZNCqXdDcpwaKiQmuHpQPPY2uYVczmS4Q9VxTst89G"
        ],
        "license": "Apache-2.0"
      },
      "contracts/base/ERC1155LazyMint.sol": {
        "keccak256": "0x551e786d1f916fef5c990e7ac323e75a126ffbd769923a8a4784d7169a94512a",
        "urls": [
          "bzz-raw://1767b7da078c1ca149339e18591289d06aa70a49b33623b8983fb190b8d899e0",
          "dweb:/ipfs/QmS2SeJeBLmNAYPeLwimi4szd8cHPFbE5Wsp55VscpuxFi"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC1155.sol": {
        "keccak256": "0x378fcbe3a191a44060f66b2b2932391cbf31f945039087b9024bb2eee91ba5b6",
        "urls": [
          "bzz-raw://f36697fa07898c79d77d0b294849de4eab4b6d24679c33f0b448b8d82e172f4b",
          "dweb:/ipfs/QmZ8jqskjHnjHuoDqa9dQdP6KrRDyHcvBKVDZZNXX9e7bS"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC1155.sol": {
        "keccak256": "0x17c265f3f47161c9d2f6c7f7f4040440df9ad4cd7eb74eb411bf25a94b542f9e",
        "urls": [
          "bzz-raw://c4f468eb184f2a08909834b51e33e854741647f9798aa1e6746f3f1b69525552",
          "dweb:/ipfs/QmbCMy9vJLga2dCxGG6nXW7VKGqsMrzU8phPhcd58xkapq"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC1155Metadata.sol": {
        "keccak256": "0xe9d530111d75c5d6db4ca4f30dd76d6a29d9363ab7390e922942a0fc9e3ce32e",
        "urls": [
          "bzz-raw://8272be1ca643bd3038fd67b00acad09a8dca44536284bcca6b862d09f8b53e43",
          "dweb:/ipfs/Qme9wiWPDfh36xm7TNaxpAYxv5jAptMNLtYksRwc5zNFbU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC1155Receiver.sol": {
        "keccak256": "0xfef511c703e7ebdb193d35a67e0d9b70728789b2ac45cc5cf5ee56c4ad034f00",
        "urls": [
          "bzz-raw://f838e560ba0caddc54ad4ba082e0ff3bf27a721c15bc0cf19791fef7940837a5",
          "dweb:/ipfs/QmTwfwYYK4Ky9PPhdDoVVmZJaJ7y2hZDH8YnBQRfiA8Baz"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9",
        "urls": [
          "bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf",
          "dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0x1d1ee64f8456dc8b4cdd096e27ac4687babd485f49a728146126744d67f25f2f",
        "urls": [
          "bzz-raw://9e01b0d51bdccbcce9095f606c8624926b518c1385c1349c41896236a0345ee0",
          "dweb:/ipfs/QmWHTbztwRf9Fyq4617MrVSqF8o7UXMT5nFe6epQ92N6L9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DelayedReveal.sol": {
        "keccak256": "0x2a860e4b857617a1c87c5fb79df2dd4a70e0e63ec6796f58ce9d0b3b93f1e242",
        "urls": [
          "bzz-raw://cc4039ae41d23b921c13b500018e333d63dd9b3be65e700e0d05465d3ac680a3",
          "dweb:/ipfs/QmSLCVWqjVzDt9ygXmBffERFCYCo7RiGry2BhQjXcnZjQ6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/LazyMint.sol": {
        "keccak256": "0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170",
        "urls": [
          "bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827",
          "dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55",
        "urls": [
          "bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2",
          "dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350",
        "urls": [
          "bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485",
          "dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimableERC1155.sol": {
        "keccak256": "0x022e90a3152a20e95fedacf8282e0c31b768627cb6310fa8ffa0615064fb15db",
        "urls": [
          "bzz-raw://c51a34ea5c85413cbb501e8115162897e4e51076905daa488f19870410cf80df",
          "dweb:/ipfs/Qmee9iQDzWTeyKioibkeX67YCRz51AJYkvLS2yuyjy4AwX"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDelayedReveal.sol": {
        "keccak256": "0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123",
        "urls": [
          "bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138",
          "dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/ILazyMint.sol": {
        "keccak256": "0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec",
        "urls": [
          "bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3",
          "dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385",
        "urls": [
          "bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b",
          "dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol": {
        "keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
        "urls": [
          "bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
          "dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
        ],
        "license": "MIT"
      },
      "contracts/lib/TWAddress.sol": {
        "keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
        "urls": [
          "bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
          "dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWStrings.sol": {
        "keccak256": "0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8",
        "urls": [
          "bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9",
          "dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt"
        ],
        "license": "Apache 2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC1155DelayedReveal.sol",
    "id": 803,
    "exportedSymbols": {
      "BatchMintMetadata": [
        17299
      ],
      "ContractMetadata": [
        17526
      ],
      "DelayedReveal": [
        17685
      ],
      "ERC1155": [
        7783
      ],
      "ERC1155DelayedReveal": [
        802
      ],
      "ERC1155LazyMint": [
        1996
      ],
      "IClaimableERC1155": [
        32367
      ],
      "IContractMetadata": [
        32437
      ],
      "IDelayedReveal": [
        32468
      ],
      "IERC165": [
        13829
      ],
      "IERC2981": [
        13973
      ],
      "ILazyMint": [
        32812
      ],
      "IMulticall": [
        32926
      ],
      "IOwnable": [
        33183
      ],
      "IRoyalty": [
        33409
      ],
      "LazyMint": [
        20261
      ],
      "Multicall": [
        20595
      ],
      "Ownable": [
        21153
      ],
      "ReentrancyGuard": [
        46484
      ],
      "Royalty": [
        22395
      ],
      "TWAddress": [
        64152
      ],
      "TWStrings": [
        64852
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:4702:1",
    "nodes": [
      {
        "id": 605,
        "nodeType": "PragmaDirective",
        "src": "39:23:1",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 606,
        "nodeType": "ImportDirective",
        "src": "86:31:1",
        "nodes": [],
        "absolutePath": "contracts/base/ERC1155LazyMint.sol",
        "file": "./ERC1155LazyMint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 803,
        "sourceUnit": 1997,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 607,
        "nodeType": "ImportDirective",
        "src": "118:40:1",
        "nodes": [],
        "absolutePath": "contracts/extension/DelayedReveal.sol",
        "file": "../extension/DelayedReveal.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 803,
        "sourceUnit": 17686,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 802,
        "nodeType": "ContractDefinition",
        "src": "943:3797:1",
        "nodes": [
          {
            "id": 615,
            "nodeType": "UsingForDirective",
            "src": "1013:28:1",
            "nodes": [],
            "libraryName": {
              "id": 613,
              "name": "TWStrings",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 64852,
              "src": "1019:9:1"
            },
            "typeName": {
              "id": 614,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1033:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 636,
            "nodeType": "FunctionDefinition",
            "src": "1226:254:1",
            "nodes": [],
            "body": {
              "id": 635,
              "nodeType": "Block",
              "src": "1478:2:1",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 628,
                    "name": "_defaultAdmin",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 617,
                    "src": "1415:13:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "id": 629,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 619,
                    "src": "1430:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 630,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 621,
                    "src": "1437:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 631,
                    "name": "_royaltyRecipient",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 623,
                    "src": "1446:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "id": 632,
                    "name": "_royaltyBps",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 625,
                    "src": "1465:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  }
                ],
                "id": 633,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 627,
                  "name": "ERC1155LazyMint",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1996,
                  "src": "1399:15:1"
                },
                "nodeType": "ModifierInvocation",
                "src": "1399:78:1"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 626,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 617,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "1255:13:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 636,
                  "src": "1247:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 616,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1247:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 619,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1292:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 636,
                  "src": "1278:19:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 618,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1278:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 621,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1321:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 636,
                  "src": "1307:21:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 620,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1307:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 623,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "1346:17:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 636,
                  "src": "1338:25:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 622,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1338:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 625,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "1381:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 636,
                  "src": "1373:19:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 624,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1373:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1237:161:1"
            },
            "returnParameters": {
              "id": 634,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1478:0:1"
            },
            "scope": 802,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 684,
            "nodeType": "FunctionDefinition",
            "src": "1896:405:1",
            "nodes": [],
            "body": {
              "id": 683,
              "nodeType": "Block",
              "src": "1980:321:1",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    646,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 646,
                      "mutability": "mutable",
                      "name": "batchId",
                      "nameLocation": "1999:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 683,
                      "src": "1991:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 645,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1991:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 650,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 648,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 639,
                        "src": "2024:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 647,
                      "name": "_getBatchId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17090,
                      "src": "2012:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256,uint256)"
                      }
                    },
                    "id": 649,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2012:21:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1990:43:1"
                },
                {
                  "assignments": [
                    652
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 652,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "2057:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 683,
                      "src": "2043:22:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 651,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2043:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 656,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 654,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 639,
                        "src": "2080:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 653,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17141,
                      "src": "2068:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 655,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2068:21:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2043:46:1"
                },
                {
                  "condition": {
                    "arguments": [
                      {
                        "id": 658,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 646,
                        "src": "2121:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 657,
                      "name": "isEncryptedBatch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17684,
                      "src": "2104:16:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 659,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2104:25:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 681,
                    "nodeType": "Block",
                    "src": "2208:87:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 674,
                                  "name": "batchUri",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 652,
                                  "src": "2253:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "id": 675,
                                      "name": "_tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 639,
                                      "src": "2263:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 676,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 64734,
                                    "src": "2263:17:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 677,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2263:19:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 672,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2236:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 673,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2236:16:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 678,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2236:47:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 671,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2229:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 670,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2229:6:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 679,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2229:55:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 644,
                        "id": 680,
                        "nodeType": "Return",
                        "src": "2222:62:1"
                      }
                    ]
                  },
                  "id": 682,
                  "nodeType": "IfStatement",
                  "src": "2100:195:1",
                  "trueBody": {
                    "id": 669,
                    "nodeType": "Block",
                    "src": "2131:71:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 664,
                                  "name": "batchUri",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 652,
                                  "src": "2176:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 665,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2186:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  }
                                ],
                                "expression": {
                                  "id": 662,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2159:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 663,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2159:16:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 666,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2159:31:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 661,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2152:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 660,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2152:6:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 667,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2152:39:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 644,
                        "id": 668,
                        "nodeType": "Return",
                        "src": "2145:46:1"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              1614
            ],
            "documentation": {
              "id": 637,
              "nodeType": "StructuredDocumentation",
              "src": "1674:217:1",
              "text": "  @notice         Returns the metadata URI for an NFT.\n  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n  @param _tokenId The tokenId of an NFT."
            },
            "functionSelector": "0e89341c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nameLocation": "1905:3:1",
            "overrides": {
              "id": 641,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1947:8:1"
            },
            "parameters": {
              "id": 640,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 639,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "1917:8:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 684,
                  "src": "1909:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 638,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1909:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1908:18:1"
            },
            "returnParameters": {
              "id": 644,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 643,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 684,
                  "src": "1965:13:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 642,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1965:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1964:15:1"
            },
            "scope": 802,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 742,
            "nodeType": "FunctionDefinition",
            "src": "3108:548:1",
            "nodes": [],
            "body": {
              "id": 741,
              "nodeType": "Block",
              "src": "3280:376:1",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 697,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "3294:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "id": 698,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3294:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 699,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3309:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3294:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 733,
                  "nodeType": "IfStatement",
                  "src": "3290:293:1",
                  "trueBody": {
                    "id": 732,
                    "nodeType": "Block",
                    "src": "3312:271:1",
                    "statements": [
                      {
                        "assignments": [
                          702,
                          704
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 702,
                            "mutability": "mutable",
                            "name": "encryptedURI",
                            "nameLocation": "3340:12:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 732,
                            "src": "3327:25:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 701,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "3327:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 704,
                            "mutability": "mutable",
                            "name": "provenanceHash",
                            "nameLocation": "3362:14:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 732,
                            "src": "3354:22:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 703,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "3354:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 714,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 707,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "3391:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            {
                              "components": [
                                {
                                  "id": 709,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3399:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                    "typeString": "type(bytes storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 708,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3399:5:1",
                                    "typeDescriptions": {}
                                  }
                                },
                                {
                                  "id": 711,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3406:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes32_$",
                                    "typeString": "type(bytes32)"
                                  },
                                  "typeName": {
                                    "id": 710,
                                    "name": "bytes32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3406:7:1",
                                    "typeDescriptions": {}
                                  }
                                }
                              ],
                              "id": 712,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "3398:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes32_$_$",
                                "typeString": "tuple(type(bytes storage pointer),type(bytes32))"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              },
                              {
                                "typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes32_$_$",
                                "typeString": "tuple(type(bytes storage pointer),type(bytes32))"
                              }
                            ],
                            "expression": {
                              "id": 705,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "3380:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 706,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "decode",
                            "nodeType": "MemberAccess",
                            "src": "3380:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 713,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3380:35:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_bytes32_$",
                            "typeString": "tuple(bytes memory,bytes32)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3326:89:1"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 722,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 718,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 715,
                                "name": "encryptedURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 702,
                                "src": "3433:12:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 716,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "3433:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 717,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3456:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3433:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 721,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 719,
                              "name": "provenanceHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 704,
                              "src": "3461:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "",
                              "id": 720,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3479:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            },
                            "src": "3461:20:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3433:48:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 731,
                        "nodeType": "IfStatement",
                        "src": "3429:144:1",
                        "trueBody": {
                          "id": 730,
                          "nodeType": "Block",
                          "src": "3483:90:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 726,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 724,
                                      "name": "nextTokenIdToLazyMint",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 20195,
                                      "src": "3519:21:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "id": 725,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 687,
                                      "src": "3543:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "3519:31:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 727,
                                    "name": "_data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 691,
                                    "src": "3552:5:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  ],
                                  "id": 723,
                                  "name": "_setEncryptedData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 17552,
                                  "src": "3501:17:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                                    "typeString": "function (uint256,bytes memory)"
                                  }
                                },
                                "id": 728,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3501:57:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 729,
                              "nodeType": "ExpressionStatement",
                              "src": "3501:57:1"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 736,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 687,
                        "src": "3615:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 737,
                        "name": "_baseURIForTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 689,
                        "src": "3624:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 738,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "3643:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "expression": {
                        "id": 734,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "3600:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC1155DelayedReveal_$802_$",
                          "typeString": "type(contract super ERC1155DelayedReveal)"
                        }
                      },
                      "id": 735,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "lazyMint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 20254,
                      "src": "3600:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_uint256_$",
                        "typeString": "function (uint256,string calldata,bytes calldata) returns (uint256)"
                      }
                    },
                    "id": 739,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3600:49:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 696,
                  "id": 740,
                  "nodeType": "Return",
                  "src": "3593:56:1"
                }
              ]
            },
            "baseFunctions": [
              20254
            ],
            "documentation": {
              "id": 685,
              "nodeType": "StructuredDocumentation",
              "src": "2489:614:1",
              "text": "  @notice                  Lets an authorized address lazy mint a given amount of NFTs.\n  @param _amount           The number of NFTs to lazy mint.\n  @param _baseURIForTokens The placeholder base URI for the 'n' number of NFTs being lazy minted, where the\n                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\n  @param _data             The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\n  @return batchId          A unique integer identifier for the batch of NFTs lazy minted together."
            },
            "functionSelector": "d37c353b",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "lazyMint",
            "nameLocation": "3117:8:1",
            "overrides": {
              "id": 693,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3245:8:1"
            },
            "parameters": {
              "id": 692,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 687,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "3143:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 742,
                  "src": "3135:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 686,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3135:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 689,
                  "mutability": "mutable",
                  "name": "_baseURIForTokens",
                  "nameLocation": "3176:17:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 742,
                  "src": "3160:33:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 688,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3160:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 691,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "3218:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 742,
                  "src": "3203:20:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 690,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3203:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3125:104:1"
            },
            "returnParameters": {
              "id": 696,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 695,
                  "mutability": "mutable",
                  "name": "batchId",
                  "nameLocation": "3271:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 742,
                  "src": "3263:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 694,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3263:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3262:17:1"
            },
            "scope": 802,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 788,
            "nodeType": "FunctionDefinition",
            "src": "4134:413:1",
            "nodes": [],
            "body": {
              "id": 787,
              "nodeType": "Block",
              "src": "4249:298:1",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 754,
                          "name": "_canReveal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 801,
                          "src": "4267:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 755,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4267:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a6564",
                        "id": 756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4281:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                          "typeString": "literal_string \"Not authorized\""
                        },
                        "value": "Not authorized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                          "typeString": "literal_string \"Not authorized\""
                        }
                      ],
                      "id": 753,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4259:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 757,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4259:39:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 758,
                  "nodeType": "ExpressionStatement",
                  "src": "4259:39:1"
                },
                {
                  "assignments": [
                    760
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 760,
                      "mutability": "mutable",
                      "name": "batchId",
                      "nameLocation": "4317:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 787,
                      "src": "4309:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 759,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4309:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 764,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 762,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 745,
                        "src": "4345:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 761,
                      "name": "getBatchIdAtIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17029,
                      "src": "4327:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 763,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4327:25:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4309:43:1"
                },
                {
                  "expression": {
                    "id": 770,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 765,
                      "name": "revealedURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 751,
                      "src": "4362:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 767,
                          "name": "batchId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 760,
                          "src": "4389:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 768,
                          "name": "_key",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 747,
                          "src": "4398:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        ],
                        "id": 766,
                        "name": "getRevealURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17618,
                        "src": "4376:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_string_memory_ptr_$",
                          "typeString": "function (uint256,bytes calldata) view returns (string memory)"
                        }
                      },
                      "id": 769,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4376:27:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "4362:41:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 771,
                  "nodeType": "ExpressionStatement",
                  "src": "4362:41:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 773,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 760,
                        "src": "4432:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "",
                        "id": 774,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4441:2:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 772,
                      "name": "_setEncryptedData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17552,
                      "src": "4414:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,bytes memory)"
                      }
                    },
                    "id": 775,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4414:30:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 776,
                  "nodeType": "ExpressionStatement",
                  "src": "4414:30:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 778,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 760,
                        "src": "4466:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 779,
                        "name": "revealedURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 751,
                        "src": "4475:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 777,
                      "name": "_setBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17228,
                      "src": "4454:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4454:33:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 781,
                  "nodeType": "ExpressionStatement",
                  "src": "4454:33:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 783,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 745,
                        "src": "4520:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 784,
                        "name": "revealedURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 751,
                        "src": "4528:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 782,
                      "name": "TokenURIRevealed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32447,
                      "src": "4503:16:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 785,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4503:37:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 786,
                  "nodeType": "EmitStatement",
                  "src": "4498:42:1"
                }
              ]
            },
            "baseFunctions": [
              32457
            ],
            "documentation": {
              "id": 743,
              "nodeType": "StructuredDocumentation",
              "src": "3846:283:1",
              "text": "  @notice       Lets an authorized address reveal a batch of delayed reveal NFTs.\n  @param _index The ID for the batch of delayed-reveal NFTs to reveal.\n  @param _key   The key with which the base URI for the relevant batch of NFTs was encrypted."
            },
            "functionSelector": "ce805642",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "reveal",
            "nameLocation": "4143:6:1",
            "overrides": {
              "id": 749,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4204:8:1"
            },
            "parameters": {
              "id": 748,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 745,
                  "mutability": "mutable",
                  "name": "_index",
                  "nameLocation": "4158:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 788,
                  "src": "4150:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 744,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4150:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 747,
                  "mutability": "mutable",
                  "name": "_key",
                  "nameLocation": "4181:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 788,
                  "src": "4166:19:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 746,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4166:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4149:37:1"
            },
            "returnParameters": {
              "id": 752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 751,
                  "mutability": "mutable",
                  "name": "revealedURI",
                  "nameLocation": "4236:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 788,
                  "src": "4222:25:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 750,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4222:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4221:27:1"
            },
            "scope": 802,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 801,
            "nodeType": "FunctionDefinition",
            "src": "4634:104:1",
            "nodes": [],
            "body": {
              "id": 800,
              "nodeType": "Block",
              "src": "4693:45:1",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 798,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 794,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4710:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 795,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4710:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 796,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "4724:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 797,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4724:7:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4710:21:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 793,
                  "id": 799,
                  "nodeType": "Return",
                  "src": "4703:28:1"
                }
              ]
            },
            "documentation": {
              "id": 789,
              "nodeType": "StructuredDocumentation",
              "src": "4553:76:1",
              "text": "@dev Checks whether NFTs can be revealed in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canReveal",
            "nameLocation": "4643:10:1",
            "parameters": {
              "id": 790,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4653:2:1"
            },
            "returnParameters": {
              "id": 793,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 792,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 801,
                  "src": "4687:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 791,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4687:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4686:6:1"
            },
            "scope": 802,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 609,
              "name": "ERC1155LazyMint",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1996,
              "src": "976:15:1"
            },
            "id": 610,
            "nodeType": "InheritanceSpecifier",
            "src": "976:15:1"
          },
          {
            "baseName": {
              "id": 611,
              "name": "DelayedReveal",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17685,
              "src": "993:13:1"
            },
            "id": 612,
            "nodeType": "InheritanceSpecifier",
            "src": "993:13:1"
          }
        ],
        "canonicalName": "ERC1155DelayedReveal",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 608,
          "nodeType": "StructuredDocumentation",
          "src": "160:781:1",
          "text": "      BASE:      ERC1155LazyMint\n      EXTENSION: DelayedReveal\n  The `ERC1155DelayedReveal` contract uses the `DelayedReveal` extension.\n  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'\n  of  NFTs means actually assigning an owner to an NFT.\n  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,\n  without paying the gas cost for actually minting the NFTs.\n  'Delayed reveal' is a mechanism by which you can distribute NFTs to your audience and reveal the metadata of the distributed\n  NFTs, after the fact.\n  You can read more about how the `DelayedReveal` extension works, here: https://blog.thirdweb.com/delayed-reveal-nfts"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          802,
          17685,
          32468,
          1996,
          46484,
          32367,
          20261,
          17299,
          32812,
          20595,
          32926,
          22395,
          33409,
          13973,
          13829,
          21153,
          33183,
          17526,
          32437,
          7783,
          13764,
          13742
        ],
        "name": "ERC1155DelayedReveal",
        "nameLocation": "952:20:1",
        "scope": 803,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 1
}