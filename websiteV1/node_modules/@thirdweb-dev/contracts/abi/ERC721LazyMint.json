{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "verifyClaim",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b5060405162002af238038062002af2833981016040819052620000349162000327565b8351849084906200004d90600290602085019062000197565b5080516200006390600390602084019062000197565b5060008055505060016010556200007a856200009a565b6200008f826001600160801b038316620000ec565b505050505062000417565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b612710811115620001355760405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d61782062707360881b604482015260640160405180910390fd5b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b828054620001a590620003da565b90600052602060002090601f016020900481019282620001c9576000855562000214565b82601f10620001e457805160ff191683800117855562000214565b8280016001018555821562000214579182015b8281111562000214578251825591602001919060010190620001f7565b506200022292915062000226565b5090565b5b8082111562000222576000815560010162000227565b80516001600160a01b03811681146200025557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200028257600080fd5b81516001600160401b03808211156200029f576200029f6200025a565b604051601f8301601f19908116603f01168101908282118183101715620002ca57620002ca6200025a565b81604052838152602092508683858801011115620002e757600080fd5b600091505b838210156200030b5785820183015181830184015290820190620002ec565b838211156200031d5760008385830101525b9695505050505050565b600080600080600060a086880312156200034057600080fd5b6200034b866200023d565b60208701519095506001600160401b03808211156200036957600080fd5b6200037789838a0162000270565b955060408801519150808211156200038e57600080fd5b506200039d8882890162000270565b935050620003ae606087016200023d565b60808701519092506001600160801b0381168114620003cc57600080fd5b809150509295509295909350565b600181811c90821680620003ef57607f821691505b602082108114156200041157634e487b7160e01b600052602260045260246000fd5b50919050565b6126cb80620004276000396000f3fe60806040526004361061018e5760003560e01c806363b45e2d116100dd57806363b45e2d146103fc57806370a082311461041157806383040532146104315780638da5cb5b14610461578063938e3d7b1461047657806395d89b41146104965780639bcf7a15146104ab578063a22cb465146104cb578063aad3ec96146104eb578063ac9650d8146104fe578063acd083f81461052b578063b24f2d3914610540578063b88d4fde1461056b578063c87b56dd1461058b578063d37c353b146105ab578063e8a3d485146105cb578063e985e9c5146105e057600080fd5b806301ffc9a71461019357806306fdde03146101c8578063081812fc146101ea578063095ea7b31461022257806313af40351461024457806318160ddd1461026457806323b872dd146102875780632419f51b146102a75780632a55205a146102c75780632f92023a146103065780633b1475a71461032557806342842e0e1461033a57806342966c681461035a5780634cc157df1461037a578063600dd5ea146103bc5780636352211e146103dc575b600080fd5b34801561019f57600080fd5b506101b36101ae366004611ea5565b610629565b60405190151581526020015b60405180910390f35b3480156101d457600080fd5b506101dd610696565b6040516101bf9190611f1a565b3480156101f657600080fd5b5061020a610205366004611f2d565b610728565b6040516001600160a01b0390911681526020016101bf565b34801561022e57600080fd5b5061024261023d366004611f62565b61076c565b005b34801561025057600080fd5b5061024261025f366004611f8c565b6107f3565b34801561027057600080fd5b50600154600054035b6040519081526020016101bf565b34801561029357600080fd5b506102426102a2366004611fa7565b61082c565b3480156102b357600080fd5b506102796102c2366004611f2d565b610837565b3480156102d357600080fd5b506102e76102e2366004611fe3565b6108a5565b604080516001600160a01b0390931683526020830191909152016101bf565b34801561031257600080fd5b50610242610321366004611f62565b5050565b34801561033157600080fd5b50600f54610279565b34801561034657600080fd5b50610242610355366004611fa7565b6108e2565b34801561036657600080fd5b50610242610375366004611f2d565b6108fd565b34801561038657600080fd5b5061039a610395366004611f2d565b610908565b604080516001600160a01b03909316835261ffff9091166020830152016101bf565b3480156103c857600080fd5b506102426103d7366004611f62565b610973565b3480156103e857600080fd5b5061020a6103f7366004611f2d565b6109a1565b34801561040857600080fd5b50600c54610279565b34801561041d57600080fd5b5061027961042c366004611f8c565b6109b3565b34801561043d57600080fd5b506101b361044c366004611f2d565b600e6020526000908152604090205460ff1681565b34801561046d57600080fd5b5061020a610a01565b34801561048257600080fd5b50610242610491366004612090565b610a10565b3480156104a257600080fd5b506101dd610a3d565b3480156104b757600080fd5b506102426104c63660046120d8565b610a4c565b3480156104d757600080fd5b506102426104e63660046120fd565b610a7b565b6102426104f9366004611f62565b610b11565b34801561050a57600080fd5b5061051e610519366004612139565b610c2e565b6040516101bf91906121ad565b34801561053757600080fd5b50600054610279565b34801561054c57600080fd5b50600a546001600160a01b03811690600160a01b900461ffff1661039a565b34801561057757600080fd5b5061024261058636600461220f565b610d22565b34801561059757600080fd5b506101dd6105a6366004611f2d565b610d73565b3480156105b757600080fd5b506102796105c63660046122d2565b610db4565b3480156105d757600080fd5b506101dd610ebe565b3480156105ec57600080fd5b506101b36105fb36600461234b565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b03198316148061065a57506380ac58cd60e01b6001600160e01b03198316145b806106755750635b5e139f60e01b6001600160e01b03198316145b8061069057506001600160e01b0319821663152a902d60e11b145b92915050565b6060600280546106a59061237e565b80601f01602080910402602001604051908101604052809291908181526020018280546106d19061237e565b801561071e5780601f106106f35761010080835404028352916020019161071e565b820191906000526020600020905b81548152906001019060200180831161070157829003601f168201915b5050505050905090565b600061073382610f4c565b610750576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610777826109a1565b9050806001600160a01b0316836001600160a01b031614156107ac5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216146107e3576107c681336105fb565b6107e3576040516367d9dca160e11b815260040160405180910390fd5b6107ee838383610f77565b505050565b6107fb610fd3565b6108205760405162461bcd60e51b8152600401610817906123b9565b60405180910390fd5b61082981610ff6565b50565b6107ee838383611048565b6000610842600c5490565b82106108805760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610817565b600c8281548110610893576108936123e1565b90600052602060002001549050919050565b6000806000806108b486610908565b90945084925061ffff1690506127106108cd828761240d565b6108d79190612442565b925050509250929050565b6107ee83838360405180602001604052806000815250610d22565b610829816001611222565b6000818152600b60209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282911561094f5780516020820151610969565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b61097b610fd3565b6109975760405162461bcd60e51b8152600401610817906123b9565b61032182826113d1565b60006109ac82611455565b5192915050565b60006001600160a01b0382166109dc576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6009546001600160a01b031690565b610a18610fd3565b610a345760405162461bcd60e51b8152600401610817906123b9565b6108298161156f565b6060600380546106a59061237e565b610a54610fd3565b610a705760405162461bcd60e51b8152600401610817906123b9565b6107ee838383611651565b6001600160a01b038216331415610aa55760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60026010541415610b645760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610817565b6002601055600f54600054610b7a908390612456565b1115610bc85760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420656e6f756768206c617a79206d696e74656420746f6b656e732e00006044820152606401610817565b6000610bd483836116f8565b905080836001600160a01b0316336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de685604051610c1c91815260200190565b60405180910390a45050600160105550565b6060816001600160401b03811115610c4857610c48612005565b604051908082528060200260200182016040528015610c7b57816020015b6060815260200190600190039081610c665790505b50905060005b82811015610d1b57610ceb30858584818110610c9f57610c9f6123e1565b9050602002810190610cb1919061246e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061170592505050565b828281518110610cfd57610cfd6123e1565b60200260200101819052508080610d13906124b4565b915050610c81565b5092915050565b610d2d848484611048565b610d3f836001600160a01b0316611731565b15610d6d57610d5084848484611740565b610d6d576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606000610d8083611829565b905080610d8c846119c5565b604051602001610d9d9291906124cf565b604051602081830303815290604052915050919050565b6000610dbe610fd3565b610dda5760405162461bcd60e51b8152600401610817906123b9565b85610e0f5760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b6044820152606401610817565b6000600f549050610e57818888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ac292505050565b600f919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d6001610e8d8a84612456565b610e9791906124fe565b88888888604051610eac95949392919061253e565b60405180910390a25095945050505050565b60088054610ecb9061237e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef79061237e565b8015610f445780601f10610f1957610100808354040283529160200191610f44565b820191906000526020600020905b815481529060010190602001808311610f2757829003601f168201915b505050505081565b6000805482108015610690575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000610fdd610a01565b6001600160a01b0316336001600160a01b031614905090565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b600061105382611455565b9050836001600160a01b031681600001516001600160a01b03161461108a5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806110a857506110a885336105fb565b806110c35750336110b884610728565b6001600160a01b0316145b9050806110e357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661110a57604051633a954ecd60e21b815260040160405180910390fd5b61111660008487610f77565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166111e95760005482146111e957805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061267683398151915260405160405180910390a45050505050565b600061122d83611455565b80519091508215611293576000336001600160a01b0383161480611256575061125682336105fb565b8061127157503361126686610728565b6001600160a01b0316145b90508061129157604051632ce44b5f60e11b815260040160405180910390fd5b505b61129f60008583610f77565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b038084169190910181166001600160401b03198416811783900482166001908101831690930267ffffffffffffffff67ffffffffffffffff60801b0119909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b17855591890180845292208054919490911661139957600054821461139957805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020612676833981519152908390a4505060018054810190555050565b6127108111156113f35760405162461bcd60e51b815260040161081790612577565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b60408051606081018252600080825260208201819052918101919091528160005481101561155657600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906115545780516001600160a01b0316156114eb579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff161515928101929092521561154f579392505050565b6114eb565b505b604051636f96cda160e11b815260040160405180910390fd5b60006008805461157e9061237e565b80601f01602080910402602001604051908101604052809291908181526020018280546115aa9061237e565b80156115f75780601f106115cc576101008083540402835291602001916115f7565b820191906000526020600020905b8154815290600101906020018083116115da57829003601f168201915b5050855193945061161393600893506020870192509050611df6565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a1681836040516116459291906125a0565b60405180910390a15050565b6127108111156116735760405162461bcd60e51b815260040161081790612577565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b6000546106908383611b2f565b606061172a838360405180606001604052806027815260200161264f60279139611b49565b9392505050565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906117759033908990889088906004016125ce565b6020604051808303816000875af19250505080156117b0575060408051601f3d908101601f191682019092526117ad91810190612601565b60015b61180b573d8080156117de576040519150601f19603f3d011682016040523d82523d6000602084013e6117e3565b606091505b508051611803576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b60606000611836600c5490565b90506000600c80548060200260200160405190810160405280929190818152602001828054801561188657602002820191906000526020600020905b815481526020019060010190808311611872575b5050505050905060005b8281101561198a578181815181106118aa576118aa6123e1565b602002602001015185101561197857600d60008383815181106118cf576118cf6123e1565b6020026020010151815260200190815260200160002080546118f09061237e565b80601f016020809104026020016040519081016040528092919081815260200182805461191c9061237e565b80156119695780601f1061193e57610100808354040283529160200191611969565b820191906000526020600020905b81548152906001019060200180831161194c57829003601f168201915b50505050509350505050919050565b611983600182612456565b9050611890565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610817565b6060816119e95750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a1357806119fd816124b4565b9150611a0c9050600a83612442565b91506119ed565b6000816001600160401b03811115611a2d57611a2d612005565b6040519080825280601f01601f191660200182016040528015611a57576020820181803683370190505b5090505b841561182157611a6c6001836124fe565b9150611a79600a8661261e565b611a84906030612456565b60f81b818381518110611a9957611a996123e1565b60200101906001600160f81b031916908160001a905350611abb600a86612442565b9450611a5b565b600080611acf8486612456565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d602090815260409091208551929450849350611b26929091860190611df6565b50935093915050565b610321828260405180602001604052806000815250611c24565b6060611b5484611731565b611baf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610817565b600080856001600160a01b031685604051611bca9190612632565b600060405180830381855af49150503d8060008114611c05576040519150601f19603f3d011682016040523d82523d6000602084013e611c0a565b606091505b5091509150611c1a828286611dbd565b9695505050505050565b6000546001600160a01b038416611c4d57604051622e076360e81b815260040160405180910390fd5b82611c6b5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b031981166001600160401b038083168b018116918217600160401b6001600160401b031990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b4290931692909202919091179055819081850190611d0490611731565b15611d7a575b60405182906001600160a01b03881690600090600080516020612676833981519152908290a4611d436000878480600101955087611740565b611d60576040516368d2bf6b60e11b815260040160405180910390fd5b808210611d0a578260005414611d7557600080fd5b611dad565b5b6040516001830192906001600160a01b03881690600090600080516020612676833981519152908290a4808210611d7b575b506000908155610d6d9085838684565b60608315611dcc57508161172a565b825115611ddc5782518084602001fd5b8160405162461bcd60e51b81526004016108179190611f1a565b828054611e029061237e565b90600052602060002090601f016020900481019282611e245760008555611e6a565b82601f10611e3d57805160ff1916838001178555611e6a565b82800160010185558215611e6a579182015b82811115611e6a578251825591602001919060010190611e4f565b50611e76929150611e7a565b5090565b5b80821115611e765760008155600101611e7b565b6001600160e01b03198116811461082957600080fd5b600060208284031215611eb757600080fd5b813561172a81611e8f565b60005b83811015611edd578181015183820152602001611ec5565b83811115610d6d5750506000910152565b60008151808452611f06816020860160208601611ec2565b601f01601f19169290920160200192915050565b60208152600061172a6020830184611eee565b600060208284031215611f3f57600080fd5b5035919050565b80356001600160a01b0381168114611f5d57600080fd5b919050565b60008060408385031215611f7557600080fd5b611f7e83611f46565b946020939093013593505050565b600060208284031215611f9e57600080fd5b61172a82611f46565b600080600060608486031215611fbc57600080fd5b611fc584611f46565b9250611fd360208501611f46565b9150604084013590509250925092565b60008060408385031215611ff657600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561203557612035612005565b604051601f8501601f19908116603f0116810190828211818310171561205d5761205d612005565b8160405280935085815286868601111561207657600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156120a257600080fd5b81356001600160401b038111156120b857600080fd5b8201601f810184136120c957600080fd5b6118218482356020840161201b565b6000806000606084860312156120ed57600080fd5b83359250611fd360208501611f46565b6000806040838503121561211057600080fd5b61211983611f46565b91506020830135801515811461212e57600080fd5b809150509250929050565b6000806020838503121561214c57600080fd5b82356001600160401b038082111561216357600080fd5b818501915085601f83011261217757600080fd5b81358181111561218657600080fd5b8660208260051b850101111561219b57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561220257603f198886030184526121f0858351611eee565b945092850192908501906001016121d4565b5092979650505050505050565b6000806000806080858703121561222557600080fd5b61222e85611f46565b935061223c60208601611f46565b92506040850135915060608501356001600160401b0381111561225e57600080fd5b8501601f8101871361226f57600080fd5b61227e8782356020840161201b565b91505092959194509250565b60008083601f84011261229c57600080fd5b5081356001600160401b038111156122b357600080fd5b6020830191508360208285010111156122cb57600080fd5b9250929050565b6000806000806000606086880312156122ea57600080fd5b8535945060208601356001600160401b038082111561230857600080fd5b61231489838a0161228a565b9096509450604088013591508082111561232d57600080fd5b5061233a8882890161228a565b969995985093965092949392505050565b6000806040838503121561235e57600080fd5b61236783611f46565b915061237560208401611f46565b90509250929050565b600181811c9082168061239257607f821691505b602082108114156123b357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612427576124276123f7565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826124515761245161242c565b500490565b60008219821115612469576124696123f7565b500190565b6000808335601e1984360301811261248557600080fd5b8301803591506001600160401b0382111561249f57600080fd5b6020019150368190038213156122cb57600080fd5b60006000198214156124c8576124c86123f7565b5060010190565b600083516124e1818460208801611ec2565b8351908301906124f5818360208801611ec2565b01949350505050565b600082821015612510576125106123f7565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000612558606083018688612515565b828103604084015261256b818587612515565b98975050505050505050565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6040815260006125b36040830185611eee565b82810360208401526125c58185611eee565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611c1a90830184611eee565b60006020828403121561261357600080fd5b815161172a81611e8f565b60008261262d5761262d61242c565b500690565b60008251612644818460208701611ec2565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220533d96cd55076c1392cda241b7d094d7e82bfc49247698d82d3bb2d4f0ea8eb564736f6c634300080c0033",
    "sourceMap": "1601:7203:14:-:0;;;2448:306;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1891:13:25;;2629:5:14;;2636:7;;1891:13:25;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1914:17:25;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;2127:7:25;1941:13;:31;-1:-1:-1;;202:1:218;307:7;:22;2655:26:14::1;2667:13:::0;2655:11:::1;:26::i;:::-;2691:56;2716:17:::0;-1:-1:-1;;;;;2691:56:14;::::1;:24;:56::i;:::-;2448:306:::0;;;;;1601:7203;;1421:172:68;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3430:334:75:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:75;;2326:2:644;3571:25:75;;;2308:21:644;2365:2;2345:18;;;2338:30;-1:-1:-1;;;2384:18:644;;;2377:45;2439:18;;3571:25:75;;;;;;;3531:76;3617:16;:36;;-1:-1:-1;;;;;3617:36:75;;-1:-1:-1;;;;;;3663:32:75;;;;;-1:-1:-1;;;3663:32:75;;;;;;;;3711:46;;2614:25:644;;;3711:46:75;;2602:2:644;2587:18;3711:46:75;;;;;;;3430:334;;:::o;1601:7203:14:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1601:7203:14;;;-1:-1:-1;1601:7203:14;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:644;93:13;;-1:-1:-1;;;;;135:31:644;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:885;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:644;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:644;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;912:3;907:2;902;894:6;890:15;886:24;883:33;880:53;;;929:1;926;919:12;880:53;951:1;942:10;;961:133;975:2;972:1;969:9;961:133;;;1063:14;;;1059:23;;1053:30;1032:14;;;1028:23;;1021:63;986:10;;;;961:133;;;1112:2;1109:1;1106:9;1103:80;;;1171:1;1166:2;1161;1153:6;1149:15;1145:24;1138:35;1103:80;1201:6;328:885;-1:-1:-1;;;;;;328:885:644:o;1218:901::-;1344:6;1352;1360;1368;1376;1429:3;1417:9;1408:7;1404:23;1400:33;1397:53;;;1446:1;1443;1436:12;1397:53;1469:40;1499:9;1469:40;:::i;:::-;1553:2;1538:18;;1532:25;1459:50;;-1:-1:-1;;;;;;1606:14:644;;;1603:34;;;1633:1;1630;1623:12;1603:34;1656:61;1709:7;1700:6;1689:9;1685:22;1656:61;:::i;:::-;1646:71;;1763:2;1752:9;1748:18;1742:25;1726:41;;1792:2;1782:8;1779:16;1776:36;;;1808:1;1805;1798:12;1776:36;;1831:63;1886:7;1875:8;1864:9;1860:24;1831:63;:::i;:::-;1821:73;;;1913:49;1958:2;1947:9;1943:18;1913:49;:::i;:::-;2005:3;1990:19;;1984:26;1903:59;;-1:-1:-1;;;;;;2039:31:644;;2029:42;;2019:70;;2085:1;2082;2075:12;2019:70;2108:5;2098:15;;;1218:901;;;;;;;;:::o;2650:380::-;2729:1;2725:12;;;;2772;;;2793:61;;2847:4;2839:6;2835:17;2825:27;;2793:61;2900:2;2892:6;2889:14;2869:18;2866:38;2863:161;;;2946:10;2941:3;2937:20;2934:1;2927:31;2981:4;2978:1;2971:15;3009:4;3006:1;2999:15;2863:161;;2650:380;;;:::o;:::-;1601:7203:14;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361061018e5760003560e01c806363b45e2d116100dd57806363b45e2d146103fc57806370a082311461041157806383040532146104315780638da5cb5b14610461578063938e3d7b1461047657806395d89b41146104965780639bcf7a15146104ab578063a22cb465146104cb578063aad3ec96146104eb578063ac9650d8146104fe578063acd083f81461052b578063b24f2d3914610540578063b88d4fde1461056b578063c87b56dd1461058b578063d37c353b146105ab578063e8a3d485146105cb578063e985e9c5146105e057600080fd5b806301ffc9a71461019357806306fdde03146101c8578063081812fc146101ea578063095ea7b31461022257806313af40351461024457806318160ddd1461026457806323b872dd146102875780632419f51b146102a75780632a55205a146102c75780632f92023a146103065780633b1475a71461032557806342842e0e1461033a57806342966c681461035a5780634cc157df1461037a578063600dd5ea146103bc5780636352211e146103dc575b600080fd5b34801561019f57600080fd5b506101b36101ae366004611ea5565b610629565b60405190151581526020015b60405180910390f35b3480156101d457600080fd5b506101dd610696565b6040516101bf9190611f1a565b3480156101f657600080fd5b5061020a610205366004611f2d565b610728565b6040516001600160a01b0390911681526020016101bf565b34801561022e57600080fd5b5061024261023d366004611f62565b61076c565b005b34801561025057600080fd5b5061024261025f366004611f8c565b6107f3565b34801561027057600080fd5b50600154600054035b6040519081526020016101bf565b34801561029357600080fd5b506102426102a2366004611fa7565b61082c565b3480156102b357600080fd5b506102796102c2366004611f2d565b610837565b3480156102d357600080fd5b506102e76102e2366004611fe3565b6108a5565b604080516001600160a01b0390931683526020830191909152016101bf565b34801561031257600080fd5b50610242610321366004611f62565b5050565b34801561033157600080fd5b50600f54610279565b34801561034657600080fd5b50610242610355366004611fa7565b6108e2565b34801561036657600080fd5b50610242610375366004611f2d565b6108fd565b34801561038657600080fd5b5061039a610395366004611f2d565b610908565b604080516001600160a01b03909316835261ffff9091166020830152016101bf565b3480156103c857600080fd5b506102426103d7366004611f62565b610973565b3480156103e857600080fd5b5061020a6103f7366004611f2d565b6109a1565b34801561040857600080fd5b50600c54610279565b34801561041d57600080fd5b5061027961042c366004611f8c565b6109b3565b34801561043d57600080fd5b506101b361044c366004611f2d565b600e6020526000908152604090205460ff1681565b34801561046d57600080fd5b5061020a610a01565b34801561048257600080fd5b50610242610491366004612090565b610a10565b3480156104a257600080fd5b506101dd610a3d565b3480156104b757600080fd5b506102426104c63660046120d8565b610a4c565b3480156104d757600080fd5b506102426104e63660046120fd565b610a7b565b6102426104f9366004611f62565b610b11565b34801561050a57600080fd5b5061051e610519366004612139565b610c2e565b6040516101bf91906121ad565b34801561053757600080fd5b50600054610279565b34801561054c57600080fd5b50600a546001600160a01b03811690600160a01b900461ffff1661039a565b34801561057757600080fd5b5061024261058636600461220f565b610d22565b34801561059757600080fd5b506101dd6105a6366004611f2d565b610d73565b3480156105b757600080fd5b506102796105c63660046122d2565b610db4565b3480156105d757600080fd5b506101dd610ebe565b3480156105ec57600080fd5b506101b36105fb36600461234b565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b03198316148061065a57506380ac58cd60e01b6001600160e01b03198316145b806106755750635b5e139f60e01b6001600160e01b03198316145b8061069057506001600160e01b0319821663152a902d60e11b145b92915050565b6060600280546106a59061237e565b80601f01602080910402602001604051908101604052809291908181526020018280546106d19061237e565b801561071e5780601f106106f35761010080835404028352916020019161071e565b820191906000526020600020905b81548152906001019060200180831161070157829003601f168201915b5050505050905090565b600061073382610f4c565b610750576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610777826109a1565b9050806001600160a01b0316836001600160a01b031614156107ac5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216146107e3576107c681336105fb565b6107e3576040516367d9dca160e11b815260040160405180910390fd5b6107ee838383610f77565b505050565b6107fb610fd3565b6108205760405162461bcd60e51b8152600401610817906123b9565b60405180910390fd5b61082981610ff6565b50565b6107ee838383611048565b6000610842600c5490565b82106108805760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610817565b600c8281548110610893576108936123e1565b90600052602060002001549050919050565b6000806000806108b486610908565b90945084925061ffff1690506127106108cd828761240d565b6108d79190612442565b925050509250929050565b6107ee83838360405180602001604052806000815250610d22565b610829816001611222565b6000818152600b60209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282911561094f5780516020820151610969565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b61097b610fd3565b6109975760405162461bcd60e51b8152600401610817906123b9565b61032182826113d1565b60006109ac82611455565b5192915050565b60006001600160a01b0382166109dc576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6009546001600160a01b031690565b610a18610fd3565b610a345760405162461bcd60e51b8152600401610817906123b9565b6108298161156f565b6060600380546106a59061237e565b610a54610fd3565b610a705760405162461bcd60e51b8152600401610817906123b9565b6107ee838383611651565b6001600160a01b038216331415610aa55760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60026010541415610b645760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610817565b6002601055600f54600054610b7a908390612456565b1115610bc85760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420656e6f756768206c617a79206d696e74656420746f6b656e732e00006044820152606401610817565b6000610bd483836116f8565b905080836001600160a01b0316336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de685604051610c1c91815260200190565b60405180910390a45050600160105550565b6060816001600160401b03811115610c4857610c48612005565b604051908082528060200260200182016040528015610c7b57816020015b6060815260200190600190039081610c665790505b50905060005b82811015610d1b57610ceb30858584818110610c9f57610c9f6123e1565b9050602002810190610cb1919061246e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061170592505050565b828281518110610cfd57610cfd6123e1565b60200260200101819052508080610d13906124b4565b915050610c81565b5092915050565b610d2d848484611048565b610d3f836001600160a01b0316611731565b15610d6d57610d5084848484611740565b610d6d576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606000610d8083611829565b905080610d8c846119c5565b604051602001610d9d9291906124cf565b604051602081830303815290604052915050919050565b6000610dbe610fd3565b610dda5760405162461bcd60e51b8152600401610817906123b9565b85610e0f5760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b6044820152606401610817565b6000600f549050610e57818888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ac292505050565b600f919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d6001610e8d8a84612456565b610e9791906124fe565b88888888604051610eac95949392919061253e565b60405180910390a25095945050505050565b60088054610ecb9061237e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef79061237e565b8015610f445780601f10610f1957610100808354040283529160200191610f44565b820191906000526020600020905b815481529060010190602001808311610f2757829003601f168201915b505050505081565b6000805482108015610690575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000610fdd610a01565b6001600160a01b0316336001600160a01b031614905090565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b600061105382611455565b9050836001600160a01b031681600001516001600160a01b03161461108a5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806110a857506110a885336105fb565b806110c35750336110b884610728565b6001600160a01b0316145b9050806110e357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661110a57604051633a954ecd60e21b815260040160405180910390fd5b61111660008487610f77565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166111e95760005482146111e957805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061267683398151915260405160405180910390a45050505050565b600061122d83611455565b80519091508215611293576000336001600160a01b0383161480611256575061125682336105fb565b8061127157503361126686610728565b6001600160a01b0316145b90508061129157604051632ce44b5f60e11b815260040160405180910390fd5b505b61129f60008583610f77565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b038084169190910181166001600160401b03198416811783900482166001908101831690930267ffffffffffffffff67ffffffffffffffff60801b0119909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b17855591890180845292208054919490911661139957600054821461139957805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020612676833981519152908390a4505060018054810190555050565b6127108111156113f35760405162461bcd60e51b815260040161081790612577565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b60408051606081018252600080825260208201819052918101919091528160005481101561155657600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906115545780516001600160a01b0316156114eb579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff161515928101929092521561154f579392505050565b6114eb565b505b604051636f96cda160e11b815260040160405180910390fd5b60006008805461157e9061237e565b80601f01602080910402602001604051908101604052809291908181526020018280546115aa9061237e565b80156115f75780601f106115cc576101008083540402835291602001916115f7565b820191906000526020600020905b8154815290600101906020018083116115da57829003601f168201915b5050855193945061161393600893506020870192509050611df6565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a1681836040516116459291906125a0565b60405180910390a15050565b6127108111156116735760405162461bcd60e51b815260040161081790612577565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b6000546106908383611b2f565b606061172a838360405180606001604052806027815260200161264f60279139611b49565b9392505050565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906117759033908990889088906004016125ce565b6020604051808303816000875af19250505080156117b0575060408051601f3d908101601f191682019092526117ad91810190612601565b60015b61180b573d8080156117de576040519150601f19603f3d011682016040523d82523d6000602084013e6117e3565b606091505b508051611803576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b60606000611836600c5490565b90506000600c80548060200260200160405190810160405280929190818152602001828054801561188657602002820191906000526020600020905b815481526020019060010190808311611872575b5050505050905060005b8281101561198a578181815181106118aa576118aa6123e1565b602002602001015185101561197857600d60008383815181106118cf576118cf6123e1565b6020026020010151815260200190815260200160002080546118f09061237e565b80601f016020809104026020016040519081016040528092919081815260200182805461191c9061237e565b80156119695780601f1061193e57610100808354040283529160200191611969565b820191906000526020600020905b81548152906001019060200180831161194c57829003601f168201915b50505050509350505050919050565b611983600182612456565b9050611890565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610817565b6060816119e95750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a1357806119fd816124b4565b9150611a0c9050600a83612442565b91506119ed565b6000816001600160401b03811115611a2d57611a2d612005565b6040519080825280601f01601f191660200182016040528015611a57576020820181803683370190505b5090505b841561182157611a6c6001836124fe565b9150611a79600a8661261e565b611a84906030612456565b60f81b818381518110611a9957611a996123e1565b60200101906001600160f81b031916908160001a905350611abb600a86612442565b9450611a5b565b600080611acf8486612456565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d602090815260409091208551929450849350611b26929091860190611df6565b50935093915050565b610321828260405180602001604052806000815250611c24565b6060611b5484611731565b611baf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610817565b600080856001600160a01b031685604051611bca9190612632565b600060405180830381855af49150503d8060008114611c05576040519150601f19603f3d011682016040523d82523d6000602084013e611c0a565b606091505b5091509150611c1a828286611dbd565b9695505050505050565b6000546001600160a01b038416611c4d57604051622e076360e81b815260040160405180910390fd5b82611c6b5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b031981166001600160401b038083168b018116918217600160401b6001600160401b031990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b4290931692909202919091179055819081850190611d0490611731565b15611d7a575b60405182906001600160a01b03881690600090600080516020612676833981519152908290a4611d436000878480600101955087611740565b611d60576040516368d2bf6b60e11b815260040160405180910390fd5b808210611d0a578260005414611d7557600080fd5b611dad565b5b6040516001830192906001600160a01b03881690600090600080516020612676833981519152908290a4808210611d7b575b506000908155610d6d9085838684565b60608315611dcc57508161172a565b825115611ddc5782518084602001fd5b8160405162461bcd60e51b81526004016108179190611f1a565b828054611e029061237e565b90600052602060002090601f016020900481019282611e245760008555611e6a565b82601f10611e3d57805160ff1916838001178555611e6a565b82800160010185558215611e6a579182015b82811115611e6a578251825591602001919060010190611e4f565b50611e76929150611e7a565b5090565b5b80821115611e765760008155600101611e7b565b6001600160e01b03198116811461082957600080fd5b600060208284031215611eb757600080fd5b813561172a81611e8f565b60005b83811015611edd578181015183820152602001611ec5565b83811115610d6d5750506000910152565b60008151808452611f06816020860160208601611ec2565b601f01601f19169290920160200192915050565b60208152600061172a6020830184611eee565b600060208284031215611f3f57600080fd5b5035919050565b80356001600160a01b0381168114611f5d57600080fd5b919050565b60008060408385031215611f7557600080fd5b611f7e83611f46565b946020939093013593505050565b600060208284031215611f9e57600080fd5b61172a82611f46565b600080600060608486031215611fbc57600080fd5b611fc584611f46565b9250611fd360208501611f46565b9150604084013590509250925092565b60008060408385031215611ff657600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561203557612035612005565b604051601f8501601f19908116603f0116810190828211818310171561205d5761205d612005565b8160405280935085815286868601111561207657600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156120a257600080fd5b81356001600160401b038111156120b857600080fd5b8201601f810184136120c957600080fd5b6118218482356020840161201b565b6000806000606084860312156120ed57600080fd5b83359250611fd360208501611f46565b6000806040838503121561211057600080fd5b61211983611f46565b91506020830135801515811461212e57600080fd5b809150509250929050565b6000806020838503121561214c57600080fd5b82356001600160401b038082111561216357600080fd5b818501915085601f83011261217757600080fd5b81358181111561218657600080fd5b8660208260051b850101111561219b57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561220257603f198886030184526121f0858351611eee565b945092850192908501906001016121d4565b5092979650505050505050565b6000806000806080858703121561222557600080fd5b61222e85611f46565b935061223c60208601611f46565b92506040850135915060608501356001600160401b0381111561225e57600080fd5b8501601f8101871361226f57600080fd5b61227e8782356020840161201b565b91505092959194509250565b60008083601f84011261229c57600080fd5b5081356001600160401b038111156122b357600080fd5b6020830191508360208285010111156122cb57600080fd5b9250929050565b6000806000806000606086880312156122ea57600080fd5b8535945060208601356001600160401b038082111561230857600080fd5b61231489838a0161228a565b9096509450604088013591508082111561232d57600080fd5b5061233a8882890161228a565b969995985093965092949392505050565b6000806040838503121561235e57600080fd5b61236783611f46565b915061237560208401611f46565b90509250929050565b600181811c9082168061239257607f821691505b602082108114156123b357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612427576124276123f7565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826124515761245161242c565b500490565b60008219821115612469576124696123f7565b500190565b6000808335601e1984360301811261248557600080fd5b8301803591506001600160401b0382111561249f57600080fd5b6020019150368190038213156122cb57600080fd5b60006000198214156124c8576124c86123f7565b5060010190565b600083516124e1818460208801611ec2565b8351908301906124f5818360208801611ec2565b01949350505050565b600082821015612510576125106123f7565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000612558606083018688612515565b828103604084015261256b818587612515565b98975050505050505050565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6040815260006125b36040830185611eee565b82810360208401526125c58185611eee565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611c1a90830184611eee565b60006020828403121561261357600080fd5b815161172a81611e8f565b60008261262d5761262d61242c565b500690565b60008251612644818460208701611ec2565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220533d96cd55076c1392cda241b7d094d7e82bfc49247698d82d3bb2d4f0ea8eb564736f6c634300080c0033",
    "sourceMap": "1601:7203:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3046:444;;;;;;;;;;-1:-1:-1;3046:444:14;;;;;:::i;:::-;;:::i;:::-;;;565:14:644;;558:22;540:41;;528:2;513:18;3046:444:14;;;;;;;;6137:98:25;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;7623:200::-;;;;;;;;;;-1:-1:-1;7623:200:25;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:644;;;1674:51;;1662:2;1647:18;7623:200:25;1528:203:644;7170:392:25;;;;;;;;;;-1:-1:-1;7170:392:25;;;;;:::i;:::-;;:::i;:::-;;1133:173:68;;;;;;;;;;-1:-1:-1;1133:173:68;;;;;:::i;:::-;;:::i;2290:306:25:-;;;;;;;;;;-1:-1:-1;2549:12:25;;2343:7;2533:13;:28;2290:306;;;2510:25:644;;;2498:2;2483:18;2290:306:25;2364:177:644;8462:164:25;;;;;;;;;;-1:-1:-1;8462:164:25;;;;;:::i;:::-;;:::i;1973:203:52:-;;;;;;;;;;-1:-1:-1;1973:203:52;;;;;:::i;:::-;;:::i;1421:347:75:-;;;;;;;;;;-1:-1:-1;1421:347:75;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;3324:32:644;;;3306:51;;3388:2;3373:18;;3366:34;;;;3279:18;1421:347:75;3132:274:644;6153:80:14;;;;;;;;;;-1:-1:-1;6153:80:14;;;;;:::i;:::-;;;;6676:112;;;;;;;;;;-1:-1:-1;6760:21:14;;6676:112;;8692:179:25;;;;;;;;;;-1:-1:-1;8692:179:25;;;;;:::i;:::-;;:::i;6507:87:14:-;;;;;;;;;;-1:-1:-1;6507:87:14;;;;;:::i;:::-;;:::i;2008:381:75:-;;;;;;;;;;-1:-1:-1;2008:381:75;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;3601:32:644;;;3583:51;;3682:6;3670:19;;;3665:2;3650:18;;3643:47;3556:18;2008:381:75;3411:285:644;3087:256:75;;;;;;;;;;-1:-1:-1;3087:256:75;;;;;:::i;:::-;;:::i;5952:123:25:-;;;;;;;;;;-1:-1:-1;5952:123:25;;;;;:::i;:::-;;:::i;1655:96:52:-;;;;;;;;;;-1:-1:-1;1729:8:52;:15;1655:96;;3378:203:25;;;;;;;;;;-1:-1:-1;3378:203:25;;;;;:::i;:::-;;:::i;898:43:52:-;;;;;;;;;;-1:-1:-1;898:43:52;;;;;:::i;:::-;;;;;;;;;;;;;;;;871:86:68;;;;;;;;;;;;;:::i;1003:188:54:-;;;;;;;;;;-1:-1:-1;1003:188:54;;;;;:::i;:::-;;:::i;6299:102:25:-;;;;;;;;;;;;;:::i;4281:288:75:-;;;;;;;;;;-1:-1:-1;4281:288:75;;;;;:::i;:::-;;:::i;7890:282:25:-;;;;;;;;;;-1:-1:-1;7890:282:25;;;;;:::i;:::-;;:::i;5210:533:14:-;;;;;;:::i;:::-;;:::i;698:319:63:-;;;;;;;;;;-1:-1:-1;698:319:63;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6866:105:14:-;;;;;;;;;;-1:-1:-1;6925:7:14;6951:13;6866:105;;2499:144:75;;;;;;;;;;-1:-1:-1;2599:16:75;;-1:-1:-1;;;;;2599:16:75;;;-1:-1:-1;;;2624:10:75;;;;2499:144;;8937:381:25;;;;;;;;;;-1:-1:-1;8937:381:25;;;;;:::i;:::-;;:::i;3904:224:14:-;;;;;;;;;;-1:-1:-1;3904:224:14;;;;;:::i;:::-;;:::i;1254:592:61:-;;;;;;;;;;-1:-1:-1;1254:592:61;;;;;:::i;:::-;;:::i;565:34:54:-;;;;;;;;;;;;;:::i;8238:162:25:-;;;;;;;;;;-1:-1:-1;8238:162:25;;;;;:::i;:::-;-1:-1:-1;;;;;8358:25:25;;;8335:4;8358:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;8238:162;3046:444:14;3149:4;-1:-1:-1;;;;;;;;;3184:25:14;;;;:100;;-1:-1:-1;;;;;;;;;;3259:25:14;;;3184:100;:175;;;-1:-1:-1;;;;;;;;;;3334:25:14;;;3184:175;:274;;;-1:-1:-1;;;;;;;3417:41:14;;-1:-1:-1;;;3417:41:14;3184:274;3165:293;3046:444;-1:-1:-1;;3046:444:14:o;6137:98:25:-;6191:13;6223:5;6216:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6137:98;:::o;7623:200::-;7691:7;7715:16;7723:7;7715;:16::i;:::-;7710:64;;7740:34;;-1:-1:-1;;;7740:34:25;;;;;;;;;;;7710:64;-1:-1:-1;7792:24:25;;;;:15;:24;;;;;;-1:-1:-1;;;;;7792:24:25;;7623:200::o;7170:392::-;7250:13;7266:24;7282:7;7266:15;:24::i;:::-;7250:40;;7310:5;-1:-1:-1;;;;;7304:11:25;:2;-1:-1:-1;;;;;7304:11:25;;7300:48;;;7324:24;;-1:-1:-1;;;7324:24:25;;;;;;;;;;;7300:48;719:10:230;-1:-1:-1;;;;;7363:21:25;;;7359:158;;7403:37;7420:5;719:10:230;8238:162:25;:::i;7403:37::-;7398:119;;7467:35;;-1:-1:-1;;;7467:35:25;;;;;;;;;;;7398:119;7527:28;7536:2;7540:7;7549:5;7527:8;:28::i;:::-;7240:322;7170:392;;:::o;1133:173:68:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:68;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;8462:164:25:-;8591:28;8601:4;8607:2;8611:7;8591:9;:28::i;1973:203:52:-;2037:7;2070:17;1729:8;:15;;1655:96;2070:17;2060:6;:27;2056:81;;2103:23;;-1:-1:-1;;;2103:23:52;;10055:2:644;2103:23:52;;;10037:21:644;10094:2;10074:18;;;10067:30;-1:-1:-1;;;10113:18:644;;;10106:43;10166:18;;2103:23:52;9853:337:644;2056:81:52;2153:8;2162:6;2153:16;;;;;;;;:::i;:::-;;;;;;;;;2146:23;;1973:203;;;:::o;1421:347:75:-;1558:16;1576:21;1614:17;1633:11;1648:31;1671:7;1648:22;:31::i;:::-;1613:66;;-1:-1:-1;1613:66:75;;-1:-1:-1;1613:66:75;;;-1:-1:-1;1755:6:75;1736:15;1613:66;1736:9;:15;:::i;:::-;1735:26;;;;:::i;:::-;1719:42;;1603:165;;1421:347;;;;;:::o;8692:179:25:-;8825:39;8842:4;8848:2;8852:7;8825:39;;;;;;;;;;;;:16;:39::i;6507:87:14:-;6566:21;6572:8;6582:4;6566:5;:21::i;2008:381:75:-;2088:7;2152:29;;;:19;:29;;;;;;;;2115:66;;;;;;;;;;-1:-1:-1;;;;;2115:66:75;;;;;;;;;;;;;;;;2088:7;;2211:39;:171;;2327:25;;2361:19;;;;2211:171;;;2270:16;;-1:-1:-1;;;;;2270:16:75;;;-1:-1:-1;;;2295:10:75;;;;2211:171;2192:190;;;;;2008:381;;;:::o;3087:256::-;3199:20;:18;:20::i;:::-;3194:76;;3235:24;;-1:-1:-1;;;3235:24:75;;;;;;;:::i;3194:76::-;3280:56;3305:17;3324:11;3280:24;:56::i;5952:123:25:-;6016:7;6042:21;6055:7;6042:12;:21::i;:::-;:26;;5952:123;-1:-1:-1;;5952:123:25:o;3378:203::-;3442:7;-1:-1:-1;;;;;3465:19:25;;3461:60;;3493:28;;-1:-1:-1;;;3493:28:25;;;;;;;;;;;3461:60;-1:-1:-1;;;;;;3546:19:25;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;3546:27:25;;3378:203::o;871:86:68:-;944:6;;-1:-1:-1;;;;;944:6:68;;871:86::o;1003:188:54:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:54;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;6299:102:25:-;6355:13;6387:7;6380:14;;;;;:::i;4281:288:75:-;4428:20;:18;:20::i;:::-;4423:76;;4464:24;;-1:-1:-1;;;4464:24:75;;;;;;;:::i;4423:76::-;4509:53;4535:8;4545:10;4557:4;4509:25;:53::i;7890:282:25:-;-1:-1:-1;;;;;7988:24:25;;719:10:230;7988:24:25;7984:54;;;8021:17;;-1:-1:-1;;;8021:17:25;;;;;;;;;;;7984:54;719:10:230;8049:32:25;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;8049:42:25;;;;;;;;;;;;:53;;-1:-1:-1;;8049:53:25;;;;;;;;;;8117:48;;540:41:644;;;8049:42:25;;719:10:230;8117:48:25;;513:18:644;8117:48:25;;;;;;;7890:282;;:::o;5210:533:14:-;245:1:218;548:7;;:19;;540:63;;;;-1:-1:-1;;;540:63:218;;11091:2:644;540:63:218;;;11073:21:644;11130:2;11110:18;;;11103:30;11169:33;11149:18;;;11142:61;11220:18;;540:63:218;10889:355:644;540:63:218;245:1;678:7;:18;5346:21:14::1;::::0;5317:13:::1;::::0;:25:::1;::::0;5333:9;;5317:25:::1;:::i;:::-;:50;;5309:93;;;::::0;-1:-1:-1;;;5309:93:14;;11584:2:644;5309:93:14::1;::::0;::::1;11566:21:644::0;11623:2;11603:18;;;11596:30;11662:32;11642:18;;;11635:60;11712:18;;5309:93:14::1;11382:354:644::0;5309:93:14::1;5523:20;5546:44;5569:9;5580;5546:22;:44::i;:::-;5523:67;;5712:12;5701:9;-1:-1:-1::0;;;;;5675:61:14::1;5689:10;-1:-1:-1::0;;;;;5675:61:14::1;;5726:9;5675:61;;;;2510:25:644::0;;2498:2;2483:18;;2364:177;5675:61:14::1;;;;;;;;-1:-1:-1::0;;202:1:218;851:7;:22;-1:-1:-1;5210:533:14:o;698:319:63:-;775:22;831:4;-1:-1:-1;;;;;819:24:63;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:34;;858:9;853:134;873:15;;;853:134;;;922:54;961:4;968;;973:1;968:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;922:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;922:30:63;;-1:-1:-1;;;922:54:63:i;:::-;909:7;917:1;909:10;;;;;;;;:::i;:::-;;;;;;:67;;;;890:3;;;;;:::i;:::-;;;;853:134;;;;698:319;;;;:::o;8937:381:25:-;9098:28;9108:4;9114:2;9118:7;9098:9;:28::i;:::-;9140:15;:2;-1:-1:-1;;;;;9140:13:25;;:15::i;:::-;9136:176;;;9174:56;9205:4;9211:2;9215:7;9224:5;9174:30;:56::i;:::-;9169:143;;9257:40;;-1:-1:-1;;;9257:40:25;;;;;;;;;;;9169:143;8937:381;;;;:::o;3904:224:14:-;3978:13;4003:22;4028:21;4040:8;4028:11;:21::i;:::-;4003:46;;4090:8;4100:19;:8;:17;:19::i;:::-;4073:47;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4059:62;;;3904:224;;;:::o;1254:592:61:-;1409:15;1441:14;:12;:14::i;:::-;1436:70;;1471:24;;-1:-1:-1;;;1471:24:61;;;;;;;:::i;1436:70::-;1520:12;1516:58;;1548:15;;-1:-1:-1;;;1548:15:61;;13084:2:644;1548:15:61;;;13066:21:644;13123:1;13103:18;;;13096:29;-1:-1:-1;;;13141:18:644;;;13134:35;13186:18;;1548:15:61;12882:328:644;1516:58:61;1584:15;1602:21;;1584:39;;1669:55;1688:7;1697;1706:17;;1669:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:18:61;;-1:-1:-1;;;1669:55:61:i;:::-;1635:21;1634:90;;;;;-1:-1:-1;1757:7:61;1740:74;1786:1;1766:17;1776:7;1757;1766:17;:::i;:::-;:21;;;;:::i;:::-;1789:17;;1808:5;;1740:74;;;;;;;;;;:::i;:::-;;;;;;;;1825:14;1254:592;;;;;;;:::o;565:34:54:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;9564:172:25:-;9621:4;9684:13;;9674:7;:23;9644:85;;;;-1:-1:-1;;9702:20:25;;;;:11;:20;;;;;:27;-1:-1:-1;;;9702:27:25;;;;9701:28;;9564:172::o;18545:189::-;18655:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;18655:29:25;-1:-1:-1;;;;;18655:29:25;;;;;;;;;18699:28;;18655:24;;18699:28;;;;;;;18545:189;;;:::o;8475:115:14:-;8539:4;8576:7;:5;:7::i;:::-;-1:-1:-1;;;;;8562:21:14;:10;-1:-1:-1;;;;;8562:21:14;;8555:28;;8475:115;:::o;1421:172:68:-;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;13620:2082:25:-;13730:35;13768:21;13781:7;13768:12;:21::i;:::-;13730:59;;13826:4;-1:-1:-1;;;;;13804:26:25;:13;:18;;;-1:-1:-1;;;;;13804:26:25;;13800:67;;13839:28;;-1:-1:-1;;;13839:28:25;;;;;;;;;;;13800:67;13878:22;719:10:230;-1:-1:-1;;;;;13904:20:25;;;;:72;;-1:-1:-1;13940:36:25;13957:4;719:10:230;8238:162:25;:::i;13940:36::-;13904:124;;;-1:-1:-1;719:10:230;13992:20:25;14004:7;13992:11;:20::i;:::-;-1:-1:-1;;;;;13992:36:25;;13904:124;13878:151;;14045:17;14040:66;;14071:35;;-1:-1:-1;;;14071:35:25;;;;;;;;;;;14040:66;-1:-1:-1;;;;;14120:16:25;;14116:52;;14145:23;;-1:-1:-1;;;14145:23:25;;;;;;;;;;;14116:52;14284:35;14301:1;14305:7;14314:4;14284:8;:35::i;:::-;-1:-1:-1;;;;;14609:18:25;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;;;;;14609:31:25;;;-1:-1:-1;;;;;14609:31:25;;;-1:-1:-1;;14609:31:25;;;;;;;14654:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;14654:29:25;;;;;;;;;;;14732:20;;;:11;:20;;;;;;14766:18;;-1:-1:-1;;;;;;14798:49:25;;;;-1:-1:-1;;;14831:15:25;14798:49;;;;;;;;;;15117:11;;15176:24;;;;;15218:13;;14732:20;;15176:24;;15218:13;15214:377;;15425:13;;15410:11;:28;15406:171;;15462:20;;15530:28;;;;-1:-1:-1;;;;;15504:54:25;-1:-1:-1;;;15504:54:25;-1:-1:-1;;;;;;15504:54:25;;;-1:-1:-1;;;;;15462:20:25;;15504:54;;;;15406:171;14585:1016;;;15635:7;15631:2;-1:-1:-1;;;;;15616:27:25;15625:4;-1:-1:-1;;;;;15616:27:25;-1:-1:-1;;;;;;;;;;;15616:27:25;;;;;;;;;13720:1982;;13620:2082;;;:::o;16079:2355::-;16158:35;16196:21;16209:7;16196:12;:21::i;:::-;16243:18;;16158:59;;-1:-1:-1;16272:284:25;;;;16305:22;719:10:230;-1:-1:-1;;;;;16331:20:25;;;;:76;;-1:-1:-1;16371:36:25;16388:4;719:10:230;8238:162:25;:::i;16371:36::-;16331:132;;;-1:-1:-1;719:10:230;16427:20:25;16439:7;16427:11;:20::i;:::-;-1:-1:-1;;;;;16427:36:25;;16331:132;16305:159;;16484:17;16479:66;;16510:35;;-1:-1:-1;;;16510:35:25;;;;;;;;;;;16479:66;16291:265;16272:284;16679:35;16696:1;16700:7;16709:4;16679:8;:35::i;:::-;-1:-1:-1;;;;;17038:18:25;;;17004:31;17038:18;;;:12;:18;;;;;;;;17070:24;;-1:-1:-1;;;;;;;;;;17070:24:25;;;;;;;;;-1:-1:-1;;;;;;17070:24:25;;;;17108:29;;;;;17093:1;17108:29;;;;;;;;-1:-1:-1;;;;;;17108:29:25;;;;;;;;;;17267:20;;;:11;:20;;;;;;17301;;-1:-1:-1;;;;17368:15:25;17335:49;;;-1:-1:-1;;;17335:49:25;-1:-1:-1;;;;;;17335:49:25;;;;;;;;;;17398:22;-1:-1:-1;;;17398:22:25;;;17686:11;;;17745:24;;;;;17787:13;;17038:18;;17745:24;;17787:13;17783:377;;17994:13;;17979:11;:28;17975:171;;18031:20;;18099:28;;;;-1:-1:-1;;;;;18073:54:25;-1:-1:-1;;;18073:54:25;-1:-1:-1;;;;;;18073:54:25;;;-1:-1:-1;;;;;18031:20:25;;18073:54;;;;17975:171;-1:-1:-1;;18185:35:25;;18212:7;;-1:-1:-1;18208:1:25;;-1:-1:-1;;;;;;18185:35:25;;;-1:-1:-1;;;;;;;;;;;18185:35:25;18208:1;;18185:35;-1:-1:-1;;18403:12:25;:14;;;;;;-1:-1:-1;;16079:2355:25:o;3430:334:75:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:75;;;;;;;:::i;3531:76::-;3617:16;:36;;-1:-1:-1;;;;;3617:36:75;;-1:-1:-1;;;;;;3663:32:75;;;;;-1:-1:-1;;;3663:32:75;;;;;;;;3711:46;;2510:25:644;;;3711:46:75;;2498:2:644;2483:18;3711:46:75;;;;;;;3430:334;;:::o;4721:1174:25:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;4831:7:25;4929:13;;4922:4;:20;4918:913;;;4966:31;5000:17;;;:11;:17;;;;;;;;;4966:51;;;;;;;;;-1:-1:-1;;;;;4966:51:25;;;;-1:-1:-1;;;4966:51:25;;-1:-1:-1;;;;;4966:51:25;;;;;;;;-1:-1:-1;;;4966:51:25;;;;;;;;;;;;;;5039:774;;5092:14;;-1:-1:-1;;;;;5092:28:25;;5088:107;;5159:9;4721:1174;-1:-1:-1;;;4721:1174:25:o;5088:107::-;-1:-1:-1;;;5555:6:25;5603:17;;;;:11;:17;;;;;;;;;5591:29;;;;;;;;;-1:-1:-1;;;;;5591:29:25;;;;;-1:-1:-1;;;5591:29:25;;-1:-1:-1;;;;;5591:29:25;;;;;;;;-1:-1:-1;;;5591:29:25;;;;;;;;;;;;;5654:28;5650:115;;5725:9;4721:1174;-1:-1:-1;;;4721:1174:25:o;5650:115::-;5512:279;;;4944:887;4918:913;5857:31;;-1:-1:-1;;;5857:31:25;;;;;;;;;;;1273:185:54;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1384:18:54;;1339:35;;-1:-1:-1;1384:18:54;;:11;;-1:-1:-1;1384:18:54;;;;-1:-1:-1;1384:18:54;-1:-1:-1;1384:18:54;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4671:362:75:-;4818:6;4811:4;:13;4807:69;;;4840:25;;-1:-1:-1;;;4840:25:75;;;;;;;:::i;4807:69::-;4918:49;;;;;;;;-1:-1:-1;;;;;4918:49:75;;;;;;;;;;;;;-1:-1:-1;4886:29:75;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4886:81:75;;;;;;;;;;;-1:-1:-1;4886:81:75;;;;;;;4983:43;;2510:25:644;;;4918:49:75;;4886:29;;4983:43;;2483:18:644;4983:43:75;;;;;;;4671:362;;;:::o;7735:232:14:-;7855:20;7906:13;7929:31;7939:9;7950;7929;:31::i;6538:198:288:-;6621:12;6652:77;6673:6;6681:4;6652:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6645:84;6538:198;-1:-1:-1;;;6538:198:288:o;1137:320::-;-1:-1:-1;;;;;1427:19:288;;:23;;;1137:320::o;19215:650:25:-;19393:72;;-1:-1:-1;;;19393:72:25;;19373:4;;-1:-1:-1;;;;;19393:36:25;;;;;:72;;719:10:230;;19444:4:25;;19450:7;;19459:5;;19393:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19393:72:25;;;;;;;;-1:-1:-1;;19393:72:25;;;;;;;;;;;;:::i;:::-;;;19389:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19624:13:25;;19620:229;;19669:40;;-1:-1:-1;;;19669:40:25;;;;;;;;;;;19620:229;19809:6;19803:13;19794:6;19790:2;19786:15;19779:38;19389:470;-1:-1:-1;;;;;;19511:55:25;-1:-1:-1;;;19511:55:25;;-1:-1:-1;19389:470:25;19215:650;;;;;;:::o;2849:390:52:-;2911:13;2936:25;2964:17;1729:8;:15;;1655:96;2964:17;2936:45;;2991:24;3018:8;2991:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3042:9;3037:161;3061:17;3057:1;:21;3037:161;;;3117:7;3125:1;3117:10;;;;;;;;:::i;:::-;;;;;;;3106:8;:21;3102:86;;;3154:7;:19;3162:7;3170:1;3162:10;;;;;;;;:::i;:::-;;;;;;;3154:19;;;;;;;;;;;3147:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:390;;;:::o;3102:86::-;3080:6;3085:1;3080:6;;:::i;:::-;;;3037:161;;;-1:-1:-1;3207:25:52;;-1:-1:-1;;;3207:25:52;;15810:2:644;3207:25:52;;;15792:21:644;15849:2;15829:18;;;15822:30;-1:-1:-1;;;15868:18:644;;;15861:45;15923:18;;3207:25:52;15608:339:644;305:703:292;361:13;578:10;574:51;;-1:-1:-1;;604:10:292;;;;;;;;;;;;-1:-1:-1;;;604:10:292;;;;;305:703::o;574:51::-;649:5;634:12;688:75;695:9;;688:75;;720:8;;;;:::i;:::-;;-1:-1:-1;742:10:292;;-1:-1:-1;750:2:292;742:10;;:::i;:::-;;;688:75;;;772:19;804:6;-1:-1:-1;;;;;794:17:292;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;794:17:292;;772:39;;821:150;828:10;;821:150;;854:11;864:1;854:11;;:::i;:::-;;-1:-1:-1;922:10:292;930:2;922:5;:10;:::i;:::-;909:24;;:2;:24;:::i;:::-;896:39;;879:6;886;879:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;879:56:292;;;;;;;;-1:-1:-1;949:11:292;958:2;949:11;;:::i;:::-;;;821:150;;4535:362:52;4685:25;;4749:24;4760:13;4749:8;:24;:::i;:::-;4821:8;:22;;;;;;;;;;;;;-1:-1:-1;4854:16:52;;;:7;4821:22;4854:16;;;;;;;:36;;4739:34;;-1:-1:-1;4739:34:52;;-1:-1:-1;4854:36:52;;:16;;:36;;;;:::i;:::-;;4535:362;;;;;;:::o;9815:102:25:-;9883:27;9893:2;9897:8;9883:27;;;;;;;;;;;;:9;:27::i;6922:387:288:-;7063:12;7095:18;7106:6;7095:10;:18::i;:::-;7087:69;;;;-1:-1:-1;;;7087:69:288;;16271:2:644;7087:69:288;;;16253:21:644;16310:2;16290:18;;;16283:30;16349:34;16329:18;;;16322:62;-1:-1:-1;;;16400:18:644;;;16393:36;16446:19;;7087:69:288;16069:402:644;7087:69:288;7168:12;7182:23;7209:6;-1:-1:-1;;;;;7209:19:288;7229:4;7209:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7167:67;;;;7251:51;7268:7;7277:10;7289:12;7251:16;:51::i;:::-;7244:58;6922:387;-1:-1:-1;;;;;;6922:387:288:o;10277:1708:25:-;10395:20;10418:13;-1:-1:-1;;;;;10445:16:25;;10441:48;;10470:19;;-1:-1:-1;;;10470:19:25;;;;;;;;;;;10441:48;10503:13;10499:44;;10525:18;;-1:-1:-1;;;10525:18:25;;;;;;;;;;;10499:44;-1:-1:-1;;;;;10886:16:25;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;;;;;10944:49:25;;-1:-1:-1;;;;;10886:44:25;;;;;;;10944:49;;;-1:-1:-1;;;;;;;;;10886:44:25;;;;;;10944:49;;;;;;;;;;;;;;;;11008:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;11057:66:25;;;-1:-1:-1;;;11107:15:25;11057:66;;;;;;;;;;;;;11008:25;;11201:23;;;;11243:15;;:13;:15::i;:::-;11239:618;;;11278:308;11308:38;;11333:12;;-1:-1:-1;;;;;11308:38:25;;;11325:1;;-1:-1:-1;;;;;;;;;;;11308:38:25;11325:1;;11308:38;11373:69;11412:1;11416:2;11420:14;;;;;;11436:5;11373:30;:69::i;:::-;11368:172;;11477:40;;-1:-1:-1;;;11477:40:25;;;;;;;;;;;11368:172;11581:3;11566:12;:18;11278:308;;11665:12;11648:13;;:29;11644:43;;11679:8;;;11644:43;11239:618;;;11726:117;11756:40;;11781:14;;;;;-1:-1:-1;;;;;11756:40:25;;;11773:1;;-1:-1:-1;;;;;;;;;;;11756:40:25;11773:1;;11756:40;11838:3;11823:12;:18;11726:117;;11239:618;-1:-1:-1;11870:13:25;:28;;;11918:60;;11951:2;11955:12;11969:8;11918:60;:::i;7529:692:288:-;7675:12;7703:7;7699:516;;;-1:-1:-1;7733:10:288;7726:17;;7699:516;7844:17;;:21;7840:365;;8038:10;8032:17;8098:15;8085:10;8081:2;8077:19;8070:44;7840:365;8177:12;8170:20;;-1:-1:-1;;;8170:20:288;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:644;-1:-1:-1;;;;;;88:32:644;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:644;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:644;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:644:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:644;;1343:180;-1:-1:-1;1343:180:644:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:644;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:644:o;2173:186::-;2232:6;2285:2;2273:9;2264:7;2260:23;2256:32;2253:52;;;2301:1;2298;2291:12;2253:52;2324:29;2343:9;2324:29;:::i;2546:328::-;2623:6;2631;2639;2692:2;2680:9;2671:7;2667:23;2663:32;2660:52;;;2708:1;2705;2698:12;2660:52;2731:29;2750:9;2731:29;:::i;:::-;2721:39;;2779:38;2813:2;2802:9;2798:18;2779:38;:::i;:::-;2769:48;;2864:2;2853:9;2849:18;2836:32;2826:42;;2546:328;;;;;:::o;2879:248::-;2947:6;2955;3008:2;2996:9;2987:7;2983:23;2979:32;2976:52;;;3024:1;3021;3014:12;2976:52;-1:-1:-1;;3047:23:644;;;3117:2;3102:18;;;3089:32;;-1:-1:-1;2879:248:644:o;3701:127::-;3762:10;3757:3;3753:20;3750:1;3743:31;3793:4;3790:1;3783:15;3817:4;3814:1;3807:15;3833:632;3898:5;-1:-1:-1;;;;;3969:2:644;3961:6;3958:14;3955:40;;;3975:18;;:::i;:::-;4050:2;4044:9;4018:2;4104:15;;-1:-1:-1;;4100:24:644;;;4126:2;4096:33;4092:42;4080:55;;;4150:18;;;4170:22;;;4147:46;4144:72;;;4196:18;;:::i;:::-;4236:10;4232:2;4225:22;4265:6;4256:15;;4295:6;4287;4280:22;4335:3;4326:6;4321:3;4317:16;4314:25;4311:45;;;4352:1;4349;4342:12;4311:45;4402:6;4397:3;4390:4;4382:6;4378:17;4365:44;4457:1;4450:4;4441:6;4433;4429:19;4425:30;4418:41;;;;3833:632;;;;;:::o;4470:451::-;4539:6;4592:2;4580:9;4571:7;4567:23;4563:32;4560:52;;;4608:1;4605;4598:12;4560:52;4648:9;4635:23;-1:-1:-1;;;;;4673:6:644;4670:30;4667:50;;;4713:1;4710;4703:12;4667:50;4736:22;;4789:4;4781:13;;4777:27;-1:-1:-1;4767:55:644;;4818:1;4815;4808:12;4767:55;4841:74;4907:7;4902:2;4889:16;4884:2;4880;4876:11;4841:74;:::i;4926:322::-;5003:6;5011;5019;5072:2;5060:9;5051:7;5047:23;5043:32;5040:52;;;5088:1;5085;5078:12;5040:52;5124:9;5111:23;5101:33;;5153:38;5187:2;5176:9;5172:18;5153:38;:::i;5253:347::-;5318:6;5326;5379:2;5367:9;5358:7;5354:23;5350:32;5347:52;;;5395:1;5392;5385:12;5347:52;5418:29;5437:9;5418:29;:::i;:::-;5408:39;;5497:2;5486:9;5482:18;5469:32;5544:5;5537:13;5530:21;5523:5;5520:32;5510:60;;5566:1;5563;5556:12;5510:60;5589:5;5579:15;;;5253:347;;;;;:::o;5605:626::-;5702:6;5710;5763:2;5751:9;5742:7;5738:23;5734:32;5731:52;;;5779:1;5776;5769:12;5731:52;5819:9;5806:23;-1:-1:-1;;;;;5889:2:644;5881:6;5878:14;5875:34;;;5905:1;5902;5895:12;5875:34;5943:6;5932:9;5928:22;5918:32;;5988:7;5981:4;5977:2;5973:13;5969:27;5959:55;;6010:1;6007;6000:12;5959:55;6050:2;6037:16;6076:2;6068:6;6065:14;6062:34;;;6092:1;6089;6082:12;6062:34;6145:7;6140:2;6130:6;6127:1;6123:14;6119:2;6115:23;6111:32;6108:45;6105:65;;;6166:1;6163;6156:12;6105:65;6197:2;6189:11;;;;;6219:6;;-1:-1:-1;5605:626:644;;-1:-1:-1;;;;5605:626:644:o;6236:801::-;6396:4;6425:2;6465;6454:9;6450:18;6495:2;6484:9;6477:21;6518:6;6553;6547:13;6584:6;6576;6569:22;6622:2;6611:9;6607:18;6600:25;;6684:2;6674:6;6671:1;6667:14;6656:9;6652:30;6648:39;6634:53;;6722:2;6714:6;6710:15;6743:1;6753:255;6767:6;6764:1;6761:13;6753:255;;;6860:2;6856:7;6844:9;6836:6;6832:22;6828:36;6823:3;6816:49;6888:40;6921:6;6912;6906:13;6888:40;:::i;:::-;6878:50;-1:-1:-1;6986:12:644;;;;6951:15;;;;6789:1;6782:9;6753:255;;;-1:-1:-1;7025:6:644;;6236:801;-1:-1:-1;;;;;;;6236:801:644:o;7042:667::-;7137:6;7145;7153;7161;7214:3;7202:9;7193:7;7189:23;7185:33;7182:53;;;7231:1;7228;7221:12;7182:53;7254:29;7273:9;7254:29;:::i;:::-;7244:39;;7302:38;7336:2;7325:9;7321:18;7302:38;:::i;:::-;7292:48;;7387:2;7376:9;7372:18;7359:32;7349:42;;7442:2;7431:9;7427:18;7414:32;-1:-1:-1;;;;;7461:6:644;7458:30;7455:50;;;7501:1;7498;7491:12;7455:50;7524:22;;7577:4;7569:13;;7565:27;-1:-1:-1;7555:55:644;;7606:1;7603;7596:12;7555:55;7629:74;7695:7;7690:2;7677:16;7672:2;7668;7664:11;7629:74;:::i;:::-;7619:84;;;7042:667;;;;;;;:::o;7714:348::-;7766:8;7776:6;7830:3;7823:4;7815:6;7811:17;7807:27;7797:55;;7848:1;7845;7838:12;7797:55;-1:-1:-1;7871:20:644;;-1:-1:-1;;;;;7903:30:644;;7900:50;;;7946:1;7943;7936:12;7900:50;7983:4;7975:6;7971:17;7959:29;;8035:3;8028:4;8019:6;8011;8007:19;8003:30;8000:39;7997:59;;;8052:1;8049;8042:12;7997:59;7714:348;;;;;:::o;8067:788::-;8167:6;8175;8183;8191;8199;8252:2;8240:9;8231:7;8227:23;8223:32;8220:52;;;8268:1;8265;8258:12;8220:52;8304:9;8291:23;8281:33;;8365:2;8354:9;8350:18;8337:32;-1:-1:-1;;;;;8429:2:644;8421:6;8418:14;8415:34;;;8445:1;8442;8435:12;8415:34;8484:59;8535:7;8526:6;8515:9;8511:22;8484:59;:::i;:::-;8562:8;;-1:-1:-1;8458:85:644;-1:-1:-1;8650:2:644;8635:18;;8622:32;;-1:-1:-1;8666:16:644;;;8663:36;;;8695:1;8692;8685:12;8663:36;;8734:61;8787:7;8776:8;8765:9;8761:24;8734:61;:::i;:::-;8067:788;;;;-1:-1:-1;8067:788:644;;-1:-1:-1;8814:8:644;;8708:87;8067:788;-1:-1:-1;;;8067:788:644:o;8860:260::-;8928:6;8936;8989:2;8977:9;8968:7;8964:23;8960:32;8957:52;;;9005:1;9002;8995:12;8957:52;9028:29;9047:9;9028:29;:::i;:::-;9018:39;;9076:38;9110:2;9099:9;9095:18;9076:38;:::i;:::-;9066:48;;8860:260;;;;;:::o;9125:380::-;9204:1;9200:12;;;;9247;;;9268:61;;9322:4;9314:6;9310:17;9300:27;;9268:61;9375:2;9367:6;9364:14;9344:18;9341:38;9338:161;;;9421:10;9416:3;9412:20;9409:1;9402:31;9456:4;9453:1;9446:15;9484:4;9481:1;9474:15;9338:161;;9125:380;;;:::o;9510:338::-;9712:2;9694:21;;;9751:2;9731:18;;;9724:30;-1:-1:-1;;;9785:2:644;9770:18;;9763:44;9839:2;9824:18;;9510:338::o;10195:127::-;10256:10;10251:3;10247:20;10244:1;10237:31;10287:4;10284:1;10277:15;10311:4;10308:1;10301:15;10327:127;10388:10;10383:3;10379:20;10376:1;10369:31;10419:4;10416:1;10409:15;10443:4;10440:1;10433:15;10459:168;10499:7;10565:1;10561;10557:6;10553:14;10550:1;10547:21;10542:1;10535:9;10528:17;10524:45;10521:71;;;10572:18;;:::i;:::-;-1:-1:-1;10612:9:644;;10459:168::o;10632:127::-;10693:10;10688:3;10684:20;10681:1;10674:31;10724:4;10721:1;10714:15;10748:4;10745:1;10738:15;10764:120;10804:1;10830;10820:35;;10835:18;;:::i;:::-;-1:-1:-1;10869:9:644;;10764:120::o;11249:128::-;11289:3;11320:1;11316:6;11313:1;11310:13;11307:39;;;11326:18;;:::i;:::-;-1:-1:-1;11362:9:644;;11249:128::o;11741:521::-;11818:4;11824:6;11884:11;11871:25;11978:2;11974:7;11963:8;11947:14;11943:29;11939:43;11919:18;11915:68;11905:96;;11997:1;11994;11987:12;11905:96;12024:33;;12076:20;;;-1:-1:-1;;;;;;12108:30:644;;12105:50;;;12151:1;12148;12141:12;12105:50;12184:4;12172:17;;-1:-1:-1;12215:14:644;12211:27;;;12201:38;;12198:58;;;12252:1;12249;12242:12;12267:135;12306:3;-1:-1:-1;;12327:17:644;;12324:43;;;12347:18;;:::i;:::-;-1:-1:-1;12394:1:644;12383:13;;12267:135::o;12407:470::-;12586:3;12624:6;12618:13;12640:53;12686:6;12681:3;12674:4;12666:6;12662:17;12640:53;:::i;:::-;12756:13;;12715:16;;;;12778:57;12756:13;12715:16;12812:4;12800:17;;12778:57;:::i;:::-;12851:20;;12407:470;-1:-1:-1;;;;12407:470:644:o;13215:125::-;13255:4;13283:1;13280;13277:8;13274:34;;;13288:18;;:::i;:::-;-1:-1:-1;13325:9:644;;13215:125::o;13345:267::-;13434:6;13429:3;13422:19;13486:6;13479:5;13472:4;13467:3;13463:14;13450:43;-1:-1:-1;13538:1:644;13513:16;;;13531:4;13509:27;;;13502:38;;;;13594:2;13573:15;;;-1:-1:-1;;13569:29:644;13560:39;;;13556:50;;13345:267::o;13617:506::-;13860:6;13849:9;13842:25;13903:2;13898;13887:9;13883:18;13876:30;13823:4;13929:62;13987:2;13976:9;13972:18;13964:6;13956;13929:62;:::i;:::-;14039:9;14031:6;14027:22;14022:2;14011:9;14007:18;14000:50;14067;14110:6;14102;14094;14067:50;:::i;:::-;14059:58;13617:506;-1:-1:-1;;;;;;;;13617:506:644:o;14128:339::-;14330:2;14312:21;;;14369:2;14349:18;;;14342:30;-1:-1:-1;;;14403:2:644;14388:18;;14381:45;14458:2;14443:18;;14128:339::o;14472:383::-;14669:2;14658:9;14651:21;14632:4;14695:45;14736:2;14725:9;14721:18;14713:6;14695:45;:::i;:::-;14788:9;14780:6;14776:22;14771:2;14760:9;14756:18;14749:50;14816:33;14842:6;14834;14816:33;:::i;:::-;14808:41;14472:383;-1:-1:-1;;;;;14472:383:644:o;14860:489::-;-1:-1:-1;;;;;15129:15:644;;;15111:34;;15181:15;;15176:2;15161:18;;15154:43;15228:2;15213:18;;15206:34;;;15276:3;15271:2;15256:18;;15249:31;;;15054:4;;15297:46;;15323:19;;15315:6;15297:46;:::i;15354:249::-;15423:6;15476:2;15464:9;15455:7;15451:23;15447:32;15444:52;;;15492:1;15489;15482:12;15444:52;15524:9;15518:16;15543:30;15567:5;15543:30;:::i;15952:112::-;15984:1;16010;16000:35;;16015:18;;:::i;:::-;-1:-1:-1;16049:9:644;;15952:112::o;16476:274::-;16605:3;16643:6;16637:13;16659:53;16705:6;16700:3;16693:4;16685:6;16681:17;16659:53;:::i;:::-;16728:16;;;;;16476:274;-1:-1:-1;;16476:274:644:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "batchFrozen(uint256)": "83040532",
    "burn(uint256)": "42966c68",
    "claim(address,uint256)": "aad3ec96",
    "contractURI()": "e8a3d485",
    "getApproved(uint256)": "081812fc",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "lazyMint(uint256,string,bytes)": "d37c353b",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToClaim()": "acd083f8",
    "nextTokenIdToMint()": "3b1475a7",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "totalSupply()": "18160ddd",
    "transferFrom(address,address,uint256)": "23b872dd",
    "verifyClaim(address,uint256)": "2f92023a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\",\"params\":{\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"claim(address,uint256)\":{\"details\":\"Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc.                   The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.\",\"params\":{\"_quantity\":\"The number of NFTs to mint.\",\"_receiver\":\"The recipient of the NFT to mint.\"}},\"constructor\":{\"params\":{\"_defaultAdmin\":\"The default admin of the contract.\",\"_name\":\"The name of the contract.\",\"_royaltyBps\":\"The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)\",\"_royaltyRecipient\":\"The address to receive royalties.\",\"_symbol\":\"The symbol of the contract.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"Index of the desired batch in batchIds array.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"_amount\":\"The number of NFTs to lazy mint.\",\"_baseURIForTokens\":\"The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each                           of those NFTs is `${baseURIForTokens}/${tokenId}`.\",\"_data\":\"Additional bytes data to be used at the discretion of the consumer of the contract.\"},\"returns\":{\"batchId\":\"         A unique integer identifier for the batch of NFTs lazy minted together.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See `BatchMintMetadata` for handling of metadata in this contract.\",\"params\":{\"_tokenId\":\"The tokenId of an NFT.\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"verifyClaim(address,uint256)\":{\"details\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"notice\":\"So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner or approved operator burn the NFT of the given tokenId.\"},\"claim(address,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.\"},\"constructor\":{\"notice\":\"Initializes the contract during construction.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens at the given index.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an authorized address lazy mint a given amount of NFTs.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToClaim()\":{\"notice\":\"The tokenId assigned to the next new NFT to be claimed.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be lazy minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the metadata URI for an NFT.\"},\"verifyClaim(address,uint256)\":{\"notice\":\"Checks a request to claim NFTs against a custom condition.\"}},\"notice\":\"BASE:      ERC721A      EXTENSION: LazyMint  The `ERC721LazyMint` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.  It includes the following additions to standard ERC721 logic:      - Lazy minting      - Contract metadata for royalty support on platforms such as OpenSea that use        off-chain information to distribute roaylties.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2981 compliance for royalty support on NFT marketplaces.  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'  of  NFTs means actually assigning an owner to an NFT.  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,  without paying the gas cost for actually minting the NFTs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC721LazyMint.sol\":\"ERC721LazyMint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC721LazyMint.sol\":{\"keccak256\":\"0x7cf449e24d5ed25df3c4cfe883b8f37ed27d7873ef86383c49f03ffb6224080e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://24e993f15afe371eb157adb1eb0620fddee05d1c6310b34d109c38c4772b3cb4\",\"dweb:/ipfs/QmZhmxuAxtd6F9bwLEW8LqoABU27U3QHWhaHJJ385buFzb\"]},\"contracts/eip/ERC165.sol\":{\"keccak256\":\"0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c\",\"dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr\"]},\"contracts/eip/ERC721AVirtualApprove.sol\":{\"keccak256\":\"0xbc6fe5974d321406155a86d7f29748cad13fe632b5012e2d4979ccf238538516\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d80796f25af8c6507cd1f663c040d4e0c4b09f9d03544b50ead0d36cbbd5ea22\",\"dweb:/ipfs/QmPA5KLaxvbLbPbovSvMMgpj3H2Kj6kUU3s2V5qsgpfqGA\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf\",\"dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He\"]},\"contracts/eip/interface/IERC721.sol\":{\"keccak256\":\"0xbd9f2dd131e8f1e4e50b1b116eae917510ab9bf5d4356de37c5daf4cffdfa049\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ac3530b317083464271b100de1976ed9179b9e7d5a4fc3d992c61c80676a676\",\"dweb:/ipfs/QmUq1AVzymvp7Y8H1eypGEGU4icjzn5vDSvKMNpXnoaeMT\"]},\"contracts/eip/interface/IERC721A.sol\":{\"keccak256\":\"0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8\",\"dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5\"]},\"contracts/eip/interface/IERC721Metadata.sol\":{\"keccak256\":\"0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e\",\"dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4\"]},\"contracts/eip/interface/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0x1d1ee64f8456dc8b4cdd096e27ac4687babd485f49a728146126744d67f25f2f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9e01b0d51bdccbcce9095f606c8624926b518c1385c1349c41896236a0345ee0\",\"dweb:/ipfs/QmWHTbztwRf9Fyq4617MrVSqF8o7UXMT5nFe6epQ92N6L9\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/LazyMint.sol\":{\"keccak256\":\"0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827\",\"dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2\",\"dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485\",\"dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1\"]},\"contracts/extension/interface/IClaimableERC721.sol\":{\"keccak256\":\"0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929\",\"dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/ILazyMint.sol\":{\"keccak256\":\"0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3\",\"dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b\",\"dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8\"]},\"contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623\",\"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6\"]},\"contracts/external-deps/openzeppelin/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/lib/TWAddress.sol\":{\"keccak256\":\"0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e\",\"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6\"]},\"contracts/lib/TWStrings.sol\":{\"keccak256\":\"0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9\",\"dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalToCurrentOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApproveToCaller"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BalanceQueryForZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintZeroQuantity"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OwnerQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferFromIncorrectOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToNonERC721ReceiverImplementer"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "URIQueryForNonexistentToken"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchMetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "MetadataFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "batchFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToClaim",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "burn(uint256)": {
            "details": "ERC721A's `_burn(uint256,bool)` internally checks for token approvals.",
            "params": {
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "claim(address,uint256)": {
            "details": "Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc.                   The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.",
            "params": {
              "_quantity": "The number of NFTs to mint.",
              "_receiver": "The recipient of the NFT to mint."
            }
          },
          "constructor": {
            "params": {
              "_defaultAdmin": "The default admin of the contract.",
              "_name": "The name of the contract.",
              "_royaltyBps": "The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)",
              "_royaltyRecipient": "The address to receive royalties.",
              "_symbol": "The symbol of the contract."
            }
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "Index of the desired batch in batchIds array."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "lazyMint(uint256,string,bytes)": {
            "params": {
              "_amount": "The number of NFTs to lazy mint.",
              "_baseURIForTokens": "The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each                           of those NFTs is `${baseURIForTokens}/${tokenId}`.",
              "_data": "Additional bytes data to be used at the discretion of the consumer of the contract."
            },
            "returns": {
              "batchId": "         A unique integer identifier for the batch of NFTs lazy minted together."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See `BatchMintMetadata` for handling of metadata in this contract.",
            "params": {
              "_tokenId": "The tokenId of an NFT."
            }
          },
          "totalSupply()": {
            "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          },
          "verifyClaim(address,uint256)": {
            "details": "Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.",
            "params": {
              "_claimer": "Caller of the claim function.",
              "_quantity": "The number of NFTs being claimed."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(uint256)": {
            "notice": "Lets an owner or approved operator burn the NFT of the given tokenId."
          },
          "claim(address,uint256)": {
            "notice": "Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden."
          },
          "constructor": {
            "notice": "Initializes the contract during construction."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens at the given index."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "lazyMint(uint256,string,bytes)": {
            "notice": "Lets an authorized address lazy mint a given amount of NFTs."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToClaim()": {
            "notice": "The tokenId assigned to the next new NFT to be claimed."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be lazy minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "tokenURI(uint256)": {
            "notice": "Returns the metadata URI for an NFT."
          },
          "verifyClaim(address,uint256)": {
            "notice": "Checks a request to claim NFTs against a custom condition."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC721LazyMint.sol": "ERC721LazyMint"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC721LazyMint.sol": {
        "keccak256": "0x7cf449e24d5ed25df3c4cfe883b8f37ed27d7873ef86383c49f03ffb6224080e",
        "urls": [
          "bzz-raw://24e993f15afe371eb157adb1eb0620fddee05d1c6310b34d109c38c4772b3cb4",
          "dweb:/ipfs/QmZhmxuAxtd6F9bwLEW8LqoABU27U3QHWhaHJJ385buFzb"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC165.sol": {
        "keccak256": "0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b",
        "urls": [
          "bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c",
          "dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr"
        ],
        "license": "MIT"
      },
      "contracts/eip/ERC721AVirtualApprove.sol": {
        "keccak256": "0xbc6fe5974d321406155a86d7f29748cad13fe632b5012e2d4979ccf238538516",
        "urls": [
          "bzz-raw://d80796f25af8c6507cd1f663c040d4e0c4b09f9d03544b50ead0d36cbbd5ea22",
          "dweb:/ipfs/QmPA5KLaxvbLbPbovSvMMgpj3H2Kj6kUU3s2V5qsgpfqGA"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9",
        "urls": [
          "bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf",
          "dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC721.sol": {
        "keccak256": "0xbd9f2dd131e8f1e4e50b1b116eae917510ab9bf5d4356de37c5daf4cffdfa049",
        "urls": [
          "bzz-raw://8ac3530b317083464271b100de1976ed9179b9e7d5a4fc3d992c61c80676a676",
          "dweb:/ipfs/QmUq1AVzymvp7Y8H1eypGEGU4icjzn5vDSvKMNpXnoaeMT"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721A.sol": {
        "keccak256": "0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd",
        "urls": [
          "bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8",
          "dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721Metadata.sol": {
        "keccak256": "0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb",
        "urls": [
          "bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e",
          "dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC721Receiver.sol": {
        "keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
        "urls": [
          "bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
          "dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
        ],
        "license": "MIT"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0x1d1ee64f8456dc8b4cdd096e27ac4687babd485f49a728146126744d67f25f2f",
        "urls": [
          "bzz-raw://9e01b0d51bdccbcce9095f606c8624926b518c1385c1349c41896236a0345ee0",
          "dweb:/ipfs/QmWHTbztwRf9Fyq4617MrVSqF8o7UXMT5nFe6epQ92N6L9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/LazyMint.sol": {
        "keccak256": "0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170",
        "urls": [
          "bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827",
          "dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55",
        "urls": [
          "bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2",
          "dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350",
        "urls": [
          "bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485",
          "dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimableERC721.sol": {
        "keccak256": "0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960",
        "urls": [
          "bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929",
          "dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/ILazyMint.sol": {
        "keccak256": "0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec",
        "urls": [
          "bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3",
          "dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385",
        "urls": [
          "bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b",
          "dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol": {
        "keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
        "urls": [
          "bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
          "dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/lib/TWAddress.sol": {
        "keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
        "urls": [
          "bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
          "dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWStrings.sol": {
        "keccak256": "0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8",
        "urls": [
          "bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9",
          "dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt"
        ],
        "license": "Apache 2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC721LazyMint.sol",
    "id": 4985,
    "exportedSymbols": {
      "BatchMintMetadata": [
        17299
      ],
      "ContractMetadata": [
        17526
      ],
      "ERC721A": [
        12224
      ],
      "ERC721LazyMint": [
        4984
      ],
      "IClaimableERC721": [
        32398
      ],
      "IContractMetadata": [
        32437
      ],
      "IERC165": [
        13829
      ],
      "IERC2981": [
        13973
      ],
      "ILazyMint": [
        32812
      ],
      "IMulticall": [
        32926
      ],
      "IOwnable": [
        33183
      ],
      "IRoyalty": [
        33409
      ],
      "LazyMint": [
        20261
      ],
      "Multicall": [
        20595
      ],
      "Ownable": [
        21153
      ],
      "ReentrancyGuard": [
        46484
      ],
      "Royalty": [
        22395
      ],
      "TWAddress": [
        64152
      ],
      "TWStrings": [
        64852
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:8766:14",
    "nodes": [
      {
        "id": 4708,
        "nodeType": "PragmaDirective",
        "src": "39:23:14",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 4710,
        "nodeType": "ImportDirective",
        "src": "86:59:14",
        "nodes": [],
        "absolutePath": "contracts/eip/ERC721AVirtualApprove.sol",
        "file": "../eip/ERC721AVirtualApprove.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4985,
        "sourceUnit": 12225,
        "symbolAliases": [
          {
            "foreign": {
              "id": 4709,
              "name": "ERC721A",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 12224,
              "src": "95:7:14",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_ERC721A_$12224_$",
                "typeString": "type(contract ERC721A)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4711,
        "nodeType": "ImportDirective",
        "src": "147:43:14",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4985,
        "sourceUnit": 17527,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4712,
        "nodeType": "ImportDirective",
        "src": "191:36:14",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4985,
        "sourceUnit": 20596,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4713,
        "nodeType": "ImportDirective",
        "src": "228:34:14",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4985,
        "sourceUnit": 21154,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4714,
        "nodeType": "ImportDirective",
        "src": "263:34:14",
        "nodes": [],
        "absolutePath": "contracts/extension/Royalty.sol",
        "file": "../extension/Royalty.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4985,
        "sourceUnit": 22396,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4715,
        "nodeType": "ImportDirective",
        "src": "298:44:14",
        "nodes": [],
        "absolutePath": "contracts/extension/BatchMintMetadata.sol",
        "file": "../extension/BatchMintMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4985,
        "sourceUnit": 17300,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4716,
        "nodeType": "ImportDirective",
        "src": "343:35:14",
        "nodes": [],
        "absolutePath": "contracts/extension/LazyMint.sol",
        "file": "../extension/LazyMint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4985,
        "sourceUnit": 20262,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4717,
        "nodeType": "ImportDirective",
        "src": "379:53:14",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/IClaimableERC721.sol",
        "file": "../extension/interface/IClaimableERC721.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4985,
        "sourceUnit": 32399,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4718,
        "nodeType": "ImportDirective",
        "src": "434:30:14",
        "nodes": [],
        "absolutePath": "contracts/lib/TWStrings.sol",
        "file": "../lib/TWStrings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4985,
        "sourceUnit": 64853,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4719,
        "nodeType": "ImportDirective",
        "src": "465:68:14",
        "nodes": [],
        "absolutePath": "contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol",
        "file": "../external-deps/openzeppelin/security/ReentrancyGuard.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4985,
        "sourceUnit": 46485,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4984,
        "nodeType": "ContractDefinition",
        "src": "1601:7203:14",
        "nodes": [
          {
            "id": 4741,
            "nodeType": "UsingForDirective",
            "src": "1789:28:14",
            "nodes": [],
            "libraryName": {
              "id": 4739,
              "name": "TWStrings",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 64852,
              "src": "1795:9:14"
            },
            "typeName": {
              "id": 4740,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1809:7:14",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 4769,
            "nodeType": "FunctionDefinition",
            "src": "2448:306:14",
            "nodes": [],
            "body": {
              "id": 4768,
              "nodeType": "Block",
              "src": "2645:109:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4760,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4744,
                        "src": "2667:13:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4759,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21146,
                      "src": "2655:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 4761,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2655:26:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4762,
                  "nodeType": "ExpressionStatement",
                  "src": "2655:26:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4764,
                        "name": "_royaltyRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4750,
                        "src": "2716:17:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4765,
                        "name": "_royaltyBps",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4752,
                        "src": "2735:11:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      ],
                      "id": 4763,
                      "name": "_setupDefaultRoyaltyInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22326,
                      "src": "2691:24:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 4766,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2691:56:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4767,
                  "nodeType": "ExpressionStatement",
                  "src": "2691:56:14"
                }
              ]
            },
            "documentation": {
              "id": 4742,
              "nodeType": "StructuredDocumentation",
              "src": "2002:441:14",
              "text": " @notice Initializes the contract during construction.\n @param _defaultAdmin     The default admin of the contract.\n @param _name             The name of the contract.\n @param _symbol           The symbol of the contract.\n @param _royaltyRecipient The address to receive royalties.\n @param _royaltyBps       The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 4755,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4746,
                    "src": "2629:5:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 4756,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4748,
                    "src": "2636:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 4757,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 4754,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 12224,
                  "src": "2621:7:14"
                },
                "nodeType": "ModifierInvocation",
                "src": "2621:23:14"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 4753,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4744,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "2477:13:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4769,
                  "src": "2469:21:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4743,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2469:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4746,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "2514:5:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4769,
                  "src": "2500:19:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4745,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2500:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4748,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "2543:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4769,
                  "src": "2529:21:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4747,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2529:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4750,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "2568:17:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4769,
                  "src": "2560:25:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4749,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2560:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4752,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "2603:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4769,
                  "src": "2595:19:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4751,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2595:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2459:161:14"
            },
            "returnParameters": {
              "id": 4758,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2645:0:14"
            },
            "scope": 4984,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4800,
            "nodeType": "FunctionDefinition",
            "src": "3046:444:14",
            "nodes": [],
            "body": {
              "id": 4799,
              "nodeType": "Block",
              "src": "3155:335:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 4797,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 4790,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 4786,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 4782,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4780,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4772,
                            "src": "3184:11:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783031666663396137",
                            "id": 4781,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3199:10:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_33540519_by_1",
                              "typeString": "int_const 33540519"
                            },
                            "value": "0x01ffc9a7"
                          },
                          "src": "3184:25:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 4785,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4783,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4772,
                            "src": "3259:11:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783830616335386364",
                            "id": 4784,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3274:10:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2158778573_by_1",
                              "typeString": "int_const 2158778573"
                            },
                            "value": "0x80ac58cd"
                          },
                          "src": "3259:25:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3184:100:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 4789,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4787,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4772,
                          "src": "3334:11:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30783562356531333966",
                          "id": 4788,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3349:10:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1532892063_by_1",
                            "typeString": "int_const 1532892063"
                          },
                          "value": "0x5b5e139f"
                        },
                        "src": "3334:25:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "3184:175:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "id": 4796,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 4791,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4772,
                        "src": "3417:11:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4793,
                              "name": "IERC2981",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13973,
                              "src": "3437:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$13973_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$13973_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            ],
                            "id": 4792,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "3432:4:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 4794,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3432:14:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_contract$_IERC2981_$13973",
                            "typeString": "type(contract IERC2981)"
                          }
                        },
                        "id": 4795,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "interfaceId",
                        "nodeType": "MemberAccess",
                        "src": "3432:26:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "src": "3417:41:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3184:274:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4779,
                  "id": 4798,
                  "nodeType": "Return",
                  "src": "3165:293:14"
                }
              ]
            },
            "baseFunctions": [
              10989,
              13828
            ],
            "documentation": {
              "id": 4770,
              "nodeType": "StructuredDocumentation",
              "src": "2940:101:14",
              "text": " @dev See ERC165: https://eips.ethereum.org/EIPS/eip-165\n @inheritdoc IERC165"
            },
            "functionSelector": "01ffc9a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "3055:17:14",
            "overrides": {
              "id": 4776,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 4774,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 12224,
                  "src": "3122:7:14"
                },
                {
                  "id": 4775,
                  "name": "IERC165",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 13829,
                  "src": "3131:7:14"
                }
              ],
              "src": "3113:26:14"
            },
            "parameters": {
              "id": 4773,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4772,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "3080:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4800,
                  "src": "3073:18:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 4771,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "3073:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3072:20:14"
            },
            "returnParameters": {
              "id": 4779,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4778,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4800,
                  "src": "3149:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4777,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3149:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3148:6:14"
            },
            "scope": 4984,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4827,
            "nodeType": "FunctionDefinition",
            "src": "3904:224:14",
            "nodes": [],
            "body": {
              "id": 4826,
              "nodeType": "Block",
              "src": "3993:135:14",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    4810
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4810,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "4017:8:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 4826,
                      "src": "4003:22:14",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 4809,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "4003:6:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4814,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4812,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4803,
                        "src": "4040:8:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4811,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17141,
                      "src": "4028:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 4813,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4028:21:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4003:46:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4819,
                            "name": "batchUri",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4810,
                            "src": "4090:8:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 4820,
                                "name": "_tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4803,
                                "src": "4100:8:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 4821,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "toString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 64734,
                              "src": "4100:17:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 4822,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4100:19:14",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 4817,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4073:3:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 4818,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "4073:16:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 4823,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4073:47:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 4816,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "4066:6:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 4815,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "4066:6:14",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 4824,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4066:55:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 4808,
                  "id": 4825,
                  "nodeType": "Return",
                  "src": "4059:62:14"
                }
              ]
            },
            "baseFunctions": [
              11233
            ],
            "documentation": {
              "id": 4801,
              "nodeType": "StructuredDocumentation",
              "src": "3682:217:14",
              "text": "  @notice         Returns the metadata URI for an NFT.\n  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n  @param _tokenId The tokenId of an NFT."
            },
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "3913:8:14",
            "overrides": {
              "id": 4805,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3960:8:14"
            },
            "parameters": {
              "id": 4804,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4803,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3930:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4827,
                  "src": "3922:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4802,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3922:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3921:18:14"
            },
            "returnParameters": {
              "id": 4808,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4807,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4827,
                  "src": "3978:13:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4806,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3978:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3977:15:14"
            },
            "scope": 4984,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4868,
            "nodeType": "FunctionDefinition",
            "src": "5210:533:14",
            "nodes": [],
            "body": {
              "id": 4867,
              "nodeType": "Block",
              "src": "5299:444:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4842,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4840,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4838,
                            "name": "_currentIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10874,
                            "src": "5317:13:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 4839,
                            "name": "_quantity",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4832,
                            "src": "5333:9:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5317:25:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "id": 4841,
                          "name": "nextTokenIdToLazyMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20195,
                          "src": "5346:21:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5317:50:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420656e6f756768206c617a79206d696e74656420746f6b656e732e",
                        "id": 4843,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5369:32:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_95155f1f93ce33c8fa6f8129b089083ff41dbb9470fcdf0202fd62641d97efad",
                          "typeString": "literal_string \"Not enough lazy minted tokens.\""
                        },
                        "value": "Not enough lazy minted tokens."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_95155f1f93ce33c8fa6f8129b089083ff41dbb9470fcdf0202fd62641d97efad",
                          "typeString": "literal_string \"Not enough lazy minted tokens.\""
                        }
                      ],
                      "id": 4837,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5309:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4844,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5309:93:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4845,
                  "nodeType": "ExpressionStatement",
                  "src": "5309:93:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 4847,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5424:3:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4848,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5424:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4849,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4832,
                        "src": "5436:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4846,
                      "name": "verifyClaim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4877,
                      "src": "5412:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) view"
                      }
                    },
                    "id": 4850,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5412:34:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4851,
                  "nodeType": "ExpressionStatement",
                  "src": "5412:34:14"
                },
                {
                  "assignments": [
                    4853
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4853,
                      "mutability": "mutable",
                      "name": "startTokenId",
                      "nameLocation": "5531:12:14",
                      "nodeType": "VariableDeclaration",
                      "scope": 4867,
                      "src": "5523:20:14",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4852,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5523:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4858,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4855,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4830,
                        "src": "5569:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4856,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4832,
                        "src": "5580:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4854,
                      "name": "_transferTokensOnClaim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4927,
                      "src": "5546:22:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (address,uint256) returns (uint256)"
                      }
                    },
                    "id": 4857,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5546:44:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5523:67:14"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 4860,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5689:3:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4861,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5689:10:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4862,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4830,
                        "src": "5701:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4863,
                        "name": "startTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4853,
                        "src": "5712:12:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4864,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4832,
                        "src": "5726:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4859,
                      "name": "TokensClaimed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32381,
                      "src": "5675:13:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256,uint256)"
                      }
                    },
                    "id": 4865,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5675:61:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4866,
                  "nodeType": "EmitStatement",
                  "src": "5670:66:14"
                }
              ]
            },
            "baseFunctions": [
              32389
            ],
            "documentation": {
              "id": 4828,
              "nodeType": "StructuredDocumentation",
              "src": "4316:889:14",
              "text": "  @notice          Lets an address claim multiple lazy minted NFTs at once to a recipient.\n                   This function prevents any reentrant calls, and is not allowed to be overridden.\n  @dev             Contract creators should override `verifyClaim` and `transferTokensOnClaim`\n                   functions to create custom logic for verification and claiming,\n                   for e.g. price collection, allowlist, max quantity, etc.\n                   The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.\n                   The logic in `transferTokensOnClaim` does actual minting of tokens,\n                   can also be used to apply other state changes.\n  @param _receiver  The recipient of the NFT to mint.\n  @param _quantity  The number of NFTs to mint."
            },
            "functionSelector": "aad3ec96",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4835,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4834,
                  "name": "nonReentrant",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 46483,
                  "src": "5286:12:14"
                },
                "nodeType": "ModifierInvocation",
                "src": "5286:12:14"
              }
            ],
            "name": "claim",
            "nameLocation": "5219:5:14",
            "parameters": {
              "id": 4833,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4830,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "5233:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4868,
                  "src": "5225:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4829,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5225:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4832,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "5252:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4868,
                  "src": "5244:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4831,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5244:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5224:38:14"
            },
            "returnParameters": {
              "id": 4836,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5299:0:14"
            },
            "scope": 4984,
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4877,
            "nodeType": "FunctionDefinition",
            "src": "6153:80:14",
            "nodes": [],
            "body": {
              "id": 4876,
              "nodeType": "Block",
              "src": "6231:2:14",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              32397
            ],
            "documentation": {
              "id": 4869,
              "nodeType": "StructuredDocumentation",
              "src": "5749:399:14",
              "text": "  @notice          Checks a request to claim NFTs against a custom condition.\n  @dev             Override this function to add logic for claim verification, based on conditions\n                   such as allowlist, price, max quantity etc.\n  @param _claimer   Caller of the claim function.\n  @param _quantity  The number of NFTs being claimed."
            },
            "functionSelector": "2f92023a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyClaim",
            "nameLocation": "6162:11:14",
            "parameters": {
              "id": 4874,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4871,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "6182:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4877,
                  "src": "6174:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4870,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6174:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4873,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "6200:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4877,
                  "src": "6192:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4872,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6192:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6173:37:14"
            },
            "returnParameters": {
              "id": 4875,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6231:0:14"
            },
            "scope": 4984,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4889,
            "nodeType": "FunctionDefinition",
            "src": "6507:87:14",
            "nodes": [],
            "body": {
              "id": 4888,
              "nodeType": "Block",
              "src": "6556:38:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4884,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4880,
                        "src": "6572:8:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "74727565",
                        "id": 4885,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6582:4:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 4883,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11937,
                        12119
                      ],
                      "referencedDeclaration": 12119,
                      "src": "6566:5:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
                        "typeString": "function (uint256,bool)"
                      }
                    },
                    "id": 4886,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6566:21:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4887,
                  "nodeType": "ExpressionStatement",
                  "src": "6566:21:14"
                }
              ]
            },
            "documentation": {
              "id": 4878,
              "nodeType": "StructuredDocumentation",
              "src": "6239:263:14",
              "text": "  @notice         Lets an owner or approved operator burn the NFT of the given tokenId.\n  @dev            ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\n  @param _tokenId The tokenId of the NFT to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "6516:4:14",
            "parameters": {
              "id": 4881,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4880,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "6529:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4889,
                  "src": "6521:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4879,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6521:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6520:18:14"
            },
            "returnParameters": {
              "id": 4882,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6556:0:14"
            },
            "scope": 4984,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 4898,
            "nodeType": "FunctionDefinition",
            "src": "6676:112:14",
            "nodes": [],
            "body": {
              "id": 4897,
              "nodeType": "Block",
              "src": "6743:45:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4895,
                    "name": "nextTokenIdToLazyMint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 20195,
                    "src": "6760:21:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4894,
                  "id": 4896,
                  "nodeType": "Return",
                  "src": "6753:28:14"
                }
              ]
            },
            "documentation": {
              "id": 4890,
              "nodeType": "StructuredDocumentation",
              "src": "6600:71:14",
              "text": "@notice The tokenId assigned to the next new NFT to be lazy minted."
            },
            "functionSelector": "3b1475a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToMint",
            "nameLocation": "6685:17:14",
            "parameters": {
              "id": 4891,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6702:2:14"
            },
            "returnParameters": {
              "id": 4894,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4893,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4898,
                  "src": "6734:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4892,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6734:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6733:9:14"
            },
            "scope": 4984,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4907,
            "nodeType": "FunctionDefinition",
            "src": "6866:105:14",
            "nodes": [],
            "body": {
              "id": 4906,
              "nodeType": "Block",
              "src": "6934:37:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4904,
                    "name": "_currentIndex",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10874,
                    "src": "6951:13:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4903,
                  "id": 4905,
                  "nodeType": "Return",
                  "src": "6944:20:14"
                }
              ]
            },
            "documentation": {
              "id": 4899,
              "nodeType": "StructuredDocumentation",
              "src": "6794:67:14",
              "text": "@notice The tokenId assigned to the next new NFT to be claimed."
            },
            "functionSelector": "acd083f8",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToClaim",
            "nameLocation": "6875:18:14",
            "parameters": {
              "id": 4900,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6893:2:14"
            },
            "returnParameters": {
              "id": 4903,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4902,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4907,
                  "src": "6925:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4901,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6925:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6924:9:14"
            },
            "scope": 4984,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4927,
            "nodeType": "FunctionDefinition",
            "src": "7735:232:14",
            "nodes": [],
            "body": {
              "id": 4926,
              "nodeType": "Block",
              "src": "7881:86:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4919,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4917,
                      "name": "startTokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4915,
                      "src": "7891:12:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4918,
                      "name": "_currentIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10874,
                      "src": "7906:13:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7891:28:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4920,
                  "nodeType": "ExpressionStatement",
                  "src": "7891:28:14"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4922,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4910,
                        "src": "7939:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4923,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4912,
                        "src": "7950:9:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4921,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11474,
                        11637
                      ],
                      "referencedDeclaration": 11474,
                      "src": "7929:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 4924,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7929:31:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4925,
                  "nodeType": "ExpressionStatement",
                  "src": "7929:31:14"
                }
              ]
            },
            "documentation": {
              "id": 4908,
              "nodeType": "StructuredDocumentation",
              "src": "7159:571:14",
              "text": "  @notice          Mints tokens to receiver on claim.\n                   Any state changes related to `claim` must be applied\n                   here by overriding this function.\n  @dev             Override this function to add logic for state updation.\n                   When overriding, apply any state changes before `_safeMint`.\n @param _receiver The recipient of the NFT to mint.\n @param _quantity The number of NFTs to mint.\n @return startTokenId The tokenId of the first NFT minted."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transferTokensOnClaim",
            "nameLocation": "7744:22:14",
            "parameters": {
              "id": 4913,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4910,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "7775:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4927,
                  "src": "7767:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4909,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7767:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4912,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "7794:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4927,
                  "src": "7786:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4911,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7786:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7766:38:14"
            },
            "returnParameters": {
              "id": 4916,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4915,
                  "mutability": "mutable",
                  "name": "startTokenId",
                  "nameLocation": "7863:12:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 4927,
                  "src": "7855:20:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4914,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7855:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7854:22:14"
            },
            "scope": 4984,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4941,
            "nodeType": "FunctionDefinition",
            "src": "8059:115:14",
            "nodes": [],
            "body": {
              "id": 4940,
              "nodeType": "Block",
              "src": "8129:45:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4938,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4934,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "8146:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4935,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "8146:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4936,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "8160:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4937,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8160:7:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "8146:21:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4933,
                  "id": 4939,
                  "nodeType": "Return",
                  "src": "8139:28:14"
                }
              ]
            },
            "baseFunctions": [
              20260
            ],
            "documentation": {
              "id": 4928,
              "nodeType": "StructuredDocumentation",
              "src": "7973:81:14",
              "text": "@dev Returns whether lazy minting can be done in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canLazyMint",
            "nameLocation": "8068:12:14",
            "overrides": {
              "id": 4930,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8105:8:14"
            },
            "parameters": {
              "id": 4929,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8080:2:14"
            },
            "returnParameters": {
              "id": 4933,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4932,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4941,
                  "src": "8123:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4931,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8123:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8122:6:14"
            },
            "scope": 4984,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4955,
            "nodeType": "FunctionDefinition",
            "src": "8270:121:14",
            "nodes": [],
            "body": {
              "id": 4954,
              "nodeType": "Block",
              "src": "8346:45:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4952,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4948,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "8363:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4949,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "8363:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4950,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "8377:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4951,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8377:7:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "8363:21:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4947,
                  "id": 4953,
                  "nodeType": "Return",
                  "src": "8356:28:14"
                }
              ]
            },
            "baseFunctions": [
              17525
            ],
            "documentation": {
              "id": 4942,
              "nodeType": "StructuredDocumentation",
              "src": "8180:85:14",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "8279:18:14",
            "overrides": {
              "id": 4944,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8322:8:14"
            },
            "parameters": {
              "id": 4943,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8297:2:14"
            },
            "returnParameters": {
              "id": 4947,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4946,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4955,
                  "src": "8340:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4945,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8340:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8339:6:14"
            },
            "scope": 4984,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4969,
            "nodeType": "FunctionDefinition",
            "src": "8475:115:14",
            "nodes": [],
            "body": {
              "id": 4968,
              "nodeType": "Block",
              "src": "8545:45:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4966,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4962,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "8562:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4963,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "8562:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4964,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "8576:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4965,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8576:7:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "8562:21:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4961,
                  "id": 4967,
                  "nodeType": "Return",
                  "src": "8555:28:14"
                }
              ]
            },
            "baseFunctions": [
              21152
            ],
            "documentation": {
              "id": 4956,
              "nodeType": "StructuredDocumentation",
              "src": "8397:73:14",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "8484:12:14",
            "overrides": {
              "id": 4958,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8521:8:14"
            },
            "parameters": {
              "id": 4957,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8496:2:14"
            },
            "returnParameters": {
              "id": 4961,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4960,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4969,
                  "src": "8539:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4959,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8539:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8538:6:14"
            },
            "scope": 4984,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 4983,
            "nodeType": "FunctionDefinition",
            "src": "8681:121:14",
            "nodes": [],
            "body": {
              "id": 4982,
              "nodeType": "Block",
              "src": "8757:45:14",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4980,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4976,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "8774:3:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4977,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "8774:10:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4978,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "8788:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4979,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8788:7:14",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "8774:21:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4975,
                  "id": 4981,
                  "nodeType": "Return",
                  "src": "8767:28:14"
                }
              ]
            },
            "baseFunctions": [
              22394
            ],
            "documentation": {
              "id": 4970,
              "nodeType": "StructuredDocumentation",
              "src": "8596:80:14",
              "text": "@dev Returns whether royalty info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetRoyaltyInfo",
            "nameLocation": "8690:18:14",
            "overrides": {
              "id": 4972,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8733:8:14"
            },
            "parameters": {
              "id": 4971,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8708:2:14"
            },
            "returnParameters": {
              "id": 4975,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4974,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4983,
                  "src": "8751:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4973,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8751:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8750:6:14"
            },
            "scope": 4984,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4721,
              "name": "ERC721A",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 12224,
              "src": "1632:7:14"
            },
            "id": 4722,
            "nodeType": "InheritanceSpecifier",
            "src": "1632:7:14"
          },
          {
            "baseName": {
              "id": 4723,
              "name": "ContractMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17526,
              "src": "1645:16:14"
            },
            "id": 4724,
            "nodeType": "InheritanceSpecifier",
            "src": "1645:16:14"
          },
          {
            "baseName": {
              "id": 4725,
              "name": "Multicall",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20595,
              "src": "1667:9:14"
            },
            "id": 4726,
            "nodeType": "InheritanceSpecifier",
            "src": "1667:9:14"
          },
          {
            "baseName": {
              "id": 4727,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21153,
              "src": "1682:7:14"
            },
            "id": 4728,
            "nodeType": "InheritanceSpecifier",
            "src": "1682:7:14"
          },
          {
            "baseName": {
              "id": 4729,
              "name": "Royalty",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 22395,
              "src": "1695:7:14"
            },
            "id": 4730,
            "nodeType": "InheritanceSpecifier",
            "src": "1695:7:14"
          },
          {
            "baseName": {
              "id": 4731,
              "name": "BatchMintMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17299,
              "src": "1708:17:14"
            },
            "id": 4732,
            "nodeType": "InheritanceSpecifier",
            "src": "1708:17:14"
          },
          {
            "baseName": {
              "id": 4733,
              "name": "LazyMint",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20261,
              "src": "1731:8:14"
            },
            "id": 4734,
            "nodeType": "InheritanceSpecifier",
            "src": "1731:8:14"
          },
          {
            "baseName": {
              "id": 4735,
              "name": "IClaimableERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 32398,
              "src": "1745:16:14"
            },
            "id": 4736,
            "nodeType": "InheritanceSpecifier",
            "src": "1745:16:14"
          },
          {
            "baseName": {
              "id": 4737,
              "name": "ReentrancyGuard",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 46484,
              "src": "1767:15:14"
            },
            "id": 4738,
            "nodeType": "InheritanceSpecifier",
            "src": "1767:15:14"
          }
        ],
        "canonicalName": "ERC721LazyMint",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4720,
          "nodeType": "StructuredDocumentation",
          "src": "535:1064:14",
          "text": "      BASE:      ERC721A\n      EXTENSION: LazyMint\n  The `ERC721LazyMint` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.\n  It includes the following additions to standard ERC721 logic:\n      - Lazy minting\n      - Contract metadata for royalty support on platforms such as OpenSea that use\n        off-chain information to distribute roaylties.\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2981 compliance for royalty support on NFT marketplaces.\n  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'\n  of  NFTs means actually assigning an owner to an NFT.\n  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,\n  without paying the gas cost for actually minting the NFTs."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          4984,
          46484,
          32398,
          20261,
          17299,
          32812,
          22395,
          33409,
          13973,
          21153,
          33183,
          20595,
          32926,
          17526,
          32437,
          12224,
          14176,
          14222,
          14105,
          7823,
          13829,
          48483
        ],
        "name": "ERC721LazyMint",
        "nameLocation": "1610:14:14",
        "scope": 4985,
        "usedErrors": [
          14117,
          14120,
          14123,
          14126,
          14129,
          14132,
          14135,
          14138,
          14141,
          14144,
          14147,
          14150,
          14153
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 14
}