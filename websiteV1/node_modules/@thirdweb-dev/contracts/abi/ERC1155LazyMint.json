{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "verifyClaim",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b506040516200335238038062003352833981016040819052620000349162000323565b8351849084906200004d90600090602085019062000193565b5080516200006390600190602084019062000193565b50506001600d5550620000768562000096565b6200008b826001600160801b038316620000e8565b505050505062000413565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b612710811115620001315760405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d61782062707360881b604482015260640160405180910390fd5b600780546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b828054620001a190620003d6565b90600052602060002090601f016020900481019282620001c5576000855562000210565b82601f10620001e057805160ff191683800117855562000210565b8280016001018555821562000210579182015b8281111562000210578251825591602001919060010190620001f3565b506200021e92915062000222565b5090565b5b808211156200021e576000815560010162000223565b80516001600160a01b03811681146200025157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200027e57600080fd5b81516001600160401b03808211156200029b576200029b62000256565b604051601f8301601f19908116603f01168101908282118183101715620002c657620002c662000256565b81604052838152602092508683858801011115620002e357600080fd5b600091505b83821015620003075785820183015181830184015290820190620002e8565b83821115620003195760008385830101525b9695505050505050565b600080600080600060a086880312156200033c57600080fd5b620003478662000239565b60208701519095506001600160401b03808211156200036557600080fd5b6200037389838a016200026c565b955060408801519150808211156200038a57600080fd5b5062000399888289016200026c565b935050620003aa6060870162000239565b60808701519092506001600160801b0381168114620003c857600080fd5b809150509295509295909350565b600181811c90821680620003eb57607f821691505b602082108114156200040d57634e487b7160e01b600052602260045260246000fd5b50919050565b612f2f80620004236000396000f3fe60806040526004361061015c5760003560e01c8062fdd58e1461016157806301ffc9a7146101ac57806306fdde03146101dc5780630e89341c146101fe57806313af40351461021e5780632419f51b146102405780632a55205a146102605780632bc43fd91461029f5780632eb2c2d6146102b25780633b1475a7146102d25780634bbb1abf146102e75780634cc157df146103075780634e1273f414610349578063600dd5ea1461037657806363b45e2d146103965780636b20c454146103ab57806383040532146103cb5780638da5cb5b146103fb578063938e3d7b1461042857806395d89b41146104485780639bcf7a151461045d578063a22cb4651461047d578063ac9650d81461049d578063b24f2d39146104ca578063bd85b039146104f5578063d37c353b14610522578063e8a3d48514610542578063e985e9c514610557578063f242432a14610592578063f5298aca146105b2575b600080fd5b34801561016d57600080fd5b5061019961017c3660046121a3565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156101b857600080fd5b506101cc6101c73660046121e3565b6105d2565b60405190151581526020016101a3565b3480156101e857600080fd5b506101f161063f565b6040516101a39190612258565b34801561020a57600080fd5b506101f161021936600461226b565b6106cd565b34801561022a57600080fd5b5061023e610239366004612284565b61070e565b005b34801561024c57600080fd5b5061019961025b36600461226b565b610747565b34801561026c57600080fd5b5061028061027b36600461229f565b6107b5565b604080516001600160a01b0390931683526020830191909152016101a3565b61023e6102ad3660046122c1565b6107f2565b3480156102be57600080fd5b5061023e6102cd366004612447565b6108eb565b3480156102de57600080fd5b50600c54610199565b3480156102f357600080fd5b5061023e6103023660046122c1565b505050565b34801561031357600080fd5b5061032761032236600461226b565b610955565b604080516001600160a01b03909316835261ffff9091166020830152016101a3565b34801561035557600080fd5b506103696103643660046124f0565b6109c0565b6040516101a391906125f5565b34801561038257600080fd5b5061023e6103913660046121a3565b610ad4565b3480156103a257600080fd5b50600954610199565b3480156103b757600080fd5b5061023e6103c6366004612608565b610b06565b3480156103d757600080fd5b506101cc6103e636600461226b565b600b6020526000908152604090205460ff1681565b34801561040757600080fd5b50610410610c5a565b6040516001600160a01b0390911681526020016101a3565b34801561043457600080fd5b5061023e61044336600461267b565b610c69565b34801561045457600080fd5b506101f1610c96565b34801561046957600080fd5b5061023e6104783660046126c3565b610ca3565b34801561048957600080fd5b5061023e6104983660046126f8565b610cd2565b3480156104a957600080fd5b506104bd6104b8366004612734565b610d8b565b6040516101a391906127a8565b3480156104d657600080fd5b506007546001600160a01b03811690600160a01b900461ffff16610327565b34801561050157600080fd5b5061019961051036600461226b565b600e6020526000908152604090205481565b34801561052e57600080fd5b5061019961053d366004612852565b610e7f565b34801561054e57600080fd5b506101f1610f89565b34801561056357600080fd5b506101cc6105723660046128cb565b600360209081526000928352604080842090915290825290205460ff1681565b34801561059e57600080fd5b5061023e6105ad3660046128fe565b610f96565b3480156105be57600080fd5b5061023e6105cd3660046122c1565b610ff9565b60006301ffc9a760e01b6001600160e01b0319831614806106035750636cdb3d1360e11b6001600160e01b03198316145b8061061e57506303a24d0760e21b6001600160e01b03198316145b8061063957506001600160e01b0319821663152a902d60e11b145b92915050565b6000805461064c90612962565b80601f016020809104026020016040519081016040528092919081815260200182805461067890612962565b80156106c55780601f1061069a576101008083540402835291602001916106c5565b820191906000526020600020905b8154815290600101906020018083116106a857829003601f168201915b505050505081565b606060006106da836110a0565b9050806106e68461123c565b6040516020016106f792919061299d565b604051602081830303815290604052915050919050565b610716611341565b61073b5760405162461bcd60e51b8152600401610732906129cc565b60405180910390fd5b61074481611364565b50565b600061075260095490565b82106107905760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610732565b600982815481106107a3576107a36129f4565b90600052602060002001549050919050565b6000806000806107c486610955565b90945084925061ffff1690506127106107dd8287612a20565b6107e79190612a55565b925050509250929050565b6002600d5414156108455760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610732565b6002600d55600c5482106108885760405162461bcd60e51b815260206004820152600a6024820152691a5b9d985b1a59081a5960b21b6044820152606401610732565b6108938383836113b6565b81836001600160a01b0316336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de6846040516108d991815260200190565b60405180910390a450506001600d5550565b6001600160a01b03851633148061092557506001600160a01b038516600090815260036020908152604080832033845290915290205460ff165b6109415760405162461bcd60e51b815260040161073290612a69565b61094e85858585856113d1565b5050505050565b6000818152600860209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282911561099c57805160208201516109b6565b6007546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b606081518351146109e35760405162461bcd60e51b815260040161073290612a95565b600083516001600160401b038111156109fe576109fe6122f4565b604051908082528060200260200182016040528015610a27578160200160208202803683370190505b50905060005b8451811015610acc5760026000868381518110610a4c57610a4c6129f4565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000858381518110610a8857610a886129f4565b6020026020010151815260200190815260200160002054828281518110610ab157610ab16129f4565b6020908102919091010152610ac581612abe565b9050610a2d565b509392505050565b610adc611341565b610af85760405162461bcd60e51b8152600401610732906129cc565b610b02828261158c565b5050565b336001600160a01b038416811480610b4357506001600160a01b0380851660009081526003602090815260408083209385168352929052205460ff165b610b5f5760405162461bcd60e51b815260040161073290612ad9565b8151835114610ba25760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610732565b60005b8351811015610c4857828181518110610bc057610bc06129f4565b602002602001015160026000876001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110610c0157610c016129f4565b60200260200101518152602001908152602001600020541015610c365760405162461bcd60e51b815260040161073290612b04565b610c41600182612b35565b9050610ba5565b50610c54848484611610565b50505050565b6006546001600160a01b031690565b610c71611341565b610c8d5760405162461bcd60e51b8152600401610732906129cc565b610744816117a4565b6001805461064c90612962565b610cab611341565b610cc75760405162461bcd60e51b8152600401610732906129cc565b610302838383611886565b336001600160a01b038316811415610d1d5760405162461bcd60e51b815260206004820152600e60248201526d20a8282927ab24a723afa9a2a62360911b6044820152606401610732565b6001600160a01b03818116600081815260036020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b6060816001600160401b03811115610da557610da56122f4565b604051908082528060200260200182016040528015610dd857816020015b6060815260200190600190039081610dc35790505b50905060005b82811015610e7857610e4830858584818110610dfc57610dfc6129f4565b9050602002810190610e0e9190612b4d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061192592505050565b828281518110610e5a57610e5a6129f4565b60200260200101819052508080610e7090612abe565b915050610dde565b5092915050565b6000610e89611341565b610ea55760405162461bcd60e51b8152600401610732906129cc565b85610eda5760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b6044820152606401610732565b6000600c549050610f22818888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061195192505050565b600c919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d6001610f588a84612b35565b610f629190612b93565b88888888604051610f77959493929190612bd3565b60405180910390a25095945050505050565b6005805461064c90612962565b6001600160a01b038516331480610fd057506001600160a01b038516600090815260036020908152604080832033845290915290205460ff165b610fec5760405162461bcd60e51b815260040161073290612a69565b61094e85858585856119be565b336001600160a01b03841681148061103657506001600160a01b0380851660009081526003602090815260408083209385168352929052205460ff165b6110525760405162461bcd60e51b815260040161073290612ad9565b6001600160a01b03841660009081526002602090815260408083208684529091529020548211156110955760405162461bcd60e51b815260040161073290612b04565b610c54848484611aea565b606060006110ad60095490565b9050600060098054806020026020016040519081016040528092919081815260200182805480156110fd57602002820191906000526020600020905b8154815260200190600101908083116110e9575b5050505050905060005b8281101561120157818181518110611121576111216129f4565b60200260200101518510156111ef57600a6000838381518110611146576111466129f4565b60200260200101518152602001908152602001600020805461116790612962565b80601f016020809104026020016040519081016040528092919081815260200182805461119390612962565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b50505050509350505050919050565b6111fa600182612b35565b9050611107565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610732565b6060816112605750506040805180820190915260018152600360fc1b602082015290565b8160005b811561128a578061127481612abe565b91506112839050600a83612a55565b9150611264565b6000816001600160401b038111156112a4576112a46122f4565b6040519080825280601f01601f1916602001820160405280156112ce576020820181803683370190505b5090505b8415611339576112e3600183612b93565b91506112f0600a86612c0c565b6112fb906030612b35565b60f81b818381518110611310576113106129f4565b60200101906001600160f81b031916908160001a905350611332600a86612a55565b94506112d2565b949350505050565b600061134b610c5a565b6001600160a01b0316336001600160a01b031614905090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b61030283838360405180602001604052806000815250611bdc565b81518351146113f25760405162461bcd60e51b815260040161073290612a95565b6001600160a01b0384166114185760405162461bcd60e51b815260040161073290612c20565b33611427818787878787611c94565b60005b845181101561151e576000858281518110611447576114476129f4565b602002602001015190506000858381518110611465576114656129f4565b6020908102919091018101516001600160a01b038b1660009081526002835260408082208683529093529190912054909150818110156114b75760405162461bcd60e51b815260040161073290612c46565b6001600160a01b03808b16600090815260026020818152604080842088855282528084208787039055938d16835290815282822086835290529081208054849290611503908490612b35565b925050819055505050508061151790612abe565b905061142a565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161156e929190612c70565b60405180910390a4611584818787878787611da0565b505050505050565b6127108111156115ae5760405162461bcd60e51b815260040161073290612c9e565b600780546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b6001600160a01b0383166116365760405162461bcd60e51b815260040161073290612cc7565b80518251146116575760405162461bcd60e51b815260040161073290612a95565b600033905061167a81856000868660405180602001604052806000815250611c94565b60005b835181101561174557600084828151811061169a5761169a6129f4565b6020026020010151905060008483815181106116b8576116b86129f4565b6020908102919091018101516001600160a01b038916600090815260028352604080822086835290935291909120549091508181101561170a5760405162461bcd60e51b815260040161073290612c46565b6001600160a01b038816600090815260026020908152604080832095835294905292909220910390558061173d81612abe565b91505061167d565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611796929190612c70565b60405180910390a450505050565b6000600580546117b390612962565b80601f01602080910402602001604051908101604052809291908181526020018280546117df90612962565b801561182c5780601f106118015761010080835404028352916020019161182c565b820191906000526020600020905b81548152906001019060200180831161180f57829003601f168201915b50508551939450611848936005935060208701925090506120ee565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a16818360405161187a929190612cef565b60405180910390a15050565b6127108111156118a85760405162461bcd60e51b815260040161073290612c9e565b6040805180820182526001600160a01b038481168083526020808401868152600089815260088352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d9101610d7e565b606061194a8383604051806060016040528060278152602001612ed360279139611ed2565b9392505050565b60008061195e8486612b35565b60098054600181019091557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018190556000818152600a6020908152604090912085519294508493506119b59290918601906120ee565b50935093915050565b6001600160a01b0384166119e45760405162461bcd60e51b815260040161073290612c20565b33611a038187876119f488611faf565b6119fd88611faf565b87611c94565b6001600160a01b038616600090815260026020908152604080832087845290915290205483811015611a475760405162461bcd60e51b815260040161073290612c46565b6001600160a01b0380881660009081526002602081815260408084208a855282528084208987039055938a16835290815282822088835290529081208054869290611a93908490612b35565b909155505060408051868152602081018690526001600160a01b03808916928a82169291861691600080516020612eb3833981519152910160405180910390a4611ae1828888888888611ffa565b50505050505050565b6001600160a01b038316611b105760405162461bcd60e51b815260040161073290612cc7565b33611b3f81856000611b2187611faf565b611b2a87611faf565b60405180602001604052806000815250611c94565b6001600160a01b038416600090815260026020908152604080832086845290915290205482811015611b835760405162461bcd60e51b815260040161073290612c46565b6001600160a01b0385811660008181526002602090815260408083208984528252808320888703905580518981529182018890529193861691600080516020612eb3833981519152910160405180910390a45050505050565b6001600160a01b038416611c025760405162461bcd60e51b815260040161073290612c20565b33611c13816000876119f488611faf565b6001600160a01b038516600090815260026020908152604080832087845290915281208054859290611c46908490612b35565b909155505060408051858152602081018590526001600160a01b038088169260009291851691600080516020612eb3833981519152910160405180910390a461094e81600087878787611ffa565b6001600160a01b038516611d1b5760005b8351811015611d1957828181518110611cc057611cc06129f4565b6020026020010151600e6000868481518110611cde57611cde6129f4565b602002602001015181526020019081526020016000206000828254611d039190612b35565b90915550611d12905081612abe565b9050611ca5565b505b6001600160a01b0384166115845760005b8351811015611ae157828181518110611d4757611d476129f4565b6020026020010151600e6000868481518110611d6557611d656129f4565b602002602001015181526020019081526020016000206000828254611d8a9190612b93565b90915550611d99905081612abe565b9050611d2c565b6001600160a01b0384163b156115845760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611de49089908990889088908890600401612d14565b6020604051808303816000875af1925050508015611e1f575060408051601f3d908101601f19168201909252611e1c91810190612d66565b60015b611ea257611e2b612d83565b806308c379a01415611e655750611e40612d9f565b80611e4b5750611e67565b8060405162461bcd60e51b81526004016107329190612258565b505b60405162461bcd60e51b815260206004820152601060248201526f10a2a92198989a9aa922a1a2a4ab22a960811b6044820152606401610732565b6001600160e01b0319811663bc197c8160e01b14611ae15760405162461bcd60e51b815260040161073290612e28565b60606001600160a01b0384163b611f3a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610732565b600080856001600160a01b031685604051611f559190612e51565b600060405180830381855af49150503d8060008114611f90576040519150601f19603f3d011682016040523d82523d6000602084013e611f95565b606091505b5091509150611fa58282866120b5565b9695505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611fe957611fe96129f4565b602090810291909101015292915050565b6001600160a01b0384163b156115845760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061203e9089908990889088908890600401612e6d565b6020604051808303816000875af1925050508015612079575060408051601f3d908101601f1916820190925261207691810190612d66565b60015b61208557611e2b612d83565b6001600160e01b0319811663f23a6e6160e01b14611ae15760405162461bcd60e51b815260040161073290612e28565b606083156120c457508161194a565b8251156120d45782518084602001fd5b8160405162461bcd60e51b81526004016107329190612258565b8280546120fa90612962565b90600052602060002090601f01602090048101928261211c5760008555612162565b82601f1061213557805160ff1916838001178555612162565b82800160010185558215612162579182015b82811115612162578251825591602001919060010190612147565b5061216e929150612172565b5090565b5b8082111561216e5760008155600101612173565b80356001600160a01b038116811461219e57600080fd5b919050565b600080604083850312156121b657600080fd5b6121bf83612187565b946020939093013593505050565b6001600160e01b03198116811461074457600080fd5b6000602082840312156121f557600080fd5b813561194a816121cd565b60005b8381101561221b578181015183820152602001612203565b83811115610c545750506000910152565b60008151808452612244816020860160208601612200565b601f01601f19169290920160200192915050565b60208152600061194a602083018461222c565b60006020828403121561227d57600080fd5b5035919050565b60006020828403121561229657600080fd5b61194a82612187565b600080604083850312156122b257600080fd5b50508035926020909101359150565b6000806000606084860312156122d657600080fd5b6122df84612187565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561232f5761232f6122f4565b6040525050565b60006001600160401b0382111561234f5761234f6122f4565b5060051b60200190565b600082601f83011261236a57600080fd5b8135602061237782612336565b604051612384828261230a565b83815260059390931b85018201928281019150868411156123a457600080fd5b8286015b848110156123bf57803583529183019183016123a8565b509695505050505050565b60006001600160401b038311156123e3576123e36122f4565b6040516123fa601f8501601f19166020018261230a565b80915083815284848401111561240f57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261243857600080fd5b61194a838335602085016123ca565b600080600080600060a0868803121561245f57600080fd5b61246886612187565b945061247660208701612187565b935060408601356001600160401b038082111561249257600080fd5b61249e89838a01612359565b945060608801359150808211156124b457600080fd5b6124c089838a01612359565b935060808801359150808211156124d657600080fd5b506124e388828901612427565b9150509295509295909350565b6000806040838503121561250357600080fd5b82356001600160401b038082111561251a57600080fd5b818501915085601f83011261252e57600080fd5b8135602061253b82612336565b604051612548828261230a565b83815260059390931b850182019282810191508984111561256857600080fd5b948201945b8386101561258d5761257e86612187565b8252948201949082019061256d565b965050860135925050808211156125a357600080fd5b506125b085828601612359565b9150509250929050565b600081518084526020808501945080840160005b838110156125ea578151875295820195908201906001016125ce565b509495945050505050565b60208152600061194a60208301846125ba565b60008060006060848603121561261d57600080fd5b61262684612187565b925060208401356001600160401b038082111561264257600080fd5b61264e87838801612359565b9350604086013591508082111561266457600080fd5b5061267186828701612359565b9150509250925092565b60006020828403121561268d57600080fd5b81356001600160401b038111156126a357600080fd5b8201601f810184136126b457600080fd5b611339848235602084016123ca565b6000806000606084860312156126d857600080fd5b833592506126e860208501612187565b9150604084013590509250925092565b6000806040838503121561270b57600080fd5b61271483612187565b91506020830135801515811461272957600080fd5b809150509250929050565b6000806020838503121561274757600080fd5b82356001600160401b038082111561275e57600080fd5b818501915085601f83011261277257600080fd5b81358181111561278157600080fd5b8660208260051b850101111561279657600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156127fd57603f198886030184526127eb85835161222c565b945092850192908501906001016127cf565b5092979650505050505050565b60008083601f84011261281c57600080fd5b5081356001600160401b0381111561283357600080fd5b60208301915083602082850101111561284b57600080fd5b9250929050565b60008060008060006060868803121561286a57600080fd5b8535945060208601356001600160401b038082111561288857600080fd5b61289489838a0161280a565b909650945060408801359150808211156128ad57600080fd5b506128ba8882890161280a565b969995985093965092949392505050565b600080604083850312156128de57600080fd5b6128e783612187565b91506128f560208401612187565b90509250929050565b600080600080600060a0868803121561291657600080fd5b61291f86612187565b945061292d60208701612187565b9350604086013592506060860135915060808601356001600160401b0381111561295657600080fd5b6124e388828901612427565b600181811c9082168061297657607f821691505b6020821081141561299757634e487b7160e01b600052602260045260246000fd5b50919050565b600083516129af818460208801612200565b8351908301906129c3818360208801612200565b01949350505050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612a3a57612a3a612a0a565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612a6457612a64612a3f565b500490565b6020808252601290820152710853d5d3915497d3d497d054141493d5915160721b604082015260600190565b6020808252600f908201526e0988a9c8ea890be9a92a69a82a8869608b1b604082015260600190565b6000600019821415612ad257612ad2612a0a565b5060010190565b6020808252601190820152702ab730b8383937bb32b21031b0b63632b960791b604082015260600190565b602080825260179082015276139bdd08195b9bdd59da081d1bdad95b9cc81bdddb9959604a1b604082015260600190565b60008219821115612b4857612b48612a0a565b500190565b6000808335601e19843603018112612b6457600080fd5b8301803591506001600160401b03821115612b7e57600080fd5b60200191503681900382131561284b57600080fd5b600082821015612ba557612ba5612a0a565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000612bed606083018688612baa565b8281036040840152612c00818587612baa565b98975050505050505050565b600082612c1b57612c1b612a3f565b500690565b6020808252600c908201526b2a27afad22a927afa0a2222960a11b604082015260600190565b60208082526010908201526f125394d551919250d251539517d0905360821b604082015260600190565b604081526000612c8360408301856125ba565b8281036020840152612c9581856125ba565b95945050505050565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6020808252600e908201526d232927a6afad22a927afa0a2222960911b604082015260600190565b604081526000612d02604083018561222c565b8281036020840152612c95818561222c565b6001600160a01b0386811682528516602082015260a060408201819052600090612d40908301866125ba565b8281036060840152612d5281866125ba565b90508281036080840152612c00818561222c565b600060208284031215612d7857600080fd5b815161194a816121cd565b600060033d1115612d9c5760046000803e5060005160e01c5b90565b600060443d1015612dad5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612ddc57505050505090565b8285019150815181811115612df45750505050505090565b843d8701016020828501011115612e0e5750505050505090565b612e1d6020828601018761230a565b509095945050505050565b6020808252600f908201526e1513d2d15394d7d491529150d51151608a1b604082015260600190565b60008251612e63818460208701612200565b9190910192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ea79083018461222c565b97965050505050505056fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b5e616eb72ce8767f78cd62eadf3e1efbd6230a612ccb9048a5edb6f363a19a364736f6c634300080c0033",
    "sourceMap": "1706:10037:3:-:0;;;2951:306;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1083:12:20;;3132:5:3;;3139:7;;1083:12:20;;:4;;:12;;;;;:::i;:::-;-1:-1:-1;1105:16:20;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;;202:1:218;307:7;:22;-1:-1:-1;3158:26:3::1;3170:13:::0;3158:11:::1;:26::i;:::-;3194:56;3219:17:::0;-1:-1:-1;;;;;3194:56:3;::::1;:24;:56::i;:::-;2951:306:::0;;;;;1706:10037;;1421:172:68;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3430:334:75:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:75;;2326:2:644;3571:25:75;;;2308:21:644;2365:2;2345:18;;;2338:30;-1:-1:-1;;;2384:18:644;;;2377:45;2439:18;;3571:25:75;;;;;;;3531:76;3617:16;:36;;-1:-1:-1;;;;;3617:36:75;;-1:-1:-1;;;;;;3663:32:75;;;;;-1:-1:-1;;;3663:32:75;;;;;;;;3711:46;;2614:25:644;;;3711:46:75;;2602:2:644;2587:18;3711:46:75;;;;;;;3430:334;;:::o;1706:10037:3:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1706:10037:3;;;-1:-1:-1;1706:10037:3;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:644;93:13;;-1:-1:-1;;;;;135:31:644;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:885;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:644;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:644;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;912:3;907:2;902;894:6;890:15;886:24;883:33;880:53;;;929:1;926;919:12;880:53;951:1;942:10;;961:133;975:2;972:1;969:9;961:133;;;1063:14;;;1059:23;;1053:30;1032:14;;;1028:23;;1021:63;986:10;;;;961:133;;;1112:2;1109:1;1106:9;1103:80;;;1171:1;1166:2;1161;1153:6;1149:15;1145:24;1138:35;1103:80;1201:6;328:885;-1:-1:-1;;;;;;328:885:644:o;1218:901::-;1344:6;1352;1360;1368;1376;1429:3;1417:9;1408:7;1404:23;1400:33;1397:53;;;1446:1;1443;1436:12;1397:53;1469:40;1499:9;1469:40;:::i;:::-;1553:2;1538:18;;1532:25;1459:50;;-1:-1:-1;;;;;;1606:14:644;;;1603:34;;;1633:1;1630;1623:12;1603:34;1656:61;1709:7;1700:6;1689:9;1685:22;1656:61;:::i;:::-;1646:71;;1763:2;1752:9;1748:18;1742:25;1726:41;;1792:2;1782:8;1779:16;1776:36;;;1808:1;1805;1798:12;1776:36;;1831:63;1886:7;1875:8;1864:9;1860:24;1831:63;:::i;:::-;1821:73;;;1913:49;1958:2;1947:9;1943:18;1913:49;:::i;:::-;2005:3;1990:19;;1984:26;1903:59;;-1:-1:-1;;;;;;2039:31:644;;2029:42;;2019:70;;2085:1;2082;2075:12;2019:70;2108:5;2098:15;;;1218:901;;;;;;;;:::o;2650:380::-;2729:1;2725:12;;;;2772;;;2793:61;;2847:4;2839:6;2835:17;2825:27;;2793:61;2900:2;2892:6;2889:14;2869:18;2866:38;2863:161;;;2946:10;2941:3;2937:20;2934:1;2927:31;2981:4;2978:1;2971:15;3009:4;3006:1;2999:15;2863:161;;2650:380;;;:::o;:::-;1706:10037:3;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361061015c5760003560e01c8062fdd58e1461016157806301ffc9a7146101ac57806306fdde03146101dc5780630e89341c146101fe57806313af40351461021e5780632419f51b146102405780632a55205a146102605780632bc43fd91461029f5780632eb2c2d6146102b25780633b1475a7146102d25780634bbb1abf146102e75780634cc157df146103075780634e1273f414610349578063600dd5ea1461037657806363b45e2d146103965780636b20c454146103ab57806383040532146103cb5780638da5cb5b146103fb578063938e3d7b1461042857806395d89b41146104485780639bcf7a151461045d578063a22cb4651461047d578063ac9650d81461049d578063b24f2d39146104ca578063bd85b039146104f5578063d37c353b14610522578063e8a3d48514610542578063e985e9c514610557578063f242432a14610592578063f5298aca146105b2575b600080fd5b34801561016d57600080fd5b5061019961017c3660046121a3565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156101b857600080fd5b506101cc6101c73660046121e3565b6105d2565b60405190151581526020016101a3565b3480156101e857600080fd5b506101f161063f565b6040516101a39190612258565b34801561020a57600080fd5b506101f161021936600461226b565b6106cd565b34801561022a57600080fd5b5061023e610239366004612284565b61070e565b005b34801561024c57600080fd5b5061019961025b36600461226b565b610747565b34801561026c57600080fd5b5061028061027b36600461229f565b6107b5565b604080516001600160a01b0390931683526020830191909152016101a3565b61023e6102ad3660046122c1565b6107f2565b3480156102be57600080fd5b5061023e6102cd366004612447565b6108eb565b3480156102de57600080fd5b50600c54610199565b3480156102f357600080fd5b5061023e6103023660046122c1565b505050565b34801561031357600080fd5b5061032761032236600461226b565b610955565b604080516001600160a01b03909316835261ffff9091166020830152016101a3565b34801561035557600080fd5b506103696103643660046124f0565b6109c0565b6040516101a391906125f5565b34801561038257600080fd5b5061023e6103913660046121a3565b610ad4565b3480156103a257600080fd5b50600954610199565b3480156103b757600080fd5b5061023e6103c6366004612608565b610b06565b3480156103d757600080fd5b506101cc6103e636600461226b565b600b6020526000908152604090205460ff1681565b34801561040757600080fd5b50610410610c5a565b6040516001600160a01b0390911681526020016101a3565b34801561043457600080fd5b5061023e61044336600461267b565b610c69565b34801561045457600080fd5b506101f1610c96565b34801561046957600080fd5b5061023e6104783660046126c3565b610ca3565b34801561048957600080fd5b5061023e6104983660046126f8565b610cd2565b3480156104a957600080fd5b506104bd6104b8366004612734565b610d8b565b6040516101a391906127a8565b3480156104d657600080fd5b506007546001600160a01b03811690600160a01b900461ffff16610327565b34801561050157600080fd5b5061019961051036600461226b565b600e6020526000908152604090205481565b34801561052e57600080fd5b5061019961053d366004612852565b610e7f565b34801561054e57600080fd5b506101f1610f89565b34801561056357600080fd5b506101cc6105723660046128cb565b600360209081526000928352604080842090915290825290205460ff1681565b34801561059e57600080fd5b5061023e6105ad3660046128fe565b610f96565b3480156105be57600080fd5b5061023e6105cd3660046122c1565b610ff9565b60006301ffc9a760e01b6001600160e01b0319831614806106035750636cdb3d1360e11b6001600160e01b03198316145b8061061e57506303a24d0760e21b6001600160e01b03198316145b8061063957506001600160e01b0319821663152a902d60e11b145b92915050565b6000805461064c90612962565b80601f016020809104026020016040519081016040528092919081815260200182805461067890612962565b80156106c55780601f1061069a576101008083540402835291602001916106c5565b820191906000526020600020905b8154815290600101906020018083116106a857829003601f168201915b505050505081565b606060006106da836110a0565b9050806106e68461123c565b6040516020016106f792919061299d565b604051602081830303815290604052915050919050565b610716611341565b61073b5760405162461bcd60e51b8152600401610732906129cc565b60405180910390fd5b61074481611364565b50565b600061075260095490565b82106107905760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610732565b600982815481106107a3576107a36129f4565b90600052602060002001549050919050565b6000806000806107c486610955565b90945084925061ffff1690506127106107dd8287612a20565b6107e79190612a55565b925050509250929050565b6002600d5414156108455760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610732565b6002600d55600c5482106108885760405162461bcd60e51b815260206004820152600a6024820152691a5b9d985b1a59081a5960b21b6044820152606401610732565b6108938383836113b6565b81836001600160a01b0316336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de6846040516108d991815260200190565b60405180910390a450506001600d5550565b6001600160a01b03851633148061092557506001600160a01b038516600090815260036020908152604080832033845290915290205460ff165b6109415760405162461bcd60e51b815260040161073290612a69565b61094e85858585856113d1565b5050505050565b6000818152600860209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282911561099c57805160208201516109b6565b6007546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b606081518351146109e35760405162461bcd60e51b815260040161073290612a95565b600083516001600160401b038111156109fe576109fe6122f4565b604051908082528060200260200182016040528015610a27578160200160208202803683370190505b50905060005b8451811015610acc5760026000868381518110610a4c57610a4c6129f4565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000858381518110610a8857610a886129f4565b6020026020010151815260200190815260200160002054828281518110610ab157610ab16129f4565b6020908102919091010152610ac581612abe565b9050610a2d565b509392505050565b610adc611341565b610af85760405162461bcd60e51b8152600401610732906129cc565b610b02828261158c565b5050565b336001600160a01b038416811480610b4357506001600160a01b0380851660009081526003602090815260408083209385168352929052205460ff165b610b5f5760405162461bcd60e51b815260040161073290612ad9565b8151835114610ba25760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610732565b60005b8351811015610c4857828181518110610bc057610bc06129f4565b602002602001015160026000876001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110610c0157610c016129f4565b60200260200101518152602001908152602001600020541015610c365760405162461bcd60e51b815260040161073290612b04565b610c41600182612b35565b9050610ba5565b50610c54848484611610565b50505050565b6006546001600160a01b031690565b610c71611341565b610c8d5760405162461bcd60e51b8152600401610732906129cc565b610744816117a4565b6001805461064c90612962565b610cab611341565b610cc75760405162461bcd60e51b8152600401610732906129cc565b610302838383611886565b336001600160a01b038316811415610d1d5760405162461bcd60e51b815260206004820152600e60248201526d20a8282927ab24a723afa9a2a62360911b6044820152606401610732565b6001600160a01b03818116600081815260036020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b6060816001600160401b03811115610da557610da56122f4565b604051908082528060200260200182016040528015610dd857816020015b6060815260200190600190039081610dc35790505b50905060005b82811015610e7857610e4830858584818110610dfc57610dfc6129f4565b9050602002810190610e0e9190612b4d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061192592505050565b828281518110610e5a57610e5a6129f4565b60200260200101819052508080610e7090612abe565b915050610dde565b5092915050565b6000610e89611341565b610ea55760405162461bcd60e51b8152600401610732906129cc565b85610eda5760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b6044820152606401610732565b6000600c549050610f22818888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061195192505050565b600c919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d6001610f588a84612b35565b610f629190612b93565b88888888604051610f77959493929190612bd3565b60405180910390a25095945050505050565b6005805461064c90612962565b6001600160a01b038516331480610fd057506001600160a01b038516600090815260036020908152604080832033845290915290205460ff165b610fec5760405162461bcd60e51b815260040161073290612a69565b61094e85858585856119be565b336001600160a01b03841681148061103657506001600160a01b0380851660009081526003602090815260408083209385168352929052205460ff165b6110525760405162461bcd60e51b815260040161073290612ad9565b6001600160a01b03841660009081526002602090815260408083208684529091529020548211156110955760405162461bcd60e51b815260040161073290612b04565b610c54848484611aea565b606060006110ad60095490565b9050600060098054806020026020016040519081016040528092919081815260200182805480156110fd57602002820191906000526020600020905b8154815260200190600101908083116110e9575b5050505050905060005b8281101561120157818181518110611121576111216129f4565b60200260200101518510156111ef57600a6000838381518110611146576111466129f4565b60200260200101518152602001908152602001600020805461116790612962565b80601f016020809104026020016040519081016040528092919081815260200182805461119390612962565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b50505050509350505050919050565b6111fa600182612b35565b9050611107565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610732565b6060816112605750506040805180820190915260018152600360fc1b602082015290565b8160005b811561128a578061127481612abe565b91506112839050600a83612a55565b9150611264565b6000816001600160401b038111156112a4576112a46122f4565b6040519080825280601f01601f1916602001820160405280156112ce576020820181803683370190505b5090505b8415611339576112e3600183612b93565b91506112f0600a86612c0c565b6112fb906030612b35565b60f81b818381518110611310576113106129f4565b60200101906001600160f81b031916908160001a905350611332600a86612a55565b94506112d2565b949350505050565b600061134b610c5a565b6001600160a01b0316336001600160a01b031614905090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b61030283838360405180602001604052806000815250611bdc565b81518351146113f25760405162461bcd60e51b815260040161073290612a95565b6001600160a01b0384166114185760405162461bcd60e51b815260040161073290612c20565b33611427818787878787611c94565b60005b845181101561151e576000858281518110611447576114476129f4565b602002602001015190506000858381518110611465576114656129f4565b6020908102919091018101516001600160a01b038b1660009081526002835260408082208683529093529190912054909150818110156114b75760405162461bcd60e51b815260040161073290612c46565b6001600160a01b03808b16600090815260026020818152604080842088855282528084208787039055938d16835290815282822086835290529081208054849290611503908490612b35565b925050819055505050508061151790612abe565b905061142a565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161156e929190612c70565b60405180910390a4611584818787878787611da0565b505050505050565b6127108111156115ae5760405162461bcd60e51b815260040161073290612c9e565b600780546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b6001600160a01b0383166116365760405162461bcd60e51b815260040161073290612cc7565b80518251146116575760405162461bcd60e51b815260040161073290612a95565b600033905061167a81856000868660405180602001604052806000815250611c94565b60005b835181101561174557600084828151811061169a5761169a6129f4565b6020026020010151905060008483815181106116b8576116b86129f4565b6020908102919091018101516001600160a01b038916600090815260028352604080822086835290935291909120549091508181101561170a5760405162461bcd60e51b815260040161073290612c46565b6001600160a01b038816600090815260026020908152604080832095835294905292909220910390558061173d81612abe565b91505061167d565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611796929190612c70565b60405180910390a450505050565b6000600580546117b390612962565b80601f01602080910402602001604051908101604052809291908181526020018280546117df90612962565b801561182c5780601f106118015761010080835404028352916020019161182c565b820191906000526020600020905b81548152906001019060200180831161180f57829003601f168201915b50508551939450611848936005935060208701925090506120ee565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a16818360405161187a929190612cef565b60405180910390a15050565b6127108111156118a85760405162461bcd60e51b815260040161073290612c9e565b6040805180820182526001600160a01b038481168083526020808401868152600089815260088352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d9101610d7e565b606061194a8383604051806060016040528060278152602001612ed360279139611ed2565b9392505050565b60008061195e8486612b35565b60098054600181019091557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018190556000818152600a6020908152604090912085519294508493506119b59290918601906120ee565b50935093915050565b6001600160a01b0384166119e45760405162461bcd60e51b815260040161073290612c20565b33611a038187876119f488611faf565b6119fd88611faf565b87611c94565b6001600160a01b038616600090815260026020908152604080832087845290915290205483811015611a475760405162461bcd60e51b815260040161073290612c46565b6001600160a01b0380881660009081526002602081815260408084208a855282528084208987039055938a16835290815282822088835290529081208054869290611a93908490612b35565b909155505060408051868152602081018690526001600160a01b03808916928a82169291861691600080516020612eb3833981519152910160405180910390a4611ae1828888888888611ffa565b50505050505050565b6001600160a01b038316611b105760405162461bcd60e51b815260040161073290612cc7565b33611b3f81856000611b2187611faf565b611b2a87611faf565b60405180602001604052806000815250611c94565b6001600160a01b038416600090815260026020908152604080832086845290915290205482811015611b835760405162461bcd60e51b815260040161073290612c46565b6001600160a01b0385811660008181526002602090815260408083208984528252808320888703905580518981529182018890529193861691600080516020612eb3833981519152910160405180910390a45050505050565b6001600160a01b038416611c025760405162461bcd60e51b815260040161073290612c20565b33611c13816000876119f488611faf565b6001600160a01b038516600090815260026020908152604080832087845290915281208054859290611c46908490612b35565b909155505060408051858152602081018590526001600160a01b038088169260009291851691600080516020612eb3833981519152910160405180910390a461094e81600087878787611ffa565b6001600160a01b038516611d1b5760005b8351811015611d1957828181518110611cc057611cc06129f4565b6020026020010151600e6000868481518110611cde57611cde6129f4565b602002602001015181526020019081526020016000206000828254611d039190612b35565b90915550611d12905081612abe565b9050611ca5565b505b6001600160a01b0384166115845760005b8351811015611ae157828181518110611d4757611d476129f4565b6020026020010151600e6000868481518110611d6557611d656129f4565b602002602001015181526020019081526020016000206000828254611d8a9190612b93565b90915550611d99905081612abe565b9050611d2c565b6001600160a01b0384163b156115845760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611de49089908990889088908890600401612d14565b6020604051808303816000875af1925050508015611e1f575060408051601f3d908101601f19168201909252611e1c91810190612d66565b60015b611ea257611e2b612d83565b806308c379a01415611e655750611e40612d9f565b80611e4b5750611e67565b8060405162461bcd60e51b81526004016107329190612258565b505b60405162461bcd60e51b815260206004820152601060248201526f10a2a92198989a9aa922a1a2a4ab22a960811b6044820152606401610732565b6001600160e01b0319811663bc197c8160e01b14611ae15760405162461bcd60e51b815260040161073290612e28565b60606001600160a01b0384163b611f3a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610732565b600080856001600160a01b031685604051611f559190612e51565b600060405180830381855af49150503d8060008114611f90576040519150601f19603f3d011682016040523d82523d6000602084013e611f95565b606091505b5091509150611fa58282866120b5565b9695505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611fe957611fe96129f4565b602090810291909101015292915050565b6001600160a01b0384163b156115845760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061203e9089908990889088908890600401612e6d565b6020604051808303816000875af1925050508015612079575060408051601f3d908101601f1916820190925261207691810190612d66565b60015b61208557611e2b612d83565b6001600160e01b0319811663f23a6e6160e01b14611ae15760405162461bcd60e51b815260040161073290612e28565b606083156120c457508161194a565b8251156120d45782518084602001fd5b8160405162461bcd60e51b81526004016107329190612258565b8280546120fa90612962565b90600052602060002090601f01602090048101928261211c5760008555612162565b82601f1061213557805160ff1916838001178555612162565b82800160010185558215612162579182015b82811115612162578251825591602001919060010190612147565b5061216e929150612172565b5090565b5b8082111561216e5760008155600101612173565b80356001600160a01b038116811461219e57600080fd5b919050565b600080604083850312156121b657600080fd5b6121bf83612187565b946020939093013593505050565b6001600160e01b03198116811461074457600080fd5b6000602082840312156121f557600080fd5b813561194a816121cd565b60005b8381101561221b578181015183820152602001612203565b83811115610c545750506000910152565b60008151808452612244816020860160208601612200565b601f01601f19169290920160200192915050565b60208152600061194a602083018461222c565b60006020828403121561227d57600080fd5b5035919050565b60006020828403121561229657600080fd5b61194a82612187565b600080604083850312156122b257600080fd5b50508035926020909101359150565b6000806000606084860312156122d657600080fd5b6122df84612187565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561232f5761232f6122f4565b6040525050565b60006001600160401b0382111561234f5761234f6122f4565b5060051b60200190565b600082601f83011261236a57600080fd5b8135602061237782612336565b604051612384828261230a565b83815260059390931b85018201928281019150868411156123a457600080fd5b8286015b848110156123bf57803583529183019183016123a8565b509695505050505050565b60006001600160401b038311156123e3576123e36122f4565b6040516123fa601f8501601f19166020018261230a565b80915083815284848401111561240f57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261243857600080fd5b61194a838335602085016123ca565b600080600080600060a0868803121561245f57600080fd5b61246886612187565b945061247660208701612187565b935060408601356001600160401b038082111561249257600080fd5b61249e89838a01612359565b945060608801359150808211156124b457600080fd5b6124c089838a01612359565b935060808801359150808211156124d657600080fd5b506124e388828901612427565b9150509295509295909350565b6000806040838503121561250357600080fd5b82356001600160401b038082111561251a57600080fd5b818501915085601f83011261252e57600080fd5b8135602061253b82612336565b604051612548828261230a565b83815260059390931b850182019282810191508984111561256857600080fd5b948201945b8386101561258d5761257e86612187565b8252948201949082019061256d565b965050860135925050808211156125a357600080fd5b506125b085828601612359565b9150509250929050565b600081518084526020808501945080840160005b838110156125ea578151875295820195908201906001016125ce565b509495945050505050565b60208152600061194a60208301846125ba565b60008060006060848603121561261d57600080fd5b61262684612187565b925060208401356001600160401b038082111561264257600080fd5b61264e87838801612359565b9350604086013591508082111561266457600080fd5b5061267186828701612359565b9150509250925092565b60006020828403121561268d57600080fd5b81356001600160401b038111156126a357600080fd5b8201601f810184136126b457600080fd5b611339848235602084016123ca565b6000806000606084860312156126d857600080fd5b833592506126e860208501612187565b9150604084013590509250925092565b6000806040838503121561270b57600080fd5b61271483612187565b91506020830135801515811461272957600080fd5b809150509250929050565b6000806020838503121561274757600080fd5b82356001600160401b038082111561275e57600080fd5b818501915085601f83011261277257600080fd5b81358181111561278157600080fd5b8660208260051b850101111561279657600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156127fd57603f198886030184526127eb85835161222c565b945092850192908501906001016127cf565b5092979650505050505050565b60008083601f84011261281c57600080fd5b5081356001600160401b0381111561283357600080fd5b60208301915083602082850101111561284b57600080fd5b9250929050565b60008060008060006060868803121561286a57600080fd5b8535945060208601356001600160401b038082111561288857600080fd5b61289489838a0161280a565b909650945060408801359150808211156128ad57600080fd5b506128ba8882890161280a565b969995985093965092949392505050565b600080604083850312156128de57600080fd5b6128e783612187565b91506128f560208401612187565b90509250929050565b600080600080600060a0868803121561291657600080fd5b61291f86612187565b945061292d60208701612187565b9350604086013592506060860135915060808601356001600160401b0381111561295657600080fd5b6124e388828901612427565b600181811c9082168061297657607f821691505b6020821081141561299757634e487b7160e01b600052602260045260246000fd5b50919050565b600083516129af818460208801612200565b8351908301906129c3818360208801612200565b01949350505050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612a3a57612a3a612a0a565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612a6457612a64612a3f565b500490565b6020808252601290820152710853d5d3915497d3d497d054141493d5915160721b604082015260600190565b6020808252600f908201526e0988a9c8ea890be9a92a69a82a8869608b1b604082015260600190565b6000600019821415612ad257612ad2612a0a565b5060010190565b6020808252601190820152702ab730b8383937bb32b21031b0b63632b960791b604082015260600190565b602080825260179082015276139bdd08195b9bdd59da081d1bdad95b9cc81bdddb9959604a1b604082015260600190565b60008219821115612b4857612b48612a0a565b500190565b6000808335601e19843603018112612b6457600080fd5b8301803591506001600160401b03821115612b7e57600080fd5b60200191503681900382131561284b57600080fd5b600082821015612ba557612ba5612a0a565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000612bed606083018688612baa565b8281036040840152612c00818587612baa565b98975050505050505050565b600082612c1b57612c1b612a3f565b500690565b6020808252600c908201526b2a27afad22a927afa0a2222960a11b604082015260600190565b60208082526010908201526f125394d551919250d251539517d0905360821b604082015260600190565b604081526000612c8360408301856125ba565b8281036020840152612c9581856125ba565b95945050505050565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6020808252600e908201526d232927a6afad22a927afa0a2222960911b604082015260600190565b604081526000612d02604083018561222c565b8281036020840152612c95818561222c565b6001600160a01b0386811682528516602082015260a060408201819052600090612d40908301866125ba565b8281036060840152612d5281866125ba565b90508281036080840152612c00818561222c565b600060208284031215612d7857600080fd5b815161194a816121cd565b600060033d1115612d9c5760046000803e5060005160e01c5b90565b600060443d1015612dad5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612ddc57505050505090565b8285019150815181811115612df45750505050505090565b843d8701016020828501011115612e0e5750505050505090565b612e1d6020828601018761230a565b509095945050505050565b6020808252600f908201526e1513d2d15394d7d491529150d51151608a1b604082015260600190565b60008251612e63818460208701612200565b9190910192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ea79083018461222c565b97965050505050505056fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b5e616eb72ce8767f78cd62eadf3e1efbd6230a612ccb9048a5edb6f363a19a364736f6c634300080c0033",
    "sourceMap": "1706:10037:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;645:64:20;;;;;;;;;;-1:-1:-1;645:64:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;597:25:644;;;585:2;570:18;645:64:20;;;;;;;;7968:449:3;;;;;;;;;;-1:-1:-1;7968:449:3;;;;;:::i;:::-;;:::i;:::-;;;1184:14:644;;1177:22;1159:41;;1147:2;1132:18;7968:449:3;1019:187:644;418:18:20;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3635:219:3:-;;;;;;;;;;-1:-1:-1;3635:219:3;;;;;:::i;:::-;;:::i;1133:173:68:-;;;;;;;;;;-1:-1:-1;1133:173:68;;;;;:::i;:::-;;:::i;:::-;;1973:203:52;;;;;;;;;;-1:-1:-1;1973:203:52;;;;;:::i;:::-;;:::i;1421:347:75:-;;;;;;;;;;-1:-1:-1;1421:347:75;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;2783:32:644;;;2765:51;;2847:2;2832:18;;2825:34;;;;2738:18;1421:347:75;2591:274:644;5015:534:3;;;;;;:::i;:::-;;:::i;3088:360:20:-;;;;;;;;;;-1:-1:-1;3088:360:20;;;;;:::i;:::-;;:::i;8681:112:3:-;;;;;;;;;;-1:-1:-1;8765:21:3;;8681:112;;6029:128;;;;;;;;;;-1:-1:-1;6029:128:3;;;;;:::i;:::-;;;;;2008:381:75;;;;;;;;;;-1:-1:-1;2008:381:75;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;6336:32:644;;;6318:51;;6417:6;6405:19;;;6400:2;6385:18;;6378:47;6291:18;2008:381:75;6146:285:644;1788:482:20;;;;;;;;;;-1:-1:-1;1788:482:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3087:256:75:-;;;;;;;;;;-1:-1:-1;3087:256:75;;;;;:::i;:::-;;:::i;1655:96:52:-;;;;;;;;;;-1:-1:-1;1729:8:52;:15;1655:96;;7112:564:3;;;;;;;;;;-1:-1:-1;7112:564:3;;;;;:::i;:::-;;:::i;898:43:52:-;;;;;;;;;;-1:-1:-1;898:43:52;;;;;:::i;:::-;;;;;;;;;;;;;;;;871:86:68;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;9193:32:644;;;9175:51;;9163:2;9148:18;871:86:68;9029:203:644;1003:188:54;;;;;;;;;;-1:-1:-1;1003:188:54;;;;;:::i;:::-;;:::i;442:20:20:-;;;;;;;;;;;;;:::i;4281:288:75:-;;;;;;;;;;-1:-1:-1;4281:288:75;;;;;:::i;:::-;;:::i;2457:291:20:-;;;;;;;;;;-1:-1:-1;2457:291:20;;;;;:::i;:::-;;:::i;698:319:63:-;;;;;;;;;;-1:-1:-1;698:319:63;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2499:144:75:-;;;;;;;;;;-1:-1:-1;2599:16:75;;-1:-1:-1;;;;;2599:16:75;;;-1:-1:-1;;;2624:10:75;;;;2499:144;;2273:46:3;;;;;;;;;;-1:-1:-1;2273:46:3;;;;;:::i;:::-;;;;;;;;;;;;;;1254:592:61;;;;;;;;;;-1:-1:-1;1254:592:61;;;;;:::i;:::-;;:::i;565:34:54:-;;;;;;;;;;;;;:::i;716:68:20:-;;;;;;;;;;-1:-1:-1;716:68:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:328;;;;;;;;;;-1:-1:-1;2754:328:20;;;;;:::i;:::-;;:::i;6442:376:3:-;;;;;;;;;;-1:-1:-1;6442:376:3;;;;;:::i;:::-;;:::i;7968:449::-;8071:4;-1:-1:-1;;;;;;;;;8106:25:3;;;;:100;;-1:-1:-1;;;;;;;;;;8181:25:3;;;8106:100;:176;;;-1:-1:-1;;;;;;;;;;8257:25:3;;;8106:176;:279;;;-1:-1:-1;;;;;;;8344:41:3;;-1:-1:-1;;;8344:41:3;8106:279;8087:298;7968:449;-1:-1:-1;;7968:449:3:o;418:18:20:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3635:219:3:-;3704:13;3729:22;3754:21;3766:8;3754:11;:21::i;:::-;3729:46;;3816:8;3826:19;:8;:17;:19::i;:::-;3799:47;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3785:62;;;3635:219;;;:::o;1133:173:68:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:68;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;1973:203:52:-;2037:7;2070:17;1729:8;:15;;1655:96;2070:17;2060:6;:27;2056:81;;2103:23;;-1:-1:-1;;;2103:23:52;;15235:2:644;2103:23:52;;;15217:21:644;15274:2;15254:18;;;15247:30;-1:-1:-1;;;15293:18:644;;;15286:43;15346:18;;2103:23:52;15033:337:644;2056:81:52;2153:8;2162:6;2153:16;;;;;;;;:::i;:::-;;;;;;;;;2146:23;;1973:203;;;:::o;1421:347:75:-;1558:16;1576:21;1614:17;1633:11;1648:31;1671:7;1648:22;:31::i;:::-;1613:66;;-1:-1:-1;1613:66:75;;-1:-1:-1;1613:66:75;;;-1:-1:-1;1755:6:75;1736:15;1613:66;1736:9;:15;:::i;:::-;1735:26;;;;:::i;:::-;1719:42;;1603:165;;1421:347;;;;;:::o;5015:534:3:-;245:1:218;548:7;;:19;;540:63;;;;-1:-1:-1;;;540:63:218;;16271:2:644;540:63:218;;;16253:21:644;16310:2;16290:18;;;16283:30;16349:33;16329:18;;;16322:61;16400:18;;540:63:218;16069:355:644;540:63:218;245:1;678:7;:18;8765:21:3;;5170:8:::1;:30;5162:53;;;::::0;-1:-1:-1;;;5162:53:3;;16631:2:644;5162:53:3::1;::::0;::::1;16613:21:644::0;16670:2;16650:18;;;16643:30;-1:-1:-1;;;16689:18:644;;;16682:40;16739:18;;5162:53:3::1;16429:334:644::0;5162:53:3::1;5346:54;5369:9;5380:8;5390:9;5346:22;:54::i;:::-;5522:8;5511:9;-1:-1:-1::0;;;;;5485:57:3::1;5499:10;-1:-1:-1::0;;;;;5485:57:3::1;;5532:9;5485:57;;;;597:25:644::0;;585:2;570:18;;451:177;5485:57:3::1;;;;;;;;-1:-1:-1::0;;202:1:218;851:7;:22;-1:-1:-1;5015:534:3:o;3088:360:20:-;-1:-1:-1;;;;;3300:18:20;;3308:10;3300:18;;:56;;-1:-1:-1;;;;;;3322:22:20;;;;;;:16;:22;;;;;;;;3345:10;3322:34;;;;;;;;;;3300:56;3292:87;;;;-1:-1:-1;;;3292:87:20;;;;;;;:::i;:::-;3389:52;3412:4;3418:2;3422:3;3427:7;3436:4;3389:22;:52::i;:::-;3088:360;;;;;:::o;2008:381:75:-;2088:7;2152:29;;;:19;:29;;;;;;;;2115:66;;;;;;;;;;-1:-1:-1;;;;;2115:66:75;;;;;;;;;;;;;;;;2088:7;;2211:39;:171;;2327:25;;2361:19;;;;2211:171;;;2270:16;;-1:-1:-1;;;;;2270:16:75;;;-1:-1:-1;;;2295:10:75;;;;2211:171;2192:190;;;;;2008:381;;;:::o;1788:482:20:-;1939:16;1998:3;:10;1979:8;:15;:29;1971:57;;;;-1:-1:-1;;;1971:57:20;;;;;;;:::i;:::-;2039:30;2086:8;:15;-1:-1:-1;;;;;2072:30:20;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2072:30:20;;2039:63;;2118:9;2113:120;2137:8;:15;2133:1;:19;2113:120;;;2192:9;:22;2202:8;2211:1;2202:11;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;2192:22:20;-1:-1:-1;;;;;2192:22:20;;;;;;;;;;;;:30;2215:3;2219:1;2215:6;;;;;;;;:::i;:::-;;;;;;;2192:30;;;;;;;;;;;;2173:13;2187:1;2173:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2154:3;;;:::i;:::-;;;2113:120;;;-1:-1:-1;2250:13:20;1788:482;-1:-1:-1;;;1788:482:20:o;3087:256:75:-;3199:20;:18;:20::i;:::-;3194:76;;3235:24;;-1:-1:-1;;;3235:24:75;;;;;;;:::i;3194:76::-;3280:56;3305:17;3324:11;3280:24;:56::i;:::-;3087:256;;:::o;7112:564:3:-;7276:10;-1:-1:-1;;;;;7305:16:3;;;;;:52;;-1:-1:-1;;;;;;7325:24:3;;;;;;;:16;:24;;;;;;;;:32;;;;;;;;;;;;7305:52;7297:82;;;;-1:-1:-1;;;7297:82:3;;;;;;;:::i;:::-;7417:8;:15;7397:9;:16;:35;7389:63;;;;-1:-1:-1;;;7389:63:3;;18147:2:644;7389:63:3;;;18129:21:644;18186:2;18166:18;;;18159:30;-1:-1:-1;;;18205:18:644;;;18198:45;18260:18;;7389:63:3;17945:339:644;7389:63:3;7468:9;7463:157;7487:9;:16;7483:1;:20;7463:157;;;7570:8;7579:1;7570:11;;;;;;;;:::i;:::-;;;;;;;7535:9;:17;7545:6;-1:-1:-1;;;;;7535:17:3;-1:-1:-1;;;;;7535:17:3;;;;;;;;;;;;:31;7553:9;7563:1;7553:12;;;;;;;;:::i;:::-;;;;;;;7535:31;;;;;;;;;;;;:46;;7527:82;;;;-1:-1:-1;;;7527:82:3;;;;;;;:::i;:::-;7505:6;7510:1;7505:6;;:::i;:::-;;;7463:157;;;;7630:39;7641:6;7649:9;7660:8;7630:10;:39::i;:::-;7249:427;7112:564;;;:::o;871:86:68:-;944:6;;-1:-1:-1;;;;;944:6:68;;871:86::o;1003:188:54:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:54;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;442:20:20:-;;;;;;;:::i;4281:288:75:-;4428:20;:18;:20::i;:::-;4423:76;;4464:24;;-1:-1:-1;;;4464:24:75;;;;;;;:::i;4423:76::-;4509:53;4535:8;4545:10;4557:4;4509:25;:53::i;2457:291:20:-;2567:10;-1:-1:-1;;;;;2595:17:20;;;;;2587:44;;;;-1:-1:-1;;;2587:44:20;;18976:2:644;2587:44:20;;;18958:21:644;19015:2;18995:18;;;18988:30;-1:-1:-1;;;19034:18:644;;;19027:44;19088:18;;2587:44:20;18774:338:644;2587:44:20;-1:-1:-1;;;;;2641:23:20;;;;;;;:16;:23;;;;;;;;:33;;;;;;;;;;;;;:44;;-1:-1:-1;;2641:44:20;;;;;;;;;;2700:41;;1159::644;;;2700::20;;1132:18:644;2700:41:20;;;;;;;;2541:207;2457:291;;:::o;698:319:63:-;775:22;831:4;-1:-1:-1;;;;;819:24:63;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:34;;858:9;853:134;873:15;;;853:134;;;922:54;961:4;968;;973:1;968:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;922:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;922:30:63;;-1:-1:-1;;;922:54:63:i;:::-;909:7;917:1;909:10;;;;;;;;:::i;:::-;;;;;;:67;;;;890:3;;;;;:::i;:::-;;;;853:134;;;;698:319;;;;:::o;1254:592:61:-;1409:15;1441:14;:12;:14::i;:::-;1436:70;;1471:24;;-1:-1:-1;;;1471:24:61;;;;;;;:::i;1436:70::-;1520:12;1516:58;;1548:15;;-1:-1:-1;;;1548:15:61;;19845:2:644;1548:15:61;;;19827:21:644;19884:1;19864:18;;;19857:29;-1:-1:-1;;;19902:18:644;;;19895:35;19947:18;;1548:15:61;19643:328:644;1516:58:61;1584:15;1602:21;;1584:39;;1669:55;1688:7;1697;1706:17;;1669:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:18:61;;-1:-1:-1;;;1669:55:61:i;:::-;1635:21;1634:90;;;;;-1:-1:-1;1757:7:61;1740:74;1786:1;1766:17;1776:7;1757;1766:17;:::i;:::-;:21;;;;:::i;:::-;1789:17;;1808:5;;1740:74;;;;;;;;;;:::i;:::-;;;;;;;;1825:14;1254:592;;;;;;;:::o;565:34:54:-;;;;;;;:::i;2754:328:20:-;-1:-1:-1;;;;;2941:18:20;;2949:10;2941:18;;:56;;-1:-1:-1;;;;;;2963:22:20;;;;;;:16;:22;;;;;;;;2986:10;2963:34;;;;;;;;;;2941:56;2933:87;;;;-1:-1:-1;;;2933:87:20;;;;;;;:::i;:::-;3030:45;3048:4;3054:2;3058;3062:6;3070:4;3030:17;:45::i;6442:376:3:-;6581:10;-1:-1:-1;;;;;6610:16:3;;;;;:52;;-1:-1:-1;;;;;;6630:24:3;;;;;;;:16;:24;;;;;;;;:32;;;;;;;;;;;;6610:52;6602:82;;;;-1:-1:-1;;;6602:82:3;;;;;;;:::i;:::-;-1:-1:-1;;;;;6702:17:3;;;;;;:9;:17;;;;;;;;:27;;;;;;;;;:38;-1:-1:-1;6702:38:3;6694:74;;;;-1:-1:-1;;;6694:74:3;;;;;;;:::i;:::-;6779:32;6785:6;6793:8;6803:7;6779:5;:32::i;2849:390:52:-;2911:13;2936:25;2964:17;1729:8;:15;;1655:96;2964:17;2936:45;;2991:24;3018:8;2991:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3042:9;3037:161;3061:17;3057:1;:21;3037:161;;;3117:7;3125:1;3117:10;;;;;;;;:::i;:::-;;;;;;;3106:8;:21;3102:86;;;3154:7;:19;3162:7;3170:1;3162:10;;;;;;;;:::i;:::-;;;;;;;3154:19;;;;;;;;;;;3147:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:390;;;:::o;3102:86::-;3080:6;3085:1;3080:6;;:::i;:::-;;;3037:161;;;-1:-1:-1;3207:25:52;;-1:-1:-1;;;3207:25:52;;21091:2:644;3207:25:52;;;21073:21:644;21130:2;21110:18;;;21103:30;-1:-1:-1;;;21149:18:644;;;21142:45;21204:18;;3207:25:52;20889:339:644;305:703:292;361:13;578:10;574:51;;-1:-1:-1;;604:10:292;;;;;;;;;;;;-1:-1:-1;;;604:10:292;;;;;305:703::o;574:51::-;649:5;634:12;688:75;695:9;;688:75;;720:8;;;;:::i;:::-;;-1:-1:-1;742:10:292;;-1:-1:-1;750:2:292;742:10;;:::i;:::-;;;688:75;;;772:19;804:6;-1:-1:-1;;;;;794:17:292;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;794:17:292;;772:39;;821:150;828:10;;821:150;;854:11;864:1;854:11;;:::i;:::-;;-1:-1:-1;922:10:292;930:2;922:5;:10;:::i;:::-;909:24;;:2;:24;:::i;:::-;896:39;;879:6;886;879:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;879:56:292;;;;;;;;-1:-1:-1;949:11:292;958:2;949:11;;:::i;:::-;;;821:150;;;994:6;305:703;-1:-1:-1;;;;305:703:292:o;10257:115:3:-;10321:4;10358:7;:5;:7::i;:::-;-1:-1:-1;;;;;10344:21:3;:10;-1:-1:-1;;;;;10344:21:3;;10337:28;;10257:115;:::o;1421:172:68:-;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;9556:193:3:-;9701:41;9707:9;9718:8;9728:9;9701:41;;;;;;;;;;;;:5;:41::i;4386:967:20:-;4606:7;:14;4592:3;:10;:28;4584:56;;;;-1:-1:-1;;;4584:56:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;4658:16:20;;4650:41;;;;-1:-1:-1;;;4650:41:20;;;;;;;:::i;:::-;4721:10;4742:60;4721:10;4773:4;4779:2;4783:3;4788:7;4797:4;4742:20;:60::i;:::-;4818:9;4813:385;4837:3;:10;4833:1;:14;4813:385;;;4868:10;4881:3;4885:1;4881:6;;;;;;;;:::i;:::-;;;;;;;4868:19;;4901:14;4918:7;4926:1;4918:10;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;4965:15:20;;4943:19;4965:15;;;:9;:15;;;;;;:19;;;;;;;;;;;4918:10;;-1:-1:-1;5006:21:20;;;;4998:50;;;;-1:-1:-1;;;4998:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;5090:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;5112:20;;;5090:42;;5160:13;;;;;;;;;;;:17;;;;;;;;:27;;5126:6;;5090:15;5160:27;;5126:6;;5160:27;:::i;:::-;;;;;;;;4854:344;;;4849:3;;;;:::i;:::-;;;4813:385;;;;5243:2;-1:-1:-1;;;;;5213:47:20;5237:4;-1:-1:-1;;;;;5213:47:20;5227:8;-1:-1:-1;;;;;5213:47:20;;5247:3;5252:7;5213:47;;;;;;;:::i;:::-;;;;;;;;5271:75;5307:8;5317:4;5323:2;5327:3;5332:7;5341:4;5271:35;:75::i;:::-;4574:779;4386:967;;;;;:::o;3430:334:75:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:75;;;;;;;:::i;3531:76::-;3617:16;:36;;-1:-1:-1;;;;;3617:36:75;;-1:-1:-1;;;;;;3663:32:75;;;;;-1:-1:-1;;;3663:32:75;;;;;;;;3711:46;;597:25:644;;;3711:46:75;;585:2:644;570:18;3711:46:75;;;;;;;3430:334;;:::o;7284:799:20:-;-1:-1:-1;;;;;7431:18:20;;7423:45;;;;-1:-1:-1;;;7423:45:20;;;;;;;:::i;:::-;7500:7;:14;7486:3;:10;:28;7478:56;;;;-1:-1:-1;;;7478:56:20;;;;;;;:::i;:::-;7545:16;7564:10;7545:29;;7585:66;7606:8;7616:4;7630:1;7634:3;7639:7;7585:66;;;;;;;;;;;;:20;:66::i;:::-;7667:9;7662:344;7686:3;:10;7682:1;:14;7662:344;;;7717:10;7730:3;7734:1;7730:6;;;;;;;;:::i;:::-;;;;;;;7717:19;;7750:14;7767:7;7775:1;7767:10;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;7814:15:20;;7792:19;7814:15;;;:9;:15;;;;;;:19;;;;;;;;;;;7767:10;;-1:-1:-1;7855:21:20;;;;7847:50;;;;-1:-1:-1;;;7847:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;7939:15:20;;;;;;:9;:15;;;;;;;;:19;;;;;;;;;;7961:20;;7939:42;;7698:3;;;;:::i;:::-;;;;7662:344;;;;8059:1;-1:-1:-1;;;;;8021:55:20;8045:4;-1:-1:-1;;;;;8021:55:20;8035:8;-1:-1:-1;;;;;8021:55:20;;8063:3;8068:7;8021:55;;;;;;;:::i;:::-;;;;;;;;7413:670;7284:799;;;:::o;1273:185:54:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1384:18:54;;1339:35;;-1:-1:-1;1384:18:54;;:11;;-1:-1:-1;1384:18:54;;;;-1:-1:-1;1384:18:54;-1:-1:-1;1384:18:54;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4671:362:75:-;4818:6;4811:4;:13;4807:69;;;4840:25;;-1:-1:-1;;;4840:25:75;;;;;;;:::i;4807:69::-;4918:49;;;;;;;;-1:-1:-1;;;;;4918:49:75;;;;;;;;;;;;;-1:-1:-1;4886:29:75;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4886:81:75;;;;;;;;;;;-1:-1:-1;4886:81:75;;;;;;;4983:43;;597:25:644;;;4918:49:75;;4886:29;;4983:43;;570:18:644;4983:43:75;451:177:644;6538:198:288;6621:12;6652:77;6673:6;6681:4;6652:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6645:84;6538:198;-1:-1:-1;;;6538:198:288:o;4535:362:52:-;4685:25;;4749:24;4760:13;4749:8;:24;:::i;:::-;4821:8;:22;;;;;;;;;;;;;-1:-1:-1;4854:16:52;;;:7;4821:22;4854:16;;;;;;;:36;;4739:34;;-1:-1:-1;4739:34:52;;-1:-1:-1;4854:36:52;;:16;;:36;;;;:::i;:::-;;4535:362;;;;;;:::o;3636:744:20:-;-1:-1:-1;;;;;3817:16:20;;3809:41;;;;-1:-1:-1;;;3809:41:20;;;;;;;:::i;:::-;3880:10;3901:96;3880:10;3932:4;3938:2;3942:21;3960:2;3942:17;:21::i;:::-;3965:25;3983:6;3965:17;:25::i;:::-;3992:4;3901:20;:96::i;:::-;-1:-1:-1;;;;;4030:15:20;;4008:19;4030:15;;;:9;:15;;;;;;;;:19;;;;;;;;;4067:21;;;;4059:50;;;;-1:-1:-1;;;4059:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;4143:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;4165:20;;;4143:42;;4205:13;;;;;;;;;;;:17;;;;;;;;:27;;4179:6;;4143:15;4205:27;;4179:6;;4205:27;:::i;:::-;;;;-1:-1:-1;;4248:46:20;;;23755:25:644;;;23811:2;23796:18;;23789:34;;;-1:-1:-1;;;;;4248:46:20;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;4248:46:20;23728:18:644;4248:46:20;;;;;;;4305:68;4336:8;4346:4;4352:2;4356;4360:6;4368:4;4305:30;:68::i;:::-;3799:581;;3636:744;;;;;:::o;6691:587::-;-1:-1:-1;;;;;6813:18:20;;6805:45;;;;-1:-1:-1;;;6805:45:20;;;;;;;:::i;:::-;6880:10;6901:102;6880:10;6932:4;6861:16;6950:21;6968:2;6950:17;:21::i;:::-;6973:25;6991:6;6973:17;:25::i;:::-;6901:102;;;;;;;;;;;;:20;:102::i;:::-;-1:-1:-1;;;;;7036:15:20;;7014:19;7036:15;;;:9;:15;;;;;;;;:19;;;;;;;;;7073:21;;;;7065:50;;;;-1:-1:-1;;;7065:50:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;7149:15:20;;;;;;;:9;:15;;;;;;;;:19;;;;;;;;7171:20;;;7149:42;;7217:54;;23755:25:644;;;23796:18;;;23789:34;;;7149:15:20;;7217:54;;;-1:-1:-1;;;;;;;;;;;7217:54:20;23728:18:644;7217:54:20;;;;;;;6795:483;;6691:587;;;:::o;5482:530::-;-1:-1:-1;;;;;5629:16:20;;5621:41;;;;-1:-1:-1;;;5621:41:20;;;;;;;:::i;:::-;5692:10;5713:102;5692:10;5673:16;5756:2;5760:21;5778:2;5760:17;:21::i;5713:102::-;-1:-1:-1;;;;;5826:13:20;;;;;;:9;:13;;;;;;;;:17;;;;;;;;:27;;5847:6;;5826:13;:27;;5847:6;;5826:27;:::i;:::-;;;;-1:-1:-1;;5868:52:20;;;23755:25:644;;;23811:2;23796:18;;23789:34;;;-1:-1:-1;;;;;5868:52:20;;;;5901:1;;5868:52;;;;-1:-1:-1;;;;;;;;;;;5868:52:20;23728:18:644;5868:52:20;;;;;;;5931:74;5962:8;5980:1;5984:2;5988;5992:6;6000:4;5931:30;:74::i;11109:632:3:-;-1:-1:-1;;;;;11421:18:3;;11417:155;;11460:9;11455:107;11479:3;:10;11475:1;:14;11455:107;;;11537:7;11545:1;11537:10;;;;;;;;:::i;:::-;;;;;;;11514:11;:19;11526:3;11530:1;11526:6;;;;;;;;:::i;:::-;;;;;;;11514:19;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;-1:-1:-1;11491:3:3;;-1:-1:-1;11491:3:3;;:::i;:::-;;;11455:107;;;;11417:155;-1:-1:-1;;;;;11586:16:3;;11582:153;;11623:9;11618:107;11642:3;:10;11638:1;:14;11618:107;;;11700:7;11708:1;11700:10;;;;;;;;:::i;:::-;;;;;;;11677:11;:19;11689:3;11693:1;11689:6;;;;;;;;:::i;:::-;;;;;;;11677:19;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;-1:-1:-1;11654:3:3;;-1:-1:-1;11654:3:3;;:::i;:::-;;;11618:107;;8982:734:20;-1:-1:-1;;;;;9214:14:20;;;:18;9210:500;;9252:79;;-1:-1:-1;;;9252:79:20;;-1:-1:-1;;;;;9252:43:20;;;;;:79;;9296:8;;9306:4;;9312:3;;9317:7;;9326:4;;9252:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9252:79:20;;;;;;;;-1:-1:-1;;9252:79:20;;;;;;;;;;;;:::i;:::-;;;9248:452;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;9612:6;9605:14;;-1:-1:-1;;;9605:14:20;;;;;;;;:::i;9248:452::-;;;9659:26;;-1:-1:-1;;;9659:26:20;;25982:2:644;9659:26:20;;;25964:21:644;26021:2;26001:18;;;25994:30;-1:-1:-1;;;26040:18:644;;;26033:46;26096:18;;9659:26:20;25780:340:644;9248:452:20;-1:-1:-1;;;;;;9410:60:20;;-1:-1:-1;;;9410:60:20;9406:132;;9494:25;;-1:-1:-1;;;9494:25:20;;;;;;;:::i;6922:387:288:-;7063:12;-1:-1:-1;;;;;1427:19:288;;;7087:69;;;;-1:-1:-1;;;7087:69:288;;26671:2:644;7087:69:288;;;26653:21:644;26710:2;26690:18;;;26683:30;26749:34;26729:18;;;26722:62;-1:-1:-1;;;26800:18:644;;;26793:36;26846:19;;7087:69:288;26469:402:644;7087:69:288;7168:12;7182:23;7209:6;-1:-1:-1;;;;;7209:19:288;7229:4;7209:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7167:67;;;;7251:51;7268:7;7277:10;7289:12;7251:16;:51::i;:::-;7244:58;6922:387;-1:-1:-1;;;;;;6922:387:288:o;9722:193:20:-;9841:16;;;9855:1;9841:16;;;;;;;;;9788;;9816:22;;9841:16;;;;;;;;;;;;-1:-1:-1;9841:16:20;9816:41;;9878:7;9867:5;9873:1;9867:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;9903:5;9722:193;-1:-1:-1;;9722:193:20:o;8309:667::-;-1:-1:-1;;;;;8516:14:20;;;:18;8512:458;;8554:72;;-1:-1:-1;;;8554:72:20;;-1:-1:-1;;;;;8554:38:20;;;;;:72;;8593:8;;8603:4;;8609:2;;8613:6;;8621:4;;8554:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8554:72:20;;;;;;;;-1:-1:-1;;8554:72:20;;;;;;;;;;;;:::i;:::-;;;8550:410;;;;:::i;:::-;-1:-1:-1;;;;;;8675:55:20;;-1:-1:-1;;;8675:55:20;8671:127;;8754:25;;-1:-1:-1;;;8754:25:20;;;;;;;:::i;7529:692:288:-;7675:12;7703:7;7699:516;;;-1:-1:-1;7733:10:288;7726:17;;7699:516;7844:17;;:21;7840:365;;8038:10;8032:17;8098:15;8085:10;8081:2;8077:19;8070:44;7840:365;8177:12;8170:20;;-1:-1:-1;;;8170:20:288;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:173:644;82:20;;-1:-1:-1;;;;;131:31:644;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:644:o;633:131::-;-1:-1:-1;;;;;;707:32:644;;697:43;;687:71;;754:1;751;744:12;769:245;827:6;880:2;868:9;859:7;855:23;851:32;848:52;;;896:1;893;886:12;848:52;935:9;922:23;954:30;978:5;954:30;:::i;1211:258::-;1283:1;1293:113;1307:6;1304:1;1301:13;1293:113;;;1383:11;;;1377:18;1364:11;;;1357:39;1329:2;1322:10;1293:113;;;1424:6;1421:1;1418:13;1415:48;;;-1:-1:-1;;1459:1:644;1441:16;;1434:27;1211:258::o;1474:::-;1516:3;1554:5;1548:12;1581:6;1576:3;1569:19;1597:63;1653:6;1646:4;1641:3;1637:14;1630:4;1623:5;1619:16;1597:63;:::i;:::-;1714:2;1693:15;-1:-1:-1;;1689:29:644;1680:39;;;;1721:4;1676:50;;1474:258;-1:-1:-1;;1474:258:644:o;1737:220::-;1886:2;1875:9;1868:21;1849:4;1906:45;1947:2;1936:9;1932:18;1924:6;1906:45;:::i;1962:180::-;2021:6;2074:2;2062:9;2053:7;2049:23;2045:32;2042:52;;;2090:1;2087;2080:12;2042:52;-1:-1:-1;2113:23:644;;1962:180;-1:-1:-1;1962:180:644:o;2147:186::-;2206:6;2259:2;2247:9;2238:7;2234:23;2230:32;2227:52;;;2275:1;2272;2265:12;2227:52;2298:29;2317:9;2298:29;:::i;2338:248::-;2406:6;2414;2467:2;2455:9;2446:7;2442:23;2438:32;2435:52;;;2483:1;2480;2473:12;2435:52;-1:-1:-1;;2506:23:644;;;2576:2;2561:18;;;2548:32;;-1:-1:-1;2338:248:644:o;2870:322::-;2947:6;2955;2963;3016:2;3004:9;2995:7;2991:23;2987:32;2984:52;;;3032:1;3029;3022:12;2984:52;3055:29;3074:9;3055:29;:::i;:::-;3045:39;3131:2;3116:18;;3103:32;;-1:-1:-1;3182:2:644;3167:18;;;3154:32;;2870:322;-1:-1:-1;;;2870:322:644:o;3197:127::-;3258:10;3253:3;3249:20;3246:1;3239:31;3289:4;3286:1;3279:15;3313:4;3310:1;3303:15;3329:249;3439:2;3420:13;;-1:-1:-1;;3416:27:644;3404:40;;-1:-1:-1;;;;;3459:34:644;;3495:22;;;3456:62;3453:88;;;3521:18;;:::i;:::-;3557:2;3550:22;-1:-1:-1;;3329:249:644:o;3583:183::-;3643:4;-1:-1:-1;;;;;3668:6:644;3665:30;3662:56;;;3698:18;;:::i;:::-;-1:-1:-1;3743:1:644;3739:14;3755:4;3735:25;;3583:183::o;3771:724::-;3825:5;3878:3;3871:4;3863:6;3859:17;3855:27;3845:55;;3896:1;3893;3886:12;3845:55;3932:6;3919:20;3958:4;3981:43;4021:2;3981:43;:::i;:::-;4053:2;4047:9;4065:31;4093:2;4085:6;4065:31;:::i;:::-;4131:18;;;4223:1;4219:10;;;;4207:23;;4203:32;;;4165:15;;;;-1:-1:-1;4247:15:644;;;4244:35;;;4275:1;4272;4265:12;4244:35;4311:2;4303:6;4299:15;4323:142;4339:6;4334:3;4331:15;4323:142;;;4405:17;;4393:30;;4443:12;;;;4356;;4323:142;;;-1:-1:-1;4483:6:644;3771:724;-1:-1:-1;;;;;;3771:724:644:o;4500:468::-;4564:5;-1:-1:-1;;;;;4590:6:644;4587:30;4584:56;;;4620:18;;:::i;:::-;4669:2;4663:9;4681:69;4738:2;4717:15;;-1:-1:-1;;4713:29:644;4744:4;4709:40;4663:9;4681:69;:::i;:::-;4768:6;4759:15;;4798:6;4790;4783:22;4838:3;4829:6;4824:3;4820:16;4817:25;4814:45;;;4855:1;4852;4845:12;4814:45;4905:6;4900:3;4893:4;4885:6;4881:17;4868:44;4960:1;4953:4;4944:6;4936;4932:19;4928:30;4921:41;;4500:468;;;;;:::o;4973:220::-;5015:5;5068:3;5061:4;5053:6;5049:17;5045:27;5035:55;;5086:1;5083;5076:12;5035:55;5108:79;5183:3;5174:6;5161:20;5154:4;5146:6;5142:17;5108:79;:::i;5198:943::-;5352:6;5360;5368;5376;5384;5437:3;5425:9;5416:7;5412:23;5408:33;5405:53;;;5454:1;5451;5444:12;5405:53;5477:29;5496:9;5477:29;:::i;:::-;5467:39;;5525:38;5559:2;5548:9;5544:18;5525:38;:::i;:::-;5515:48;;5614:2;5603:9;5599:18;5586:32;-1:-1:-1;;;;;5678:2:644;5670:6;5667:14;5664:34;;;5694:1;5691;5684:12;5664:34;5717:61;5770:7;5761:6;5750:9;5746:22;5717:61;:::i;:::-;5707:71;;5831:2;5820:9;5816:18;5803:32;5787:48;;5860:2;5850:8;5847:16;5844:36;;;5876:1;5873;5866:12;5844:36;5899:63;5954:7;5943:8;5932:9;5928:24;5899:63;:::i;:::-;5889:73;;6015:3;6004:9;6000:19;5987:33;5971:49;;6045:2;6035:8;6032:16;6029:36;;;6061:1;6058;6051:12;6029:36;;6084:51;6127:7;6116:8;6105:9;6101:24;6084:51;:::i;:::-;6074:61;;;5198:943;;;;;;;;:::o;6436:1208::-;6554:6;6562;6615:2;6603:9;6594:7;6590:23;6586:32;6583:52;;;6631:1;6628;6621:12;6583:52;6671:9;6658:23;-1:-1:-1;;;;;6741:2:644;6733:6;6730:14;6727:34;;;6757:1;6754;6747:12;6727:34;6795:6;6784:9;6780:22;6770:32;;6840:7;6833:4;6829:2;6825:13;6821:27;6811:55;;6862:1;6859;6852:12;6811:55;6898:2;6885:16;6920:4;6943:43;6983:2;6943:43;:::i;:::-;7015:2;7009:9;7027:31;7055:2;7047:6;7027:31;:::i;:::-;7093:18;;;7181:1;7177:10;;;;7169:19;;7165:28;;;7127:15;;;;-1:-1:-1;7205:19:644;;;7202:39;;;7237:1;7234;7227:12;7202:39;7261:11;;;;7281:148;7297:6;7292:3;7289:15;7281:148;;;7363:23;7382:3;7363:23;:::i;:::-;7351:36;;7314:12;;;;7407;;;;7281:148;;;7448:6;-1:-1:-1;;7492:18:644;;7479:32;;-1:-1:-1;;7523:16:644;;;7520:36;;;7552:1;7549;7542:12;7520:36;;7575:63;7630:7;7619:8;7608:9;7604:24;7575:63;:::i;:::-;7565:73;;;6436:1208;;;;;:::o;7649:435::-;7702:3;7740:5;7734:12;7767:6;7762:3;7755:19;7793:4;7822:2;7817:3;7813:12;7806:19;;7859:2;7852:5;7848:14;7880:1;7890:169;7904:6;7901:1;7898:13;7890:169;;;7965:13;;7953:26;;7999:12;;;;8034:15;;;;7926:1;7919:9;7890:169;;;-1:-1:-1;8075:3:644;;7649:435;-1:-1:-1;;;;;7649:435:644:o;8089:261::-;8268:2;8257:9;8250:21;8231:4;8288:56;8340:2;8329:9;8325:18;8317:6;8288:56;:::i;8355:669::-;8482:6;8490;8498;8551:2;8539:9;8530:7;8526:23;8522:32;8519:52;;;8567:1;8564;8557:12;8519:52;8590:29;8609:9;8590:29;:::i;:::-;8580:39;;8670:2;8659:9;8655:18;8642:32;-1:-1:-1;;;;;8734:2:644;8726:6;8723:14;8720:34;;;8750:1;8747;8740:12;8720:34;8773:61;8826:7;8817:6;8806:9;8802:22;8773:61;:::i;:::-;8763:71;;8887:2;8876:9;8872:18;8859:32;8843:48;;8916:2;8906:8;8903:16;8900:36;;;8932:1;8929;8922:12;8900:36;;8955:63;9010:7;8999:8;8988:9;8984:24;8955:63;:::i;:::-;8945:73;;;8355:669;;;;;:::o;9237:450::-;9306:6;9359:2;9347:9;9338:7;9334:23;9330:32;9327:52;;;9375:1;9372;9365:12;9327:52;9415:9;9402:23;-1:-1:-1;;;;;9440:6:644;9437:30;9434:50;;;9480:1;9477;9470:12;9434:50;9503:22;;9556:4;9548:13;;9544:27;-1:-1:-1;9534:55:644;;9585:1;9582;9575:12;9534:55;9608:73;9673:7;9668:2;9655:16;9650:2;9646;9642:11;9608:73;:::i;9692:322::-;9769:6;9777;9785;9838:2;9826:9;9817:7;9813:23;9809:32;9806:52;;;9854:1;9851;9844:12;9806:52;9890:9;9877:23;9867:33;;9919:38;9953:2;9942:9;9938:18;9919:38;:::i;:::-;9909:48;;10004:2;9993:9;9989:18;9976:32;9966:42;;9692:322;;;;;:::o;10019:347::-;10084:6;10092;10145:2;10133:9;10124:7;10120:23;10116:32;10113:52;;;10161:1;10158;10151:12;10113:52;10184:29;10203:9;10184:29;:::i;:::-;10174:39;;10263:2;10252:9;10248:18;10235:32;10310:5;10303:13;10296:21;10289:5;10286:32;10276:60;;10332:1;10329;10322:12;10276:60;10355:5;10345:15;;;10019:347;;;;;:::o;10371:626::-;10468:6;10476;10529:2;10517:9;10508:7;10504:23;10500:32;10497:52;;;10545:1;10542;10535:12;10497:52;10585:9;10572:23;-1:-1:-1;;;;;10655:2:644;10647:6;10644:14;10641:34;;;10671:1;10668;10661:12;10641:34;10709:6;10698:9;10694:22;10684:32;;10754:7;10747:4;10743:2;10739:13;10735:27;10725:55;;10776:1;10773;10766:12;10725:55;10816:2;10803:16;10842:2;10834:6;10831:14;10828:34;;;10858:1;10855;10848:12;10828:34;10911:7;10906:2;10896:6;10893:1;10889:14;10885:2;10881:23;10877:32;10874:45;10871:65;;;10932:1;10929;10922:12;10871:65;10963:2;10955:11;;;;;10985:6;;-1:-1:-1;10371:626:644;;-1:-1:-1;;;;10371:626:644:o;11002:801::-;11162:4;11191:2;11231;11220:9;11216:18;11261:2;11250:9;11243:21;11284:6;11319;11313:13;11350:6;11342;11335:22;11388:2;11377:9;11373:18;11366:25;;11450:2;11440:6;11437:1;11433:14;11422:9;11418:30;11414:39;11400:53;;11488:2;11480:6;11476:15;11509:1;11519:255;11533:6;11530:1;11527:13;11519:255;;;11626:2;11622:7;11610:9;11602:6;11598:22;11594:36;11589:3;11582:49;11654:40;11687:6;11678;11672:13;11654:40;:::i;:::-;11644:50;-1:-1:-1;11752:12:644;;;;11717:15;;;;11555:1;11548:9;11519:255;;;-1:-1:-1;11791:6:644;;11002:801;-1:-1:-1;;;;;;;11002:801:644:o;11808:348::-;11860:8;11870:6;11924:3;11917:4;11909:6;11905:17;11901:27;11891:55;;11942:1;11939;11932:12;11891:55;-1:-1:-1;11965:20:644;;-1:-1:-1;;;;;11997:30:644;;11994:50;;;12040:1;12037;12030:12;11994:50;12077:4;12069:6;12065:17;12053:29;;12129:3;12122:4;12113:6;12105;12101:19;12097:30;12094:39;12091:59;;;12146:1;12143;12136:12;12091:59;11808:348;;;;;:::o;12161:788::-;12261:6;12269;12277;12285;12293;12346:2;12334:9;12325:7;12321:23;12317:32;12314:52;;;12362:1;12359;12352:12;12314:52;12398:9;12385:23;12375:33;;12459:2;12448:9;12444:18;12431:32;-1:-1:-1;;;;;12523:2:644;12515:6;12512:14;12509:34;;;12539:1;12536;12529:12;12509:34;12578:59;12629:7;12620:6;12609:9;12605:22;12578:59;:::i;:::-;12656:8;;-1:-1:-1;12552:85:644;-1:-1:-1;12744:2:644;12729:18;;12716:32;;-1:-1:-1;12760:16:644;;;12757:36;;;12789:1;12786;12779:12;12757:36;;12828:61;12881:7;12870:8;12859:9;12855:24;12828:61;:::i;:::-;12161:788;;;;-1:-1:-1;12161:788:644;;-1:-1:-1;12908:8:644;;12802:87;12161:788;-1:-1:-1;;;12161:788:644:o;12954:260::-;13022:6;13030;13083:2;13071:9;13062:7;13058:23;13054:32;13051:52;;;13099:1;13096;13089:12;13051:52;13122:29;13141:9;13122:29;:::i;:::-;13112:39;;13170:38;13204:2;13193:9;13189:18;13170:38;:::i;:::-;13160:48;;12954:260;;;;;:::o;13219:606::-;13323:6;13331;13339;13347;13355;13408:3;13396:9;13387:7;13383:23;13379:33;13376:53;;;13425:1;13422;13415:12;13376:53;13448:29;13467:9;13448:29;:::i;:::-;13438:39;;13496:38;13530:2;13519:9;13515:18;13496:38;:::i;:::-;13486:48;;13581:2;13570:9;13566:18;13553:32;13543:42;;13632:2;13621:9;13617:18;13604:32;13594:42;;13687:3;13676:9;13672:19;13659:33;-1:-1:-1;;;;;13707:6:644;13704:30;13701:50;;;13747:1;13744;13737:12;13701:50;13770:49;13811:7;13802:6;13791:9;13787:22;13770:49;:::i;13830:380::-;13909:1;13905:12;;;;13952;;;13973:61;;14027:4;14019:6;14015:17;14005:27;;13973:61;14080:2;14072:6;14069:14;14049:18;14046:38;14043:161;;;14126:10;14121:3;14117:20;14114:1;14107:31;14161:4;14158:1;14151:15;14189:4;14186:1;14179:15;14043:161;;13830:380;;;:::o;14215:470::-;14394:3;14432:6;14426:13;14448:53;14494:6;14489:3;14482:4;14474:6;14470:17;14448:53;:::i;:::-;14564:13;;14523:16;;;;14586:57;14564:13;14523:16;14620:4;14608:17;;14586:57;:::i;:::-;14659:20;;14215:470;-1:-1:-1;;;;14215:470:644:o;14690:338::-;14892:2;14874:21;;;14931:2;14911:18;;;14904:30;-1:-1:-1;;;14965:2:644;14950:18;;14943:44;15019:2;15004:18;;14690:338::o;15375:127::-;15436:10;15431:3;15427:20;15424:1;15417:31;15467:4;15464:1;15457:15;15491:4;15488:1;15481:15;15507:127;15568:10;15563:3;15559:20;15556:1;15549:31;15599:4;15596:1;15589:15;15623:4;15620:1;15613:15;15639:168;15679:7;15745:1;15741;15737:6;15733:14;15730:1;15727:21;15722:1;15715:9;15708:17;15704:45;15701:71;;;15752:18;;:::i;:::-;-1:-1:-1;15792:9:644;;15639:168::o;15812:127::-;15873:10;15868:3;15864:20;15861:1;15854:31;15904:4;15901:1;15894:15;15928:4;15925:1;15918:15;15944:120;15984:1;16010;16000:35;;16015:18;;:::i;:::-;-1:-1:-1;16049:9:644;;15944:120::o;16768:342::-;16970:2;16952:21;;;17009:2;16989:18;;;16982:30;-1:-1:-1;;;17043:2:644;17028:18;;17021:48;17101:2;17086:18;;16768:342::o;17115:339::-;17317:2;17299:21;;;17356:2;17336:18;;;17329:30;-1:-1:-1;;;17390:2:644;17375:18;;17368:45;17445:2;17430:18;;17115:339::o;17459:135::-;17498:3;-1:-1:-1;;17519:17:644;;17516:43;;;17539:18;;:::i;:::-;-1:-1:-1;17586:1:644;17575:13;;17459:135::o;17599:341::-;17801:2;17783:21;;;17840:2;17820:18;;;17813:30;-1:-1:-1;;;17874:2:644;17859:18;;17852:47;17931:2;17916:18;;17599:341::o;18289:347::-;18491:2;18473:21;;;18530:2;18510:18;;;18503:30;-1:-1:-1;;;18564:2:644;18549:18;;18542:53;18627:2;18612:18;;18289:347::o;18641:128::-;18681:3;18712:1;18708:6;18705:1;18702:13;18699:39;;;18718:18;;:::i;:::-;-1:-1:-1;18754:9:644;;18641:128::o;19117:521::-;19194:4;19200:6;19260:11;19247:25;19354:2;19350:7;19339:8;19323:14;19319:29;19315:43;19295:18;19291:68;19281:96;;19373:1;19370;19363:12;19281:96;19400:33;;19452:20;;;-1:-1:-1;;;;;;19484:30:644;;19481:50;;;19527:1;19524;19517:12;19481:50;19560:4;19548:17;;-1:-1:-1;19591:14:644;19587:27;;;19577:38;;19574:58;;;19628:1;19625;19618:12;19976:125;20016:4;20044:1;20041;20038:8;20035:34;;;20049:18;;:::i;:::-;-1:-1:-1;20086:9:644;;19976:125::o;20106:267::-;20195:6;20190:3;20183:19;20247:6;20240:5;20233:4;20228:3;20224:14;20211:43;-1:-1:-1;20299:1:644;20274:16;;;20292:4;20270:27;;;20263:38;;;;20355:2;20334:15;;;-1:-1:-1;;20330:29:644;20321:39;;;20317:50;;20106:267::o;20378:506::-;20621:6;20610:9;20603:25;20664:2;20659;20648:9;20644:18;20637:30;20584:4;20690:62;20748:2;20737:9;20733:18;20725:6;20717;20690:62;:::i;:::-;20800:9;20792:6;20788:22;20783:2;20772:9;20768:18;20761:50;20828;20871:6;20863;20855;20828:50;:::i;:::-;20820:58;20378:506;-1:-1:-1;;;;;;;;20378:506:644:o;21233:112::-;21265:1;21291;21281:35;;21296:18;;:::i;:::-;-1:-1:-1;21330:9:644;;21233:112::o;21350:336::-;21552:2;21534:21;;;21591:2;21571:18;;;21564:30;-1:-1:-1;;;21625:2:644;21610:18;;21603:42;21677:2;21662:18;;21350:336::o;21691:340::-;21893:2;21875:21;;;21932:2;21912:18;;;21905:30;-1:-1:-1;;;21966:2:644;21951:18;;21944:46;22022:2;22007:18;;21691:340::o;22036:465::-;22293:2;22282:9;22275:21;22256:4;22319:56;22371:2;22360:9;22356:18;22348:6;22319:56;:::i;:::-;22423:9;22415:6;22411:22;22406:2;22395:9;22391:18;22384:50;22451:44;22488:6;22480;22451:44;:::i;:::-;22443:52;22036:465;-1:-1:-1;;;;;22036:465:644:o;22506:339::-;22708:2;22690:21;;;22747:2;22727:18;;;22720:30;-1:-1:-1;;;22781:2:644;22766:18;;22759:45;22836:2;22821:18;;22506:339::o;22850:338::-;23052:2;23034:21;;;23091:2;23071:18;;;23064:30;-1:-1:-1;;;23125:2:644;23110:18;;23103:44;23179:2;23164:18;;22850:338::o;23193:383::-;23390:2;23379:9;23372:21;23353:4;23416:45;23457:2;23446:9;23442:18;23434:6;23416:45;:::i;:::-;23509:9;23501:6;23497:22;23492:2;23481:9;23477:18;23470:50;23537:33;23563:6;23555;23537:33;:::i;23834:827::-;-1:-1:-1;;;;;24231:15:644;;;24213:34;;24283:15;;24278:2;24263:18;;24256:43;24193:3;24330:2;24315:18;;24308:31;;;24156:4;;24362:57;;24399:19;;24391:6;24362:57;:::i;:::-;24467:9;24459:6;24455:22;24450:2;24439:9;24435:18;24428:50;24501:44;24538:6;24530;24501:44;:::i;:::-;24487:58;;24594:9;24586:6;24582:22;24576:3;24565:9;24561:19;24554:51;24622:33;24648:6;24640;24622:33;:::i;24666:249::-;24735:6;24788:2;24776:9;24767:7;24763:23;24759:32;24756:52;;;24804:1;24801;24794:12;24756:52;24836:9;24830:16;24855:30;24879:5;24855:30;:::i;24920:179::-;24955:3;24997:1;24979:16;24976:23;24973:120;;;25043:1;25040;25037;25022:23;-1:-1:-1;25080:1:644;25074:8;25069:3;25065:18;24973:120;24920:179;:::o;25104:671::-;25143:3;25185:4;25167:16;25164:26;25161:39;;;25104:671;:::o;25161:39::-;25227:2;25221:9;-1:-1:-1;;25292:16:644;25288:25;;25285:1;25221:9;25264:50;25343:4;25337:11;25367:16;-1:-1:-1;;;;;25473:2:644;25466:4;25458:6;25454:17;25451:25;25446:2;25438:6;25435:14;25432:45;25429:58;;;25480:5;;;;;25104:671;:::o;25429:58::-;25517:6;25511:4;25507:17;25496:28;;25553:3;25547:10;25580:2;25572:6;25569:14;25566:27;;;25586:5;;;;;;25104:671;:::o;25566:27::-;25670:2;25651:16;25645:4;25641:27;25637:36;25630:4;25621:6;25616:3;25612:16;25608:27;25605:69;25602:82;;;25677:5;;;;;;25104:671;:::o;25602:82::-;25693:57;25744:4;25735:6;25727;25723:19;25719:30;25713:4;25693:57;:::i;:::-;-1:-1:-1;25766:3:644;;25104:671;-1:-1:-1;;;;;25104:671:644:o;26125:339::-;26327:2;26309:21;;;26366:2;26346:18;;;26339:30;-1:-1:-1;;;26400:2:644;26385:18;;26378:45;26455:2;26440:18;;26125:339::o;26876:274::-;27005:3;27043:6;27037:13;27059:53;27105:6;27100:3;27093:4;27085:6;27081:17;27059:53;:::i;:::-;27128:16;;;;;26876:274;-1:-1:-1;;26876:274:644:o;27155:561::-;-1:-1:-1;;;;;27452:15:644;;;27434:34;;27504:15;;27499:2;27484:18;;27477:43;27551:2;27536:18;;27529:34;;;27594:2;27579:18;;27572:34;;;27414:3;27637;27622:19;;27615:32;;;27377:4;;27664:46;;27690:19;;27682:6;27664:46;:::i;:::-;27656:54;27155:561;-1:-1:-1;;;;;;;27155:561:644:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "balanceOf(address,uint256)": "00fdd58e",
    "balanceOfBatch(address[],uint256[])": "4e1273f4",
    "batchFrozen(uint256)": "83040532",
    "burn(address,uint256,uint256)": "f5298aca",
    "burnBatch(address,uint256[],uint256[])": "6b20c454",
    "claim(address,uint256,uint256)": "2bc43fd9",
    "contractURI()": "e8a3d485",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "lazyMint(uint256,string,bytes)": "d37c353b",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToMint()": "3b1475a7",
    "owner()": "8da5cb5b",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
    "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "totalSupply(uint256)": "bd85b039",
    "uri(uint256)": "0e89341c",
    "verifyClaim(address,uint256,uint256)": "4bbb1abf"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of the NFT to burn.\",\"_owner\":\"The owner of the NFT to burn.\",\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"burnBatch(address,uint256[],uint256[])\":{\"params\":{\"_amounts\":\"The amounts of the NFTs to burn.\",\"_owner\":\"The owner of the NFTs to burn.\",\"_tokenIds\":\"The tokenIds of the NFTs to burn.\"}},\"claim(address,uint256,uint256)\":{\"details\":\"The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.\",\"params\":{\"_quantity\":\"The number of tokens to mint.\",\"_receiver\":\"The recipient of the tokens to mint.\",\"_tokenId\":\"The tokenId of the lazy minted NFT to mint.\"}},\"constructor\":{\"params\":{\"_defaultAdmin\":\"The default admin of the contract.\",\"_name\":\"The name of the contract.\",\"_royaltyBps\":\"The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)\",\"_royaltyRecipient\":\"The address to receive royalties.\",\"_symbol\":\"The symbol of the contract.\"}},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"Index of the desired batch in batchIds array.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"_amount\":\"The number of NFTs to lazy mint.\",\"_baseURIForTokens\":\"The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each                           of those NFTs is `${baseURIForTokens}/${tokenId}`.\",\"_data\":\"Additional bytes data to be used at the discretion of the consumer of the contract.\"},\"returns\":{\"batchId\":\"         A unique integer identifier for the batch of NFTs lazy minted together.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"uri(uint256)\":{\"params\":{\"_tokenId\":\"The tokenId of the NFT.\"},\"returns\":{\"_0\":\"The metadata URI for the given tokenId.\"}},\"verifyClaim(address,uint256,uint256)\":{\"details\":\"Checks a request to claim NFTs against a custom condition.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\",\"_tokenId\":\"The tokenId of the lazy minted NFT to mint.\"}}},\"stateVariables\":{\"totalSupply\":{\"details\":\"Mapping from tokenId => total circulating supply of NFTs of that tokenId.\"}},\"version\":1},\"userdoc\":{\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"notice\":\"So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of an account's Tokens.\"},\"burn(address,uint256,uint256)\":{\"notice\":\"Lets an owner or approved operator burn NFTs of the given tokenId.\"},\"burnBatch(address,uint256[],uint256[])\":{\"notice\":\"Lets an owner or approved operator burn NFTs of the given tokenIds.\"},\"claim(address,uint256,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc.\"},\"constructor\":{\"notice\":\"Initializes the contract during construction.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens at the given index.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given owner.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an authorized address lazy mint a given amount of NFTs.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be lazy minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"totalSupply(uint256)\":{\"notice\":\"Returns the total supply of NFTs of a given tokenId\"},\"uri(uint256)\":{\"notice\":\"Returns the metadata URI for the given tokenId.\"},\"verifyClaim(address,uint256,uint256)\":{\"notice\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\"}},\"notice\":\"BASE:      ERC1155Base      EXTENSION: LazyMint  The `ERC1155LazyMint` smart contract implements the ERC1155 NFT standard.  It includes the following additions to standard ERC1155 logic:      - Lazy minting      - Ability to mint NFTs via the provided `mintTo` and `batchMintTo` functions.      - Contract metadata for royalty support on platforms such as OpenSea that use        off-chain information to distribute roaylties.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2981 compliance for royalty support on NFT marketplaces.  The `ERC1155LazyMint` contract uses the `LazyMint` extension.  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'  of  NFTs means actually assigning an owner to an NFT.  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,  without paying the gas cost for actually minting the NFTs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC1155LazyMint.sol\":\"ERC1155LazyMint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC1155LazyMint.sol\":{\"keccak256\":\"0x551e786d1f916fef5c990e7ac323e75a126ffbd769923a8a4784d7169a94512a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1767b7da078c1ca149339e18591289d06aa70a49b33623b8983fb190b8d899e0\",\"dweb:/ipfs/QmS2SeJeBLmNAYPeLwimi4szd8cHPFbE5Wsp55VscpuxFi\"]},\"contracts/eip/ERC1155.sol\":{\"keccak256\":\"0x378fcbe3a191a44060f66b2b2932391cbf31f945039087b9024bb2eee91ba5b6\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://f36697fa07898c79d77d0b294849de4eab4b6d24679c33f0b448b8d82e172f4b\",\"dweb:/ipfs/QmZ8jqskjHnjHuoDqa9dQdP6KrRDyHcvBKVDZZNXX9e7bS\"]},\"contracts/eip/interface/IERC1155.sol\":{\"keccak256\":\"0x17c265f3f47161c9d2f6c7f7f4040440df9ad4cd7eb74eb411bf25a94b542f9e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4f468eb184f2a08909834b51e33e854741647f9798aa1e6746f3f1b69525552\",\"dweb:/ipfs/QmbCMy9vJLga2dCxGG6nXW7VKGqsMrzU8phPhcd58xkapq\"]},\"contracts/eip/interface/IERC1155Metadata.sol\":{\"keccak256\":\"0xe9d530111d75c5d6db4ca4f30dd76d6a29d9363ab7390e922942a0fc9e3ce32e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8272be1ca643bd3038fd67b00acad09a8dca44536284bcca6b862d09f8b53e43\",\"dweb:/ipfs/Qme9wiWPDfh36xm7TNaxpAYxv5jAptMNLtYksRwc5zNFbU\"]},\"contracts/eip/interface/IERC1155Receiver.sol\":{\"keccak256\":\"0xfef511c703e7ebdb193d35a67e0d9b70728789b2ac45cc5cf5ee56c4ad034f00\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f838e560ba0caddc54ad4ba082e0ff3bf27a721c15bc0cf19791fef7940837a5\",\"dweb:/ipfs/QmTwfwYYK4Ky9PPhdDoVVmZJaJ7y2hZDH8YnBQRfiA8Baz\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf\",\"dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0x1d1ee64f8456dc8b4cdd096e27ac4687babd485f49a728146126744d67f25f2f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9e01b0d51bdccbcce9095f606c8624926b518c1385c1349c41896236a0345ee0\",\"dweb:/ipfs/QmWHTbztwRf9Fyq4617MrVSqF8o7UXMT5nFe6epQ92N6L9\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/LazyMint.sol\":{\"keccak256\":\"0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827\",\"dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2\",\"dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485\",\"dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1\"]},\"contracts/extension/interface/IClaimableERC1155.sol\":{\"keccak256\":\"0x022e90a3152a20e95fedacf8282e0c31b768627cb6310fa8ffa0615064fb15db\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c51a34ea5c85413cbb501e8115162897e4e51076905daa488f19870410cf80df\",\"dweb:/ipfs/Qmee9iQDzWTeyKioibkeX67YCRz51AJYkvLS2yuyjy4AwX\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/ILazyMint.sol\":{\"keccak256\":\"0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3\",\"dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b\",\"dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8\"]},\"contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623\",\"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6\"]},\"contracts/lib/TWAddress.sol\":{\"keccak256\":\"0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e\",\"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6\"]},\"contracts/lib/TWStrings.sol\":{\"keccak256\":\"0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9\",\"dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchMetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "MetadataFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[]",
              "name": "_ids",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "_values",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferBatch",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferSingle",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_value",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "URI",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOfBatch",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "batchFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "_tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "_amounts",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burnBatch"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeBatchTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "uri",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "burn(address,uint256,uint256)": {
            "params": {
              "_amount": "The amount of the NFT to burn.",
              "_owner": "The owner of the NFT to burn.",
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "burnBatch(address,uint256[],uint256[])": {
            "params": {
              "_amounts": "The amounts of the NFTs to burn.",
              "_owner": "The owner of the NFTs to burn.",
              "_tokenIds": "The tokenIds of the NFTs to burn."
            }
          },
          "claim(address,uint256,uint256)": {
            "details": "The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.",
            "params": {
              "_quantity": "The number of tokens to mint.",
              "_receiver": "The recipient of the tokens to mint.",
              "_tokenId": "The tokenId of the lazy minted NFT to mint."
            }
          },
          "constructor": {
            "params": {
              "_defaultAdmin": "The default admin of the contract.",
              "_name": "The name of the contract.",
              "_royaltyBps": "The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)",
              "_royaltyRecipient": "The address to receive royalties.",
              "_symbol": "The symbol of the contract."
            }
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "Index of the desired batch in batchIds array."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "lazyMint(uint256,string,bytes)": {
            "params": {
              "_amount": "The number of NFTs to lazy mint.",
              "_baseURIForTokens": "The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each                           of those NFTs is `${baseURIForTokens}/${tokenId}`.",
              "_data": "Additional bytes data to be used at the discretion of the consumer of the contract."
            },
            "returns": {
              "batchId": "         A unique integer identifier for the batch of NFTs lazy minted together."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "uri(uint256)": {
            "params": {
              "_tokenId": "The tokenId of the NFT."
            },
            "returns": {
              "_0": "The metadata URI for the given tokenId."
            }
          },
          "verifyClaim(address,uint256,uint256)": {
            "details": "Checks a request to claim NFTs against a custom condition.",
            "params": {
              "_claimer": "Caller of the claim function.",
              "_quantity": "The number of NFTs being claimed.",
              "_tokenId": "The tokenId of the lazy minted NFT to mint."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "balanceOf(address,uint256)": {
            "notice": "Get the balance of an account's Tokens."
          },
          "burn(address,uint256,uint256)": {
            "notice": "Lets an owner or approved operator burn NFTs of the given tokenId."
          },
          "burnBatch(address,uint256[],uint256[])": {
            "notice": "Lets an owner or approved operator burn NFTs of the given tokenIds."
          },
          "claim(address,uint256,uint256)": {
            "notice": "Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc."
          },
          "constructor": {
            "notice": "Initializes the contract during construction."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens at the given index."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "isApprovedForAll(address,address)": {
            "notice": "Queries the approval status of an operator for a given owner."
          },
          "lazyMint(uint256,string,bytes)": {
            "notice": "Lets an authorized address lazy mint a given amount of NFTs."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be lazy minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "totalSupply(uint256)": {
            "notice": "Returns the total supply of NFTs of a given tokenId"
          },
          "uri(uint256)": {
            "notice": "Returns the metadata URI for the given tokenId."
          },
          "verifyClaim(address,uint256,uint256)": {
            "notice": "Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC1155LazyMint.sol": "ERC1155LazyMint"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC1155LazyMint.sol": {
        "keccak256": "0x551e786d1f916fef5c990e7ac323e75a126ffbd769923a8a4784d7169a94512a",
        "urls": [
          "bzz-raw://1767b7da078c1ca149339e18591289d06aa70a49b33623b8983fb190b8d899e0",
          "dweb:/ipfs/QmS2SeJeBLmNAYPeLwimi4szd8cHPFbE5Wsp55VscpuxFi"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC1155.sol": {
        "keccak256": "0x378fcbe3a191a44060f66b2b2932391cbf31f945039087b9024bb2eee91ba5b6",
        "urls": [
          "bzz-raw://f36697fa07898c79d77d0b294849de4eab4b6d24679c33f0b448b8d82e172f4b",
          "dweb:/ipfs/QmZ8jqskjHnjHuoDqa9dQdP6KrRDyHcvBKVDZZNXX9e7bS"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC1155.sol": {
        "keccak256": "0x17c265f3f47161c9d2f6c7f7f4040440df9ad4cd7eb74eb411bf25a94b542f9e",
        "urls": [
          "bzz-raw://c4f468eb184f2a08909834b51e33e854741647f9798aa1e6746f3f1b69525552",
          "dweb:/ipfs/QmbCMy9vJLga2dCxGG6nXW7VKGqsMrzU8phPhcd58xkapq"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC1155Metadata.sol": {
        "keccak256": "0xe9d530111d75c5d6db4ca4f30dd76d6a29d9363ab7390e922942a0fc9e3ce32e",
        "urls": [
          "bzz-raw://8272be1ca643bd3038fd67b00acad09a8dca44536284bcca6b862d09f8b53e43",
          "dweb:/ipfs/Qme9wiWPDfh36xm7TNaxpAYxv5jAptMNLtYksRwc5zNFbU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC1155Receiver.sol": {
        "keccak256": "0xfef511c703e7ebdb193d35a67e0d9b70728789b2ac45cc5cf5ee56c4ad034f00",
        "urls": [
          "bzz-raw://f838e560ba0caddc54ad4ba082e0ff3bf27a721c15bc0cf19791fef7940837a5",
          "dweb:/ipfs/QmTwfwYYK4Ky9PPhdDoVVmZJaJ7y2hZDH8YnBQRfiA8Baz"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9",
        "urls": [
          "bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf",
          "dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0x1d1ee64f8456dc8b4cdd096e27ac4687babd485f49a728146126744d67f25f2f",
        "urls": [
          "bzz-raw://9e01b0d51bdccbcce9095f606c8624926b518c1385c1349c41896236a0345ee0",
          "dweb:/ipfs/QmWHTbztwRf9Fyq4617MrVSqF8o7UXMT5nFe6epQ92N6L9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/LazyMint.sol": {
        "keccak256": "0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170",
        "urls": [
          "bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827",
          "dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55",
        "urls": [
          "bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2",
          "dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350",
        "urls": [
          "bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485",
          "dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimableERC1155.sol": {
        "keccak256": "0x022e90a3152a20e95fedacf8282e0c31b768627cb6310fa8ffa0615064fb15db",
        "urls": [
          "bzz-raw://c51a34ea5c85413cbb501e8115162897e4e51076905daa488f19870410cf80df",
          "dweb:/ipfs/Qmee9iQDzWTeyKioibkeX67YCRz51AJYkvLS2yuyjy4AwX"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/ILazyMint.sol": {
        "keccak256": "0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec",
        "urls": [
          "bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3",
          "dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385",
        "urls": [
          "bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b",
          "dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol": {
        "keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
        "urls": [
          "bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
          "dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
        ],
        "license": "MIT"
      },
      "contracts/lib/TWAddress.sol": {
        "keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
        "urls": [
          "bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
          "dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWStrings.sol": {
        "keccak256": "0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8",
        "urls": [
          "bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9",
          "dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt"
        ],
        "license": "Apache 2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC1155LazyMint.sol",
    "id": 1997,
    "exportedSymbols": {
      "BatchMintMetadata": [
        17299
      ],
      "ContractMetadata": [
        17526
      ],
      "ERC1155": [
        7783
      ],
      "ERC1155LazyMint": [
        1996
      ],
      "IClaimableERC1155": [
        32367
      ],
      "IContractMetadata": [
        32437
      ],
      "IERC165": [
        13829
      ],
      "IERC2981": [
        13973
      ],
      "ILazyMint": [
        32812
      ],
      "IMulticall": [
        32926
      ],
      "IOwnable": [
        33183
      ],
      "IRoyalty": [
        33409
      ],
      "LazyMint": [
        20261
      ],
      "Multicall": [
        20595
      ],
      "Ownable": [
        21153
      ],
      "ReentrancyGuard": [
        46484
      ],
      "Royalty": [
        22395
      ],
      "TWAddress": [
        64152
      ],
      "TWStrings": [
        64852
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:11705:3",
    "nodes": [
      {
        "id": 1521,
        "nodeType": "PragmaDirective",
        "src": "39:23:3",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 1523,
        "nodeType": "ImportDirective",
        "src": "86:45:3",
        "nodes": [],
        "absolutePath": "contracts/eip/ERC1155.sol",
        "file": "../eip/ERC1155.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1997,
        "sourceUnit": 7784,
        "symbolAliases": [
          {
            "foreign": {
              "id": 1522,
              "name": "ERC1155",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 7783,
              "src": "95:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_ERC1155_$7783_$",
                "typeString": "type(contract ERC1155)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 1524,
        "nodeType": "ImportDirective",
        "src": "133:43:3",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1997,
        "sourceUnit": 17527,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1525,
        "nodeType": "ImportDirective",
        "src": "177:36:3",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1997,
        "sourceUnit": 20596,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1526,
        "nodeType": "ImportDirective",
        "src": "214:34:3",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1997,
        "sourceUnit": 21154,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1527,
        "nodeType": "ImportDirective",
        "src": "249:34:3",
        "nodes": [],
        "absolutePath": "contracts/extension/Royalty.sol",
        "file": "../extension/Royalty.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1997,
        "sourceUnit": 22396,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1528,
        "nodeType": "ImportDirective",
        "src": "284:44:3",
        "nodes": [],
        "absolutePath": "contracts/extension/BatchMintMetadata.sol",
        "file": "../extension/BatchMintMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1997,
        "sourceUnit": 17300,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1529,
        "nodeType": "ImportDirective",
        "src": "329:35:3",
        "nodes": [],
        "absolutePath": "contracts/extension/LazyMint.sol",
        "file": "../extension/LazyMint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1997,
        "sourceUnit": 20262,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1530,
        "nodeType": "ImportDirective",
        "src": "365:54:3",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/IClaimableERC1155.sol",
        "file": "../extension/interface/IClaimableERC1155.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1997,
        "sourceUnit": 32368,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1531,
        "nodeType": "ImportDirective",
        "src": "421:30:3",
        "nodes": [],
        "absolutePath": "contracts/lib/TWStrings.sol",
        "file": "../lib/TWStrings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1997,
        "sourceUnit": 64853,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1532,
        "nodeType": "ImportDirective",
        "src": "452:68:3",
        "nodes": [],
        "absolutePath": "contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol",
        "file": "../external-deps/openzeppelin/security/ReentrancyGuard.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1997,
        "sourceUnit": 46485,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1996,
        "nodeType": "ContractDefinition",
        "src": "1706:10037:3",
        "nodes": [
          {
            "id": 1554,
            "nodeType": "UsingForDirective",
            "src": "1896:28:3",
            "nodes": [],
            "libraryName": {
              "id": 1552,
              "name": "TWStrings",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 64852,
              "src": "1902:9:3"
            },
            "typeName": {
              "id": 1553,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1916:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 1559,
            "nodeType": "VariableDeclaration",
            "src": "2273:46:3",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 1555,
              "nodeType": "StructuredDocumentation",
              "src": "2102:166:3",
              "text": "  @notice Returns the total supply of NFTs of a given tokenId\n  @dev Mapping from tokenId => total circulating supply of NFTs of that tokenId."
            },
            "functionSelector": "bd85b039",
            "mutability": "mutable",
            "name": "totalSupply",
            "nameLocation": "2308:11:3",
            "scope": 1996,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
              "typeString": "mapping(uint256 => uint256)"
            },
            "typeName": {
              "id": 1558,
              "keyType": {
                "id": 1556,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2281:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "2273:27:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                "typeString": "mapping(uint256 => uint256)"
              },
              "valueType": {
                "id": 1557,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2292:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 1587,
            "nodeType": "FunctionDefinition",
            "src": "2951:306:3",
            "nodes": [],
            "body": {
              "id": 1586,
              "nodeType": "Block",
              "src": "3148:109:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1578,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1562,
                        "src": "3170:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1577,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21146,
                      "src": "3158:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1579,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3158:26:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1580,
                  "nodeType": "ExpressionStatement",
                  "src": "3158:26:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1582,
                        "name": "_royaltyRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1568,
                        "src": "3219:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1583,
                        "name": "_royaltyBps",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1570,
                        "src": "3238:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      ],
                      "id": 1581,
                      "name": "_setupDefaultRoyaltyInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22326,
                      "src": "3194:24:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1584,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3194:56:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1585,
                  "nodeType": "ExpressionStatement",
                  "src": "3194:56:3"
                }
              ]
            },
            "documentation": {
              "id": 1560,
              "nodeType": "StructuredDocumentation",
              "src": "2505:441:3",
              "text": " @notice Initializes the contract during construction.\n @param _defaultAdmin     The default admin of the contract.\n @param _name             The name of the contract.\n @param _symbol           The symbol of the contract.\n @param _royaltyRecipient The address to receive royalties.\n @param _royaltyBps       The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 1573,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1564,
                    "src": "3132:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 1574,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1566,
                    "src": "3139:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 1575,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 1572,
                  "name": "ERC1155",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7783,
                  "src": "3124:7:3"
                },
                "nodeType": "ModifierInvocation",
                "src": "3124:23:3"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 1571,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1562,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "2980:13:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1587,
                  "src": "2972:21:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1561,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2972:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1564,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "3017:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1587,
                  "src": "3003:19:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1563,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3003:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1566,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "3046:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1587,
                  "src": "3032:21:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1565,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3032:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1568,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "3071:17:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1587,
                  "src": "3063:25:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1567,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3063:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1570,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "3106:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1587,
                  "src": "3098:19:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 1569,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "3098:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2962:161:3"
            },
            "returnParameters": {
              "id": 1576,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3148:0:3"
            },
            "scope": 1996,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 1614,
            "nodeType": "FunctionDefinition",
            "src": "3635:219:3",
            "nodes": [],
            "body": {
              "id": 1613,
              "nodeType": "Block",
              "src": "3719:135:3",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    1597
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1597,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "3743:8:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1613,
                      "src": "3729:22:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 1596,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3729:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1601,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1599,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1590,
                        "src": "3766:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1598,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17141,
                      "src": "3754:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 1600,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3754:21:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3729:46:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1606,
                            "name": "batchUri",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1597,
                            "src": "3816:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 1607,
                                "name": "_tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1590,
                                "src": "3826:8:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1608,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "toString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 64734,
                              "src": "3826:17:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 1609,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3826:19:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 1604,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3799:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1605,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "3799:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 1610,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3799:47:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1603,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3792:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 1602,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3792:6:3",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 1611,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3792:55:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 1595,
                  "id": 1612,
                  "nodeType": "Return",
                  "src": "3785:62:3"
                }
              ]
            },
            "baseFunctions": [
              6835
            ],
            "documentation": {
              "id": 1588,
              "nodeType": "StructuredDocumentation",
              "src": "3447:183:3",
              "text": " @notice Returns the metadata URI for the given tokenId.\n @param _tokenId The tokenId of the NFT.\n @return The metadata URI for the given tokenId."
            },
            "functionSelector": "0e89341c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nameLocation": "3644:3:3",
            "overrides": {
              "id": 1592,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3686:8:3"
            },
            "parameters": {
              "id": 1591,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1590,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3656:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1614,
                  "src": "3648:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1589,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3648:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3647:18:3"
            },
            "returnParameters": {
              "id": 1595,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1594,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1614,
                  "src": "3704:13:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1593,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3704:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3703:15:3"
            },
            "scope": 1996,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 1656,
            "nodeType": "FunctionDefinition",
            "src": "5015:534:3",
            "nodes": [],
            "body": {
              "id": 1655,
              "nodeType": "Block",
              "src": "5152:397:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1630,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1627,
                          "name": "_tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1619,
                          "src": "5170:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1628,
                            "name": "nextTokenIdToMint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1828,
                            "src": "5181:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 1629,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5181:19:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5170:30:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "696e76616c6964206964",
                        "id": 1631,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5202:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2c270178c73806a8dbbf8aad0f9eb77e61abe0b7a93239d42f99fae572eed526",
                          "typeString": "literal_string \"invalid id\""
                        },
                        "value": "invalid id"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2c270178c73806a8dbbf8aad0f9eb77e61abe0b7a93239d42f99fae572eed526",
                          "typeString": "literal_string \"invalid id\""
                        }
                      ],
                      "id": 1626,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5162:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1632,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5162:53:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1633,
                  "nodeType": "ExpressionStatement",
                  "src": "5162:53:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1635,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5237:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1636,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5237:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1637,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1619,
                        "src": "5249:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1638,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1621,
                        "src": "5259:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1634,
                      "name": "verifyClaim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1667,
                      "src": "5225:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256) view"
                      }
                    },
                    "id": 1639,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5225:44:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1640,
                  "nodeType": "ExpressionStatement",
                  "src": "5225:44:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1642,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1617,
                        "src": "5369:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1643,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1619,
                        "src": "5380:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1644,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1621,
                        "src": "5390:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1641,
                      "name": "_transferTokensOnClaim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1846,
                      "src": "5346:22:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256)"
                      }
                    },
                    "id": 1645,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5346:54:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1646,
                  "nodeType": "ExpressionStatement",
                  "src": "5346:54:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1648,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5499:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1649,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5499:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1650,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1617,
                        "src": "5511:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1651,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1619,
                        "src": "5522:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1652,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1621,
                        "src": "5532:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1647,
                      "name": "TokensClaimed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32346,
                      "src": "5485:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256,uint256)"
                      }
                    },
                    "id": 1653,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5485:57:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1654,
                  "nodeType": "EmitStatement",
                  "src": "5480:62:3"
                }
              ]
            },
            "baseFunctions": [
              32356
            ],
            "documentation": {
              "id": 1615,
              "nodeType": "StructuredDocumentation",
              "src": "4039:971:3",
              "text": "  @notice          Lets an address claim multiple lazy minted NFTs at once to a recipient.\n                   This function prevents any reentrant calls, and is not allowed to be overridden.\n                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`\n                   functions to create custom logic for verification and claiming,\n                   for e.g. price collection, allowlist, max quantity, etc.\n  @dev             The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.\n                   The logic in `transferTokensOnClaim` does actual minting of tokens,\n                   can also be used to apply other state changes.\n  @param _receiver  The recipient of the tokens to mint.\n  @param _tokenId   The tokenId of the lazy minted NFT to mint.\n  @param _quantity  The number of tokens to mint."
            },
            "functionSelector": "2bc43fd9",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1624,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1623,
                  "name": "nonReentrant",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 46483,
                  "src": "5139:12:3"
                },
                "nodeType": "ModifierInvocation",
                "src": "5139:12:3"
              }
            ],
            "name": "claim",
            "nameLocation": "5024:5:3",
            "parameters": {
              "id": 1622,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1617,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "5047:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1656,
                  "src": "5039:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1616,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5039:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1619,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "5074:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1656,
                  "src": "5066:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1618,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5066:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1621,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "5100:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1656,
                  "src": "5092:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1620,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5092:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5029:86:3"
            },
            "returnParameters": {
              "id": 1625,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5152:0:3"
            },
            "scope": 1996,
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 1667,
            "nodeType": "FunctionDefinition",
            "src": "6029:128:3",
            "nodes": [],
            "body": {
              "id": 1666,
              "nodeType": "Block",
              "src": "6155:2:3",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              32366
            ],
            "documentation": {
              "id": 1657,
              "nodeType": "StructuredDocumentation",
              "src": "5555:469:3",
              "text": "  @notice          Override this function to add logic for claim verification, based on conditions\n                   such as allowlist, price, max quantity etc.\n  @dev             Checks a request to claim NFTs against a custom condition.\n  @param _claimer   Caller of the claim function.\n  @param _tokenId   The tokenId of the lazy minted NFT to mint.\n  @param _quantity  The number of NFTs being claimed."
            },
            "functionSelector": "4bbb1abf",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyClaim",
            "nameLocation": "6038:11:3",
            "parameters": {
              "id": 1664,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1659,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "6067:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1667,
                  "src": "6059:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1658,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6059:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1661,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "6093:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1667,
                  "src": "6085:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1660,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6085:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1663,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "6119:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1667,
                  "src": "6111:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1662,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6111:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6049:85:3"
            },
            "returnParameters": {
              "id": 1665,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6155:0:3"
            },
            "scope": 1996,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 1713,
            "nodeType": "FunctionDefinition",
            "src": "6442:376:3",
            "nodes": [],
            "body": {
              "id": 1712,
              "nodeType": "Block",
              "src": "6554:264:3",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    1678
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1678,
                      "mutability": "mutable",
                      "name": "caller",
                      "nameLocation": "6572:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1712,
                      "src": "6564:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1677,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6564:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1681,
                  "initialValue": {
                    "expression": {
                      "id": 1679,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "6581:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1680,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "6581:10:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6564:27:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1691,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1685,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1683,
                            "name": "caller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1678,
                            "src": "6610:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 1684,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1670,
                            "src": "6620:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6610:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1686,
                              "name": "isApprovedForAll",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6782,
                              "src": "6630:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(address => bool))"
                              }
                            },
                            "id": 1688,
                            "indexExpression": {
                              "id": 1687,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1670,
                              "src": "6647:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6630:24:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 1690,
                          "indexExpression": {
                            "id": 1689,
                            "name": "caller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1678,
                            "src": "6655:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6630:32:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "6610:52:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "556e617070726f7665642063616c6c6572",
                        "id": 1692,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6664:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_49a5eff66ae485633226c672b4dcae217f841ad5e05f15a24e4ca584e30f2297",
                          "typeString": "literal_string \"Unapproved caller\""
                        },
                        "value": "Unapproved caller"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_49a5eff66ae485633226c672b4dcae217f841ad5e05f15a24e4ca584e30f2297",
                          "typeString": "literal_string \"Unapproved caller\""
                        }
                      ],
                      "id": 1682,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6602:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1693,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6602:82:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1694,
                  "nodeType": "ExpressionStatement",
                  "src": "6602:82:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1702,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1696,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6776,
                              "src": "6702:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(uint256 => uint256))"
                              }
                            },
                            "id": 1698,
                            "indexExpression": {
                              "id": 1697,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1670,
                              "src": "6712:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6702:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 1700,
                          "indexExpression": {
                            "id": 1699,
                            "name": "_tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1672,
                            "src": "6720:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6702:27:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 1701,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1674,
                          "src": "6733:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6702:38:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420656e6f75676820746f6b656e73206f776e6564",
                        "id": 1703,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6742:25:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47eab5721628f7afefa1eed5fb909d6745dd50704b33f0e2bec737b19f989da9",
                          "typeString": "literal_string \"Not enough tokens owned\""
                        },
                        "value": "Not enough tokens owned"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47eab5721628f7afefa1eed5fb909d6745dd50704b33f0e2bec737b19f989da9",
                          "typeString": "literal_string \"Not enough tokens owned\""
                        }
                      ],
                      "id": 1695,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6694:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1704,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6694:74:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1705,
                  "nodeType": "ExpressionStatement",
                  "src": "6694:74:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1707,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1670,
                        "src": "6785:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1708,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1672,
                        "src": "6793:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1709,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1674,
                        "src": "6803:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1706,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7494,
                      "src": "6779:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256)"
                      }
                    },
                    "id": 1710,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6779:32:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1711,
                  "nodeType": "ExpressionStatement",
                  "src": "6779:32:3"
                }
              ]
            },
            "documentation": {
              "id": 1668,
              "nodeType": "StructuredDocumentation",
              "src": "6163:274:3",
              "text": "  @notice         Lets an owner or approved operator burn NFTs of the given tokenId.\n  @param _owner   The owner of the NFT to burn.\n  @param _tokenId The tokenId of the NFT to burn.\n  @param _amount  The amount of the NFT to burn."
            },
            "functionSelector": "f5298aca",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "6451:4:3",
            "parameters": {
              "id": 1675,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1670,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "6473:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1713,
                  "src": "6465:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1669,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6465:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1672,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "6497:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1713,
                  "src": "6489:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1671,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6489:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1674,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "6523:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1713,
                  "src": "6515:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1673,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6515:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6455:81:3"
            },
            "returnParameters": {
              "id": 1676,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6554:0:3"
            },
            "scope": 1996,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 1788,
            "nodeType": "FunctionDefinition",
            "src": "7112:564:3",
            "nodes": [],
            "body": {
              "id": 1787,
              "nodeType": "Block",
              "src": "7249:427:3",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    1726
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1726,
                      "mutability": "mutable",
                      "name": "caller",
                      "nameLocation": "7267:6:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1787,
                      "src": "7259:14:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1725,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7259:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1729,
                  "initialValue": {
                    "expression": {
                      "id": 1727,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "7276:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1728,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "7276:10:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7259:27:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1739,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1733,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1731,
                            "name": "caller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1726,
                            "src": "7305:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 1732,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1716,
                            "src": "7315:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "7305:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1734,
                              "name": "isApprovedForAll",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6782,
                              "src": "7325:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(address => bool))"
                              }
                            },
                            "id": 1736,
                            "indexExpression": {
                              "id": 1735,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1716,
                              "src": "7342:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7325:24:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 1738,
                          "indexExpression": {
                            "id": 1737,
                            "name": "caller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1726,
                            "src": "7350:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7325:32:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "7305:52:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "556e617070726f7665642063616c6c6572",
                        "id": 1740,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7359:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_49a5eff66ae485633226c672b4dcae217f841ad5e05f15a24e4ca584e30f2297",
                          "typeString": "literal_string \"Unapproved caller\""
                        },
                        "value": "Unapproved caller"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_49a5eff66ae485633226c672b4dcae217f841ad5e05f15a24e4ca584e30f2297",
                          "typeString": "literal_string \"Unapproved caller\""
                        }
                      ],
                      "id": 1730,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7297:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1741,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7297:82:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1742,
                  "nodeType": "ExpressionStatement",
                  "src": "7297:82:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1748,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1744,
                            "name": "_tokenIds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1719,
                            "src": "7397:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "id": 1745,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7397:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 1746,
                            "name": "_amounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1722,
                            "src": "7417:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "id": 1747,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7417:15:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7397:35:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4c656e677468206d69736d61746368",
                        "id": 1749,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7434:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bb46a6fe2ea6b18f462b236ffc808abf66026114a0bc6a6c72c11149e00d9ea8",
                          "typeString": "literal_string \"Length mismatch\""
                        },
                        "value": "Length mismatch"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bb46a6fe2ea6b18f462b236ffc808abf66026114a0bc6a6c72c11149e00d9ea8",
                          "typeString": "literal_string \"Length mismatch\""
                        }
                      ],
                      "id": 1743,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7389:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1750,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7389:63:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1751,
                  "nodeType": "ExpressionStatement",
                  "src": "7389:63:3"
                },
                {
                  "body": {
                    "id": 1779,
                    "nodeType": "Block",
                    "src": "7513:107:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1775,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 1765,
                                    "name": "balanceOf",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 6776,
                                    "src": "7535:9:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(uint256 => uint256))"
                                    }
                                  },
                                  "id": 1767,
                                  "indexExpression": {
                                    "id": 1766,
                                    "name": "_owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1716,
                                    "src": "7545:6:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "7535:17:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                    "typeString": "mapping(uint256 => uint256)"
                                  }
                                },
                                "id": 1771,
                                "indexExpression": {
                                  "baseExpression": {
                                    "id": 1768,
                                    "name": "_tokenIds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1719,
                                    "src": "7553:9:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1770,
                                  "indexExpression": {
                                    "id": 1769,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1753,
                                    "src": "7563:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "7553:12:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7535:31:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "baseExpression": {
                                  "id": 1772,
                                  "name": "_amounts",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1722,
                                  "src": "7570:8:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                    "typeString": "uint256[] memory"
                                  }
                                },
                                "id": 1774,
                                "indexExpression": {
                                  "id": 1773,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1753,
                                  "src": "7579:1:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7570:11:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7535:46:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420656e6f75676820746f6b656e73206f776e6564",
                              "id": 1776,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7583:25:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47eab5721628f7afefa1eed5fb909d6745dd50704b33f0e2bec737b19f989da9",
                                "typeString": "literal_string \"Not enough tokens owned\""
                              },
                              "value": "Not enough tokens owned"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_47eab5721628f7afefa1eed5fb909d6745dd50704b33f0e2bec737b19f989da9",
                                "typeString": "literal_string \"Not enough tokens owned\""
                              }
                            ],
                            "id": 1764,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "7527:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1777,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7527:82:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1778,
                        "nodeType": "ExpressionStatement",
                        "src": "7527:82:3"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1759,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1756,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1753,
                      "src": "7483:1:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 1757,
                        "name": "_tokenIds",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1719,
                        "src": "7487:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      "id": 1758,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "7487:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7483:20:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1780,
                  "initializationExpression": {
                    "assignments": [
                      1753
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 1753,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "7476:1:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 1780,
                        "src": "7468:9:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1752,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7468:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 1755,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 1754,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7480:1:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "7468:13:3"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 1762,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftHandSide": {
                        "id": 1760,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1753,
                        "src": "7505:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Assignment",
                      "operator": "+=",
                      "rightHandSide": {
                        "hexValue": "31",
                        "id": 1761,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7510:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "7505:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1763,
                    "nodeType": "ExpressionStatement",
                    "src": "7505:6:3"
                  },
                  "nodeType": "ForStatement",
                  "src": "7463:157:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1782,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1716,
                        "src": "7641:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1783,
                        "name": "_tokenIds",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1719,
                        "src": "7649:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 1784,
                        "name": "_amounts",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1722,
                        "src": "7660:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      ],
                      "id": 1781,
                      "name": "_burnBatch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7604,
                      "src": "7630:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256[] memory,uint256[] memory)"
                      }
                    },
                    "id": 1785,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7630:39:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1786,
                  "nodeType": "ExpressionStatement",
                  "src": "7630:39:3"
                }
              ]
            },
            "documentation": {
              "id": 1714,
              "nodeType": "StructuredDocumentation",
              "src": "6824:283:3",
              "text": "  @notice         Lets an owner or approved operator burn NFTs of the given tokenIds.\n  @param _owner    The owner of the NFTs to burn.\n  @param _tokenIds The tokenIds of the NFTs to burn.\n  @param _amounts  The amounts of the NFTs to burn."
            },
            "functionSelector": "6b20c454",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burnBatch",
            "nameLocation": "7121:9:3",
            "parameters": {
              "id": 1723,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1716,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "7148:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1788,
                  "src": "7140:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1715,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7140:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1719,
                  "mutability": "mutable",
                  "name": "_tokenIds",
                  "nameLocation": "7181:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1788,
                  "src": "7164:26:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1717,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "7164:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1718,
                    "nodeType": "ArrayTypeName",
                    "src": "7164:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1722,
                  "mutability": "mutable",
                  "name": "_amounts",
                  "nameLocation": "7217:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1788,
                  "src": "7200:25:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1720,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "7200:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1721,
                    "nodeType": "ArrayTypeName",
                    "src": "7200:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7130:101:3"
            },
            "returnParameters": {
              "id": 1724,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7249:0:3"
            },
            "scope": 1996,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 1819,
            "nodeType": "FunctionDefinition",
            "src": "7968:449:3",
            "nodes": [],
            "body": {
              "id": 1818,
              "nodeType": "Block",
              "src": "8077:340:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1816,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 1809,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1805,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 1801,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1799,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1791,
                            "src": "8106:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783031666663396137",
                            "id": 1800,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8121:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_33540519_by_1",
                              "typeString": "int_const 33540519"
                            },
                            "value": "0x01ffc9a7"
                          },
                          "src": "8106:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 1804,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1802,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1791,
                            "src": "8181:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30786439623637613236",
                            "id": 1803,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8196:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3652614694_by_1",
                              "typeString": "int_const 3652614694"
                            },
                            "value": "0xd9b67a26"
                          },
                          "src": "8181:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "8106:100:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 1808,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1806,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1791,
                          "src": "8257:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30783065383933343163",
                          "id": 1807,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8272:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_243872796_by_1",
                            "typeString": "int_const 243872796"
                          },
                          "value": "0x0e89341c"
                        },
                        "src": "8257:25:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "8106:176:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "id": 1815,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1810,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1791,
                        "src": "8344:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1812,
                              "name": "IERC2981",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13973,
                              "src": "8364:8:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$13973_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$13973_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            ],
                            "id": 1811,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "8359:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 1813,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8359:14:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_contract$_IERC2981_$13973",
                            "typeString": "type(contract IERC2981)"
                          }
                        },
                        "id": 1814,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "interfaceId",
                        "nodeType": "MemberAccess",
                        "src": "8359:26:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "src": "8344:41:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "8106:279:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1798,
                  "id": 1817,
                  "nodeType": "Return",
                  "src": "8087:298:3"
                }
              ]
            },
            "baseFunctions": [
              6822,
              13828
            ],
            "documentation": {
              "id": 1789,
              "nodeType": "StructuredDocumentation",
              "src": "7862:101:3",
              "text": " @dev See ERC165: https://eips.ethereum.org/EIPS/eip-165\n @inheritdoc IERC165"
            },
            "functionSelector": "01ffc9a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "7977:17:3",
            "overrides": {
              "id": 1795,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 1793,
                  "name": "ERC1155",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7783,
                  "src": "8044:7:3"
                },
                {
                  "id": 1794,
                  "name": "IERC165",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 13829,
                  "src": "8053:7:3"
                }
              ],
              "src": "8035:26:3"
            },
            "parameters": {
              "id": 1792,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1791,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "8002:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1819,
                  "src": "7995:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1790,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "7995:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7994:20:3"
            },
            "returnParameters": {
              "id": 1798,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1797,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1819,
                  "src": "8071:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1796,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8071:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8070:6:3"
            },
            "scope": 1996,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 1828,
            "nodeType": "FunctionDefinition",
            "src": "8681:112:3",
            "nodes": [],
            "body": {
              "id": 1827,
              "nodeType": "Block",
              "src": "8748:45:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 1825,
                    "name": "nextTokenIdToLazyMint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 20195,
                    "src": "8765:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1824,
                  "id": 1826,
                  "nodeType": "Return",
                  "src": "8758:28:3"
                }
              ]
            },
            "documentation": {
              "id": 1820,
              "nodeType": "StructuredDocumentation",
              "src": "8605:71:3",
              "text": "@notice The tokenId assigned to the next new NFT to be lazy minted."
            },
            "functionSelector": "3b1475a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToMint",
            "nameLocation": "8690:17:3",
            "parameters": {
              "id": 1821,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8707:2:3"
            },
            "returnParameters": {
              "id": 1824,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1823,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1828,
                  "src": "8739:7:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1822,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8739:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8738:9:3"
            },
            "scope": 1996,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 1846,
            "nodeType": "FunctionDefinition",
            "src": "9556:193:3",
            "nodes": [],
            "body": {
              "id": 1845,
              "nodeType": "Block",
              "src": "9691:58:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1839,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1831,
                        "src": "9707:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1840,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1833,
                        "src": "9718:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1841,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1835,
                        "src": "9728:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "",
                        "id": 1842,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9739:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 1838,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7318,
                      "src": "9701:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,uint256,bytes memory)"
                      }
                    },
                    "id": 1843,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9701:41:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1844,
                  "nodeType": "ExpressionStatement",
                  "src": "9701:41:3"
                }
              ]
            },
            "documentation": {
              "id": 1829,
              "nodeType": "StructuredDocumentation",
              "src": "8981:570:3",
              "text": "  @notice          Mints tokens to receiver on claim.\n                   Any state changes related to `claim` must be applied\n                   here by overriding this function.\n  @dev             Override this function to add logic for state updation.\n                   When overriding, apply any state changes before `_mint`.\n  @param _receiver The receiver of the tokens to mint.\n  @param _tokenId  The tokenId of the lazy minted NFT to mint.\n  @param _quantity The number of tokens to mint."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transferTokensOnClaim",
            "nameLocation": "9565:22:3",
            "parameters": {
              "id": 1836,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1831,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "9605:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1846,
                  "src": "9597:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1830,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9597:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1833,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "9632:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1846,
                  "src": "9624:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1832,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9624:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1835,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "9658:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1846,
                  "src": "9650:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1834,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9650:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9587:86:3"
            },
            "returnParameters": {
              "id": 1837,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9691:0:3"
            },
            "scope": 1996,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 1860,
            "nodeType": "FunctionDefinition",
            "src": "9841:115:3",
            "nodes": [],
            "body": {
              "id": 1859,
              "nodeType": "Block",
              "src": "9911:45:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1857,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1853,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "9928:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1854,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "9928:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1855,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "9942:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 1856,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9942:7:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9928:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1852,
                  "id": 1858,
                  "nodeType": "Return",
                  "src": "9921:28:3"
                }
              ]
            },
            "baseFunctions": [
              20260
            ],
            "documentation": {
              "id": 1847,
              "nodeType": "StructuredDocumentation",
              "src": "9755:81:3",
              "text": "@dev Returns whether lazy minting can be done in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canLazyMint",
            "nameLocation": "9850:12:3",
            "overrides": {
              "id": 1849,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9887:8:3"
            },
            "parameters": {
              "id": 1848,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9862:2:3"
            },
            "returnParameters": {
              "id": 1852,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1851,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1860,
                  "src": "9905:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1850,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9905:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9904:6:3"
            },
            "scope": 1996,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 1874,
            "nodeType": "FunctionDefinition",
            "src": "10052:121:3",
            "nodes": [],
            "body": {
              "id": 1873,
              "nodeType": "Block",
              "src": "10128:45:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1867,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "10145:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1868,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "10145:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1869,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "10159:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 1870,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10159:7:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "10145:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1866,
                  "id": 1872,
                  "nodeType": "Return",
                  "src": "10138:28:3"
                }
              ]
            },
            "baseFunctions": [
              17525
            ],
            "documentation": {
              "id": 1861,
              "nodeType": "StructuredDocumentation",
              "src": "9962:85:3",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "10061:18:3",
            "overrides": {
              "id": 1863,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10104:8:3"
            },
            "parameters": {
              "id": 1862,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10079:2:3"
            },
            "returnParameters": {
              "id": 1866,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1865,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1874,
                  "src": "10122:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1864,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10122:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10121:6:3"
            },
            "scope": 1996,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 1888,
            "nodeType": "FunctionDefinition",
            "src": "10257:115:3",
            "nodes": [],
            "body": {
              "id": 1887,
              "nodeType": "Block",
              "src": "10327:45:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1885,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1881,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "10344:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1882,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "10344:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1883,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "10358:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 1884,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10358:7:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "10344:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1880,
                  "id": 1886,
                  "nodeType": "Return",
                  "src": "10337:28:3"
                }
              ]
            },
            "baseFunctions": [
              21152
            ],
            "documentation": {
              "id": 1875,
              "nodeType": "StructuredDocumentation",
              "src": "10179:73:3",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "10266:12:3",
            "overrides": {
              "id": 1877,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10303:8:3"
            },
            "parameters": {
              "id": 1876,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10278:2:3"
            },
            "returnParameters": {
              "id": 1880,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1879,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1888,
                  "src": "10321:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1878,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10321:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10320:6:3"
            },
            "scope": 1996,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 1902,
            "nodeType": "FunctionDefinition",
            "src": "10463:121:3",
            "nodes": [],
            "body": {
              "id": 1901,
              "nodeType": "Block",
              "src": "10539:45:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1899,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1895,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "10556:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1896,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "10556:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1897,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "10570:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 1898,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10570:7:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "10556:21:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1894,
                  "id": 1900,
                  "nodeType": "Return",
                  "src": "10549:28:3"
                }
              ]
            },
            "baseFunctions": [
              22394
            ],
            "documentation": {
              "id": 1889,
              "nodeType": "StructuredDocumentation",
              "src": "10378:80:3",
              "text": "@dev Returns whether royalty info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetRoyaltyInfo",
            "nameLocation": "10472:18:3",
            "overrides": {
              "id": 1891,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10515:8:3"
            },
            "parameters": {
              "id": 1890,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10490:2:3"
            },
            "returnParameters": {
              "id": 1894,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1893,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1902,
                  "src": "10533:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1892,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10533:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10532:6:3"
            },
            "scope": 1996,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 1995,
            "nodeType": "FunctionDefinition",
            "src": "11109:632:3",
            "nodes": [],
            "body": {
              "id": 1994,
              "nodeType": "Block",
              "src": "11330:411:3",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1924,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1905,
                        "src": "11367:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1925,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1907,
                        "src": "11377:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1926,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1909,
                        "src": "11383:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1927,
                        "name": "ids",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1912,
                        "src": "11387:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 1928,
                        "name": "amounts",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1915,
                        "src": "11392:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      {
                        "id": 1929,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1917,
                        "src": "11401:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1921,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "11340:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC1155LazyMint_$1996_$",
                          "typeString": "type(contract super ERC1155LazyMint)"
                        }
                      },
                      "id": 1923,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_beforeTokenTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7622,
                      "src": "11340:26:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"
                      }
                    },
                    "id": 1930,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11340:66:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1931,
                  "nodeType": "ExpressionStatement",
                  "src": "11340:66:3"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1937,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1932,
                      "name": "from",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1907,
                      "src": "11421:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 1935,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11437:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 1934,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "11429:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 1933,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11429:7:3",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 1936,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11429:10:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "11421:18:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1962,
                  "nodeType": "IfStatement",
                  "src": "11417:155:3",
                  "trueBody": {
                    "id": 1961,
                    "nodeType": "Block",
                    "src": "11441:131:3",
                    "statements": [
                      {
                        "body": {
                          "id": 1959,
                          "nodeType": "Block",
                          "src": "11496:66:3",
                          "statements": [
                            {
                              "expression": {
                                "id": 1957,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1949,
                                    "name": "totalSupply",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1559,
                                    "src": "11514:11:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                      "typeString": "mapping(uint256 => uint256)"
                                    }
                                  },
                                  "id": 1953,
                                  "indexExpression": {
                                    "baseExpression": {
                                      "id": 1950,
                                      "name": "ids",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1912,
                                      "src": "11526:3:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                        "typeString": "uint256[] memory"
                                      }
                                    },
                                    "id": 1952,
                                    "indexExpression": {
                                      "id": 1951,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1939,
                                      "src": "11530:1:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "11526:6:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "11514:19:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 1954,
                                    "name": "amounts",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1915,
                                    "src": "11537:7:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1956,
                                  "indexExpression": {
                                    "id": 1955,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1939,
                                    "src": "11545:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "11537:10:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "11514:33:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1958,
                              "nodeType": "ExpressionStatement",
                              "src": "11514:33:3"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1945,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1942,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1939,
                            "src": "11475:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1943,
                              "name": "ids",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1912,
                              "src": "11479:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1944,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "11479:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11475:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1960,
                        "initializationExpression": {
                          "assignments": [
                            1939
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1939,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "11468:1:3",
                              "nodeType": "VariableDeclaration",
                              "scope": 1960,
                              "src": "11460:9:3",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1938,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "11460:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1941,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1940,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11472:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "11460:13:3"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1947,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "11491:3:3",
                            "subExpression": {
                              "id": 1946,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1939,
                              "src": "11493:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1948,
                          "nodeType": "ExpressionStatement",
                          "src": "11491:3:3"
                        },
                        "nodeType": "ForStatement",
                        "src": "11455:107:3"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1968,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1963,
                      "name": "to",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1909,
                      "src": "11586:2:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 1966,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11600:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 1965,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "11592:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 1964,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11592:7:3",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 1967,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11592:10:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "11586:16:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1993,
                  "nodeType": "IfStatement",
                  "src": "11582:153:3",
                  "trueBody": {
                    "id": 1992,
                    "nodeType": "Block",
                    "src": "11604:131:3",
                    "statements": [
                      {
                        "body": {
                          "id": 1990,
                          "nodeType": "Block",
                          "src": "11659:66:3",
                          "statements": [
                            {
                              "expression": {
                                "id": 1988,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1980,
                                    "name": "totalSupply",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1559,
                                    "src": "11677:11:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                      "typeString": "mapping(uint256 => uint256)"
                                    }
                                  },
                                  "id": 1984,
                                  "indexExpression": {
                                    "baseExpression": {
                                      "id": 1981,
                                      "name": "ids",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1912,
                                      "src": "11689:3:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                        "typeString": "uint256[] memory"
                                      }
                                    },
                                    "id": 1983,
                                    "indexExpression": {
                                      "id": 1982,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1970,
                                      "src": "11693:1:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "11689:6:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "11677:19:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "-=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 1985,
                                    "name": "amounts",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1915,
                                    "src": "11700:7:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1987,
                                  "indexExpression": {
                                    "id": 1986,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1970,
                                    "src": "11708:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "11700:10:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "11677:33:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1989,
                              "nodeType": "ExpressionStatement",
                              "src": "11677:33:3"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1976,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1973,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1970,
                            "src": "11638:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1974,
                              "name": "ids",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1912,
                              "src": "11642:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1975,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "11642:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11638:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1991,
                        "initializationExpression": {
                          "assignments": [
                            1970
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1970,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "11631:1:3",
                              "nodeType": "VariableDeclaration",
                              "scope": 1991,
                              "src": "11623:9:3",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1969,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "11623:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1972,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1971,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11635:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "11623:13:3"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1978,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "11654:3:3",
                            "subExpression": {
                              "id": 1977,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1970,
                              "src": "11656:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1979,
                          "nodeType": "ExpressionStatement",
                          "src": "11654:3:3"
                        },
                        "nodeType": "ForStatement",
                        "src": "11618:107:3"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              7622
            ],
            "documentation": {
              "id": 1903,
              "nodeType": "StructuredDocumentation",
              "src": "10590:514:3",
              "text": " @dev Runs before every token transfer / mint / burn.\n @param operator The address performing the token transfer.\n @param from     The address from which the token is being transferred.\n @param to       The address to which the token is being transferred.\n @param ids      The tokenIds of the tokens being transferred.\n @param amounts  The amounts of the tokens being transferred.\n @param data     Any additional data being passed in the token transfer."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nameLocation": "11118:20:3",
            "overrides": {
              "id": 1919,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "11321:8:3"
            },
            "parameters": {
              "id": 1918,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1905,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "11156:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1995,
                  "src": "11148:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1904,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11148:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1907,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "11182:4:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1995,
                  "src": "11174:12:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1906,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11174:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1909,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "11204:2:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1995,
                  "src": "11196:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1908,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11196:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1912,
                  "mutability": "mutable",
                  "name": "ids",
                  "nameLocation": "11233:3:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1995,
                  "src": "11216:20:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1910,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "11216:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1911,
                    "nodeType": "ArrayTypeName",
                    "src": "11216:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1915,
                  "mutability": "mutable",
                  "name": "amounts",
                  "nameLocation": "11263:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1995,
                  "src": "11246:24:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1913,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "11246:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1914,
                    "nodeType": "ArrayTypeName",
                    "src": "11246:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1917,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "11293:4:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1995,
                  "src": "11280:17:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1916,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "11280:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11138:165:3"
            },
            "returnParameters": {
              "id": 1920,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11330:0:3"
            },
            "scope": 1996,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1534,
              "name": "ERC1155",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7783,
              "src": "1738:7:3"
            },
            "id": 1535,
            "nodeType": "InheritanceSpecifier",
            "src": "1738:7:3"
          },
          {
            "baseName": {
              "id": 1536,
              "name": "ContractMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17526,
              "src": "1751:16:3"
            },
            "id": 1537,
            "nodeType": "InheritanceSpecifier",
            "src": "1751:16:3"
          },
          {
            "baseName": {
              "id": 1538,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21153,
              "src": "1773:7:3"
            },
            "id": 1539,
            "nodeType": "InheritanceSpecifier",
            "src": "1773:7:3"
          },
          {
            "baseName": {
              "id": 1540,
              "name": "Royalty",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 22395,
              "src": "1786:7:3"
            },
            "id": 1541,
            "nodeType": "InheritanceSpecifier",
            "src": "1786:7:3"
          },
          {
            "baseName": {
              "id": 1542,
              "name": "Multicall",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20595,
              "src": "1799:9:3"
            },
            "id": 1543,
            "nodeType": "InheritanceSpecifier",
            "src": "1799:9:3"
          },
          {
            "baseName": {
              "id": 1544,
              "name": "BatchMintMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17299,
              "src": "1814:17:3"
            },
            "id": 1545,
            "nodeType": "InheritanceSpecifier",
            "src": "1814:17:3"
          },
          {
            "baseName": {
              "id": 1546,
              "name": "LazyMint",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20261,
              "src": "1837:8:3"
            },
            "id": 1547,
            "nodeType": "InheritanceSpecifier",
            "src": "1837:8:3"
          },
          {
            "baseName": {
              "id": 1548,
              "name": "IClaimableERC1155",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 32367,
              "src": "1851:17:3"
            },
            "id": 1549,
            "nodeType": "InheritanceSpecifier",
            "src": "1851:17:3"
          },
          {
            "baseName": {
              "id": 1550,
              "name": "ReentrancyGuard",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 46484,
              "src": "1874:15:3"
            },
            "id": 1551,
            "nodeType": "InheritanceSpecifier",
            "src": "1874:15:3"
          }
        ],
        "canonicalName": "ERC1155LazyMint",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1533,
          "nodeType": "StructuredDocumentation",
          "src": "522:1182:3",
          "text": "      BASE:      ERC1155Base\n      EXTENSION: LazyMint\n  The `ERC1155LazyMint` smart contract implements the ERC1155 NFT standard.\n  It includes the following additions to standard ERC1155 logic:\n      - Lazy minting\n      - Ability to mint NFTs via the provided `mintTo` and `batchMintTo` functions.\n      - Contract metadata for royalty support on platforms such as OpenSea that use\n        off-chain information to distribute roaylties.\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2981 compliance for royalty support on NFT marketplaces.\n  The `ERC1155LazyMint` contract uses the `LazyMint` extension.\n  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'\n  of  NFTs means actually assigning an owner to an NFT.\n  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,\n  without paying the gas cost for actually minting the NFTs."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          1996,
          46484,
          32367,
          20261,
          17299,
          32812,
          20595,
          32926,
          22395,
          33409,
          13973,
          13829,
          21153,
          33183,
          17526,
          32437,
          7783,
          13764,
          13742
        ],
        "name": "ERC1155LazyMint",
        "nameLocation": "1715:15:3",
        "scope": 1997,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 3
}