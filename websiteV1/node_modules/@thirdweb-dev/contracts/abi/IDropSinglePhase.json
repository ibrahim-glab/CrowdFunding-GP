{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "condition",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "resetEligibility",
          "type": "bool"
        }
      ],
      "name": "ClaimConditionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "allowlistProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "phase",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": "84bb1e42",
    "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": "426cfaf3"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"phase\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"params\":{\"allowlistProof\":\"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.\",\"currency\":\"The currency in which to pay for the claim.\",\"data\":\"Arbitrary bytes data that can be leveraged in the implementation of this interface.\",\"pricePerToken\":\"The price per token to pay for the claim.\",\"quantity\":\"The quantity of NFTs to claim.\",\"receiver\":\"The receiver of the NFTs to claim.\"}},\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"params\":{\"phase\":\"Claim condition to set.\",\"resetClaimEligibility\":\"Whether to honor the restrictions applied to wallets who have claimed tokens in the current conditions,                                  in the new claim conditions being set.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimConditionUpdated((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Emitted when the contract's claim conditions are updated.\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are claimed via `claim`.\"}},\"kind\":\"user\",\"methods\":{\"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"notice\":\"Lets an account claim a given quantity of NFTs.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"The interface `IDropSinglePhase` is written for thirdweb's 'DropSinglePhase' contracts, which are distribution mechanisms for tokens.  An authorized wallet can set a claim condition for the distribution of the contract's tokens.  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten  or added to by the contract admin. At any moment, there is only one active claim condition.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IDropSinglePhase.sol\":\"IDropSinglePhase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IDropSinglePhase.sol\":{\"keccak256\":\"0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9\",\"dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "resetEligibility",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "phase",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
            "params": {
              "allowlistProof": "The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.",
              "currency": "The currency in which to pay for the claim.",
              "data": "Arbitrary bytes data that can be leveraged in the implementation of this interface.",
              "pricePerToken": "The price per token to pay for the claim.",
              "quantity": "The quantity of NFTs to claim.",
              "receiver": "The receiver of the NFTs to claim."
            }
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
            "params": {
              "phase": "Claim condition to set.",
              "resetClaimEligibility": "Whether to honor the restrictions applied to wallets who have claimed tokens in the current conditions,                                  in the new claim conditions being set."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
            "notice": "Lets an account claim a given quantity of NFTs."
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
            "notice": "Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/extension/interface/IDropSinglePhase.sol": "IDropSinglePhase"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/extension/interface/IClaimCondition.sol": {
        "keccak256": "0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6",
        "urls": [
          "bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459",
          "dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDropSinglePhase.sol": {
        "keccak256": "0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36",
        "urls": [
          "bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9",
          "dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/extension/interface/IDropSinglePhase.sol",
    "id": 32708,
    "exportedSymbols": {
      "IClaimCondition": [
        32285
      ],
      "IDropSinglePhase": [
        32707
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:3042:112",
    "nodes": [
      {
        "id": 32647,
        "nodeType": "PragmaDirective",
        "src": "39:23:112",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 32648,
        "nodeType": "ImportDirective",
        "src": "86:31:112",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/IClaimCondition.sol",
        "file": "./IClaimCondition.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 32708,
        "sourceUnit": 32286,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 32707,
        "nodeType": "ContractDefinition",
        "src": "576:2504:112",
        "nodes": [
          {
            "id": 32661,
            "nodeType": "StructDefinition",
            "src": "1049:151:112",
            "nodes": [],
            "canonicalName": "IDropSinglePhase.AllowlistProof",
            "members": [
              {
                "constant": false,
                "id": 32654,
                "mutability": "mutable",
                "name": "proof",
                "nameLocation": "1091:5:112",
                "nodeType": "VariableDeclaration",
                "scope": 32661,
                "src": "1081:15:112",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                  "typeString": "bytes32[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 32652,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1081:7:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 32653,
                  "nodeType": "ArrayTypeName",
                  "src": "1081:9:112",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                    "typeString": "bytes32[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 32656,
                "mutability": "mutable",
                "name": "quantityLimitPerWallet",
                "nameLocation": "1114:22:112",
                "nodeType": "VariableDeclaration",
                "scope": 32661,
                "src": "1106:30:112",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 32655,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1106:7:112",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 32658,
                "mutability": "mutable",
                "name": "pricePerToken",
                "nameLocation": "1154:13:112",
                "nodeType": "VariableDeclaration",
                "scope": 32661,
                "src": "1146:21:112",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 32657,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1146:7:112",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 32660,
                "mutability": "mutable",
                "name": "currency",
                "nameLocation": "1185:8:112",
                "nodeType": "VariableDeclaration",
                "scope": 32661,
                "src": "1177:16:112",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 32659,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1177:7:112",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "AllowlistProof",
            "nameLocation": "1056:14:112",
            "scope": 32707,
            "visibility": "public"
          },
          {
            "id": 32672,
            "nodeType": "EventDefinition",
            "src": "1267:164:112",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 32662,
              "nodeType": "StructuredDocumentation",
              "src": "1206:56:112",
              "text": "@notice Emitted when tokens are claimed via `claim`."
            },
            "name": "TokensClaimed",
            "nameLocation": "1273:13:112",
            "parameters": {
              "id": 32671,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32664,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimer",
                  "nameLocation": "1312:7:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32672,
                  "src": "1296:23:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 32663,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1296:7:112",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32666,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "1345:8:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32672,
                  "src": "1329:24:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 32665,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1329:7:112",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32668,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "startTokenId",
                  "nameLocation": "1379:12:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32672,
                  "src": "1363:28:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 32667,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1363:7:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32670,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "quantityClaimed",
                  "nameLocation": "1409:15:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32672,
                  "src": "1401:23:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 32669,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1401:7:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1286:144:112"
            }
          },
          {
            "id": 32680,
            "nodeType": "EventDefinition",
            "src": "1511:77:112",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 32673,
              "nodeType": "StructuredDocumentation",
              "src": "1437:69:112",
              "text": "@notice Emitted when the contract's claim conditions are updated."
            },
            "name": "ClaimConditionUpdated",
            "nameLocation": "1517:21:112",
            "parameters": {
              "id": 32679,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32676,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "condition",
                  "nameLocation": "1554:9:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32680,
                  "src": "1539:24:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimCondition_$32284_memory_ptr",
                    "typeString": "struct IClaimCondition.ClaimCondition"
                  },
                  "typeName": {
                    "id": 32675,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 32674,
                      "name": "ClaimCondition",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 32284,
                      "src": "1539:14:112"
                    },
                    "referencedDeclaration": 32284,
                    "src": "1539:14:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimCondition_$32284_storage_ptr",
                      "typeString": "struct IClaimCondition.ClaimCondition"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32678,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "resetEligibility",
                  "nameLocation": "1570:16:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32680,
                  "src": "1565:21:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 32677,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1565:4:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1538:49:112"
            }
          },
          {
            "id": 32697,
            "nodeType": "FunctionDefinition",
            "src": "2341:222:112",
            "nodes": [],
            "documentation": {
              "id": 32681,
              "nodeType": "StructuredDocumentation",
              "src": "1594:742:112",
              "text": "  @notice Lets an account claim a given quantity of NFTs.\n  @param receiver                       The receiver of the NFTs to claim.\n  @param quantity                       The quantity of NFTs to claim.\n  @param currency                       The currency in which to pay for the claim.\n  @param pricePerToken                  The price per token to pay for the claim.\n  @param allowlistProof                 The proof of the claimer's inclusion in the merkle root allowlist\n                                        of the claim conditions that apply.\n  @param data                           Arbitrary bytes data that can be leveraged in the implementation of this interface."
            },
            "functionSelector": "84bb1e42",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claim",
            "nameLocation": "2350:5:112",
            "parameters": {
              "id": 32695,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32683,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "2373:8:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32697,
                  "src": "2365:16:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 32682,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2365:7:112",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32685,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nameLocation": "2399:8:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32697,
                  "src": "2391:16:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 32684,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2391:7:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32687,
                  "mutability": "mutable",
                  "name": "currency",
                  "nameLocation": "2425:8:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32697,
                  "src": "2417:16:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 32686,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2417:7:112",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32689,
                  "mutability": "mutable",
                  "name": "pricePerToken",
                  "nameLocation": "2451:13:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32697,
                  "src": "2443:21:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 32688,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2443:7:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32692,
                  "mutability": "mutable",
                  "name": "allowlistProof",
                  "nameLocation": "2498:14:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32697,
                  "src": "2474:38:112",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_AllowlistProof_$32661_calldata_ptr",
                    "typeString": "struct IDropSinglePhase.AllowlistProof"
                  },
                  "typeName": {
                    "id": 32691,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 32690,
                      "name": "AllowlistProof",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 32661,
                      "src": "2474:14:112"
                    },
                    "referencedDeclaration": 32661,
                    "src": "2474:14:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AllowlistProof_$32661_storage_ptr",
                      "typeString": "struct IDropSinglePhase.AllowlistProof"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32694,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "2535:4:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32697,
                  "src": "2522:17:112",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 32693,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2522:5:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2355:190:112"
            },
            "returnParameters": {
              "id": 32696,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2562:0:112"
            },
            "scope": 32707,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 32706,
            "nodeType": "FunctionDefinition",
            "src": "2982:96:112",
            "nodes": [],
            "documentation": {
              "id": 32698,
              "nodeType": "StructuredDocumentation",
              "src": "2569:408:112",
              "text": "  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param phase                    Claim condition to set.\n  @param resetClaimEligibility    Whether to honor the restrictions applied to wallets who have claimed tokens in the current conditions,\n                                  in the new claim conditions being set."
            },
            "functionSelector": "426cfaf3",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setClaimConditions",
            "nameLocation": "2991:18:112",
            "parameters": {
              "id": 32704,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32701,
                  "mutability": "mutable",
                  "name": "phase",
                  "nameLocation": "3034:5:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32706,
                  "src": "3010:29:112",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimCondition_$32284_calldata_ptr",
                    "typeString": "struct IClaimCondition.ClaimCondition"
                  },
                  "typeName": {
                    "id": 32700,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 32699,
                      "name": "ClaimCondition",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 32284,
                      "src": "3010:14:112"
                    },
                    "referencedDeclaration": 32284,
                    "src": "3010:14:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimCondition_$32284_storage_ptr",
                      "typeString": "struct IClaimCondition.ClaimCondition"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32703,
                  "mutability": "mutable",
                  "name": "resetClaimEligibility",
                  "nameLocation": "3046:21:112",
                  "nodeType": "VariableDeclaration",
                  "scope": 32706,
                  "src": "3041:26:112",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 32702,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3041:4:112",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3009:59:112"
            },
            "returnParameters": {
              "id": 32705,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3077:0:112"
            },
            "scope": 32707,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 32650,
              "name": "IClaimCondition",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 32285,
              "src": "606:15:112"
            },
            "id": 32651,
            "nodeType": "InheritanceSpecifier",
            "src": "606:15:112"
          }
        ],
        "canonicalName": "IDropSinglePhase",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 32649,
          "nodeType": "StructuredDocumentation",
          "src": "119:455:112",
          "text": "  The interface `IDropSinglePhase` is written for thirdweb's 'DropSinglePhase' contracts, which are distribution mechanisms for tokens.\n  An authorized wallet can set a claim condition for the distribution of the contract's tokens.\n  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\n  or added to by the contract admin. At any moment, there is only one active claim condition."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          32707,
          32285
        ],
        "name": "IDropSinglePhase",
        "nameLocation": "586:16:112",
        "scope": 32708,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 112
}