{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "claimConditions",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "ClaimConditionUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "phase",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": "426cfaf3"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"claimConditions\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"phase\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"params\":{\"phase\":\"Claim conditions in ascending order by `startTimestamp`.\",\"resetClaimEligibility\":\"Whether to reset `limitLastClaimTimestamp` and `limitMerkleProofClaim` values when setting new                                  claim conditions.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"Thirdweb's 'Drop' contracts are distribution mechanisms for tokens.  A contract admin (i.e. a holder of `DEFAULT_ADMIN_ROLE`) can set a series of claim conditions,  ordered by their respective `startTimestamp`. A claim condition defines criteria under which  accounts can mint tokens. Claim conditions can be overwritten or added to by the contract admin.  At any moment, there is only one active claim condition.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IClaimConditionsSinglePhase.sol\":\"IClaimConditionsSinglePhase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IClaimConditionsSinglePhase.sol\":{\"keccak256\":\"0x0180dd4450cc962d998390c8ec0bd4ac2c95f51baaf720f4caadbc13fb043ccb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://bbf4067bb94582f7c3c5426bc167cca3c251e648f00cbc5a2f2d584ecb4b1047\",\"dweb:/ipfs/QmYrTArt6pWMEePG7FdHUHdS5ns1V5cw4tqsmfAbBYxcx1\"]},\"contracts/lib/TWBitMaps.sol\":{\"keccak256\":\"0x37d6bd1977f04901c1979a3a2652b39e37cbe0c2f112d820d3363ba037f0923f\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://1c442a955a1969fe7be2eca1894521910a11ddd192ccf34eb97a6ec76546f78d\",\"dweb:/ipfs/QmRtpJX4nYds6rWq47BsoTbAeg8kcT51WQ7ecysGo1JpHo\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "claimConditions",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "resetClaimEligibility",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "phase",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
            "params": {
              "phase": "Claim conditions in ascending order by `startTimestamp`.",
              "resetClaimEligibility": "Whether to reset `limitLastClaimTimestamp` and `limitMerkleProofClaim` values when setting new                                  claim conditions."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
            "notice": "Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/extension/interface/IClaimConditionsSinglePhase.sol": "IClaimConditionsSinglePhase"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/extension/interface/IClaimCondition.sol": {
        "keccak256": "0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6",
        "urls": [
          "bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459",
          "dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimConditionsSinglePhase.sol": {
        "keccak256": "0x0180dd4450cc962d998390c8ec0bd4ac2c95f51baaf720f4caadbc13fb043ccb",
        "urls": [
          "bzz-raw://bbf4067bb94582f7c3c5426bc167cca3c251e648f00cbc5a2f2d584ecb4b1047",
          "dweb:/ipfs/QmYrTArt6pWMEePG7FdHUHdS5ns1V5cw4tqsmfAbBYxcx1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/TWBitMaps.sol": {
        "keccak256": "0x37d6bd1977f04901c1979a3a2652b39e37cbe0c2f112d820d3363ba037f0923f",
        "urls": [
          "bzz-raw://1c442a955a1969fe7be2eca1894521910a11ddd192ccf34eb97a6ec76546f78d",
          "dweb:/ipfs/QmRtpJX4nYds6rWq47BsoTbAeg8kcT51WQ7ecysGo1JpHo"
        ],
        "license": "Apache 2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/extension/interface/IClaimConditionsSinglePhase.sol",
    "id": 32333,
    "exportedSymbols": {
      "IClaimCondition": [
        32285
      ],
      "IClaimConditionsSinglePhase": [
        32332
      ],
      "TWBitMaps": [
        64290
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:1234:103",
    "nodes": [
      {
        "id": 32310,
        "nodeType": "PragmaDirective",
        "src": "39:23:103",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 32311,
        "nodeType": "ImportDirective",
        "src": "86:33:103",
        "nodes": [],
        "absolutePath": "contracts/lib/TWBitMaps.sol",
        "file": "../../lib/TWBitMaps.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 32333,
        "sourceUnit": 64291,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 32312,
        "nodeType": "ImportDirective",
        "src": "120:31:103",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/IClaimCondition.sol",
        "file": "./IClaimCondition.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 32333,
        "sourceUnit": 32286,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 32332,
        "nodeType": "ContractDefinition",
        "src": "595:677:103",
        "nodes": [
          {
            "id": 32322,
            "nodeType": "EventDefinition",
            "src": "658:88:103",
            "nodes": [],
            "anonymous": false,
            "name": "ClaimConditionUpdated",
            "nameLocation": "664:21:103",
            "parameters": {
              "id": 32321,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32318,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "claimConditions",
                  "nameLocation": "701:15:103",
                  "nodeType": "VariableDeclaration",
                  "scope": 32322,
                  "src": "686:30:103",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimCondition_$32284_memory_ptr",
                    "typeString": "struct IClaimCondition.ClaimCondition"
                  },
                  "typeName": {
                    "id": 32317,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 32316,
                      "name": "ClaimCondition",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 32284,
                      "src": "686:14:103"
                    },
                    "referencedDeclaration": 32284,
                    "src": "686:14:103",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimCondition_$32284_storage_ptr",
                      "typeString": "struct IClaimCondition.ClaimCondition"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32320,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "resetClaimEligibility",
                  "nameLocation": "723:21:103",
                  "nodeType": "VariableDeclaration",
                  "scope": 32322,
                  "src": "718:26:103",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 32319,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "718:4:103",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "685:60:103"
            }
          },
          {
            "id": 32331,
            "nodeType": "FunctionDefinition",
            "src": "1174:96:103",
            "nodes": [],
            "documentation": {
              "id": 32323,
              "nodeType": "StructuredDocumentation",
              "src": "752:417:103",
              "text": "  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param phase                   Claim conditions in ascending order by `startTimestamp`.\n  @param resetClaimEligibility    Whether to reset `limitLastClaimTimestamp` and `limitMerkleProofClaim` values when setting new\n                                  claim conditions."
            },
            "functionSelector": "426cfaf3",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setClaimConditions",
            "nameLocation": "1183:18:103",
            "parameters": {
              "id": 32329,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32326,
                  "mutability": "mutable",
                  "name": "phase",
                  "nameLocation": "1226:5:103",
                  "nodeType": "VariableDeclaration",
                  "scope": 32331,
                  "src": "1202:29:103",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimCondition_$32284_calldata_ptr",
                    "typeString": "struct IClaimCondition.ClaimCondition"
                  },
                  "typeName": {
                    "id": 32325,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 32324,
                      "name": "ClaimCondition",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 32284,
                      "src": "1202:14:103"
                    },
                    "referencedDeclaration": 32284,
                    "src": "1202:14:103",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimCondition_$32284_storage_ptr",
                      "typeString": "struct IClaimCondition.ClaimCondition"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32328,
                  "mutability": "mutable",
                  "name": "resetClaimEligibility",
                  "nameLocation": "1238:21:103",
                  "nodeType": "VariableDeclaration",
                  "scope": 32331,
                  "src": "1233:26:103",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 32327,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1233:4:103",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1201:59:103"
            },
            "returnParameters": {
              "id": 32330,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1269:0:103"
            },
            "scope": 32332,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 32314,
              "name": "IClaimCondition",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 32285,
              "src": "636:15:103"
            },
            "id": 32315,
            "nodeType": "InheritanceSpecifier",
            "src": "636:15:103"
          }
        ],
        "canonicalName": "IClaimConditionsSinglePhase",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 32313,
          "nodeType": "StructuredDocumentation",
          "src": "153:440:103",
          "text": "  Thirdweb's 'Drop' contracts are distribution mechanisms for tokens.\n  A contract admin (i.e. a holder of `DEFAULT_ADMIN_ROLE`) can set a series of claim conditions,\n  ordered by their respective `startTimestamp`. A claim condition defines criteria under which\n  accounts can mint tokens. Claim conditions can be overwritten or added to by the contract admin.\n  At any moment, there is only one active claim condition."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          32332,
          32285
        ],
        "name": "IClaimConditionsSinglePhase",
        "nameLocation": "605:27:103",
        "scope": 32333,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 103
}