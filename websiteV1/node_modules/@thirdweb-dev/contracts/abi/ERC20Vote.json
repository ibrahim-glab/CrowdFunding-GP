{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mintedTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityMinted",
          "type": "uint256"
        }
      ],
      "name": "TokensMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "votes",
              "type": "uint224"
            }
          ],
          "internalType": "struct ERC20Votes.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6101006040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0523480156200003657600080fd5b5060405162002b2938038062002b298339810160408190526200005991620003b0565b818181818160059080519060200190620000759291906200023d565b5080516200008b9060069060208401906200023d565b50504660a052503060c052620000a0620000ba565b60805250620000b190508362000151565b50505062000477565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000e7620001a3565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b606060058054620001b4906200043a565b80601f0160208091040260200160405190810160405280929190818152602001828054620001e2906200043a565b8015620002335780601f10620002075761010080835404028352916020019162000233565b820191906000526020600020905b8154815290600101906020018083116200021557829003601f168201915b5050505050905090565b8280546200024b906200043a565b90600052602060002090601f0160209004810192826200026f5760008555620002ba565b82601f106200028a57805160ff1916838001178555620002ba565b82800160010185558215620002ba579182015b82811115620002ba5782518255916020019190600101906200029d565b50620002c8929150620002cc565b5090565b5b80821115620002c85760008155600101620002cd565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200030b57600080fd5b81516001600160401b0380821115620003285762000328620002e3565b604051601f8301601f19908116603f01168101908282118183101715620003535762000353620002e3565b816040528381526020925086838588010111156200037057600080fd5b600091505b8382101562000394578582018301518183018401529082019062000375565b83821115620003a65760008385830101525b9695505050505050565b600080600060608486031215620003c657600080fd5b83516001600160a01b0381168114620003de57600080fd5b60208501519093506001600160401b0380821115620003fc57600080fd5b6200040a87838801620002f9565b935060408601519150808211156200042157600080fd5b506200043086828701620002f9565b9150509250925092565b600181811c908216806200044f57607f821691505b602082108114156200047157634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051612678620004b16000396000610c720152600061050f015260006105390152600061056301526126786000f3fe608060405234801561001057600080fd5b506004361061016a5760003560e01c806306fdde031461016f578063095ea7b31461018d57806313af4035146101b057806318160ddd146101c557806323b872dd146101d7578063313ce567146101ea5780633644e515146101f957806339509351146102015780633a46b1a81461021457806342966c6814610227578063449a52f81461023a578063587cde1e1461024d5780635c19a95c146102785780636fcfff451461028b57806370a08231146102b357806379cc6790146102c65780637ecebe00146102d95780638da5cb5b146102ec5780638e539e8c146102f4578063938e3d7b1461030757806395d89b411461031a5780639ab24eb014610322578063a457c2d714610335578063a9059cbb14610348578063ac9650d81461035b578063c3cda5201461037b578063d505accf1461038e578063dd62ed3e146103a1578063e8a3d485146103b4578063f1127ed8146103bc575b600080fd5b6101776103f9565b604051610184919061204b565b60405180910390f35b6101a061019b36600461207a565b61048b565b6040519015158152602001610184565b6101c36101be3660046120a4565b6104a3565b005b6004545b604051908152602001610184565b6101a06101e53660046120bf565b6104dc565b60405160128152602001610184565b6101c9610502565b6101a061020f36600461207a565b610592565b6101c961022236600461207a565b6105d1565b6101c36102353660046120fb565b610614565b6101c361024836600461207a565b610646565b61026061025b3660046120a4565b6106e6565b6040516001600160a01b039091168152602001610184565b6101c36102863660046120a4565b610704565b61029e6102993660046120a4565b61070e565b60405163ffffffff9091168152602001610184565b6101c96102c13660046120a4565b610736565b6101c36102d436600461207a565b610751565b6101c96102e73660046120a4565b610806565b610260610824565b6101c96103023660046120fb565b610833565b6101c361031536600461212a565b61085f565b61017761088c565b6101c96103303660046120a4565b61089b565b6101a061034336600461207a565b610921565b6101a061035636600461207a565b6109be565b61036e6103693660046121da565b6109cc565b604051610184919061224e565b6101c36103893660046122c1565b610ac0565b6101c361039c366004612319565b610c1e565b6101c96103af366004612383565b610d84565b610177610daf565b6103cf6103ca3660046123b6565b610e3d565b60408051825163ffffffff1681526020928301516001600160e01b03169281019290925201610184565b606060058054610408906123f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610434906123f6565b80156104815780601f1061045657610100808354040283529160200191610481565b820191906000526020600020905b81548152906001019060200180831161046457829003601f168201915b5050505050905090565b600033610499818585610ec0565b5060019392505050565b6104ab610fe4565b6104d05760405162461bcd60e51b81526004016104c79061242b565b60405180910390fd5b6104d981611007565b50565b6000336104ea858285611059565b6104f58585856110d3565b60019150505b9392505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561055b57507f000000000000000000000000000000000000000000000000000000000000000046145b1561058557507f000000000000000000000000000000000000000000000000000000000000000090565b61058d611295565b905090565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919061049990829086906105cc908790612469565b610ec0565b60004382106105f25760405162461bcd60e51b81526004016104c790612481565b6001600160a01b03831660009081526009602052604090206104fb908361132a565b8061061e33610736565b101561063c5760405162461bcd60e51b81526004016104c7906124b8565b6104d933826113e6565b61064e610fe4565b6106945760405162461bcd60e51b81526020600482015260176024820152762737ba1030baba3437b934bd32b2103a379036b4b73a1760491b60448201526064016104c7565b806106d85760405162461bcd60e51b815260206004820152601460248201527326b4b73a34b733903d32b937903a37b5b2b7399760611b60448201526064016104c7565b6106e282826113fe565b5050565b6001600160a01b039081166000908152600860205260409020541690565b6104d93382611488565b6001600160a01b03811660009081526009602052604081205461073090611508565b92915050565b6001600160a01b031660009081526002602052604090205490565b610759610fe4565b61079f5760405162461bcd60e51b81526020600482015260176024820152762737ba1030baba3437b934bd32b2103a3790313ab9371760491b60448201526064016104c7565b806107a983610736565b10156107c75760405162461bcd60e51b81526004016104c7906124b8565b6000816107d48433610d84565b6107de91906124e4565b90506107ec83336000610ec0565b6107f7833383610ec0565b61080183836113e6565b505050565b6001600160a01b038116600090815260076020526040812054610730565b6001546001600160a01b031690565b60004382106108545760405162461bcd60e51b81526004016104c790612481565b610730600a8361132a565b610867610fe4565b6108835760405162461bcd60e51b81526004016104c79061242b565b6104d981611571565b606060068054610408906123f6565b6001600160a01b038116600090815260096020526040812054801561090e576001600160a01b03831660009081526009602052604090206108dd6001836124e4565b815481106108ed576108ed6124fb565b600091825260209091200154600160201b90046001600160e01b0316610911565b60005b6001600160e01b03169392505050565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909190838110156109a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104c7565b6109b38286868403610ec0565b506001949350505050565b6000336104998185856110d3565b6060816001600160401b038111156109e6576109e6612114565b604051908082528060200260200182016040528015610a1957816020015b6060815260200190600190039081610a045790505b50905060005b82811015610ab957610a8930858584818110610a3d57610a3d6124fb565b9050602002810190610a4f9190612511565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061165292505050565b828281518110610a9b57610a9b6124fb565b60200260200101819052508080610ab19061255e565b915050610a1f565b5092915050565b83421115610b105760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e6174757265206578706972656400000060448201526064016104c7565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b03881691810191909152606081018690526080810185905260009060a0016040516020818303038152906040528051906020012090506000610ba4610b84610502565b8360405161190160f01b8152600281019290925260228201526042902090565b90506000610bb482878787611677565b9050610bbf8161169f565b8814610c095760405162461bcd60e51b81526020600482015260196024820152784552433230566f7465733a20696e76616c6964206e6f6e636560381b60448201526064016104c7565b610c13818a611488565b505050505050505050565b83421115610c6e5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016104c7565b60007f0000000000000000000000000000000000000000000000000000000000000000888888610c9d8c61169f565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610cfa610b84610502565b90506000610d0a82878787611677565b9050896001600160a01b0316816001600160a01b031614610d6d5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016104c7565b610d788a8a8a610ec0565b50505050505050505050565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b60008054610dbc906123f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610de8906123f6565b8015610e355780601f10610e0a57610100808354040283529160200191610e35565b820191906000526020600020905b815481529060010190602001808311610e1857829003601f168201915b505050505081565b60408051808201909152600080825260208201526001600160a01b0383166000908152600960205260409020805463ffffffff8416908110610e8157610e816124fb565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091529392505050565b6001600160a01b038316610f225760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104c7565b6001600160a01b038216610f835760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104c7565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610fee610824565b6001600160a01b0316336001600160a01b031614905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b60006110658484610d84565b905060001981146110cd57818110156110c05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104c7565b6110cd8484848403610ec0565b50505050565b6001600160a01b0383166111375760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104c7565b6001600160a01b0382166111995760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104c7565b6001600160a01b038316600090815260026020526040902054818110156112115760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104c7565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290611248908490612469565b92505081905550826001600160a01b0316846001600160a01b03166000805160206126238339815191528460405161128291815260200190565b60405180910390a36110cd8484846116c7565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6112c06103f9565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8154600090815b8181101561138e57600061134582846116e2565b90508486828154811061135a5761135a6124fb565b60009182526020909120015463ffffffff16111561137a57809250611388565b611385816001612469565b91505b50611331565b81156113d157846113a06001846124e4565b815481106113b0576113b06124fb565b600091825260209091200154600160201b90046001600160e01b03166113d4565b60005b6001600160e01b031695945050505050565b6113f082826116fd565b6110cd600a6118408361184c565b61140882826119c3565b6004546001600160e01b03101561147a5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b60648201526084016104c7565b6110cd600a611a988361184c565b6000611493836106e6565b905060006114a084610736565b6001600160a01b0385811660008181526008602052604080822080546001600160a01b031916898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46110cd828483611aa4565b600063ffffffff82111561156d5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016104c7565b5090565b600080805461157f906123f6565b80601f01602080910402602001604051908101604052809291908181526020018280546115ab906123f6565b80156115f85780601f106115cd576101008083540402835291602001916115f8565b820191906000526020600020905b8154815290600101906020018083116115db57829003601f168201915b5050855193945061161493600093506020870192509050611f63565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051611646929190612579565b60405180910390a15050565b60606104fb83836040518060600160405280602781526020016125fc60279139611be1565b600080600061168887878787611cbe565b9150915061169581611d78565b5095945050505050565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b6108016116d3846106e6565b6116dc846106e6565b83611aa4565b60006116f160028484186125a7565b6104fb90848416612469565b6001600160a01b03821661175d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104c7565b6001600160a01b038216600090815260026020526040902054818110156117d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104c7565b6001600160a01b03831660009081526002602052604081208383039055600480548492906118009084906124e4565b90915550506040518281526000906001600160a01b038516906000805160206126238339815191529060200160405180910390a3610801836000846116c7565b60006104fb82846124e4565b82546000908190801561189657856118656001836124e4565b81548110611875576118756124fb565b600091825260209091200154600160201b90046001600160e01b0316611899565b60005b6001600160e01b031692506118b283858763ffffffff16565b91506000811180156118f0575043866118cc6001846124e4565b815481106118dc576118dc6124fb565b60009182526020909120015463ffffffff16145b15611950576118fe82611ec1565b8661190a6001846124e4565b8154811061191a5761191a6124fb565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b031602179055506119ba565b85604051806040016040528061196543611508565b63ffffffff16815260200161197985611ec1565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b50935093915050565b6001600160a01b038216611a195760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104c7565b8060046000828254611a2b9190612469565b90915550506001600160a01b03821660009081526002602052604081208054839290611a58908490612469565b90915550506040518181526001600160a01b038316906000906000805160206126238339815191529060200160405180910390a36106e2600083836116c7565b60006104fb8284612469565b816001600160a01b0316836001600160a01b031614158015611ac65750600081115b15610801576001600160a01b03831615611b54576001600160a01b03831660009081526009602052604081208190611b01906118408561184c565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611b49929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610801576001600160a01b03821660009081526009602052604081208190611b8a90611a988561184c565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611bd2929190918252602082015260400190565b60405180910390a25050505050565b60606001600160a01b0384163b611c495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104c7565b600080856001600160a01b031685604051611c6491906125c9565b600060405180830381855af49150503d8060008114611c9f576040519150601f19603f3d011682016040523d82523d6000602084013e611ca4565b606091505b5091509150611cb4828286611f2a565b9695505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115611ceb5750600090506003611d6f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611d3f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d6857600060019250925050611d6f565b9150600090505b94509492505050565b6000816004811115611d8c57611d8c6125e5565b1415611d955750565b6001816004811115611da957611da96125e5565b1415611df25760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016104c7565b6002816004811115611e0657611e066125e5565b1415611e545760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104c7565b6003816004811115611e6857611e686125e5565b14156104d95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104c7565b60006001600160e01b0382111561156d5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016104c7565b60608315611f395750816104fb565b825115611f495782518084602001fd5b8160405162461bcd60e51b81526004016104c7919061204b565b828054611f6f906123f6565b90600052602060002090601f016020900481019282611f915760008555611fd7565b82601f10611faa57805160ff1916838001178555611fd7565b82800160010185558215611fd7579182015b82811115611fd7578251825591602001919060010190611fbc565b5061156d9291505b8082111561156d5760008155600101611fdf565b60005b8381101561200e578181015183820152602001611ff6565b838111156110cd5750506000910152565b60008151808452612037816020860160208601611ff3565b601f01601f19169290920160200192915050565b6020815260006104fb602083018461201f565b80356001600160a01b038116811461207557600080fd5b919050565b6000806040838503121561208d57600080fd5b6120968361205e565b946020939093013593505050565b6000602082840312156120b657600080fd5b6104fb8261205e565b6000806000606084860312156120d457600080fd5b6120dd8461205e565b92506120eb6020850161205e565b9150604084013590509250925092565b60006020828403121561210d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561213c57600080fd5b81356001600160401b038082111561215357600080fd5b818401915084601f83011261216757600080fd5b81358181111561217957612179612114565b604051601f8201601f19908116603f011681019083821181831017156121a1576121a1612114565b816040528281528760208487010111156121ba57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080602083850312156121ed57600080fd5b82356001600160401b038082111561220457600080fd5b818501915085601f83011261221857600080fd5b81358181111561222757600080fd5b8660208260051b850101111561223c57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156122a357603f1988860301845261229185835161201f565b94509285019290850190600101612275565b5092979650505050505050565b803560ff8116811461207557600080fd5b60008060008060008060c087890312156122da57600080fd5b6122e38761205e565b955060208701359450604087013593506122ff606088016122b0565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561233457600080fd5b61233d8861205e565b965061234b6020890161205e565b95506040880135945060608801359350612367608089016122b0565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561239657600080fd5b61239f8361205e565b91506123ad6020840161205e565b90509250929050565b600080604083850312156123c957600080fd5b6123d28361205e565b9150602083013563ffffffff811681146123eb57600080fd5b809150509250929050565b600181811c9082168061240a57607f821691505b602082108114156116c157634e487b7160e01b600052602260045260246000fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561247c5761247c612453565b500190565b6020808252601f908201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604082015260600190565b6020808252601290820152716e6f7420656e6f7567682062616c616e636560701b604082015260600190565b6000828210156124f6576124f6612453565b500390565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261252857600080fd5b8301803591506001600160401b0382111561254257600080fd5b60200191503681900382131561255757600080fd5b9250929050565b600060001982141561257257612572612453565b5060010190565b60408152600061258c604083018561201f565b828103602084015261259e818561201f565b95945050505050565b6000826125c457634e487b7160e01b600052601260045260246000fd5b500490565b600082516125db818460208701611ff3565b9190910192915050565b634e487b7160e01b600052602160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212201d5437512458b8540f738222879616e12728019a5dbdd7783cddee78dda7587e64736f6c634300080c0033",
    "sourceMap": "1013:3315:10:-:0;;;1443:95:224;1390:148;;1301:180:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1422:5;1429:7;1832:5:224;1839:7;2089:5:223;2081;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2104:17:223;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;1877:13:224::1;1858:32;::::0;-1:-1:-1;1923:4:224::1;1900:28;::::0;1965:23:::1;:21;:23::i;:::-;1938:50;::::0;-1:-1:-1;1448:26:10::1;::::0;-1:-1:-1;1460:13:10;1448:11:::1;:26::i;:::-;1301:180:::0;;;1013:3315;;3296:438:224;3351:7;3448:95;3581:6;:4;:6::i;:::-;3565:24;;;;;;;3416:297;;;;;;2029:25:644;;;;2070:18;;;2063:34;;;;3611:14:224;2113:18:644;;;2106:34;3647:13:224;2156:18:644;;;2149:34;3690:4:224;2199:19:644;;;2192:61;2001:19;;3416:297:224;;;;;;;;;;;;3389:338;;;;;;3370:357;;3296:438;:::o;1421:172:68:-;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;2193:98:223:-;2247:13;2279:5;2272:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98;:::o;1013:3315:10:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1013:3315:10;;;-1:-1:-1;1013:3315:10;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:644;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:644;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:644;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:644:o;1036:729::-;1144:6;1152;1160;1213:2;1201:9;1192:7;1188:23;1184:32;1181:52;;;1229:1;1226;1219:12;1181:52;1255:16;;-1:-1:-1;;;;;1300:31:644;;1290:42;;1280:70;;1346:1;1343;1336:12;1280:70;1418:2;1403:18;;1397:25;1369:5;;-1:-1:-1;;;;;;1471:14:644;;;1468:34;;;1498:1;1495;1488:12;1468:34;1521:61;1574:7;1565:6;1554:9;1550:22;1521:61;:::i;:::-;1511:71;;1628:2;1617:9;1613:18;1607:25;1591:41;;1657:2;1647:8;1644:16;1641:36;;;1673:1;1670;1663:12;1641:36;;1696:63;1751:7;1740:8;1729:9;1725:24;1696:63;:::i;:::-;1686:73;;;1036:729;;;;;:::o;2264:380::-;2343:1;2339:12;;;;2386;;;2407:61;;2461:4;2453:6;2449:17;2439:27;;2407:61;2514:2;2506:6;2503:14;2483:18;2480:38;2477:161;;;2560:10;2555:3;2551:20;2548:1;2541:31;2595:4;2592:1;2585:15;2623:4;2620:1;2613:15;2477:161;;2264:380;;;:::o;:::-;1013:3315:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061016a5760003560e01c806306fdde031461016f578063095ea7b31461018d57806313af4035146101b057806318160ddd146101c557806323b872dd146101d7578063313ce567146101ea5780633644e515146101f957806339509351146102015780633a46b1a81461021457806342966c6814610227578063449a52f81461023a578063587cde1e1461024d5780635c19a95c146102785780636fcfff451461028b57806370a08231146102b357806379cc6790146102c65780637ecebe00146102d95780638da5cb5b146102ec5780638e539e8c146102f4578063938e3d7b1461030757806395d89b411461031a5780639ab24eb014610322578063a457c2d714610335578063a9059cbb14610348578063ac9650d81461035b578063c3cda5201461037b578063d505accf1461038e578063dd62ed3e146103a1578063e8a3d485146103b4578063f1127ed8146103bc575b600080fd5b6101776103f9565b604051610184919061204b565b60405180910390f35b6101a061019b36600461207a565b61048b565b6040519015158152602001610184565b6101c36101be3660046120a4565b6104a3565b005b6004545b604051908152602001610184565b6101a06101e53660046120bf565b6104dc565b60405160128152602001610184565b6101c9610502565b6101a061020f36600461207a565b610592565b6101c961022236600461207a565b6105d1565b6101c36102353660046120fb565b610614565b6101c361024836600461207a565b610646565b61026061025b3660046120a4565b6106e6565b6040516001600160a01b039091168152602001610184565b6101c36102863660046120a4565b610704565b61029e6102993660046120a4565b61070e565b60405163ffffffff9091168152602001610184565b6101c96102c13660046120a4565b610736565b6101c36102d436600461207a565b610751565b6101c96102e73660046120a4565b610806565b610260610824565b6101c96103023660046120fb565b610833565b6101c361031536600461212a565b61085f565b61017761088c565b6101c96103303660046120a4565b61089b565b6101a061034336600461207a565b610921565b6101a061035636600461207a565b6109be565b61036e6103693660046121da565b6109cc565b604051610184919061224e565b6101c36103893660046122c1565b610ac0565b6101c361039c366004612319565b610c1e565b6101c96103af366004612383565b610d84565b610177610daf565b6103cf6103ca3660046123b6565b610e3d565b60408051825163ffffffff1681526020928301516001600160e01b03169281019290925201610184565b606060058054610408906123f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610434906123f6565b80156104815780601f1061045657610100808354040283529160200191610481565b820191906000526020600020905b81548152906001019060200180831161046457829003601f168201915b5050505050905090565b600033610499818585610ec0565b5060019392505050565b6104ab610fe4565b6104d05760405162461bcd60e51b81526004016104c79061242b565b60405180910390fd5b6104d981611007565b50565b6000336104ea858285611059565b6104f58585856110d3565b60019150505b9392505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561055b57507f000000000000000000000000000000000000000000000000000000000000000046145b1561058557507f000000000000000000000000000000000000000000000000000000000000000090565b61058d611295565b905090565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919061049990829086906105cc908790612469565b610ec0565b60004382106105f25760405162461bcd60e51b81526004016104c790612481565b6001600160a01b03831660009081526009602052604090206104fb908361132a565b8061061e33610736565b101561063c5760405162461bcd60e51b81526004016104c7906124b8565b6104d933826113e6565b61064e610fe4565b6106945760405162461bcd60e51b81526020600482015260176024820152762737ba1030baba3437b934bd32b2103a379036b4b73a1760491b60448201526064016104c7565b806106d85760405162461bcd60e51b815260206004820152601460248201527326b4b73a34b733903d32b937903a37b5b2b7399760611b60448201526064016104c7565b6106e282826113fe565b5050565b6001600160a01b039081166000908152600860205260409020541690565b6104d93382611488565b6001600160a01b03811660009081526009602052604081205461073090611508565b92915050565b6001600160a01b031660009081526002602052604090205490565b610759610fe4565b61079f5760405162461bcd60e51b81526020600482015260176024820152762737ba1030baba3437b934bd32b2103a3790313ab9371760491b60448201526064016104c7565b806107a983610736565b10156107c75760405162461bcd60e51b81526004016104c7906124b8565b6000816107d48433610d84565b6107de91906124e4565b90506107ec83336000610ec0565b6107f7833383610ec0565b61080183836113e6565b505050565b6001600160a01b038116600090815260076020526040812054610730565b6001546001600160a01b031690565b60004382106108545760405162461bcd60e51b81526004016104c790612481565b610730600a8361132a565b610867610fe4565b6108835760405162461bcd60e51b81526004016104c79061242b565b6104d981611571565b606060068054610408906123f6565b6001600160a01b038116600090815260096020526040812054801561090e576001600160a01b03831660009081526009602052604090206108dd6001836124e4565b815481106108ed576108ed6124fb565b600091825260209091200154600160201b90046001600160e01b0316610911565b60005b6001600160e01b03169392505050565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909190838110156109a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104c7565b6109b38286868403610ec0565b506001949350505050565b6000336104998185856110d3565b6060816001600160401b038111156109e6576109e6612114565b604051908082528060200260200182016040528015610a1957816020015b6060815260200190600190039081610a045790505b50905060005b82811015610ab957610a8930858584818110610a3d57610a3d6124fb565b9050602002810190610a4f9190612511565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061165292505050565b828281518110610a9b57610a9b6124fb565b60200260200101819052508080610ab19061255e565b915050610a1f565b5092915050565b83421115610b105760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e6174757265206578706972656400000060448201526064016104c7565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b03881691810191909152606081018690526080810185905260009060a0016040516020818303038152906040528051906020012090506000610ba4610b84610502565b8360405161190160f01b8152600281019290925260228201526042902090565b90506000610bb482878787611677565b9050610bbf8161169f565b8814610c095760405162461bcd60e51b81526020600482015260196024820152784552433230566f7465733a20696e76616c6964206e6f6e636560381b60448201526064016104c7565b610c13818a611488565b505050505050505050565b83421115610c6e5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016104c7565b60007f0000000000000000000000000000000000000000000000000000000000000000888888610c9d8c61169f565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610cfa610b84610502565b90506000610d0a82878787611677565b9050896001600160a01b0316816001600160a01b031614610d6d5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016104c7565b610d788a8a8a610ec0565b50505050505050505050565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b60008054610dbc906123f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610de8906123f6565b8015610e355780601f10610e0a57610100808354040283529160200191610e35565b820191906000526020600020905b815481529060010190602001808311610e1857829003601f168201915b505050505081565b60408051808201909152600080825260208201526001600160a01b0383166000908152600960205260409020805463ffffffff8416908110610e8157610e816124fb565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091529392505050565b6001600160a01b038316610f225760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104c7565b6001600160a01b038216610f835760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104c7565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610fee610824565b6001600160a01b0316336001600160a01b031614905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b60006110658484610d84565b905060001981146110cd57818110156110c05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104c7565b6110cd8484848403610ec0565b50505050565b6001600160a01b0383166111375760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104c7565b6001600160a01b0382166111995760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104c7565b6001600160a01b038316600090815260026020526040902054818110156112115760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104c7565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290611248908490612469565b92505081905550826001600160a01b0316846001600160a01b03166000805160206126238339815191528460405161128291815260200190565b60405180910390a36110cd8484846116c7565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6112c06103f9565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8154600090815b8181101561138e57600061134582846116e2565b90508486828154811061135a5761135a6124fb565b60009182526020909120015463ffffffff16111561137a57809250611388565b611385816001612469565b91505b50611331565b81156113d157846113a06001846124e4565b815481106113b0576113b06124fb565b600091825260209091200154600160201b90046001600160e01b03166113d4565b60005b6001600160e01b031695945050505050565b6113f082826116fd565b6110cd600a6118408361184c565b61140882826119c3565b6004546001600160e01b03101561147a5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b60648201526084016104c7565b6110cd600a611a988361184c565b6000611493836106e6565b905060006114a084610736565b6001600160a01b0385811660008181526008602052604080822080546001600160a01b031916898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46110cd828483611aa4565b600063ffffffff82111561156d5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016104c7565b5090565b600080805461157f906123f6565b80601f01602080910402602001604051908101604052809291908181526020018280546115ab906123f6565b80156115f85780601f106115cd576101008083540402835291602001916115f8565b820191906000526020600020905b8154815290600101906020018083116115db57829003601f168201915b5050855193945061161493600093506020870192509050611f63565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051611646929190612579565b60405180910390a15050565b60606104fb83836040518060600160405280602781526020016125fc60279139611be1565b600080600061168887878787611cbe565b9150915061169581611d78565b5095945050505050565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b6108016116d3846106e6565b6116dc846106e6565b83611aa4565b60006116f160028484186125a7565b6104fb90848416612469565b6001600160a01b03821661175d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104c7565b6001600160a01b038216600090815260026020526040902054818110156117d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104c7565b6001600160a01b03831660009081526002602052604081208383039055600480548492906118009084906124e4565b90915550506040518281526000906001600160a01b038516906000805160206126238339815191529060200160405180910390a3610801836000846116c7565b60006104fb82846124e4565b82546000908190801561189657856118656001836124e4565b81548110611875576118756124fb565b600091825260209091200154600160201b90046001600160e01b0316611899565b60005b6001600160e01b031692506118b283858763ffffffff16565b91506000811180156118f0575043866118cc6001846124e4565b815481106118dc576118dc6124fb565b60009182526020909120015463ffffffff16145b15611950576118fe82611ec1565b8661190a6001846124e4565b8154811061191a5761191a6124fb565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b031602179055506119ba565b85604051806040016040528061196543611508565b63ffffffff16815260200161197985611ec1565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b50935093915050565b6001600160a01b038216611a195760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104c7565b8060046000828254611a2b9190612469565b90915550506001600160a01b03821660009081526002602052604081208054839290611a58908490612469565b90915550506040518181526001600160a01b038316906000906000805160206126238339815191529060200160405180910390a36106e2600083836116c7565b60006104fb8284612469565b816001600160a01b0316836001600160a01b031614158015611ac65750600081115b15610801576001600160a01b03831615611b54576001600160a01b03831660009081526009602052604081208190611b01906118408561184c565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611b49929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610801576001600160a01b03821660009081526009602052604081208190611b8a90611a988561184c565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611bd2929190918252602082015260400190565b60405180910390a25050505050565b60606001600160a01b0384163b611c495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104c7565b600080856001600160a01b031685604051611c6491906125c9565b600060405180830381855af49150503d8060008114611c9f576040519150601f19603f3d011682016040523d82523d6000602084013e611ca4565b606091505b5091509150611cb4828286611f2a565b9695505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115611ceb5750600090506003611d6f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611d3f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d6857600060019250925050611d6f565b9150600090505b94509492505050565b6000816004811115611d8c57611d8c6125e5565b1415611d955750565b6001816004811115611da957611da96125e5565b1415611df25760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016104c7565b6002816004811115611e0657611e066125e5565b1415611e545760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104c7565b6003816004811115611e6857611e686125e5565b14156104d95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104c7565b60006001600160e01b0382111561156d5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016104c7565b60608315611f395750816104fb565b825115611f495782518084602001fd5b8160405162461bcd60e51b81526004016104c7919061204b565b828054611f6f906123f6565b90600052602060002090601f016020900481019282611f915760008555611fd7565b82601f10611faa57805160ff1916838001178555611fd7565b82800160010185558215611fd7579182015b82811115611fd7578251825591602001919060010190611fbc565b5061156d9291505b8082111561156d5760008155600101611fdf565b60005b8381101561200e578181015183820152602001611ff6565b838111156110cd5750506000910152565b60008151808452612037816020860160208601611ff3565b601f01601f19169290920160200192915050565b6020815260006104fb602083018461201f565b80356001600160a01b038116811461207557600080fd5b919050565b6000806040838503121561208d57600080fd5b6120968361205e565b946020939093013593505050565b6000602082840312156120b657600080fd5b6104fb8261205e565b6000806000606084860312156120d457600080fd5b6120dd8461205e565b92506120eb6020850161205e565b9150604084013590509250925092565b60006020828403121561210d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561213c57600080fd5b81356001600160401b038082111561215357600080fd5b818401915084601f83011261216757600080fd5b81358181111561217957612179612114565b604051601f8201601f19908116603f011681019083821181831017156121a1576121a1612114565b816040528281528760208487010111156121ba57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080602083850312156121ed57600080fd5b82356001600160401b038082111561220457600080fd5b818501915085601f83011261221857600080fd5b81358181111561222757600080fd5b8660208260051b850101111561223c57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156122a357603f1988860301845261229185835161201f565b94509285019290850190600101612275565b5092979650505050505050565b803560ff8116811461207557600080fd5b60008060008060008060c087890312156122da57600080fd5b6122e38761205e565b955060208701359450604087013593506122ff606088016122b0565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561233457600080fd5b61233d8861205e565b965061234b6020890161205e565b95506040880135945060608801359350612367608089016122b0565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561239657600080fd5b61239f8361205e565b91506123ad6020840161205e565b90509250929050565b600080604083850312156123c957600080fd5b6123d28361205e565b9150602083013563ffffffff811681146123eb57600080fd5b809150509250929050565b600181811c9082168061240a57607f821691505b602082108114156116c157634e487b7160e01b600052602260045260246000fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561247c5761247c612453565b500190565b6020808252601f908201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604082015260600190565b6020808252601290820152716e6f7420656e6f7567682062616c616e636560701b604082015260600190565b6000828210156124f6576124f6612453565b500390565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261252857600080fd5b8301803591506001600160401b0382111561254257600080fd5b60200191503681900382131561255757600080fd5b9250929050565b600060001982141561257257612572612453565b5060010190565b60408152600061258c604083018561201f565b828103602084015261259e818561201f565b95945050505050565b6000826125c457634e487b7160e01b600052601260045260246000fd5b500490565b600082516125db818460208701611ff3565b9190910192915050565b634e487b7160e01b600052602160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212201d5437512458b8540f738222879616e12728019a5dbdd7783cddee78dda7587e64736f6c634300080c0033",
    "sourceMap": "1013:3315:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98:223;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4470:197;;;;;;:::i;:::-;;:::i;:::-;;;1367:14:644;;1360:22;1342:41;;1330:2;1315:18;4470:197:223;1202:187:644;1133:173:68;;;;;;:::i;:::-;;:::i;:::-;;3281:106:223;3368:12;;3281:106;;;1731:25:644;;;1719:2;1704:18;3281:106:223;1585:177:644;5229:286:223;;;;;;:::i;:::-;;:::i;3130:91::-;;;3212:2;2242:36:644;;2230:2;2215:18;3130:91:223;2100:184:644;3018:272:224;;;:::i;5910:236:223:-;;;;;;:::i;:::-;;:::i;2684:265:225:-;;;;;;:::i;:::-;;:::i;2440:166:10:-;;;;;;:::i;:::-;;:::i;2008:209::-;;;;;;:::i;:::-;;:::i;2077:126:225:-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2820:32:644;;;2802:51;;2790:2;2775:18;2077:126:225;2656:203:644;5107:167:225;;;;;;:::i;:::-;;:::i;1840:149::-;;;;;;:::i;:::-;;:::i;:::-;;;3038:10:644;3026:23;;;3008:42;;2996:2;2981:18;1840:149:225;2864:192:644;3445:125:223;;;;;;:::i;:::-;;:::i;2903:430:10:-;;;;;;:::i;:::-;;:::i;2768:126:224:-;;;;;;:::i;:::-;;:::i;871:86:68:-;;;:::i;3228:256:225:-;;;;;;:::i;:::-;;:::i;1003:188:54:-;;;;;;:::i;:::-;;:::i;2404:102:223:-;;;:::i;2282:209:225:-;;;;;;:::i;:::-;;:::i;6633:429:223:-;;;;;;:::i;:::-;;:::i;3766:189::-;;;;;;:::i;:::-;;:::i;698:319:63:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5543:613:225:-;;;;;;:::i;:::-;;:::i;2056:651:224:-;;;;;;:::i;:::-;;:::i;4013:149:223:-;;;;;;:::i;:::-;;:::i;565:34:54:-;;;:::i;1617:148:225:-;;;;;;:::i;:::-;;:::i;:::-;;;;7711:13:644;;7726:10;7707:30;7689:49;;7798:4;7786:17;;;7780:24;-1:-1:-1;;;;;7776:50:644;7754:20;;;7747:80;;;;7662:18;1617:148:225;7485:348:644;2193:98:223;2247:13;2279:5;2272:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98;:::o;4470:197::-;4553:4;719:10:230;4607:32:223;719:10:230;4623:7:223;4632:6;4607:8;:32::i;:::-;-1:-1:-1;4656:4:223;;4470:197;-1:-1:-1;;;4470:197:223:o;1133:173:68:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:68;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;5229:286:223:-;5356:4;719:10:230;5412:38:223;5428:4;719:10:230;5443:6:223;5412:15;:38::i;:::-;5460:27;5470:4;5476:2;5480:6;5460:9;:27::i;:::-;5504:4;5497:11;;;5229:286;;;;;;:::o;3018:272:224:-;3076:7;3107:4;-1:-1:-1;;;;;3116:12:224;3099:29;;:66;;;;;3149:16;3132:13;:33;3099:66;3095:189;;;-1:-1:-1;3188:24:224;;3018:272::o;3095:189::-;3250:23;:21;:23::i;:::-;3243:30;;3018:272;:::o;5910:236:223:-;719:10:230;5998:4:223;6077:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6077:27:223;;;;;;;;;;5998:4;;719:10:230;6052:66:223;;719:10:230;;6077:27:223;;:40;;6107:10;;6077:40;:::i;:::-;6052:8;:66::i;2684:265:225:-;2782:7;2823:12;2809:11;:26;2801:70;;;;-1:-1:-1;;;2801:70:225;;;;;;;:::i;:::-;-1:-1:-1;;;;;2907:21:225;;;;;;:12;:21;;;;;2888:54;;2930:11;2888:18;:54::i;2440:166:10:-;2533:7;2506:23;719:10:230;3445:125:223;:::i;2506:23:10:-;:34;;2498:65;;;;-1:-1:-1;;;2498:65:10;;;;;;;:::i;:::-;2573:26;2579:10;2591:7;2573:5;:26::i;2008:209::-;2087:10;:8;:10::i;:::-;2079:46;;;;-1:-1:-1;;;2079:46:10;;9740:2:644;2079:46:10;;;9722:21:644;9779:2;9759:18;;;9752:30;-1:-1:-1;;;9798:18:644;;;9791:53;9861:18;;2079:46:10;9538:347:644;2079:46:10;2143:12;2135:45;;;;-1:-1:-1;;;2135:45:10;;10092:2:644;2135:45:10;;;10074:21:644;10131:2;10111:18;;;10104:30;-1:-1:-1;;;10150:18:644;;;10143:50;10210:18;;2135:45:10;9890:344:644;2135:45:10;2191:19;2197:3;2202:7;2191:5;:19::i;:::-;2008:209;;:::o;2077:126:225:-;-1:-1:-1;;;;;2177:19:225;;;2151:7;2177:19;;;:10;:19;;;;;;;;2077:126::o;5107:167::-;5233:34;719:10:230;5257:9:225;5233;:34::i;1840:149::-;-1:-1:-1;;;;;1953:21:225;;1910:6;1953:21;;;:12;:21;;;;;:28;1935:47;;:17;:47::i;:::-;1928:54;1840:149;-1:-1:-1;;1840:149:225:o;3445:125:223:-;-1:-1:-1;;;;;3545:18:223;3519:7;3545:18;;;:9;:18;;;;;;;3445:125::o;2903:430:10:-;3000:10;:8;:10::i;:::-;2992:46;;;;-1:-1:-1;;;2992:46:10;;10441:2:644;2992:46:10;;;10423:21:644;10480:2;10460:18;;;10453:30;-1:-1:-1;;;10499:18:644;;;10492:53;10562:18;;2992:46:10;10239:347:644;2992:46:10;3079:7;3056:19;3066:8;3056:9;:19::i;:::-;:30;;3048:61;;;;-1:-1:-1;;;3048:61:10;;;;;;;:::i;:::-;3119:26;3182:7;3148:31;3158:8;3168:10;3148:9;:31::i;:::-;:41;;;;:::i;:::-;3119:70;;3199:33;3208:8;3218:10;3230:1;3199:8;:33::i;:::-;3242:50;3251:8;3261:10;3273:18;3242:8;:50::i;:::-;3302:24;3308:8;3318:7;3302:5;:24::i;:::-;2982:351;2903:430;;:::o;2768:126:224:-;-1:-1:-1;;;;;2863:14:224;;2837:7;2863:14;;;:7;:14;;;;;918::231;2863:24:224;827:112:231;871:86:68;944:6;;-1:-1:-1;;;;;944:6:68;;871:86::o;3228:256:225:-;3315:7;3356:12;3342:11;:26;3334:70;;;;-1:-1:-1;;;3334:70:225;;;;;;;:::i;:::-;3421:56;3440:23;3465:11;3421:18;:56::i;1003:188:54:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:54;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;2404:102:223:-;2460:13;2492:7;2485:14;;;;;:::i;2282:209:225:-;-1:-1:-1;;;;;2388:21:225;;2355:7;2388:21;;;:12;:21;;;;;:28;2433:8;;:51;;-1:-1:-1;;;;;2448:21:225;;;;;;:12;:21;;;;;2470:7;2476:1;2470:3;:7;:::i;:::-;2448:30;;;;;;;;:::i;:::-;;;;;;;;;;:36;-1:-1:-1;;;2448:36:225;;-1:-1:-1;;;;;2448:36:225;2433:51;;;2444:1;2433:51;-1:-1:-1;;;;;2426:58:225;;2282:209;-1:-1:-1;;;2282:209:225:o;6633:429:223:-;719:10:230;6726:4:223;6807:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6807:27:223;;;;;;;;;;6726:4;;719:10:230;6852:35:223;;;;6844:85;;;;-1:-1:-1;;;6844:85:223;;11055:2:644;6844:85:223;;;11037:21:644;11094:2;11074:18;;;11067:30;11133:34;11113:18;;;11106:62;-1:-1:-1;;;11184:18:644;;;11177:35;11229:19;;6844:85:223;10853:401:644;6844:85:223;6963:60;6972:5;6979:7;7007:15;6988:16;:34;6963:8;:60::i;:::-;-1:-1:-1;7051:4:223;;6633:429;-1:-1:-1;;;;6633:429:223:o;3766:189::-;3845:4;719:10:230;3899:28:223;719:10:230;3916:2:223;3920:6;3899:9;:28::i;698:319:63:-;775:22;831:4;-1:-1:-1;;;;;819:24:63;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:34;;858:9;853:134;873:15;;;853:134;;;922:54;961:4;968;;973:1;968:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;922:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;922:30:63;;-1:-1:-1;;;922:54:63:i;:::-;909:7;917:1;909:10;;;;;;;;:::i;:::-;;;;;;:67;;;;890:3;;;;;:::i;:::-;;;;853:134;;;;698:319;;;;:::o;5543:613:225:-;5762:6;5743:15;:25;;5735:67;;;;-1:-1:-1;;;5735:67:225;;12127:2:644;5735:67:225;;;12109:21:644;12166:2;12146:18;;;12139:30;12205:31;12185:18;;;12178:59;12254:18;;5735:67:225;11925:353:644;5735:67:225;5844:58;;;1306:71;5844:58;;;12514:25:644;-1:-1:-1;;;;;12575:32:644;;12555:18;;;12548:60;;;;12624:18;;;12617:34;;;12667:18;;;12660:34;;;5813:18:225;;12486:19:644;;5844:58:225;;;;;;;;;;;;5834:69;;;;;;5813:90;;5913:12;5928:53;5950:18;:16;:18::i;:::-;5970:10;8689:4:237;8683:11;-1:-1:-1;;;8707:23:237;;8759:4;8750:14;;8743:39;;;;8811:4;8802:14;;8795:34;8865:4;8850:20;;;8489:397;5928:53:225;5913:68;;5991:14;6008:28;6022:4;6028:1;6031;6034;6008:13;:28::i;:::-;5991:45;;6064:17;6074:6;6064:9;:17::i;:::-;6055:5;:26;6047:64;;;;-1:-1:-1;;;6047:64:225;;12907:2:644;6047:64:225;;;12889:21:644;12946:2;12926:18;;;12919:30;-1:-1:-1;;;12965:18:644;;;12958:55;13030:18;;6047:64:225;12705:349:644;6047:64:225;6121:28;6131:6;6139:9;6121;:28::i;:::-;5725:431;;;5543:613;;;;;;:::o;2056:651:224:-;2291:8;2272:15;:27;;2264:69;;;;-1:-1:-1;;;2264:69:224;;13261:2:644;2264:69:224;;;13243:21:644;13300:2;13280:18;;;13273:30;13339:31;13319:18;;;13312:59;13388:18;;2264:69:224;13059:353:644;2264:69:224;2344:18;2386:16;2404:5;2411:7;2420:5;2427:16;2437:5;2427:9;:16::i;:::-;2375:79;;;;;;13704:25:644;;;;-1:-1:-1;;;;;13803:15:644;;;13783:18;;;13776:43;13855:15;;;;13835:18;;;13828:43;13887:18;;;13880:34;13930:19;;;13923:35;13974:19;;;13967:35;;;13676:19;;2375:79:224;;;;;;;;;;;;2365:90;;;;;;2344:111;;2466:12;2481:53;2503:18;:16;:18::i;2481:53::-;2466:68;;2545:14;2562:28;2576:4;2582:1;2585;2588;2562:13;:28::i;:::-;2545:45;;2618:5;-1:-1:-1;;;;;2608:15:224;:6;-1:-1:-1;;;;;2608:15:224;;2600:58;;;;-1:-1:-1;;;2600:58:224;;14215:2:644;2600:58:224;;;14197:21:644;14254:2;14234:18;;;14227:30;14293:32;14273:18;;;14266:60;14343:18;;2600:58:224;14013:354:644;2600:58:224;2669:31;2678:5;2685:7;2694:5;2669:8;:31::i;:::-;2254:453;;;2056:651;;;;;;;:::o;4013:149:223:-;-1:-1:-1;;;;;4128:18:223;;;4102:7;4128:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4013:149::o;565:34:54:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1617:148:225:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;1732:21:225;;;;;;:12;:21;;;;;:26;;;;;;;;;;;;:::i;:::-;;;;;;;;;;1725:33;;;;;;;;;1732:26;;1725:33;;;;;;-1:-1:-1;;;1725:33:225;;-1:-1:-1;;;;;1725:33:225;;;;;;;;;1617:148;-1:-1:-1;;;1617:148:225:o;10160:370:223:-;-1:-1:-1;;;;;10291:19:223;;10283:68;;;;-1:-1:-1;;;10283:68:223;;14574:2:644;10283:68:223;;;14556:21:644;14613:2;14593:18;;;14586:30;14652:34;14632:18;;;14625:62;-1:-1:-1;;;14703:18:644;;;14696:34;14747:19;;10283:68:223;14372:400:644;10283:68:223;-1:-1:-1;;;;;10369:21:223;;10361:68;;;;-1:-1:-1;;;10361:68:223;;14979:2:644;10361:68:223;;;14961:21:644;15018:2;14998:18;;;14991:30;15057:34;15037:18;;;15030:62;-1:-1:-1;;;15108:18:644;;;15101:32;15150:19;;10361:68:223;14777:398:644;10361:68:223;-1:-1:-1;;;;;10440:18:223;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10491:32;;1731:25:644;;;10491:32:223;;1704:18:644;10491:32:223;;;;;;;10160:370;;;:::o;4211:115:10:-;4275:4;4312:7;:5;:7::i;:::-;-1:-1:-1;;;;;4298:21:10;:10;-1:-1:-1;;;;;4298:21:10;;4291:28;;4211:115;:::o;1421:172:68:-;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;10807:441:223:-;10937:24;10964:25;10974:5;10981:7;10964:9;:25::i;:::-;10937:52;;-1:-1:-1;;11003:16:223;:37;10999:243;;11084:6;11064:16;:26;;11056:68;;;;-1:-1:-1;;;11056:68:223;;15382:2:644;11056:68:223;;;15364:21:644;15421:2;15401:18;;;15394:30;15460:31;15440:18;;;15433:59;15509:18;;11056:68:223;15180:353:644;11056:68:223;11166:51;11175:5;11182:7;11210:6;11191:16;:25;11166:8;:51::i;:::-;10927:321;10807:441;;;:::o;7525:651::-;-1:-1:-1;;;;;7651:18:223;;7643:68;;;;-1:-1:-1;;;7643:68:223;;15740:2:644;7643:68:223;;;15722:21:644;15779:2;15759:18;;;15752:30;15818:34;15798:18;;;15791:62;-1:-1:-1;;;15869:18:644;;;15862:35;15914:19;;7643:68:223;15538:401:644;7643:68:223;-1:-1:-1;;;;;7729:16:223;;7721:64;;;;-1:-1:-1;;;7721:64:223;;16146:2:644;7721:64:223;;;16128:21:644;16185:2;16165:18;;;16158:30;16224:34;16204:18;;;16197:62;-1:-1:-1;;;16275:18:644;;;16268:33;16318:19;;7721:64:223;15944:399:644;7721:64:223;-1:-1:-1;;;;;7867:15:223;;7845:19;7867:15;;;:9;:15;;;;;;7900:21;;;;7892:72;;;;-1:-1:-1;;;7892:72:223;;16550:2:644;7892:72:223;;;16532:21:644;16589:2;16569:18;;;16562:30;16628:34;16608:18;;;16601:62;-1:-1:-1;;;16679:18:644;;;16672:36;16725:19;;7892:72:223;16348:402:644;7892:72:223;-1:-1:-1;;;;;7998:15:223;;;;;;;:9;:15;;;;;;8016:20;;;7998:38;;8056:13;;;;;;;;:23;;8030:6;;7998:15;8056:23;;8030:6;;8056:23;:::i;:::-;;;;;;;;8110:2;-1:-1:-1;;;;;8095:26:223;8104:4;-1:-1:-1;;;;;8095:26:223;-1:-1:-1;;;;;;;;;;;8114:6:223;8095:26;;;;1731:25:644;;1719:2;1704:18;;1585:177;8095:26:223;;;;;;;;8132:37;8152:4;8158:2;8162:6;8132:19;:37::i;3296:438:224:-;3351:7;3448:95;3581:6;:4;:6::i;:::-;3565:24;;;;;;;3416:297;;;;;;17014:25:644;;;;17055:18;;;17048:34;;;;3611:14:224;17098:18:644;;;17091:34;3647:13:224;17141:18:644;;;17134:34;3690:4:224;17184:19:644;;;17177:61;16986:19;;3416:297:224;;;;;;;;;;;;3389:338;;;;;;3370:357;;3296:438;:::o;3568:1458:225:-;4689:12;;3667:7;;;4736:229;4749:4;4743:3;:10;4736:229;;;4769:11;4783:23;4796:3;4801:4;4783:12;:23::i;:::-;4769:37;;4847:11;4824:5;4830:3;4824:10;;;;;;;;:::i;:::-;;;;;;;;;;:20;;;:34;4820:135;;;4885:3;4878:10;;4820:135;;;4933:7;:3;4939:1;4933:7;:::i;:::-;4927:13;;4820:135;4755:210;4736:229;;;4982:9;;:37;;4998:5;5004:8;5011:1;5004:4;:8;:::i;:::-;4998:15;;;;;;;;:::i;:::-;;;;;;;;;;:21;-1:-1:-1;;;4998:21:225;;-1:-1:-1;;;;;4998:21:225;4982:37;;;4994:1;4982:37;-1:-1:-1;;;;;4975:44:225;;3568:1458;-1:-1:-1;;;;;3568:1458:225:o;6824:190::-;6908:28;6920:7;6929:6;6908:11;:28::i;:::-;6947:60;6964:23;6989:9;7000:6;6947:16;:60::i;6450:285::-;6534:28;6546:7;6555:6;6534:11;:28::i;:::-;3368:12:223;;-1:-1:-1;;;;;;6580:29:225;6572:90;;;;-1:-1:-1;;;6572:90:225;;17451:2:644;6572:90:225;;;17433:21:644;17490:2;17470:18;;;17463:30;17529:34;17509:18;;;17502:62;-1:-1:-1;;;17580:18:644;;;17573:46;17636:19;;6572:90:225;17249:412:644;6572:90:225;6673:55;6690:23;6715:4;6721:6;6673:16;:55::i;7558:380::-;7642:23;7668:20;7678:9;7668;:20::i;:::-;7642:46;;7698:24;7725:20;7735:9;7725;:20::i;:::-;-1:-1:-1;;;;;7755:21:225;;;;;;;:10;:21;;;;;;:33;;-1:-1:-1;;;;;;7755:33:225;;;;;;;;;;7804:54;;7698:47;;-1:-1:-1;7755:33:225;7804:54;;;;;;7755:21;7804:54;7869:62;7886:15;7903:9;7914:16;7869;:62::i;3045:187:240:-;3101:6;3136:16;3127:25;;;3119:76;;;;-1:-1:-1;;;3119:76:240;;17868:2:644;3119:76:240;;;17850:21:644;17907:2;17887:18;;;17880:30;17946:34;17926:18;;;17919:62;-1:-1:-1;;;17997:18:644;;;17990:36;18043:19;;3119:76:240;17666:402:644;3119:76:240;-1:-1:-1;3219:5:240;3045:187::o;1273:185:54:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1384:18:54;;1339:35;;-1:-1:-1;1384:18:54;;:11;;-1:-1:-1;1384:18:54;;;;-1:-1:-1;1384:18:54;-1:-1:-1;1384:18:54;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;6538:198:288:-;6621:12;6652:77;6673:6;6681:4;6652:77;;;;;;;;;;;;;;;;;:20;:77::i;6711:270:237:-;6834:7;6854:17;6873:18;6895:25;6906:4;6912:1;6915;6918;6895:10;:25::i;:::-;6853:67;;;;6930:18;6942:5;6930:11;:18::i;:::-;-1:-1:-1;6965:9:237;6711:270;-1:-1:-1;;;;;6711:270:237:o;3865:203:224:-;-1:-1:-1;;;;;3985:14:224;;3925:15;3985:14;;;:7;:14;;;;;918::231;;1050:1;1032:19;;;;918:14;4044:17:224;3942:126;3865:203;;;:::o;7147:254:225:-;7338:56;7355:15;7365:4;7355:9;:15::i;:::-;7372:13;7382:2;7372:9;:13::i;:::-;7387:6;7338:16;:56::i;678:153:239:-;740:7;813:11;823:1;814:5;;;813:11;:::i;:::-;803:21;;804:5;;;803:21;:::i;9161:576:223:-;-1:-1:-1;;;;;9244:21:223;;9236:67;;;;-1:-1:-1;;;9236:67:223;;18885:2:644;9236:67:223;;;18867:21:644;18924:2;18904:18;;;18897:30;18963:34;18943:18;;;18936:62;-1:-1:-1;;;19014:18:644;;;19007:31;19055:19;;9236:67:223;18683:397:644;9236:67:223;-1:-1:-1;;;;;9399:18:223;;9374:22;9399:18;;;:9;:18;;;;;;9435:24;;;;9427:71;;;;-1:-1:-1;;;9427:71:223;;19287:2:644;9427:71:223;;;19269:21:644;19326:2;19306:18;;;19299:30;19365:34;19345:18;;;19338:62;-1:-1:-1;;;19416:18:644;;;19409:32;19458:19;;9427:71:223;19085:398:644;9427:71:223;-1:-1:-1;;;;;9532:18:223;;;;;;:9;:18;;;;;9553:23;;;9532:44;;9596:12;:22;;9570:6;;9532:18;9596:22;;9570:6;;9596:22;:::i;:::-;;;;-1:-1:-1;;9634:37:223;;1731:25:644;;;9660:1:223;;-1:-1:-1;;;;;9634:37:223;;;-1:-1:-1;;;;;;;;;;;9634:37:223;1719:2:644;1704:18;9634:37:223;;;;;;;9682:48;9702:7;9719:1;9723:6;9682:19;:48::i;9348:101:225:-;9411:7;9437:5;9441:1;9437;:5;:::i;8577:663::-;8809:12;;8747:17;;;;8843:8;;:35;;8858:5;8864:7;8870:1;8864:3;:7;:::i;:::-;8858:14;;;;;;;;:::i;:::-;;;;;;;;;;:20;-1:-1:-1;;;8858:20:225;;-1:-1:-1;;;;;8858:20:225;8843:35;;;8854:1;8843:35;-1:-1:-1;;;;;8831:47:225;;;8900:20;8903:9;8914:5;8900:2;:20;;:::i;:::-;8888:32;;8941:1;8935:3;:7;:51;;;;-1:-1:-1;8974:12:225;8946:5;8952:7;8958:1;8952:3;:7;:::i;:::-;8946:14;;;;;;;;:::i;:::-;;;;;;;;;;:24;;;:40;8935:51;8931:303;;;9025:29;9044:9;9025:18;:29::i;:::-;9002:5;9008:7;9014:1;9008:3;:7;:::i;:::-;9002:14;;;;;;;;:::i;:::-;;;;;;;;:20;;;:52;;;;;-1:-1:-1;;;;;9002:52:225;;;;;-1:-1:-1;;;;;9002:52:225;;;;;;8931:303;;;9085:5;9113:96;;;;;;;;9137:31;9155:12;9137:17;:31::i;:::-;9113:96;;;;;;9177:29;9196:9;9177:18;:29::i;:::-;-1:-1:-1;;;;;9113:96:225;;;;;;9085:138;;;;;;;-1:-1:-1;9085:138:225;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9085:138:225;;;;;;;;;;;;8931:303;8785:455;8577:663;;;;;;:::o;8452:389:223:-;-1:-1:-1;;;;;8535:21:223;;8527:65;;;;-1:-1:-1;;;8527:65:223;;19690:2:644;8527:65:223;;;19672:21:644;19729:2;19709:18;;;19702:30;19768:33;19748:18;;;19741:61;19819:18;;8527:65:223;19488:355:644;8527:65:223;8679:6;8663:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8695:18:223;;;;;;:9;:18;;;;;:28;;8717:6;;8695:18;:28;;8717:6;;8695:28;:::i;:::-;;;;-1:-1:-1;;8738:37:223;;1731:25:644;;;-1:-1:-1;;;;;8738:37:223;;;8755:1;;-1:-1:-1;;;;;;;;;;;8738:37:223;1719:2:644;1704:18;8738:37:223;;;;;;;8786:48;8814:1;8818:7;8827:6;8786:19;:48::i;9246:96:225:-;9304:7;9330:5;9334:1;9330;:5;:::i;7944:627::-;8071:3;-1:-1:-1;;;;;8064:10:225;:3;-1:-1:-1;;;;;8064:10:225;;;:24;;;;;8087:1;8078:6;:10;8064:24;8060:505;;;-1:-1:-1;;;;;8108:17:225;;;8104:221;;-1:-1:-1;;;;;8203:17:225;;8146;8203;;;:12;:17;;;;;8146;;8186:54;;8222:9;8233:6;8186:16;:54::i;:::-;8145:95;;;;8284:3;-1:-1:-1;;;;;8263:47:225;;8289:9;8300;8263:47;;;;;;20022:25:644;;;20078:2;20063:18;;20056:34;20010:2;19995:18;;19848:248;8263:47:225;;;;;;;;8127:198;;8104:221;-1:-1:-1;;;;;8343:17:225;;;8339:216;;-1:-1:-1;;;;;8438:17:225;;8381;8438;;;:12;:17;;;;;8381;;8421:49;;8457:4;8463:6;8421:16;:49::i;:::-;8380:90;;;;8514:3;-1:-1:-1;;;;;8493:47:225;;8519:9;8530;8493:47;;;;;;20022:25:644;;;20078:2;20063:18;;20056:34;20010:2;19995:18;;19848:248;8493:47:225;;;;;;;;8362:193;;7944:627;;;:::o;6922:387:288:-;7063:12;-1:-1:-1;;;;;1427:19:288;;;7087:69;;;;-1:-1:-1;;;7087:69:288;;20303:2:644;7087:69:288;;;20285:21:644;20342:2;20322:18;;;20315:30;20381:34;20361:18;;;20354:62;-1:-1:-1;;;20432:18:644;;;20425:36;20478:19;;7087:69:288;20101:402:644;7087:69:288;7168:12;7182:23;7209:6;-1:-1:-1;;;;;7209:19:288;7229:4;7209:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7167:67;;;;7251:51;7268:7;7277:10;7289:12;7251:16;:51::i;:::-;7244:58;6922:387;-1:-1:-1;;;;;;6922:387:288:o;5084:1494:237:-;5210:7;;-1:-1:-1;;;;;6121:79:237;;6117:161;;;-1:-1:-1;6232:1:237;;-1:-1:-1;6236:30:237;6216:51;;6117:161;6389:24;;;6372:14;6389:24;;;;;;;;;21014:25:644;;;21087:4;21075:17;;21055:18;;;21048:45;;;;21109:18;;;21102:34;;;21152:18;;;21145:34;;;6389:24:237;;20986:19:644;;6389:24:237;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6389:24:237;;-1:-1:-1;;6389:24:237;;;-1:-1:-1;;;;;;;6427:20:237;;6423:101;;6479:1;6483:29;6463:50;;;;;;;6423:101;6542:6;-1:-1:-1;6550:20:237;;-1:-1:-1;5084:1494:237;;;;;;;;:::o;585:511::-;662:20;653:5;:29;;;;;;;;:::i;:::-;;649:441;;;585:511;:::o;649:441::-;758:29;749:5;:38;;;;;;;;:::i;:::-;;745:345;;;803:34;;-1:-1:-1;;;803:34:237;;21524:2:644;803:34:237;;;21506:21:644;21563:2;21543:18;;;21536:30;-1:-1:-1;;;21582:18:644;;;21575:54;21646:18;;803:34:237;21322:348:644;745:345:237;867:35;858:5;:44;;;;;;;;:::i;:::-;;854:236;;;918:41;;-1:-1:-1;;;918:41:237;;21877:2:644;918:41:237;;;21859:21:644;21916:2;21896:18;;;21889:30;21955:33;21935:18;;;21928:61;22006:18;;918:41:237;21675:355:644;854:236:237;989:30;980:5;:39;;;;;;;;:::i;:::-;;976:114;;;1035:44;;-1:-1:-1;;;1035:44:237;;22237:2:644;1035:44:237;;;22219:21:644;22276:2;22256:18;;;22249:30;22315:34;22295:18;;;22288:62;-1:-1:-1;;;22366:18:644;;;22359:32;22408:19;;1035:44:237;22035:398:644;1135:192:240;1192:7;-1:-1:-1;;;;;1219:26:240;;;1211:78;;;;-1:-1:-1;;;1211:78:240;;22640:2:644;1211:78:240;;;22622:21:644;22679:2;22659:18;;;22652:30;22718:34;22698:18;;;22691:62;-1:-1:-1;;;22769:18:644;;;22762:37;22816:19;;1211:78:240;22438:403:644;7529:692:288;7675:12;7703:7;7699:516;;;-1:-1:-1;7733:10:288;7726:17;;7699:516;7844:17;;:21;7840:365;;8038:10;8032:17;8098:15;8085:10;8081:2;8077:19;8070:44;7840:365;8177:12;8170:20;;-1:-1:-1;;;8170:20:288;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:258:644;86:1;96:113;110:6;107:1;104:13;96:113;;;186:11;;;180:18;167:11;;;160:39;132:2;125:10;96:113;;;227:6;224:1;221:13;218:48;;;-1:-1:-1;;262:1:644;244:16;;237:27;14:258::o;277:::-;319:3;357:5;351:12;384:6;379:3;372:19;400:63;456:6;449:4;444:3;440:14;433:4;426:5;422:16;400:63;:::i;:::-;517:2;496:15;-1:-1:-1;;492:29:644;483:39;;;;524:4;479:50;;277:258;-1:-1:-1;;277:258:644:o;540:220::-;689:2;678:9;671:21;652:4;709:45;750:2;739:9;735:18;727:6;709:45;:::i;765:173::-;833:20;;-1:-1:-1;;;;;882:31:644;;872:42;;862:70;;928:1;925;918:12;862:70;765:173;;;:::o;943:254::-;1011:6;1019;1072:2;1060:9;1051:7;1047:23;1043:32;1040:52;;;1088:1;1085;1078:12;1040:52;1111:29;1130:9;1111:29;:::i;:::-;1101:39;1187:2;1172:18;;;;1159:32;;-1:-1:-1;;;943:254:644:o;1394:186::-;1453:6;1506:2;1494:9;1485:7;1481:23;1477:32;1474:52;;;1522:1;1519;1512:12;1474:52;1545:29;1564:9;1545:29;:::i;1767:328::-;1844:6;1852;1860;1913:2;1901:9;1892:7;1888:23;1884:32;1881:52;;;1929:1;1926;1919:12;1881:52;1952:29;1971:9;1952:29;:::i;:::-;1942:39;;2000:38;2034:2;2023:9;2019:18;2000:38;:::i;:::-;1990:48;;2085:2;2074:9;2070:18;2057:32;2047:42;;1767:328;;;;;:::o;2471:180::-;2530:6;2583:2;2571:9;2562:7;2558:23;2554:32;2551:52;;;2599:1;2596;2589:12;2551:52;-1:-1:-1;2622:23:644;;2471:180;-1:-1:-1;2471:180:644:o;3061:127::-;3122:10;3117:3;3113:20;3110:1;3103:31;3153:4;3150:1;3143:15;3177:4;3174:1;3167:15;3193:922;3262:6;3315:2;3303:9;3294:7;3290:23;3286:32;3283:52;;;3331:1;3328;3321:12;3283:52;3371:9;3358:23;-1:-1:-1;;;;;3441:2:644;3433:6;3430:14;3427:34;;;3457:1;3454;3447:12;3427:34;3495:6;3484:9;3480:22;3470:32;;3540:7;3533:4;3529:2;3525:13;3521:27;3511:55;;3562:1;3559;3552:12;3511:55;3598:2;3585:16;3620:2;3616;3613:10;3610:36;;;3626:18;;:::i;:::-;3701:2;3695:9;3669:2;3755:13;;-1:-1:-1;;3751:22:644;;;3775:2;3747:31;3743:40;3731:53;;;3799:18;;;3819:22;;;3796:46;3793:72;;;3845:18;;:::i;:::-;3885:10;3881:2;3874:22;3920:2;3912:6;3905:18;3960:7;3955:2;3950;3946;3942:11;3938:20;3935:33;3932:53;;;3981:1;3978;3971:12;3932:53;4037:2;4032;4028;4024:11;4019:2;4011:6;4007:15;3994:46;4082:1;4060:15;;;4077:2;4056:24;4049:35;;;;-1:-1:-1;4064:6:644;3193:922;-1:-1:-1;;;;;3193:922:644:o;4120:626::-;4217:6;4225;4278:2;4266:9;4257:7;4253:23;4249:32;4246:52;;;4294:1;4291;4284:12;4246:52;4334:9;4321:23;-1:-1:-1;;;;;4404:2:644;4396:6;4393:14;4390:34;;;4420:1;4417;4410:12;4390:34;4458:6;4447:9;4443:22;4433:32;;4503:7;4496:4;4492:2;4488:13;4484:27;4474:55;;4525:1;4522;4515:12;4474:55;4565:2;4552:16;4591:2;4583:6;4580:14;4577:34;;;4607:1;4604;4597:12;4577:34;4660:7;4655:2;4645:6;4642:1;4638:14;4634:2;4630:23;4626:32;4623:45;4620:65;;;4681:1;4678;4671:12;4620:65;4712:2;4704:11;;;;;4734:6;;-1:-1:-1;4120:626:644;;-1:-1:-1;;;;4120:626:644:o;4751:801::-;4911:4;4940:2;4980;4969:9;4965:18;5010:2;4999:9;4992:21;5033:6;5068;5062:13;5099:6;5091;5084:22;5137:2;5126:9;5122:18;5115:25;;5199:2;5189:6;5186:1;5182:14;5171:9;5167:30;5163:39;5149:53;;5237:2;5229:6;5225:15;5258:1;5268:255;5282:6;5279:1;5276:13;5268:255;;;5375:2;5371:7;5359:9;5351:6;5347:22;5343:36;5338:3;5331:49;5403:40;5436:6;5427;5421:13;5403:40;:::i;:::-;5393:50;-1:-1:-1;5501:12:644;;;;5466:15;;;;5304:1;5297:9;5268:255;;;-1:-1:-1;5540:6:644;;4751:801;-1:-1:-1;;;;;;;4751:801:644:o;5557:156::-;5623:20;;5683:4;5672:16;;5662:27;;5652:55;;5703:1;5700;5693:12;5718:531;5820:6;5828;5836;5844;5852;5860;5913:3;5901:9;5892:7;5888:23;5884:33;5881:53;;;5930:1;5927;5920:12;5881:53;5953:29;5972:9;5953:29;:::i;:::-;5943:39;;6029:2;6018:9;6014:18;6001:32;5991:42;;6080:2;6069:9;6065:18;6052:32;6042:42;;6103:36;6135:2;6124:9;6120:18;6103:36;:::i;:::-;6093:46;;6186:3;6175:9;6171:19;6158:33;6148:43;;6238:3;6227:9;6223:19;6210:33;6200:43;;5718:531;;;;;;;;:::o;6254:606::-;6365:6;6373;6381;6389;6397;6405;6413;6466:3;6454:9;6445:7;6441:23;6437:33;6434:53;;;6483:1;6480;6473:12;6434:53;6506:29;6525:9;6506:29;:::i;:::-;6496:39;;6554:38;6588:2;6577:9;6573:18;6554:38;:::i;:::-;6544:48;;6639:2;6628:9;6624:18;6611:32;6601:42;;6690:2;6679:9;6675:18;6662:32;6652:42;;6713:37;6745:3;6734:9;6730:19;6713:37;:::i;:::-;6703:47;;6797:3;6786:9;6782:19;6769:33;6759:43;;6849:3;6838:9;6834:19;6821:33;6811:43;;6254:606;;;;;;;;;;:::o;6865:260::-;6933:6;6941;6994:2;6982:9;6973:7;6969:23;6965:32;6962:52;;;7010:1;7007;7000:12;6962:52;7033:29;7052:9;7033:29;:::i;:::-;7023:39;;7081:38;7115:2;7104:9;7100:18;7081:38;:::i;:::-;7071:48;;6865:260;;;;;:::o;7130:350::-;7197:6;7205;7258:2;7246:9;7237:7;7233:23;7229:32;7226:52;;;7274:1;7271;7264:12;7226:52;7297:29;7316:9;7297:29;:::i;:::-;7287:39;;7376:2;7365:9;7361:18;7348:32;7420:10;7413:5;7409:22;7402:5;7399:33;7389:61;;7446:1;7443;7436:12;7389:61;7469:5;7459:15;;;7130:350;;;;;:::o;7838:380::-;7917:1;7913:12;;;;7960;;;7981:61;;8035:4;8027:6;8023:17;8013:27;;7981:61;8088:2;8080:6;8077:14;8057:18;8054:38;8051:161;;;8134:10;8129:3;8125:20;8122:1;8115:31;8169:4;8166:1;8159:15;8197:4;8194:1;8187:15;8223:338;8425:2;8407:21;;;8464:2;8444:18;;;8437:30;-1:-1:-1;;;8498:2:644;8483:18;;8476:44;8552:2;8537:18;;8223:338::o;8566:127::-;8627:10;8622:3;8618:20;8615:1;8608:31;8658:4;8655:1;8648:15;8682:4;8679:1;8672:15;8698:128;8738:3;8769:1;8765:6;8762:1;8759:13;8756:39;;;8775:18;;:::i;:::-;-1:-1:-1;8811:9:644;;8698:128::o;8831:355::-;9033:2;9015:21;;;9072:2;9052:18;;;9045:30;9111:33;9106:2;9091:18;;9084:61;9177:2;9162:18;;8831:355::o;9191:342::-;9393:2;9375:21;;;9432:2;9412:18;;;9405:30;-1:-1:-1;;;9466:2:644;9451:18;;9444:48;9524:2;9509:18;;9191:342::o;10591:125::-;10631:4;10659:1;10656;10653:8;10650:34;;;10664:18;;:::i;:::-;-1:-1:-1;10701:9:644;;10591:125::o;10721:127::-;10782:10;10777:3;10773:20;10770:1;10763:31;10813:4;10810:1;10803:15;10837:4;10834:1;10827:15;11259:521;11336:4;11342:6;11402:11;11389:25;11496:2;11492:7;11481:8;11465:14;11461:29;11457:43;11437:18;11433:68;11423:96;;11515:1;11512;11505:12;11423:96;11542:33;;11594:20;;;-1:-1:-1;;;;;;11626:30:644;;11623:50;;;11669:1;11666;11659:12;11623:50;11702:4;11690:17;;-1:-1:-1;11733:14:644;11729:27;;;11719:38;;11716:58;;;11770:1;11767;11760:12;11716:58;11259:521;;;;;:::o;11785:135::-;11824:3;-1:-1:-1;;11845:17:644;;11842:43;;;11865:18;;:::i;:::-;-1:-1:-1;11912:1:644;11901:13;;11785:135::o;18073:383::-;18270:2;18259:9;18252:21;18233:4;18296:45;18337:2;18326:9;18322:18;18314:6;18296:45;:::i;:::-;18389:9;18381:6;18377:22;18372:2;18361:9;18357:18;18350:50;18417:33;18443:6;18435;18417:33;:::i;:::-;18409:41;18073:383;-1:-1:-1;;;;;18073:383:644:o;18461:217::-;18501:1;18527;18517:132;;18571:10;18566:3;18562:20;18559:1;18552:31;18606:4;18603:1;18596:15;18634:4;18631:1;18624:15;18517:132;-1:-1:-1;18663:9:644;;18461:217::o;20508:274::-;20637:3;20675:6;20669:13;20691:53;20737:6;20732:3;20725:4;20717:6;20713:17;20691:53;:::i;:::-;20760:16;;;;;20508:274;-1:-1:-1;;20508:274:644:o;21190:127::-;21251:10;21246:3;21242:20;21239:1;21232:31;21282:4;21279:1;21272:15;21306:4;21303:1;21296:15",
    "linkReferences": {},
    "immutableReferences": {
      "47279": [
        {
          "start": 1379,
          "length": 32
        }
      ],
      "47281": [
        {
          "start": 1337,
          "length": 32
        }
      ],
      "47283": [
        {
          "start": 1295,
          "length": 32
        }
      ],
      "47288": [
        {
          "start": 3186,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "DOMAIN_SEPARATOR()": "3644e515",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "burnFrom(address,uint256)": "79cc6790",
    "checkpoints(address,uint32)": "f1127ed8",
    "contractURI()": "e8a3d485",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "delegate(address)": "5c19a95c",
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": "c3cda520",
    "delegates(address)": "587cde1e",
    "getPastTotalSupply(uint256)": "8e539e8c",
    "getPastVotes(address,uint256)": "3a46b1a8",
    "getVotes(address)": "9ab24eb0",
    "increaseAllowance(address,uint256)": "39509351",
    "mintTo(address,uint256)": "449a52f8",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nonces(address)": "7ecebe00",
    "numCheckpoints(address)": "6fcfff45",
    "owner()": "8da5cb5b",
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
    "setContractURI(string)": "938e3d7b",
    "setOwner(address)": "13af4035",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityMinted\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Caller should own the `_amount` of tokens.\",\"params\":{\"_amount\":\"The number of tokens to burn.\"}},\"burnFrom(address,uint256)\":{\"details\":\"`_account` should own the `_amount` of tokens.\",\"params\":{\"_account\":\"The account to burn tokens from.\",\"_amount\":\"The number of tokens to burn.\"}},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"Delegate votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`\"},\"delegates(address)\":{\"details\":\"Get the address `account` is currently delegating to.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined\"},\"getPastVotes(address,uint256)\":{\"details\":\"Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined\"},\"getVotes(address)\":{\"details\":\"Gets the current votes balance for `account`\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mintTo(address,uint256)\":{\"details\":\"The logic in the `_canMint` function determines whether the caller is authorized to mint tokens.\",\"params\":{\"_amount\":\"Quantity of tokens to mint.\",\"_to\":\"The recipient of the tokens to mint.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner a given amount of their tokens.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Lets an owner burn a given amount of an account's tokens.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"mintTo(address,uint256)\":{\"notice\":\"Lets an authorized address mint tokens to a recipient.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"}},\"notice\":\"The `ERC20Vote` smart contract implements the ERC20 standard and ERC20Votes.  It includes the following additions to standard ERC20 logic:      - Ability to mint & burn tokens via the provided `mint` & `burn` functions.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - Extension of ERC20 to support voting and delegation.      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by                             presenting a message signed by the account.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC20Vote.sol\":\"ERC20Vote\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC20Base.sol\":{\"keccak256\":\"0x3dfe12d9a47e8e129b6e8bfd65cb21bac7c1ff47eed4511c201eef6210b7d17b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://348e25fd207c832220ec1a0fc971f9becdfd81d98c4b68a927479536b72f7566\",\"dweb:/ipfs/QmR6USBcjJigeHZVgjtSTzjfNUN5owDWTszPC4qE6rszuq\"]},\"contracts/base/ERC20Vote.sol\":{\"keccak256\":\"0xd1083f82c7c220cd8dc4ef4b6d5bfec8f3d1c0dd3d7ffd8daffba81662211b6e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c180426c68769fdd9572a3cd7981a9e15e77fe69e2d89afda3bb8e095924d4a1\",\"dweb:/ipfs/QmVeJsqptZYSME1cyvcBdS7bKcpZAnrpaoqoBYeGunAEia\"]},\"contracts/eip/interface/IERC20.sol\":{\"keccak256\":\"0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592\",\"dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA\"]},\"contracts/eip/interface/IERC20Metadata.sol\":{\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65\",\"dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1\"]},\"contracts/eip/interface/IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2\",\"dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/interface/IBurnableERC20.sol\":{\"keccak256\":\"0x7098224c3bdcc1ec2e384c035b2f0853232696b4fae77df25919b1c19c033272\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc64766fb8746d8ee6a8814a3d4a7b4f0bf643bdf76b4d563f963f828ef020fe\",\"dweb:/ipfs/QmdNe4TrNDzkNBqwyehyS8H73h68bxk5PC8S9CXHfDqrw2\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IMintableERC20.sol\":{\"keccak256\":\"0xd0b56f9f9d665684156294bb479ce09d6ad3cc4f4bebc246064098a9e767642e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://579ef58d8df23fc25fc9ac10dd5e6f63bc0e0393cf79cc7409089d57b56b3fd4\",\"dweb:/ipfs/QmTVXS9jzQsp9j4Luvr48HWMTe5etgfQdge1hZ7eLJTwp1\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/external-deps/openzeppelin/governance/utils/IVotes.sol\":{\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f41fe2bddc33c17ccccfc25379b1869354e9ee62d8b28d2acc95229eeba37a86\",\"dweb:/ipfs/Qmb6SF2XL2uSvH6k5JSjtx4Xoqz41ACkhdAhtbW1Yh3RiY\"]},\"contracts/external-deps/openzeppelin/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x7f3dc5aeafe05fc114cf580056869cfc017e173f510dccec06b65b8199af139b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99fd2c9705e29c559783f8a63b356bb0e27b35d92a5383b331e342769d3d7c08\",\"dweb:/ipfs/QmXsPDArztRMiNzondL6b9JRxzENZPvPpKrrqwt9ikMFAA\"]},\"contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0x4bd6e2c824d3306bf73098f468366fc5ab8bc302065b8dbe40100115ac19579c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63c8e1da97d932e80e6916c068c7d275b0de0fd8ba42ddcf8949febd94a4455a\",\"dweb:/ipfs/QmSaKN8JXUiEwqTJZ7DhjocMwppXr6725ozguwdtHmw7Sn\"]},\"contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol\":{\"keccak256\":\"0x4bc56493138c15be393a406f26235def55a3aeea9072c78b37636978aeb78247\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32d281d685a548efcce017392bde241810793ecf2888c63d7c87b14ad1cb6e34\",\"dweb:/ipfs/QmTLzjD7a8kTK5Ek26jKfMr5H8GTjLx6KgGPSccWNas85B\"]},\"contracts/external-deps/openzeppelin/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/external-deps/openzeppelin/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"contracts/external-deps/openzeppelin/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x2e5b68f695b674731ee7f041a4924d7bb917b87d1efc8cf8ec00904ee7ab8b49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f0ead0687405faad7c08e19bfa4d26d3517ca30fa5bdf5b7b77f09d074f6918\",\"dweb:/ipfs/QmaovoMzoEnW8t8EbuA5XXrUxXvgEmNk7F9aqzR56BQA6v\"]},\"contracts/external-deps/openzeppelin/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba\",\"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT\"]},\"contracts/external-deps/openzeppelin/utils/math/Math.sol\":{\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab84f13e6e6e0823854a0cddd49e96df052092d5919f95587607f0ed28a64cb6\",\"dweb:/ipfs/QmbNtqAq23ZDjCzHukQaa7B3y6rcobscm6FZF5PMQXcnVr\"]},\"contracts/external-deps/openzeppelin/utils/math/SafeCast.sol\":{\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb62abcee612c175f1b9bc70e5dfe5bd23473c99987ade6e80e291f68dc60ff1\",\"dweb:/ipfs/QmZCMajhG7FtRYNDwBchXN89mXR6HLPVzr9732qfUdNf9E\"]},\"contracts/lib/TWAddress.sol\":{\"keccak256\":\"0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e\",\"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6\"]},\"contracts/lib/TWStrings.sol\":{\"keccak256\":\"0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9\",\"dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "fromDelegate",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "toDelegate",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "DelegateChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "previousBalance",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "newBalance",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DelegateVotesChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "mintedTo",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityMinted",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DOMAIN_SEPARATOR",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burnFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "pos",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkpoints",
          "outputs": [
            {
              "internalType": "struct ERC20Votes.Checkpoint",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "fromBlock",
                  "type": "uint32"
                },
                {
                  "internalType": "uint224",
                  "name": "votes",
                  "type": "uint224"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegatee",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "delegate"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegatee",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "delegateBySig"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "delegates",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPastTotalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPastVotes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getVotes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mintTo"
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "nonces",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "numCheckpoints",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permit"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "DOMAIN_SEPARATOR()": {
            "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "burn(uint256)": {
            "details": "Caller should own the `_amount` of tokens.",
            "params": {
              "_amount": "The number of tokens to burn."
            }
          },
          "burnFrom(address,uint256)": {
            "details": "`_account` should own the `_amount` of tokens.",
            "params": {
              "_account": "The account to burn tokens from.",
              "_amount": "The number of tokens to burn."
            }
          },
          "checkpoints(address,uint32)": {
            "details": "Get the `pos`-th checkpoint for `account`."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "delegate(address)": {
            "details": "Delegate votes from the sender to `delegatee`."
          },
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "Delegates votes from signer to `delegatee`"
          },
          "delegates(address)": {
            "details": "Get the address `account` is currently delegating to."
          },
          "getPastTotalSupply(uint256)": {
            "details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"
          },
          "getPastVotes(address,uint256)": {
            "details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"
          },
          "getVotes(address)": {
            "details": "Gets the current votes balance for `account`"
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "mintTo(address,uint256)": {
            "details": "The logic in the `_canMint` function determines whether the caller is authorized to mint tokens.",
            "params": {
              "_amount": "Quantity of tokens to mint.",
              "_to": "The recipient of the tokens to mint."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "nonces(address)": {
            "details": "See {IERC20Permit-nonces}."
          },
          "numCheckpoints(address)": {
            "details": "Get number of checkpoints for `account`."
          },
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "See {IERC20Permit-permit}."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(uint256)": {
            "notice": "Lets an owner a given amount of their tokens."
          },
          "burnFrom(address,uint256)": {
            "notice": "Lets an owner burn a given amount of an account's tokens."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "mintTo(address,uint256)": {
            "notice": "Lets an authorized address mint tokens to a recipient."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC20Vote.sol": "ERC20Vote"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC20Base.sol": {
        "keccak256": "0x3dfe12d9a47e8e129b6e8bfd65cb21bac7c1ff47eed4511c201eef6210b7d17b",
        "urls": [
          "bzz-raw://348e25fd207c832220ec1a0fc971f9becdfd81d98c4b68a927479536b72f7566",
          "dweb:/ipfs/QmR6USBcjJigeHZVgjtSTzjfNUN5owDWTszPC4qE6rszuq"
        ],
        "license": "Apache-2.0"
      },
      "contracts/base/ERC20Vote.sol": {
        "keccak256": "0xd1083f82c7c220cd8dc4ef4b6d5bfec8f3d1c0dd3d7ffd8daffba81662211b6e",
        "urls": [
          "bzz-raw://c180426c68769fdd9572a3cd7981a9e15e77fe69e2d89afda3bb8e095924d4a1",
          "dweb:/ipfs/QmVeJsqptZYSME1cyvcBdS7bKcpZAnrpaoqoBYeGunAEia"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20.sol": {
        "keccak256": "0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff",
        "urls": [
          "bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592",
          "dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20Metadata.sol": {
        "keccak256": "0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734",
        "urls": [
          "bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65",
          "dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20Permit.sol": {
        "keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
        "urls": [
          "bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
          "dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
        ],
        "license": "MIT"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55",
        "urls": [
          "bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2",
          "dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IBurnableERC20.sol": {
        "keccak256": "0x7098224c3bdcc1ec2e384c035b2f0853232696b4fae77df25919b1c19c033272",
        "urls": [
          "bzz-raw://cc64766fb8746d8ee6a8814a3d4a7b4f0bf643bdf76b4d563f963f828ef020fe",
          "dweb:/ipfs/QmdNe4TrNDzkNBqwyehyS8H73h68bxk5PC8S9CXHfDqrw2"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMintableERC20.sol": {
        "keccak256": "0xd0b56f9f9d665684156294bb479ce09d6ad3cc4f4bebc246064098a9e767642e",
        "urls": [
          "bzz-raw://579ef58d8df23fc25fc9ac10dd5e6f63bc0e0393cf79cc7409089d57b56b3fd4",
          "dweb:/ipfs/QmTVXS9jzQsp9j4Luvr48HWMTe5etgfQdge1hZ7eLJTwp1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/governance/utils/IVotes.sol": {
        "keccak256": "0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0",
        "urls": [
          "bzz-raw://f41fe2bddc33c17ccccfc25379b1869354e9ee62d8b28d2acc95229eeba37a86",
          "dweb:/ipfs/Qmb6SF2XL2uSvH6k5JSjtx4Xoqz41ACkhdAhtbW1Yh3RiY"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/ERC20.sol": {
        "keccak256": "0x7f3dc5aeafe05fc114cf580056869cfc017e173f510dccec06b65b8199af139b",
        "urls": [
          "bzz-raw://99fd2c9705e29c559783f8a63b356bb0e27b35d92a5383b331e342769d3d7c08",
          "dweb:/ipfs/QmXsPDArztRMiNzondL6b9JRxzENZPvPpKrrqwt9ikMFAA"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol": {
        "keccak256": "0x4bd6e2c824d3306bf73098f468366fc5ab8bc302065b8dbe40100115ac19579c",
        "urls": [
          "bzz-raw://63c8e1da97d932e80e6916c068c7d275b0de0fd8ba42ddcf8949febd94a4455a",
          "dweb:/ipfs/QmSaKN8JXUiEwqTJZ7DhjocMwppXr6725ozguwdtHmw7Sn"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol": {
        "keccak256": "0x4bc56493138c15be393a406f26235def55a3aeea9072c78b37636978aeb78247",
        "urls": [
          "bzz-raw://32d281d685a548efcce017392bde241810793ecf2888c63d7c87b14ad1cb6e34",
          "dweb:/ipfs/QmTLzjD7a8kTK5Ek26jKfMr5H8GTjLx6KgGPSccWNas85B"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Counters.sol": {
        "keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
        "urls": [
          "bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
          "dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/cryptography/ECDSA.sol": {
        "keccak256": "0x2e5b68f695b674731ee7f041a4924d7bb917b87d1efc8cf8ec00904ee7ab8b49",
        "urls": [
          "bzz-raw://9f0ead0687405faad7c08e19bfa4d26d3517ca30fa5bdf5b7b77f09d074f6918",
          "dweb:/ipfs/QmaovoMzoEnW8t8EbuA5XXrUxXvgEmNk7F9aqzR56BQA6v"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/cryptography/EIP712.sol": {
        "keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
        "urls": [
          "bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
          "dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/math/Math.sol": {
        "keccak256": "0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2",
        "urls": [
          "bzz-raw://ab84f13e6e6e0823854a0cddd49e96df052092d5919f95587607f0ed28a64cb6",
          "dweb:/ipfs/QmbNtqAq23ZDjCzHukQaa7B3y6rcobscm6FZF5PMQXcnVr"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/math/SafeCast.sol": {
        "keccak256": "0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7",
        "urls": [
          "bzz-raw://fb62abcee612c175f1b9bc70e5dfe5bd23473c99987ade6e80e291f68dc60ff1",
          "dweb:/ipfs/QmZCMajhG7FtRYNDwBchXN89mXR6HLPVzr9732qfUdNf9E"
        ],
        "license": "MIT"
      },
      "contracts/lib/TWAddress.sol": {
        "keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
        "urls": [
          "bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
          "dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWStrings.sol": {
        "keccak256": "0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8",
        "urls": [
          "bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9",
          "dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt"
        ],
        "license": "Apache 2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC20Vote.sol",
    "id": 3645,
    "exportedSymbols": {
      "Context": [
        48483
      ],
      "ContractMetadata": [
        17526
      ],
      "Counters": [
        48557
      ],
      "ECDSA": [
        49745
      ],
      "EIP712": [
        49899
      ],
      "ERC20": [
        47256
      ],
      "ERC20Base": [
        2481
      ],
      "ERC20Permit": [
        47498
      ],
      "ERC20Vote": [
        3644
      ],
      "ERC20Votes": [
        48145
      ],
      "IBurnableERC20": [
        32254
      ],
      "IContractMetadata": [
        32437
      ],
      "IERC20": [
        13899
      ],
      "IERC20Metadata": [
        13918
      ],
      "IERC20Permit": [
        13954
      ],
      "IMintableERC20": [
        32889
      ],
      "IMulticall": [
        32926
      ],
      "IOwnable": [
        33183
      ],
      "IVotes": [
        45384
      ],
      "Math": [
        49987
      ],
      "Multicall": [
        20595
      ],
      "Ownable": [
        21153
      ],
      "SafeCast": [
        50380
      ],
      "TWAddress": [
        64152
      ],
      "TWStrings": [
        64852
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:4290:10",
    "nodes": [
      {
        "id": 3450,
        "nodeType": "PragmaDirective",
        "src": "39:23:10",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 3451,
        "nodeType": "ImportDirective",
        "src": "86:77:10",
        "nodes": [],
        "absolutePath": "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol",
        "file": "../external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3645,
        "sourceUnit": 48146,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3452,
        "nodeType": "ImportDirective",
        "src": "165:25:10",
        "nodes": [],
        "absolutePath": "contracts/base/ERC20Base.sol",
        "file": "./ERC20Base.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3645,
        "sourceUnit": 2482,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3453,
        "nodeType": "ImportDirective",
        "src": "191:51:10",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/IMintableERC20.sol",
        "file": "../extension/interface/IMintableERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3645,
        "sourceUnit": 32890,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3454,
        "nodeType": "ImportDirective",
        "src": "243:51:10",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/IBurnableERC20.sol",
        "file": "../extension/interface/IBurnableERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3645,
        "sourceUnit": 32255,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3644,
        "nodeType": "ContractDefinition",
        "src": "1013:3315:10",
        "nodes": [
          {
            "id": 3485,
            "nodeType": "FunctionDefinition",
            "src": "1301:180:10",
            "nodes": [],
            "body": {
              "id": 3484,
              "nodeType": "Block",
              "src": "1438:43:10",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3481,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3469,
                        "src": "1460:13:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 3480,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21146,
                      "src": "1448:11:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 3482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1448:26:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3483,
                  "nodeType": "ExpressionStatement",
                  "src": "1448:26:10"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 3476,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3471,
                    "src": "1422:5:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 3477,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3473,
                    "src": "1429:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 3478,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 3475,
                  "name": "ERC20Permit",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47498,
                  "src": "1410:11:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "1410:27:10"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 3474,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3469,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "1330:13:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 3485,
                  "src": "1322:21:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3468,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1322:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3471,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1367:5:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 3485,
                  "src": "1353:19:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3470,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1353:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3473,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1396:7:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 3485,
                  "src": "1382:21:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3472,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1382:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1312:97:10"
            },
            "returnParameters": {
              "id": 3479,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1438:0:10"
            },
            "scope": 3644,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 3512,
            "nodeType": "FunctionDefinition",
            "src": "2008:209:10",
            "nodes": [],
            "body": {
              "id": 3511,
              "nodeType": "Block",
              "src": "2069:148:10",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 3494,
                          "name": "_canMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3616,
                          "src": "2087:8:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 3495,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2087:10:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a656420746f206d696e742e",
                        "id": 3496,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2099:25:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        },
                        "value": "Not authorized to mint."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        }
                      ],
                      "id": 3493,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2079:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3497,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2079:46:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3498,
                  "nodeType": "ExpressionStatement",
                  "src": "2079:46:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3502,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 3500,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3490,
                          "src": "2143:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 3501,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2154:1:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2143:12:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d696e74696e67207a65726f20746f6b656e732e",
                        "id": 3503,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2157:22:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7acedc89dd3658da26d0488f7e55737f51bdbd8424532db0708cd962cbb1712b",
                          "typeString": "literal_string \"Minting zero tokens.\""
                        },
                        "value": "Minting zero tokens."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7acedc89dd3658da26d0488f7e55737f51bdbd8424532db0708cd962cbb1712b",
                          "typeString": "literal_string \"Minting zero tokens.\""
                        }
                      ],
                      "id": 3499,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2135:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3504,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2135:45:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3505,
                  "nodeType": "ExpressionStatement",
                  "src": "2135:45:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3507,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3488,
                        "src": "2197:3:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3508,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3490,
                        "src": "2202:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3506,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        47859
                      ],
                      "referencedDeclaration": 47859,
                      "src": "2191:5:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2191:19:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3510,
                  "nodeType": "ExpressionStatement",
                  "src": "2191:19:10"
                }
              ]
            },
            "baseFunctions": [
              32888
            ],
            "documentation": {
              "id": 3486,
              "nodeType": "StructuredDocumentation",
              "src": "1668:335:10",
              "text": "  @notice          Lets an authorized address mint tokens to a recipient.\n  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint tokens.\n  @param _to       The recipient of the tokens to mint.\n  @param _amount   Quantity of tokens to mint."
            },
            "functionSelector": "449a52f8",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintTo",
            "nameLocation": "2017:6:10",
            "parameters": {
              "id": 3491,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3488,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "2032:3:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 3512,
                  "src": "2024:11:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3487,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2024:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3490,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2045:7:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 3512,
                  "src": "2037:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3489,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2037:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2023:30:10"
            },
            "returnParameters": {
              "id": 3492,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2069:0:10"
            },
            "scope": 3644,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3535,
            "nodeType": "FunctionDefinition",
            "src": "2440:166:10",
            "nodes": [],
            "body": {
              "id": 3534,
              "nodeType": "Block",
              "src": "2488:118:10",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3524,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 3520,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48473,
                                "src": "2516:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 3521,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2516:12:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3519,
                            "name": "balanceOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46767,
                            "src": "2506:9:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 3522,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2506:23:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 3523,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3515,
                          "src": "2533:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2506:34:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6e6f7420656e6f7567682062616c616e6365",
                        "id": 3525,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2542:20:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        },
                        "value": "not enough balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        }
                      ],
                      "id": 3518,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2498:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3526,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2498:65:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3527,
                  "nodeType": "ExpressionStatement",
                  "src": "2498:65:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 3529,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2579:3:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 3530,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2579:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3531,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3515,
                        "src": "2591:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3528,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        47882
                      ],
                      "referencedDeclaration": 47882,
                      "src": "2573:5:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2573:26:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3533,
                  "nodeType": "ExpressionStatement",
                  "src": "2573:26:10"
                }
              ]
            },
            "baseFunctions": [
              32245
            ],
            "documentation": {
              "id": 3513,
              "nodeType": "StructuredDocumentation",
              "src": "2223:212:10",
              "text": "  @notice          Lets an owner a given amount of their tokens.\n  @dev             Caller should own the `_amount` of tokens.\n  @param _amount   The number of tokens to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "2449:4:10",
            "parameters": {
              "id": 3516,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3515,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2462:7:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 3535,
                  "src": "2454:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3514,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2454:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2453:17:10"
            },
            "returnParameters": {
              "id": 3517,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2488:0:10"
            },
            "scope": 3644,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 3589,
            "nodeType": "FunctionDefinition",
            "src": "2903:430:10",
            "nodes": [],
            "body": {
              "id": 3588,
              "nodeType": "Block",
              "src": "2982:351:10",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 3545,
                          "name": "_canBurn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3629,
                          "src": "3000:8:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 3546,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3000:10:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a656420746f206275726e2e",
                        "id": 3547,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3012:25:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bfd83d10623a5529dfc6af3e2d36b3506e4ee9af9c8ff0477cf2b779ec460a88",
                          "typeString": "literal_string \"Not authorized to burn.\""
                        },
                        "value": "Not authorized to burn."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bfd83d10623a5529dfc6af3e2d36b3506e4ee9af9c8ff0477cf2b779ec460a88",
                          "typeString": "literal_string \"Not authorized to burn.\""
                        }
                      ],
                      "id": 3544,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2992:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3548,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2992:46:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3549,
                  "nodeType": "ExpressionStatement",
                  "src": "2992:46:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3555,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 3552,
                              "name": "_account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3538,
                              "src": "3066:8:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3551,
                            "name": "balanceOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46767,
                            "src": "3056:9:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 3553,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3056:19:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 3554,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3540,
                          "src": "3079:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3056:30:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6e6f7420656e6f7567682062616c616e6365",
                        "id": 3556,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3088:20:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        },
                        "value": "not enough balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        }
                      ],
                      "id": 3550,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3048:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3557,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3048:61:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3558,
                  "nodeType": "ExpressionStatement",
                  "src": "3048:61:10"
                },
                {
                  "assignments": [
                    3560
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 3560,
                      "mutability": "mutable",
                      "name": "decreasedAllowance",
                      "nameLocation": "3127:18:10",
                      "nodeType": "VariableDeclaration",
                      "scope": 3588,
                      "src": "3119:26:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 3559,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3119:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 3568,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 3567,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 3562,
                          "name": "_account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3538,
                          "src": "3158:8:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "id": 3563,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3168:3:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 3564,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "3168:10:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 3561,
                        "name": "allowance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46810,
                        "src": "3148:9:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (address,address) view returns (uint256)"
                        }
                      },
                      "id": 3565,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3148:31:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 3566,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3540,
                      "src": "3182:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3148:41:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3119:70:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3570,
                        "name": "_account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3538,
                        "src": "3208:8:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 3571,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3218:3:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 3572,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3218:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 3573,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3230:1:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "id": 3569,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47190,
                      "src": "3199:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 3574,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3199:33:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3575,
                  "nodeType": "ExpressionStatement",
                  "src": "3199:33:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3577,
                        "name": "_account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3538,
                        "src": "3251:8:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 3578,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3261:3:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 3579,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3261:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3580,
                        "name": "decreasedAllowance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3560,
                        "src": "3273:18:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3576,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47190,
                      "src": "3242:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 3581,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3242:50:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3582,
                  "nodeType": "ExpressionStatement",
                  "src": "3242:50:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3584,
                        "name": "_account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3538,
                        "src": "3308:8:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3585,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3540,
                        "src": "3318:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3583,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        47882
                      ],
                      "referencedDeclaration": 47882,
                      "src": "3302:5:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3586,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3302:24:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3587,
                  "nodeType": "ExpressionStatement",
                  "src": "3302:24:10"
                }
              ]
            },
            "baseFunctions": [
              32253
            ],
            "documentation": {
              "id": 3536,
              "nodeType": "StructuredDocumentation",
              "src": "2612:286:10",
              "text": "  @notice          Lets an owner burn a given amount of an account's tokens.\n  @dev             `_account` should own the `_amount` of tokens.\n  @param _account  The account to burn tokens from.\n  @param _amount   The number of tokens to burn."
            },
            "functionSelector": "79cc6790",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burnFrom",
            "nameLocation": "2912:8:10",
            "overrides": {
              "id": 3542,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2973:8:10"
            },
            "parameters": {
              "id": 3541,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3538,
                  "mutability": "mutable",
                  "name": "_account",
                  "nameLocation": "2929:8:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 3589,
                  "src": "2921:16:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3537,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2921:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3540,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2947:7:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 3589,
                  "src": "2939:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3539,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2939:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2920:35:10"
            },
            "returnParameters": {
              "id": 3543,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2982:0:10"
            },
            "scope": 3644,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 3603,
            "nodeType": "FunctionDefinition",
            "src": "3626:121:10",
            "nodes": [],
            "body": {
              "id": 3602,
              "nodeType": "Block",
              "src": "3702:45:10",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3600,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3596,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "3719:3:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3597,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "3719:10:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3598,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "3733:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3599,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3733:7:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3719:21:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3595,
                  "id": 3601,
                  "nodeType": "Return",
                  "src": "3712:28:10"
                }
              ]
            },
            "baseFunctions": [
              17525
            ],
            "documentation": {
              "id": 3590,
              "nodeType": "StructuredDocumentation",
              "src": "3536:85:10",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "3635:18:10",
            "overrides": {
              "id": 3592,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3678:8:10"
            },
            "parameters": {
              "id": 3591,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3653:2:10"
            },
            "returnParameters": {
              "id": 3595,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3594,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3603,
                  "src": "3696:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3593,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3696:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3695:6:10"
            },
            "scope": 3644,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3616,
            "nodeType": "FunctionDefinition",
            "src": "3835:102:10",
            "nodes": [],
            "body": {
              "id": 3615,
              "nodeType": "Block",
              "src": "3892:45:10",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3613,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3609,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "3909:3:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3610,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "3909:10:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3611,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "3923:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3612,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3923:7:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3909:21:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3608,
                  "id": 3614,
                  "nodeType": "Return",
                  "src": "3902:28:10"
                }
              ]
            },
            "documentation": {
              "id": 3604,
              "nodeType": "StructuredDocumentation",
              "src": "3753:77:10",
              "text": "@dev Returns whether tokens can be minted in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canMint",
            "nameLocation": "3844:8:10",
            "parameters": {
              "id": 3605,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3852:2:10"
            },
            "returnParameters": {
              "id": 3608,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3607,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3616,
                  "src": "3886:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3606,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3886:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3885:6:10"
            },
            "scope": 3644,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3629,
            "nodeType": "FunctionDefinition",
            "src": "4025:102:10",
            "nodes": [],
            "body": {
              "id": 3628,
              "nodeType": "Block",
              "src": "4082:45:10",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3626,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3622,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4099:3:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3623,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4099:10:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3624,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "4113:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3625,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4113:7:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4099:21:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3621,
                  "id": 3627,
                  "nodeType": "Return",
                  "src": "4092:28:10"
                }
              ]
            },
            "documentation": {
              "id": 3617,
              "nodeType": "StructuredDocumentation",
              "src": "3943:77:10",
              "text": "@dev Returns whether tokens can be burned in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canBurn",
            "nameLocation": "4034:8:10",
            "parameters": {
              "id": 3618,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4042:2:10"
            },
            "returnParameters": {
              "id": 3621,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3620,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3629,
                  "src": "4076:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3619,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4076:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4075:6:10"
            },
            "scope": 3644,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3643,
            "nodeType": "FunctionDefinition",
            "src": "4211:115:10",
            "nodes": [],
            "body": {
              "id": 3642,
              "nodeType": "Block",
              "src": "4281:45:10",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3640,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3636,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4298:3:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3637,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4298:10:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3638,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "4312:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3639,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4312:7:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4298:21:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3635,
                  "id": 3641,
                  "nodeType": "Return",
                  "src": "4291:28:10"
                }
              ]
            },
            "baseFunctions": [
              21152
            ],
            "documentation": {
              "id": 3630,
              "nodeType": "StructuredDocumentation",
              "src": "4133:73:10",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "4220:12:10",
            "overrides": {
              "id": 3632,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4257:8:10"
            },
            "parameters": {
              "id": 3631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4232:2:10"
            },
            "returnParameters": {
              "id": 3635,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3634,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3643,
                  "src": "4275:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3633,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4275:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4274:6:10"
            },
            "scope": 3644,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3456,
              "name": "ContractMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17526,
              "src": "1035:16:10"
            },
            "id": 3457,
            "nodeType": "InheritanceSpecifier",
            "src": "1035:16:10"
          },
          {
            "baseName": {
              "id": 3458,
              "name": "Multicall",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20595,
              "src": "1053:9:10"
            },
            "id": 3459,
            "nodeType": "InheritanceSpecifier",
            "src": "1053:9:10"
          },
          {
            "baseName": {
              "id": 3460,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21153,
              "src": "1064:7:10"
            },
            "id": 3461,
            "nodeType": "InheritanceSpecifier",
            "src": "1064:7:10"
          },
          {
            "baseName": {
              "id": 3462,
              "name": "ERC20Votes",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 48145,
              "src": "1073:10:10"
            },
            "id": 3463,
            "nodeType": "InheritanceSpecifier",
            "src": "1073:10:10"
          },
          {
            "baseName": {
              "id": 3464,
              "name": "IMintableERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 32889,
              "src": "1085:14:10"
            },
            "id": 3465,
            "nodeType": "InheritanceSpecifier",
            "src": "1085:14:10"
          },
          {
            "baseName": {
              "id": 3466,
              "name": "IBurnableERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 32254,
              "src": "1101:14:10"
            },
            "id": 3467,
            "nodeType": "InheritanceSpecifier",
            "src": "1101:14:10"
          }
        ],
        "canonicalName": "ERC20Vote",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 3455,
          "nodeType": "StructuredDocumentation",
          "src": "296:715:10",
          "text": "  The `ERC20Vote` smart contract implements the ERC20 standard and ERC20Votes.\n  It includes the following additions to standard ERC20 logic:\n      - Ability to mint & burn tokens via the provided `mint` & `burn` functions.\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - Extension of ERC20 to support voting and delegation.\n      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by\n                             presenting a message signed by the account."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          3644,
          32254,
          32889,
          48145,
          47498,
          13954,
          47256,
          13918,
          13899,
          48483,
          45384,
          21153,
          33183,
          20595,
          32926,
          17526,
          32437
        ],
        "name": "ERC20Vote",
        "nameLocation": "1022:9:10",
        "scope": 3645,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 10
}