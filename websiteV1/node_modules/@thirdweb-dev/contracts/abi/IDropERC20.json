{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "waitTimeInSecondsBetweenClaims",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IDropClaimCondition.ClaimCondition[]",
          "name": "claimConditions",
          "type": "tuple[]"
        }
      ],
      "name": "ClaimConditionsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimConditionIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "maxQuantityInAllowlist",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDropERC20.AllowlistProof",
          "name": "allowlistProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "waitTimeInSecondsBetweenClaims",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropClaimCondition.ClaimCondition[]",
          "name": "phases",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)": "5ab31c1a",
    "setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)": "e23b8164",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IDropClaimCondition.ClaimCondition[]\",\"name\":\"claimConditions\",\"type\":\"tuple[]\"}],\"name\":\"ClaimConditionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimConditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantityInAllowlist\",\"type\":\"uint256\"}],\"internalType\":\"struct IDropERC20.AllowlistProof\",\"name\":\"allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitTimeInSecondsBetweenClaims\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropClaimCondition.ClaimCondition[]\",\"name\":\"phases\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ClaimConditionsUpdated((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[])\":{\"details\":\"Emitted when new claim conditions are set.\"},\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"},\"MaxTotalSupplyUpdated(uint256)\":{\"details\":\"Emitted when the global max supply of tokens is updated.\"},\"TokensClaimed(uint256,address,address,uint256)\":{\"details\":\"Emitted when tokens are claimed.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)\":{\"params\":{\"allowlistProof\":\"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.\",\"currency\":\"The currency in which to pay for the claim.\",\"data\":\"Arbitrary bytes data that can be leveraged in the implementation of this interface.\",\"pricePerToken\":\"The price per token to pay for the claim.\",\"quantity\":\"The quantity of tokens to claim.\",\"receiver\":\"The receiver of the tokens to claim.\"}},\"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"params\":{\"phases\":\"Claim conditions in ascending order by `startTimestamp`.\",\"resetClaimEligibility\":\"Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions.\"}},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)\":{\"notice\":\"Lets an account claim a given quantity of NFTs.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The  `DropERC20` contract is a distribution mechanism for ERC20 tokens.  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions  with non-overlapping time windows, and accounts can claim the tokens according to  restrictions defined in the claim condition that is active at the time of the transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prebuilts/interface/drop/IDropERC20.sol\":\"IDropERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/prebuilts/interface/drop/IDropClaimCondition.sol\":{\"keccak256\":\"0x29b0d88d88945055ea971029ef0ebbfd19b1188c3463eea09c6bc55798d81629\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2874e855bd8260cb11a16e7fb4c69b1ba2ae3661494b065c795c0492a455510c\",\"dweb:/ipfs/QmYpChQsXWfyjYMotYpCPTkE2pwKcGsnrSksmtLaiA6w5j\"]},\"contracts/prebuilts/interface/drop/IDropERC20.sol\":{\"keccak256\":\"0xdb7b7687546212f7ddea7a4d3aa7d32875151125ba6fc2dd49942a58f7e14a8b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://374f1b553203d23c836da4b658ecf905fcd783257432e8cb9922470391a5ce43\",\"dweb:/ipfs/QmXVKZVtb8wh4trn73aQBy13AgcKEVhFHLU6AGUigPTVje\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol\":{\"keccak256\":\"0x266cee2afdf743513e8022da480684ed0c63147f469a766d499c7ae3c518e276\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://639f78e22e3da7b4eaa472a31b719cb10f182023d0b1469601e4e75f0bb99e95\",\"dweb:/ipfs/QmWKbk7nneevjSKSAcwCjaDQqwFH2uiZ5j7Nh2PxFPcGqt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct IDropClaimCondition.ClaimCondition[]",
              "name": "claimConditions",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "waitTimeInSecondsBetweenClaims",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionsUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "maxTotalSupply",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MaxTotalSupplyUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "claimConditionIndex",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropERC20.AllowlistProof",
              "name": "allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "maxQuantityInAllowlist",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [
            {
              "internalType": "struct IDropClaimCondition.ClaimCondition[]",
              "name": "phases",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "waitTimeInSecondsBetweenClaims",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
          },
          "approve(address,uint256)": {
            "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
          },
          "balanceOf(address)": {
            "details": "Returns the amount of tokens owned by `account`."
          },
          "claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)": {
            "params": {
              "allowlistProof": "The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.",
              "currency": "The currency in which to pay for the claim.",
              "data": "Arbitrary bytes data that can be leveraged in the implementation of this interface.",
              "pricePerToken": "The price per token to pay for the claim.",
              "quantity": "The quantity of tokens to claim.",
              "receiver": "The receiver of the tokens to claim."
            }
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)": {
            "params": {
              "phases": "Claim conditions in ascending order by `startTimestamp`.",
              "resetClaimEligibility": "Whether to reset `limitLastClaimTimestamp` and                               `limitMerkleProofClaim` values when setting new                               claim conditions."
            }
          },
          "totalSupply()": {
            "details": "Returns the amount of tokens in existence."
          },
          "transfer(address,uint256)": {
            "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
          },
          "transferFrom(address,address,uint256)": {
            "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "claim(address,uint256,address,uint256,(bytes32[],uint256),bytes)": {
            "notice": "Lets an account claim a given quantity of NFTs."
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address)[],bool)": {
            "notice": "Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/prebuilts/interface/drop/IDropERC20.sol": "IDropERC20"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/prebuilts/interface/drop/IDropClaimCondition.sol": {
        "keccak256": "0x29b0d88d88945055ea971029ef0ebbfd19b1188c3463eea09c6bc55798d81629",
        "urls": [
          "bzz-raw://2874e855bd8260cb11a16e7fb4c69b1ba2ae3661494b065c795c0492a455510c",
          "dweb:/ipfs/QmYpChQsXWfyjYMotYpCPTkE2pwKcGsnrSksmtLaiA6w5j"
        ],
        "license": "Apache-2.0"
      },
      "contracts/prebuilts/interface/drop/IDropERC20.sol": {
        "keccak256": "0xdb7b7687546212f7ddea7a4d3aa7d32875151125ba6fc2dd49942a58f7e14a8b",
        "urls": [
          "bzz-raw://374f1b553203d23c836da4b658ecf905fcd783257432e8cb9922470391a5ce43",
          "dweb:/ipfs/QmXVKZVtb8wh4trn73aQBy13AgcKEVhFHLU6AGUigPTVje"
        ],
        "license": "Apache-2.0"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol": {
        "keccak256": "0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff",
        "urls": [
          "bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2",
          "dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/BitMapsUpgradeable.sol": {
        "keccak256": "0x266cee2afdf743513e8022da480684ed0c63147f469a766d499c7ae3c518e276",
        "urls": [
          "bzz-raw://639f78e22e3da7b4eaa472a31b719cb10f182023d0b1469601e4e75f0bb99e95",
          "dweb:/ipfs/QmWKbk7nneevjSKSAcwCjaDQqwFH2uiZ5j7Nh2PxFPcGqt"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/prebuilts/interface/drop/IDropERC20.sol",
    "id": 75908,
    "exportedSymbols": {
      "BitMapsUpgradeable": [
        159754
      ],
      "IDropClaimCondition": [
        75734
      ],
      "IDropERC20": [
        75907
      ],
      "IERC20Upgradeable": [
        152782
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:2850:344",
    "nodes": [
      {
        "id": 75836,
        "nodeType": "PragmaDirective",
        "src": "39:24:344",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ]
      },
      {
        "id": 75837,
        "nodeType": "ImportDirective",
        "src": "65:79:344",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 75908,
        "sourceUnit": 152783,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 75838,
        "nodeType": "ImportDirective",
        "src": "145:35:344",
        "nodes": [],
        "absolutePath": "contracts/prebuilts/interface/drop/IDropClaimCondition.sol",
        "file": "./IDropClaimCondition.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 75908,
        "sourceUnit": 75735,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 75907,
        "nodeType": "ContractDefinition",
        "src": "609:2279:344",
        "nodes": [
          {
            "id": 75849,
            "nodeType": "StructDefinition",
            "src": "678:94:344",
            "nodes": [],
            "canonicalName": "IDropERC20.AllowlistProof",
            "members": [
              {
                "constant": false,
                "id": 75846,
                "mutability": "mutable",
                "name": "proof",
                "nameLocation": "720:5:344",
                "nodeType": "VariableDeclaration",
                "scope": 75849,
                "src": "710:15:344",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                  "typeString": "bytes32[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 75844,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "710:7:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 75845,
                  "nodeType": "ArrayTypeName",
                  "src": "710:9:344",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                    "typeString": "bytes32[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 75848,
                "mutability": "mutable",
                "name": "maxQuantityInAllowlist",
                "nameLocation": "743:22:344",
                "nodeType": "VariableDeclaration",
                "scope": 75849,
                "src": "735:30:344",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 75847,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "735:7:344",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "AllowlistProof",
            "nameLocation": "685:14:344",
            "scope": 75907,
            "visibility": "public"
          },
          {
            "id": 75860,
            "nodeType": "EventDefinition",
            "src": "824:171:344",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75850,
              "nodeType": "StructuredDocumentation",
              "src": "778:41:344",
              "text": "@dev Emitted when tokens are claimed."
            },
            "name": "TokensClaimed",
            "nameLocation": "830:13:344",
            "parameters": {
              "id": 75859,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75852,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimConditionIndex",
                  "nameLocation": "869:19:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75860,
                  "src": "853:35:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75851,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "853:7:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75854,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimer",
                  "nameLocation": "914:7:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75860,
                  "src": "898:23:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75853,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "898:7:344",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75856,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "947:8:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75860,
                  "src": "931:24:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75855,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "931:7:344",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75858,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "quantityClaimed",
                  "nameLocation": "973:15:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75860,
                  "src": "965:23:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75857,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "965:7:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "843:151:344"
            }
          },
          {
            "id": 75867,
            "nodeType": "EventDefinition",
            "src": "1057:63:344",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75861,
              "nodeType": "StructuredDocumentation",
              "src": "1001:51:344",
              "text": "@dev Emitted when new claim conditions are set."
            },
            "name": "ClaimConditionsUpdated",
            "nameLocation": "1063:22:344",
            "parameters": {
              "id": 75866,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75865,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "claimConditions",
                  "nameLocation": "1103:15:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75867,
                  "src": "1086:32:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$75706_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IDropClaimCondition.ClaimCondition[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 75863,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75862,
                        "name": "ClaimCondition",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75706,
                        "src": "1086:14:344"
                      },
                      "referencedDeclaration": 75706,
                      "src": "1086:14:344",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClaimCondition_$75706_storage_ptr",
                        "typeString": "struct IDropClaimCondition.ClaimCondition"
                      }
                    },
                    "id": 75864,
                    "nodeType": "ArrayTypeName",
                    "src": "1086:16:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$75706_storage_$dyn_storage_ptr",
                      "typeString": "struct IDropClaimCondition.ClaimCondition[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1085:34:344"
            }
          },
          {
            "id": 75872,
            "nodeType": "EventDefinition",
            "src": "1196:52:344",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75868,
              "nodeType": "StructuredDocumentation",
              "src": "1126:65:344",
              "text": "@dev Emitted when the global max supply of tokens is updated."
            },
            "name": "MaxTotalSupplyUpdated",
            "nameLocation": "1202:21:344",
            "parameters": {
              "id": 75871,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75870,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "maxTotalSupply",
                  "nameLocation": "1232:14:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75872,
                  "src": "1224:22:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75869,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1224:7:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1223:24:344"
            }
          },
          {
            "id": 75879,
            "nodeType": "EventDefinition",
            "src": "1309:56:344",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 75873,
              "nodeType": "StructuredDocumentation",
              "src": "1254:50:344",
              "text": "@dev Emitted when the contract URI is updated."
            },
            "name": "ContractURIUpdated",
            "nameLocation": "1315:18:344",
            "parameters": {
              "id": 75878,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75875,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "prevURI",
                  "nameLocation": "1341:7:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75879,
                  "src": "1334:14:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 75874,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1334:6:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75877,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newURI",
                  "nameLocation": "1357:6:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75879,
                  "src": "1350:13:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 75876,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1350:6:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1333:31:344"
            }
          },
          {
            "id": 75896,
            "nodeType": "FunctionDefinition",
            "src": "2122:222:344",
            "nodes": [],
            "documentation": {
              "id": 75880,
              "nodeType": "StructuredDocumentation",
              "src": "1371:746:344",
              "text": "  @notice Lets an account claim a given quantity of NFTs.\n  @param receiver                       The receiver of the tokens to claim.\n  @param quantity                       The quantity of tokens to claim.\n  @param currency                       The currency in which to pay for the claim.\n  @param pricePerToken                  The price per token to pay for the claim.\n  @param allowlistProof                 The proof of the claimer's inclusion in the merkle root allowlist\n                                        of the claim conditions that apply.\n  @param data                           Arbitrary bytes data that can be leveraged in the implementation of this interface."
            },
            "functionSelector": "5ab31c1a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claim",
            "nameLocation": "2131:5:344",
            "parameters": {
              "id": 75894,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75882,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "2154:8:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75896,
                  "src": "2146:16:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75881,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2146:7:344",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75884,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nameLocation": "2180:8:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75896,
                  "src": "2172:16:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75883,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2172:7:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75886,
                  "mutability": "mutable",
                  "name": "currency",
                  "nameLocation": "2206:8:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75896,
                  "src": "2198:16:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75885,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2198:7:344",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75888,
                  "mutability": "mutable",
                  "name": "pricePerToken",
                  "nameLocation": "2232:13:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75896,
                  "src": "2224:21:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75887,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2224:7:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75891,
                  "mutability": "mutable",
                  "name": "allowlistProof",
                  "nameLocation": "2279:14:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75896,
                  "src": "2255:38:344",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_AllowlistProof_$75849_calldata_ptr",
                    "typeString": "struct IDropERC20.AllowlistProof"
                  },
                  "typeName": {
                    "id": 75890,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 75889,
                      "name": "AllowlistProof",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 75849,
                      "src": "2255:14:344"
                    },
                    "referencedDeclaration": 75849,
                    "src": "2255:14:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AllowlistProof_$75849_storage_ptr",
                      "typeString": "struct IDropERC20.AllowlistProof"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75893,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "2316:4:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75896,
                  "src": "2303:17:344",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 75892,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2303:5:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2136:190:344"
            },
            "returnParameters": {
              "id": 75895,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2343:0:344"
            },
            "scope": 75907,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 75906,
            "nodeType": "FunctionDefinition",
            "src": "2787:99:344",
            "nodes": [],
            "documentation": {
              "id": 75897,
              "nodeType": "StructuredDocumentation",
              "src": "2350:432:344",
              "text": "  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param phases                Claim conditions in ascending order by `startTimestamp`.\n  @param resetClaimEligibility Whether to reset `limitLastClaimTimestamp` and\n                               `limitMerkleProofClaim` values when setting new\n                               claim conditions."
            },
            "functionSelector": "e23b8164",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setClaimConditions",
            "nameLocation": "2796:18:344",
            "parameters": {
              "id": 75904,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75901,
                  "mutability": "mutable",
                  "name": "phases",
                  "nameLocation": "2841:6:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75906,
                  "src": "2815:32:344",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$75706_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct IDropClaimCondition.ClaimCondition[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 75899,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 75898,
                        "name": "ClaimCondition",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 75706,
                        "src": "2815:14:344"
                      },
                      "referencedDeclaration": 75706,
                      "src": "2815:14:344",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClaimCondition_$75706_storage_ptr",
                        "typeString": "struct IDropClaimCondition.ClaimCondition"
                      }
                    },
                    "id": 75900,
                    "nodeType": "ArrayTypeName",
                    "src": "2815:16:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$75706_storage_$dyn_storage_ptr",
                      "typeString": "struct IDropClaimCondition.ClaimCondition[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 75903,
                  "mutability": "mutable",
                  "name": "resetClaimEligibility",
                  "nameLocation": "2854:21:344",
                  "nodeType": "VariableDeclaration",
                  "scope": 75906,
                  "src": "2849:26:344",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 75902,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2849:4:344",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2814:62:344"
            },
            "returnParameters": {
              "id": 75905,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2885:0:344"
            },
            "scope": 75907,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 75840,
              "name": "IERC20Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 152782,
              "src": "633:17:344"
            },
            "id": 75841,
            "nodeType": "InheritanceSpecifier",
            "src": "633:17:344"
          },
          {
            "baseName": {
              "id": 75842,
              "name": "IDropClaimCondition",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 75734,
              "src": "652:19:344"
            },
            "id": 75843,
            "nodeType": "InheritanceSpecifier",
            "src": "652:19:344"
          }
        ],
        "canonicalName": "IDropERC20",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 75839,
          "nodeType": "StructuredDocumentation",
          "src": "182:425:344",
          "text": "  Thirdweb's 'Drop' contracts are distribution mechanisms for tokens. The\n  `DropERC20` contract is a distribution mechanism for ERC20 tokens.\n  A contract admin (i.e. holder of `DEFAULT_ADMIN_ROLE`) can create claim conditions\n  with non-overlapping time windows, and accounts can claim the tokens according to\n  restrictions defined in the claim condition that is active at the time of the transaction."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          75907,
          75734,
          152782
        ],
        "name": "IDropERC20",
        "nameLocation": "619:10:344",
        "scope": 75908,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 344
}