{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "batchMintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isApprovedOrOwnerOf",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b50604051620028cd380380620028cd833981016040819052620000349162000322565b8351849084906200004d90600290602085019062000192565b5080516200006390600390602084019062000192565b50506000805550620000758562000095565b6200008a826001600160801b038316620000e7565b505050505062000412565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b612710811115620001305760405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d61782062707360881b604482015260640160405180910390fd5b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b828054620001a090620003d5565b90600052602060002090601f016020900481019282620001c457600085556200020f565b82601f10620001df57805160ff19168380011785556200020f565b828001600101855582156200020f579182015b828111156200020f578251825591602001919060010190620001f2565b506200021d92915062000221565b5090565b5b808211156200021d576000815560010162000222565b80516001600160a01b03811681146200025057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200027d57600080fd5b81516001600160401b03808211156200029a576200029a62000255565b604051601f8301601f19908116603f01168101908282118183101715620002c557620002c562000255565b81604052838152602092508683858801011115620002e257600080fd5b600091505b83821015620003065785820183015181830184015290820190620002e7565b83821115620003185760008385830101525b9695505050505050565b600080600080600060a086880312156200033b57600080fd5b620003468662000238565b60208701519095506001600160401b03808211156200036457600080fd5b6200037289838a016200026b565b955060408801519150808211156200038957600080fd5b5062000398888289016200026b565b935050620003a96060870162000238565b60808701519092506001600160801b0381168114620003c757600080fd5b809150509295509295909350565b600181811c90821680620003ea57607f821691505b602082108114156200040c57634e487b7160e01b600052602260045260246000fd5b50919050565b6124ab80620004226000396000f3fe608060405234801561001057600080fd5b506004361061017f5760003560e01c806275a3171461018457806301ffc9a71461019957806306fdde03146101c1578063081812fc146101d6578063095ea7b31461020157806313af40351461021457806318160ddd1461022757806323b872dd1461023d5780632419f51b146102505780632a55205a146102635780633b1475a71461029557806342842e0e1461029d57806342966c68146102b0578063430c2081146102c35780634cc157df146102d6578063600dd5ea1461030b5780636352211e1461031e57806363b45e2d1461033157806370a0823114610339578063754a81d91461034c578063830405321461035f5780638da5cb5b14610382578063938e3d7b1461038a57806395d89b411461039d5780639bcf7a15146103a5578063a22cb465146103b8578063ac9650d8146103cb578063b24f2d39146103eb578063b88d4fde14610409578063c87b56dd1461041c578063e8a3d4851461042f578063e985e9c514610437575b600080fd5b610197610192366004611d6b565b61044a565b005b6101ac6101a7366004611dce565b6104a8565b60405190151581526020015b60405180910390f35b6101c9610515565b6040516101b89190611e43565b6101e96101e4366004611e56565b6105a7565b6040516001600160a01b0390911681526020016101b8565b61019761020f366004611e6f565b6105eb565b610197610222366004611e99565b610672565b600154600054035b6040519081526020016101b8565b61019761024b366004611eb4565b6106a2565b61022f61025e366004611e56565b6106ad565b610276610271366004611ef0565b61071b565b604080516001600160a01b0390931683526020830191909152016101b8565b60005461022f565b6101976102ab366004611eb4565b610758565b6101976102be366004611e56565b610773565b6101ac6102d1366004611e6f565b61077e565b6102e96102e4366004611e56565b6107dd565b604080516001600160a01b03909316835261ffff9091166020830152016101b8565b610197610319366004611e6f565b610848565b6101e961032c366004611e56565b610876565b600c5461022f565b61022f610347366004611e99565b610888565b61019761035a366004611f12565b6108d6565b6101ac61036d366004611e56565b600e6020526000908152604090205460ff1681565b6101e9610920565b610197610398366004611f8f565b61092f565b6101c961095c565b6101976103b3366004611fc3565b61096b565b6101976103c6366004611fe8565b61099a565b6103de6103d9366004612024565b610a30565b6040516101b89190612098565b600a546001600160a01b03811690600160a01b900461ffff166102e9565b6101976104173660046120fa565b610b24565b6101c961042a366004611e56565b610b6f565b6101c9610c5d565b6101ac610445366004612155565b610ceb565b610452610d19565b6104775760405162461bcd60e51b815260040161046e90612188565b60405180910390fd5b61048961048360005490565b82610d3c565b6104a482600160405180602001604052806000815250610db5565b5050565b60006301ffc9a760e01b6001600160e01b0319831614806104d957506380ac58cd60e01b6001600160e01b03198316145b806104f45750635b5e139f60e01b6001600160e01b03198316145b8061050f57506001600160e01b0319821663152a902d60e11b145b92915050565b606060028054610524906121b9565b80601f0160208091040260200160405190810160405280929190818152602001828054610550906121b9565b801561059d5780601f106105725761010080835404028352916020019161059d565b820191906000526020600020905b81548152906001019060200180831161058057829003601f168201915b5050505050905090565b60006105b282610f4e565b6105cf576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006105f682610876565b9050806001600160a01b0316836001600160a01b0316141561062b5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614610662576106458133610ceb565b610662576040516367d9dca160e11b815260040160405180910390fd5b61066d838383610f79565b505050565b61067a610d19565b6106965760405162461bcd60e51b815260040161046e906121f4565b61069f81610fd5565b50565b61066d838383611027565b60006106b8600c5490565b82106106f65760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161046e565b600c82815481106107095761070961221c565b90600052602060002001549050919050565b60008060008061072a866107dd565b90945084925061ffff1690506127106107438287612248565b61074d919061227d565b925050509250929050565b61066d83838360405180602001604052806000815250610b24565b61069f816001611201565b60008061078a83610876565b9050806001600160a01b0316846001600160a01b031614806107b157506107b18185610ceb565b806107d55750836001600160a01b03166107ca846105a7565b6001600160a01b0316145b949350505050565b6000818152600b60209081526040808320815180830190925280546001600160a01b031680835260019091015492820192909252829115610824578051602082015161083e565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b610850610d19565b61086c5760405162461bcd60e51b815260040161046e906121f4565b6104a482826113b0565b600061088182611434565b5192915050565b60006001600160a01b0382166108b1576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6108de610d19565b6108fa5760405162461bcd60e51b815260040161046e90612188565b61090d61090660005490565b848461154e565b505061091a848483610db5565b50505050565b6009546001600160a01b031690565b610937610d19565b6109535760405162461bcd60e51b815260040161046e906121f4565b61069f816115bb565b606060038054610524906121b9565b610973610d19565b61098f5760405162461bcd60e51b815260040161046e906121f4565b61066d83838361169d565b6001600160a01b0382163314156109c45760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b03811115610a4a57610a4a611cc9565b604051908082528060200260200182016040528015610a7d57816020015b6060815260200190600190039081610a685790505b50905060005b82811015610b1d57610aed30858584818110610aa157610aa161221c565b9050602002810190610ab39190612291565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061174492505050565b828281518110610aff57610aff61221c565b60200260200101819052508080610b15906122de565b915050610a83565b5092915050565b610b2f848484611027565b610b41836001600160a01b0316611770565b1561091a57610b528484848461177f565b61091a576040516368d2bf6b60e11b815260040160405180910390fd5b6000818152600f6020526040812080546060929190610b8d906121b9565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb9906121b9565b8015610c065780601f10610bdb57610100808354040283529160200191610c06565b820191906000526020600020905b815481529060010190602001808311610be957829003601f168201915b50505050509050600081511115610c1d5792915050565b6000610c2884611867565b905080610c3485611a03565b604051602001610c459291906122f9565b60405160208183030381529060405292505050919050565b60088054610c6a906121b9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c96906121b9565b8015610ce35780601f10610cb857610100808354040283529160200191610ce3565b820191906000526020600020905b815481529060010190602001808311610cc657829003601f168201915b505050505081565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6000610d23610920565b6001600160a01b0316336001600160a01b031614905090565b6000828152600f602052604090208054610d55906121b9565b159050610d965760405162461bcd60e51b815260206004820152600f60248201526e15549248185b1c9958591e481cd95d608a1b604482015260640161046e565b6000828152600f60209081526040909120825161066d92840190611c14565b6000546001600160a01b038416610dde57604051622e076360e81b815260040160405180910390fd5b82610dfc5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b031981166001600160401b038083168b018116918217600160401b6001600160401b031990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b4290931692909202919091179055819081850190610e9590611770565b15610f0b575b60405182906001600160a01b03881690600090600080516020612456833981519152908290a4610ed4600087848060010195508761177f565b610ef1576040516368d2bf6b60e11b815260040160405180910390fd5b808210610e9b578260005414610f0657600080fd5b610f3e565b5b6040516001830192906001600160a01b03881690600090600080516020612456833981519152908290a4808210610f0c575b50600090815561091a9085838684565b600080548210801561050f575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b600061103282611434565b9050836001600160a01b031681600001516001600160a01b0316146110695760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b038616148061108757506110878533610ceb565b806110a2575033611097846105a7565b6001600160a01b0316145b9050806110c257604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166110e957604051633a954ecd60e21b815260040160405180910390fd5b6110f560008487610f79565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166111c85760005482146111c857805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061245683398151915260405160405180910390a45050505050565b600061120c83611434565b80519091508215611272576000336001600160a01b038316148061123557506112358233610ceb565b80611250575033611245866105a7565b6001600160a01b0316145b90508061127057604051632ce44b5f60e11b815260040160405180910390fd5b505b61127e60008583610f79565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b038084169190910181166001600160401b03198416811783900482166001908101831690930267ffffffffffffffff67ffffffffffffffff60801b0119909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b17855591890180845292208054919490911661137857600054821461137857805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020612456833981519152908390a4505060018054810190555050565b6127108111156113d25760405162461bcd60e51b815260040161046e90612328565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b60408051606081018252600080825260208201819052918101919091528160005481101561153557600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906115335780516001600160a01b0316156114ca579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff161515928101929092521561152e579392505050565b6114ca565b505b604051636f96cda160e11b815260040160405180910390fd5b60008061155b8486612351565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d6020908152604090912085519294508493506115b2929091860190611c14565b50935093915050565b6000600880546115ca906121b9565b80601f01602080910402602001604051908101604052809291908181526020018280546115f6906121b9565b80156116435780601f1061161857610100808354040283529160200191611643565b820191906000526020600020905b81548152906001019060200180831161162657829003601f168201915b5050855193945061165f93600893506020870192509050611c14565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051611691929190612369565b60405180910390a15050565b6127108111156116bf5760405162461bcd60e51b815260040161046e90612328565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b6060611769838360405180606001604052806027815260200161242f60279139611b00565b9392505050565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906117b4903390899088908890600401612397565b6020604051808303816000875af19250505080156117ef575060408051601f3d908101601f191682019092526117ec918101906123ca565b60015b61184a573d80801561181d576040519150601f19603f3d011682016040523d82523d6000602084013e611822565b606091505b508051611842576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b60606000611874600c5490565b90506000600c8054806020026020016040519081016040528092919081815260200182805480156118c457602002820191906000526020600020905b8154815260200190600101908083116118b0575b5050505050905060005b828110156119c8578181815181106118e8576118e861221c565b60200260200101518510156119b657600d600083838151811061190d5761190d61221c565b60200260200101518152602001908152602001600020805461192e906121b9565b80601f016020809104026020016040519081016040528092919081815260200182805461195a906121b9565b80156119a75780601f1061197c576101008083540402835291602001916119a7565b820191906000526020600020905b81548152906001019060200180831161198a57829003601f168201915b50505050509350505050919050565b6119c1600182612351565b90506118ce565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b604482015260640161046e565b606081611a275750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a515780611a3b816122de565b9150611a4a9050600a8361227d565b9150611a2b565b6000816001600160401b03811115611a6b57611a6b611cc9565b6040519080825280601f01601f191660200182016040528015611a95576020820181803683370190505b5090505b84156107d557611aaa6001836123e7565b9150611ab7600a866123fe565b611ac2906030612351565b60f81b818381518110611ad757611ad761221c565b60200101906001600160f81b031916908160001a905350611af9600a8661227d565b9450611a99565b6060611b0b84611770565b611b665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161046e565b600080856001600160a01b031685604051611b819190612412565b600060405180830381855af49150503d8060008114611bbc576040519150601f19603f3d011682016040523d82523d6000602084013e611bc1565b606091505b5091509150611bd1828286611bdb565b9695505050505050565b60608315611bea575081611769565b825115611bfa5782518084602001fd5b8160405162461bcd60e51b815260040161046e9190611e43565b828054611c20906121b9565b90600052602060002090601f016020900481019282611c425760008555611c88565b82601f10611c5b57805160ff1916838001178555611c88565b82800160010185558215611c88579182015b82811115611c88578251825591602001919060010190611c6d565b50611c94929150611c98565b5090565b5b80821115611c945760008155600101611c99565b80356001600160a01b0381168114611cc457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611cf057600080fd5b81356001600160401b0380821115611d0a57611d0a611cc9565b604051601f8301601f19908116603f01168101908282118183101715611d3257611d32611cc9565b81604052838152866020858801011115611d4b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611d7e57600080fd5b611d8783611cad565b915060208301356001600160401b03811115611da257600080fd5b611dae85828601611cdf565b9150509250929050565b6001600160e01b03198116811461069f57600080fd5b600060208284031215611de057600080fd5b813561176981611db8565b60005b83811015611e06578181015183820152602001611dee565b8381111561091a5750506000910152565b60008151808452611e2f816020860160208601611deb565b601f01601f19169290920160200192915050565b6020815260006117696020830184611e17565b600060208284031215611e6857600080fd5b5035919050565b60008060408385031215611e8257600080fd5b611e8b83611cad565b946020939093013593505050565b600060208284031215611eab57600080fd5b61176982611cad565b600080600060608486031215611ec957600080fd5b611ed284611cad565b9250611ee060208501611cad565b9150604084013590509250925092565b60008060408385031215611f0357600080fd5b50508035926020909101359150565b60008060008060808587031215611f2857600080fd5b611f3185611cad565b93506020850135925060408501356001600160401b0380821115611f5457600080fd5b611f6088838901611cdf565b93506060870135915080821115611f7657600080fd5b50611f8387828801611cdf565b91505092959194509250565b600060208284031215611fa157600080fd5b81356001600160401b03811115611fb757600080fd5b6107d584828501611cdf565b600080600060608486031215611fd857600080fd5b83359250611ee060208501611cad565b60008060408385031215611ffb57600080fd5b61200483611cad565b91506020830135801515811461201957600080fd5b809150509250929050565b6000806020838503121561203757600080fd5b82356001600160401b038082111561204e57600080fd5b818501915085601f83011261206257600080fd5b81358181111561207157600080fd5b8660208260051b850101111561208657600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156120ed57603f198886030184526120db858351611e17565b945092850192908501906001016120bf565b5092979650505050505050565b6000806000806080858703121561211057600080fd5b61211985611cad565b935061212760208601611cad565b92506040850135915060608501356001600160401b0381111561214957600080fd5b611f8387828801611cdf565b6000806040838503121561216857600080fd5b61217183611cad565b915061217f60208401611cad565b90509250929050565b6020808252601790820152762737ba1030baba3437b934bd32b2103a379036b4b73a1760491b604082015260600190565b600181811c908216806121cd57607f821691505b602082108114156121ee57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561226257612262612232565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261228c5761228c612267565b500490565b6000808335601e198436030181126122a857600080fd5b8301803591506001600160401b038211156122c257600080fd5b6020019150368190038213156122d757600080fd5b9250929050565b60006000198214156122f2576122f2612232565b5060010190565b6000835161230b818460208801611deb565b83519083019061231f818360208801611deb565b01949350505050565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6000821982111561236457612364612232565b500190565b60408152600061237c6040830185611e17565b828103602084015261238e8185611e17565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bd190830184611e17565b6000602082840312156123dc57600080fd5b815161176981611db8565b6000828210156123f9576123f9612232565b500390565b60008261240d5761240d612267565b500690565b60008251612424818460208701611deb565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220334b1d8dfdca71dd04231bdf56d20792183e64fca745b0f15517aa34251b3f0f64736f6c634300080c0033",
    "sourceMap": "1077:7306:11:-:0;;;2064:306;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1891:13:25;;2245:5:11;;2252:7;;1891:13:25;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1914:17:25;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;2127:7:25;1941:31;;-1:-1:-1;2271:26:11::1;2283:13:::0;2271:11:::1;:26::i;:::-;2307:56;2332:17:::0;-1:-1:-1;;;;;2307:56:11;::::1;:24;:56::i;:::-;2064:306:::0;;;;;1077:7306;;1421:172:68;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3430:334:75:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:75;;2326:2:644;3571:25:75;;;2308:21:644;2365:2;2345:18;;;2338:30;-1:-1:-1;;;2384:18:644;;;2377:45;2439:18;;3571:25:75;;;;;;;3531:76;3617:16;:36;;-1:-1:-1;;;;;3617:36:75;;-1:-1:-1;;;;;;3663:32:75;;;;;-1:-1:-1;;;3663:32:75;;;;;;;;3711:46;;2614:25:644;;;3711:46:75;;2602:2:644;2587:18;3711:46:75;;;;;;;3430:334;;:::o;1077:7306:11:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1077:7306:11;;;-1:-1:-1;1077:7306:11;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:644;93:13;;-1:-1:-1;;;;;135:31:644;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:885;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:644;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:644;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;912:3;907:2;902;894:6;890:15;886:24;883:33;880:53;;;929:1;926;919:12;880:53;951:1;942:10;;961:133;975:2;972:1;969:9;961:133;;;1063:14;;;1059:23;;1053:30;1032:14;;;1028:23;;1021:63;986:10;;;;961:133;;;1112:2;1109:1;1106:9;1103:80;;;1171:1;1166:2;1161;1153:6;1149:15;1145:24;1138:35;1103:80;1201:6;328:885;-1:-1:-1;;;;;;328:885:644:o;1218:901::-;1344:6;1352;1360;1368;1376;1429:3;1417:9;1408:7;1404:23;1400:33;1397:53;;;1446:1;1443;1436:12;1397:53;1469:40;1499:9;1469:40;:::i;:::-;1553:2;1538:18;;1532:25;1459:50;;-1:-1:-1;;;;;;1606:14:644;;;1603:34;;;1633:1;1630;1623:12;1603:34;1656:61;1709:7;1700:6;1689:9;1685:22;1656:61;:::i;:::-;1646:71;;1763:2;1752:9;1748:18;1742:25;1726:41;;1792:2;1782:8;1779:16;1776:36;;;1808:1;1805;1798:12;1776:36;;1831:63;1886:7;1875:8;1864:9;1860:24;1831:63;:::i;:::-;1821:73;;;1913:49;1958:2;1947:9;1943:18;1913:49;:::i;:::-;2005:3;1990:19;;1984:26;1903:59;;-1:-1:-1;;;;;;2039:31:644;;2029:42;;2019:70;;2085:1;2082;2075:12;2019:70;2108:5;2098:15;;;1218:901;;;;;;;;:::o;2650:380::-;2729:1;2725:12;;;;2772;;;2793:61;;2847:4;2839:6;2835:17;2825:27;;2793:61;2900:2;2892:6;2889:14;2869:18;2866:38;2863:161;;;2946:10;2941:3;2937:20;2934:1;2927:31;2981:4;2978:1;2971:15;3009:4;3006:1;2999:15;2863:161;;2650:380;;;:::o;:::-;1077:7306:11;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061017f5760003560e01c806275a3171461018457806301ffc9a71461019957806306fdde03146101c1578063081812fc146101d6578063095ea7b31461020157806313af40351461021457806318160ddd1461022757806323b872dd1461023d5780632419f51b146102505780632a55205a146102635780633b1475a71461029557806342842e0e1461029d57806342966c68146102b0578063430c2081146102c35780634cc157df146102d6578063600dd5ea1461030b5780636352211e1461031e57806363b45e2d1461033157806370a0823114610339578063754a81d91461034c578063830405321461035f5780638da5cb5b14610382578063938e3d7b1461038a57806395d89b411461039d5780639bcf7a15146103a5578063a22cb465146103b8578063ac9650d8146103cb578063b24f2d39146103eb578063b88d4fde14610409578063c87b56dd1461041c578063e8a3d4851461042f578063e985e9c514610437575b600080fd5b610197610192366004611d6b565b61044a565b005b6101ac6101a7366004611dce565b6104a8565b60405190151581526020015b60405180910390f35b6101c9610515565b6040516101b89190611e43565b6101e96101e4366004611e56565b6105a7565b6040516001600160a01b0390911681526020016101b8565b61019761020f366004611e6f565b6105eb565b610197610222366004611e99565b610672565b600154600054035b6040519081526020016101b8565b61019761024b366004611eb4565b6106a2565b61022f61025e366004611e56565b6106ad565b610276610271366004611ef0565b61071b565b604080516001600160a01b0390931683526020830191909152016101b8565b60005461022f565b6101976102ab366004611eb4565b610758565b6101976102be366004611e56565b610773565b6101ac6102d1366004611e6f565b61077e565b6102e96102e4366004611e56565b6107dd565b604080516001600160a01b03909316835261ffff9091166020830152016101b8565b610197610319366004611e6f565b610848565b6101e961032c366004611e56565b610876565b600c5461022f565b61022f610347366004611e99565b610888565b61019761035a366004611f12565b6108d6565b6101ac61036d366004611e56565b600e6020526000908152604090205460ff1681565b6101e9610920565b610197610398366004611f8f565b61092f565b6101c961095c565b6101976103b3366004611fc3565b61096b565b6101976103c6366004611fe8565b61099a565b6103de6103d9366004612024565b610a30565b6040516101b89190612098565b600a546001600160a01b03811690600160a01b900461ffff166102e9565b6101976104173660046120fa565b610b24565b6101c961042a366004611e56565b610b6f565b6101c9610c5d565b6101ac610445366004612155565b610ceb565b610452610d19565b6104775760405162461bcd60e51b815260040161046e90612188565b60405180910390fd5b61048961048360005490565b82610d3c565b6104a482600160405180602001604052806000815250610db5565b5050565b60006301ffc9a760e01b6001600160e01b0319831614806104d957506380ac58cd60e01b6001600160e01b03198316145b806104f45750635b5e139f60e01b6001600160e01b03198316145b8061050f57506001600160e01b0319821663152a902d60e11b145b92915050565b606060028054610524906121b9565b80601f0160208091040260200160405190810160405280929190818152602001828054610550906121b9565b801561059d5780601f106105725761010080835404028352916020019161059d565b820191906000526020600020905b81548152906001019060200180831161058057829003601f168201915b5050505050905090565b60006105b282610f4e565b6105cf576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006105f682610876565b9050806001600160a01b0316836001600160a01b0316141561062b5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614610662576106458133610ceb565b610662576040516367d9dca160e11b815260040160405180910390fd5b61066d838383610f79565b505050565b61067a610d19565b6106965760405162461bcd60e51b815260040161046e906121f4565b61069f81610fd5565b50565b61066d838383611027565b60006106b8600c5490565b82106106f65760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161046e565b600c82815481106107095761070961221c565b90600052602060002001549050919050565b60008060008061072a866107dd565b90945084925061ffff1690506127106107438287612248565b61074d919061227d565b925050509250929050565b61066d83838360405180602001604052806000815250610b24565b61069f816001611201565b60008061078a83610876565b9050806001600160a01b0316846001600160a01b031614806107b157506107b18185610ceb565b806107d55750836001600160a01b03166107ca846105a7565b6001600160a01b0316145b949350505050565b6000818152600b60209081526040808320815180830190925280546001600160a01b031680835260019091015492820192909252829115610824578051602082015161083e565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b610850610d19565b61086c5760405162461bcd60e51b815260040161046e906121f4565b6104a482826113b0565b600061088182611434565b5192915050565b60006001600160a01b0382166108b1576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6108de610d19565b6108fa5760405162461bcd60e51b815260040161046e90612188565b61090d61090660005490565b848461154e565b505061091a848483610db5565b50505050565b6009546001600160a01b031690565b610937610d19565b6109535760405162461bcd60e51b815260040161046e906121f4565b61069f816115bb565b606060038054610524906121b9565b610973610d19565b61098f5760405162461bcd60e51b815260040161046e906121f4565b61066d83838361169d565b6001600160a01b0382163314156109c45760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b03811115610a4a57610a4a611cc9565b604051908082528060200260200182016040528015610a7d57816020015b6060815260200190600190039081610a685790505b50905060005b82811015610b1d57610aed30858584818110610aa157610aa161221c565b9050602002810190610ab39190612291565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061174492505050565b828281518110610aff57610aff61221c565b60200260200101819052508080610b15906122de565b915050610a83565b5092915050565b610b2f848484611027565b610b41836001600160a01b0316611770565b1561091a57610b528484848461177f565b61091a576040516368d2bf6b60e11b815260040160405180910390fd5b6000818152600f6020526040812080546060929190610b8d906121b9565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb9906121b9565b8015610c065780601f10610bdb57610100808354040283529160200191610c06565b820191906000526020600020905b815481529060010190602001808311610be957829003601f168201915b50505050509050600081511115610c1d5792915050565b6000610c2884611867565b905080610c3485611a03565b604051602001610c459291906122f9565b60405160208183030381529060405292505050919050565b60088054610c6a906121b9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c96906121b9565b8015610ce35780601f10610cb857610100808354040283529160200191610ce3565b820191906000526020600020905b815481529060010190602001808311610cc657829003601f168201915b505050505081565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6000610d23610920565b6001600160a01b0316336001600160a01b031614905090565b6000828152600f602052604090208054610d55906121b9565b159050610d965760405162461bcd60e51b815260206004820152600f60248201526e15549248185b1c9958591e481cd95d608a1b604482015260640161046e565b6000828152600f60209081526040909120825161066d92840190611c14565b6000546001600160a01b038416610dde57604051622e076360e81b815260040160405180910390fd5b82610dfc5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b031981166001600160401b038083168b018116918217600160401b6001600160401b031990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b4290931692909202919091179055819081850190610e9590611770565b15610f0b575b60405182906001600160a01b03881690600090600080516020612456833981519152908290a4610ed4600087848060010195508761177f565b610ef1576040516368d2bf6b60e11b815260040160405180910390fd5b808210610e9b578260005414610f0657600080fd5b610f3e565b5b6040516001830192906001600160a01b03881690600090600080516020612456833981519152908290a4808210610f0c575b50600090815561091a9085838684565b600080548210801561050f575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b600061103282611434565b9050836001600160a01b031681600001516001600160a01b0316146110695760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b038616148061108757506110878533610ceb565b806110a2575033611097846105a7565b6001600160a01b0316145b9050806110c257604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0384166110e957604051633a954ecd60e21b815260040160405180910390fd5b6110f560008487610f79565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166111c85760005482146111c857805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061245683398151915260405160405180910390a45050505050565b600061120c83611434565b80519091508215611272576000336001600160a01b038316148061123557506112358233610ceb565b80611250575033611245866105a7565b6001600160a01b0316145b90508061127057604051632ce44b5f60e11b815260040160405180910390fd5b505b61127e60008583610f79565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b038084169190910181166001600160401b03198416811783900482166001908101831690930267ffffffffffffffff67ffffffffffffffff60801b0119909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b17855591890180845292208054919490911661137857600054821461137857805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020612456833981519152908390a4505060018054810190555050565b6127108111156113d25760405162461bcd60e51b815260040161046e90612328565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b60408051606081018252600080825260208201819052918101919091528160005481101561153557600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906115335780516001600160a01b0316156114ca579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff161515928101929092521561152e579392505050565b6114ca565b505b604051636f96cda160e11b815260040160405180910390fd5b60008061155b8486612351565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d6020908152604090912085519294508493506115b2929091860190611c14565b50935093915050565b6000600880546115ca906121b9565b80601f01602080910402602001604051908101604052809291908181526020018280546115f6906121b9565b80156116435780601f1061161857610100808354040283529160200191611643565b820191906000526020600020905b81548152906001019060200180831161162657829003601f168201915b5050855193945061165f93600893506020870192509050611c14565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051611691929190612369565b60405180910390a15050565b6127108111156116bf5760405162461bcd60e51b815260040161046e90612328565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b6060611769838360405180606001604052806027815260200161242f60279139611b00565b9392505050565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906117b4903390899088908890600401612397565b6020604051808303816000875af19250505080156117ef575060408051601f3d908101601f191682019092526117ec918101906123ca565b60015b61184a573d80801561181d576040519150601f19603f3d011682016040523d82523d6000602084013e611822565b606091505b508051611842576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b60606000611874600c5490565b90506000600c8054806020026020016040519081016040528092919081815260200182805480156118c457602002820191906000526020600020905b8154815260200190600101908083116118b0575b5050505050905060005b828110156119c8578181815181106118e8576118e861221c565b60200260200101518510156119b657600d600083838151811061190d5761190d61221c565b60200260200101518152602001908152602001600020805461192e906121b9565b80601f016020809104026020016040519081016040528092919081815260200182805461195a906121b9565b80156119a75780601f1061197c576101008083540402835291602001916119a7565b820191906000526020600020905b81548152906001019060200180831161198a57829003601f168201915b50505050509350505050919050565b6119c1600182612351565b90506118ce565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b604482015260640161046e565b606081611a275750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a515780611a3b816122de565b9150611a4a9050600a8361227d565b9150611a2b565b6000816001600160401b03811115611a6b57611a6b611cc9565b6040519080825280601f01601f191660200182016040528015611a95576020820181803683370190505b5090505b84156107d557611aaa6001836123e7565b9150611ab7600a866123fe565b611ac2906030612351565b60f81b818381518110611ad757611ad761221c565b60200101906001600160f81b031916908160001a905350611af9600a8661227d565b9450611a99565b6060611b0b84611770565b611b665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161046e565b600080856001600160a01b031685604051611b819190612412565b600060405180830381855af49150503d8060008114611bbc576040519150601f19603f3d011682016040523d82523d6000602084013e611bc1565b606091505b5091509150611bd1828286611bdb565b9695505050505050565b60608315611bea575081611769565b825115611bfa5782518084602001fd5b8160405162461bcd60e51b815260040161046e9190611e43565b828054611c20906121b9565b90600052602060002090601f016020900481019282611c425760008555611c88565b82601f10611c5b57805160ff1916838001178555611c88565b82800160010185558215611c88579182015b82811115611c88578251825591602001919060010190611c6d565b50611c94929150611c98565b5090565b5b80821115611c945760008155600101611c99565b80356001600160a01b0381168114611cc457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611cf057600080fd5b81356001600160401b0380821115611d0a57611d0a611cc9565b604051601f8301601f19908116603f01168101908282118183101715611d3257611d32611cc9565b81604052838152866020858801011115611d4b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611d7e57600080fd5b611d8783611cad565b915060208301356001600160401b03811115611da257600080fd5b611dae85828601611cdf565b9150509250929050565b6001600160e01b03198116811461069f57600080fd5b600060208284031215611de057600080fd5b813561176981611db8565b60005b83811015611e06578181015183820152602001611dee565b8381111561091a5750506000910152565b60008151808452611e2f816020860160208601611deb565b601f01601f19169290920160200192915050565b6020815260006117696020830184611e17565b600060208284031215611e6857600080fd5b5035919050565b60008060408385031215611e8257600080fd5b611e8b83611cad565b946020939093013593505050565b600060208284031215611eab57600080fd5b61176982611cad565b600080600060608486031215611ec957600080fd5b611ed284611cad565b9250611ee060208501611cad565b9150604084013590509250925092565b60008060408385031215611f0357600080fd5b50508035926020909101359150565b60008060008060808587031215611f2857600080fd5b611f3185611cad565b93506020850135925060408501356001600160401b0380821115611f5457600080fd5b611f6088838901611cdf565b93506060870135915080821115611f7657600080fd5b50611f8387828801611cdf565b91505092959194509250565b600060208284031215611fa157600080fd5b81356001600160401b03811115611fb757600080fd5b6107d584828501611cdf565b600080600060608486031215611fd857600080fd5b83359250611ee060208501611cad565b60008060408385031215611ffb57600080fd5b61200483611cad565b91506020830135801515811461201957600080fd5b809150509250929050565b6000806020838503121561203757600080fd5b82356001600160401b038082111561204e57600080fd5b818501915085601f83011261206257600080fd5b81358181111561207157600080fd5b8660208260051b850101111561208657600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156120ed57603f198886030184526120db858351611e17565b945092850192908501906001016120bf565b5092979650505050505050565b6000806000806080858703121561211057600080fd5b61211985611cad565b935061212760208601611cad565b92506040850135915060608501356001600160401b0381111561214957600080fd5b611f8387828801611cdf565b6000806040838503121561216857600080fd5b61217183611cad565b915061217f60208401611cad565b90509250929050565b6020808252601790820152762737ba1030baba3437b934bd32b2103a379036b4b73a1760491b604082015260600190565b600181811c908216806121cd57607f821691505b602082108114156121ee57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561226257612262612232565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261228c5761228c612267565b500490565b6000808335601e198436030181126122a857600080fd5b8301803591506001600160401b038211156122c257600080fd5b6020019150368190038213156122d757600080fd5b9250929050565b60006000198214156122f2576122f2612232565b5060010190565b6000835161230b818460208801611deb565b83519083019061231f818360208801611deb565b01949350505050565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6000821982111561236457612364612232565b500190565b60408152600061237c6040830185611e17565b828103602084015261238e8185611e17565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bd190830184611e17565b6000602082840312156123dc57600080fd5b815161176981611db8565b6000828210156123f9576123f9612232565b500390565b60008261240d5761240d612267565b500690565b60008251612424818460208701611deb565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220334b1d8dfdca71dd04231bdf56d20792183e64fca745b0f15517aa34251b3f0f64736f6c634300080c0033",
    "sourceMap": "1077:7306:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4435:217;;;;;;:::i;:::-;;:::i;:::-;;2662:444;;;;;;:::i;:::-;;:::i;:::-;;;2000:14:644;;1993:22;1975:41;;1963:2;1948:18;2662:444:11;;;;;;;;6137:98:25;;;:::i;:::-;;;;;;;:::i;7623:200::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3127:32:644;;;3109:51;;3097:2;3082:18;7623:200:25;2963:203:644;7170:392:25;;;;;;:::i;:::-;;:::i;1133:173:68:-;;;;;;:::i;:::-;;:::i;2290:306:25:-;2549:12;;2343:7;2533:13;:28;2290:306;;;3767:25:644;;;3755:2;3740:18;2290:306:25;3621:177:644;8462:164:25;;;;;;:::i;:::-;;:::i;1973:203:52:-;;;;;;:::i;:::-;;:::i;1421:347:75:-;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;4581:32:644;;;4563:51;;4645:2;4630:18;;4623:34;;;;4536:18;1421:347:75;4389:274:644;6154:104:11;6212:7;6238:13;6154:104;;8692:179:25;;;;;;:::i;:::-;;:::i;5812:87:11:-;;;;;;:::i;:::-;;:::i;6590:357::-;;;;;;:::i;:::-;;:::i;2008:381:75:-;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;4858:32:644;;;4840:51;;4939:6;4927:19;;;4922:2;4907:18;;4900:47;4813:18;2008:381:75;4668:285:644;3087:256:75;;;;;;:::i;:::-;;:::i;5952:123:25:-;;;;;;:::i;:::-;;:::i;1655:96:52:-;1729:8;:15;1655:96;;3378:203:25;;;;;;:::i;:::-;;:::i;5213:325:11:-;;;;;;:::i;:::-;;:::i;898:43:52:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;871:86:68;;;:::i;1003:188:54:-;;;;;;:::i;:::-;;:::i;6299:102:25:-;;;:::i;4281:288:75:-;;;;;;:::i;:::-;;:::i;7890:282:25:-;;;;;;:::i;:::-;;:::i;698:319:63:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2499:144:75:-;2599:16;;-1:-1:-1;;;;;2599:16:75;;;-1:-1:-1;;;2624:10:75;;;;2499:144;;8937:381:25;;;;;;:::i;:::-;;:::i;3520:379:11:-;;;;;;:::i;:::-;;:::i;565:34:54:-;;;:::i;8238:162:25:-;;;;;;:::i;:::-;;:::i;4435:217:11:-;4522:10;:8;:10::i;:::-;4514:46;;;;-1:-1:-1;;;4514:46:11;;;;;;;:::i;:::-;;;;;;;;;4570:44;4583:19;6212:7;6238:13;;6154:104;4583:19;4604:9;4570:12;:44::i;:::-;4624:21;4634:3;4639:1;4624:21;;;;;;;;;;;;:9;:21::i;:::-;4435:217;;:::o;2662:444::-;2765:4;-1:-1:-1;;;;;;;;;2800:25:11;;;;:100;;-1:-1:-1;;;;;;;;;;2875:25:11;;;2800:100;:175;;;-1:-1:-1;;;;;;;;;;2950:25:11;;;2800:175;:274;;;-1:-1:-1;;;;;;;3033:41:11;;-1:-1:-1;;;3033:41:11;2800:274;2781:293;2662:444;-1:-1:-1;;2662:444:11:o;6137:98:25:-;6191:13;6223:5;6216:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6137:98;:::o;7623:200::-;7691:7;7715:16;7723:7;7715;:16::i;:::-;7710:64;;7740:34;;-1:-1:-1;;;7740:34:25;;;;;;;;;;;7710:64;-1:-1:-1;7792:24:25;;;;:15;:24;;;;;;-1:-1:-1;;;;;7792:24:25;;7623:200::o;7170:392::-;7250:13;7266:24;7282:7;7266:15;:24::i;:::-;7250:40;;7310:5;-1:-1:-1;;;;;7304:11:25;:2;-1:-1:-1;;;;;7304:11:25;;7300:48;;;7324:24;;-1:-1:-1;;;7324:24:25;;;;;;;;;;;7300:48;719:10:230;-1:-1:-1;;;;;7363:21:25;;;7359:158;;7403:37;7420:5;719:10:230;8238:162:25;:::i;7403:37::-;7398:119;;7467:35;;-1:-1:-1;;;7467:35:25;;;;;;;;;;;7398:119;7527:28;7536:2;7540:7;7549:5;7527:8;:28::i;:::-;7240:322;7170:392;;:::o;1133:173:68:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:68;;;;;;;:::i;1198:70::-;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;8462:164:25:-;8591:28;8601:4;8607:2;8611:7;8591:9;:28::i;1973:203:52:-;2037:7;2070:17;1729:8;:15;;1655:96;2070:17;2060:6;:27;2056:81;;2103:23;;-1:-1:-1;;;2103:23:52;;10181:2:644;2103:23:52;;;10163:21:644;10220:2;10200:18;;;10193:30;-1:-1:-1;;;10239:18:644;;;10232:43;10292:18;;2103:23:52;9979:337:644;2056:81:52;2153:8;2162:6;2153:16;;;;;;;;:::i;:::-;;;;;;;;;2146:23;;1973:203;;;:::o;1421:347:75:-;1558:16;1576:21;1614:17;1633:11;1648:31;1671:7;1648:22;:31::i;:::-;1613:66;;-1:-1:-1;1613:66:75;;-1:-1:-1;1613:66:75;;;-1:-1:-1;1755:6:75;1736:15;1613:66;1736:9;:15;:::i;:::-;1735:26;;;;:::i;:::-;1719:42;;1603:165;;1421:347;;;;;:::o;8692:179:25:-;8825:39;8842:4;8848:2;8852:7;8825:39;;;;;;;;;;;;:16;:39::i;5812:87:11:-;5871:21;5877:8;5887:4;5871:5;:21::i;6590:357::-;6715:24;6755:13;6771:17;6779:8;6771:7;:17::i;:::-;6755:33;;6834:5;-1:-1:-1;;;;;6821:18:11;:9;-1:-1:-1;;;;;6821:18:11;;:68;;;;6855:34;6872:5;6879:9;6855:16;:34::i;:::-;6821:118;;;;6930:9;-1:-1:-1;;;;;6905:34:11;:21;6917:8;6905:11;:21::i;:::-;-1:-1:-1;;;;;6905:34:11;;6821:118;6798:142;6590:357;-1:-1:-1;;;;6590:357:11:o;2008:381:75:-;2088:7;2152:29;;;:19;:29;;;;;;;;2115:66;;;;;;;;;;-1:-1:-1;;;;;2115:66:75;;;;;;;;;;;;;;;;2088:7;;2211:39;:171;;2327:25;;2361:19;;;;2211:171;;;2270:16;;-1:-1:-1;;;;;2270:16:75;;;-1:-1:-1;;;2295:10:75;;;;2211:171;2192:190;;;;;2008:381;;;:::o;3087:256::-;3199:20;:18;:20::i;:::-;3194:76;;3235:24;;-1:-1:-1;;;3235:24:75;;;;;;;:::i;3194:76::-;3280:56;3305:17;3324:11;3280:24;:56::i;5952:123:25:-;6016:7;6042:21;6055:7;6042:12;:21::i;:::-;:26;;5952:123;-1:-1:-1;;5952:123:25:o;3378:203::-;3442:7;-1:-1:-1;;;;;3465:19:25;;3461:60;;3493:28;;-1:-1:-1;;;3493:28:25;;;;;;;;;;;3461:60;-1:-1:-1;;;;;;3546:19:25;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;3546:27:25;;3378:203::o;5213:325:11:-;5381:10;:8;:10::i;:::-;5373:46;;;;-1:-1:-1;;;5373:46:11;;;;;;;:::i;:::-;5429:60;5448:19;6212:7;6238:13;;6154:104;5448:19;5469:9;5480:8;5429:18;:60::i;:::-;;;5499:32;5509:3;5514:9;5525:5;5499:9;:32::i;:::-;5213:325;;;;:::o;871:86:68:-;944:6;;-1:-1:-1;;;;;944:6:68;;871:86::o;1003:188:54:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:54;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;6299:102:25:-;6355:13;6387:7;6380:14;;;;;:::i;4281:288:75:-;4428:20;:18;:20::i;:::-;4423:76;;4464:24;;-1:-1:-1;;;4464:24:75;;;;;;;:::i;4423:76::-;4509:53;4535:8;4545:10;4557:4;4509:25;:53::i;7890:282:25:-;-1:-1:-1;;;;;7988:24:25;;719:10:230;7988:24:25;7984:54;;;8021:17;;-1:-1:-1;;;8021:17:25;;;;;;;;;;;7984:54;719:10:230;8049:32:25;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;8049:42:25;;;;;;;;;;;;:53;;-1:-1:-1;;8049:53:25;;;;;;;;;;8117:48;;1975:41:644;;;8049:42:25;;719:10:230;8117:48:25;;1948:18:644;8117:48:25;;;;;;;7890:282;;:::o;698:319:63:-;775:22;831:4;-1:-1:-1;;;;;819:24:63;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:34;;858:9;853:134;873:15;;;853:134;;;922:54;961:4;968;;973:1;968:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;922:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;922:30:63;;-1:-1:-1;;;922:54:63:i;:::-;909:7;917:1;909:10;;;;;;;;:::i;:::-;;;;;;:67;;;;890:3;;;;;:::i;:::-;;;;853:134;;;;698:319;;;;:::o;8937:381:25:-;9098:28;9108:4;9114:2;9118:7;9098:9;:28::i;:::-;9140:15;:2;-1:-1:-1;;;;;9140:13:25;;:15::i;:::-;9136:176;;;9174:56;9205:4;9211:2;9215:7;9224:5;9174:30;:56::i;:::-;9169:143;;9257:40;;-1:-1:-1;;;9257:40:25;;;;;;;;;;;3520:379:11;3619:29;3651:17;;;:7;:17;;;;;3619:49;;3594:13;;3619:29;3651:17;3619:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3714:1;3688:15;3682:29;:33;3678:86;;;3738:15;3520:379;-1:-1:-1;;3520:379:11:o;3678:86::-;3774:22;3799:21;3811:8;3799:11;:21::i;:::-;3774:46;;3861:8;3871:19;:8;:17;:19::i;:::-;3844:47;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3830:62;;;;3520:379;;;:::o;565:34:54:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8238:162:25:-;-1:-1:-1;;;;;8358:25:25;;;8335:4;8358:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;8238:162::o;7868:102:11:-;7919:4;7956:7;:5;:7::i;:::-;-1:-1:-1;;;;;7942:21:11;:10;-1:-1:-1;;;;;7942:21:11;;7935:28;;7868:102;:::o;7360:202::-;7466:17;;;;:7;:17;;;;;7460:31;;;;;:::i;:::-;:36;;-1:-1:-1;7452:64:11;;;;-1:-1:-1;;;7452:64:11;;12358:2:644;7452:64:11;;;12340:21:644;12397:2;12377:18;;;12370:30;-1:-1:-1;;;12416:18:644;;;12409:45;12471:18;;7452:64:11;12156:339:644;7452:64:11;7526:17;;;;:7;:17;;;;;;;;:29;;;;;;;;:::i;10277:1708:25:-;10395:20;10418:13;-1:-1:-1;;;;;10445:16:25;;10441:48;;10470:19;;-1:-1:-1;;;10470:19:25;;;;;;;;;;;10441:48;10503:13;10499:44;;10525:18;;-1:-1:-1;;;10525:18:25;;;;;;;;;;;10499:44;-1:-1:-1;;;;;10886:16:25;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;;;;;10944:49:25;;-1:-1:-1;;;;;10886:44:25;;;;;;;10944:49;;;-1:-1:-1;;;;;;;;;10886:44:25;;;;;;10944:49;;;;;;;;;;;;;;;;11008:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;11057:66:25;;;-1:-1:-1;;;11107:15:25;11057:66;;;;;;;;;;;;;11008:25;;11201:23;;;;11243:15;;:13;:15::i;:::-;11239:618;;;11278:308;11308:38;;11333:12;;-1:-1:-1;;;;;11308:38:25;;;11325:1;;-1:-1:-1;;;;;;;;;;;11308:38:25;11325:1;;11308:38;11373:69;11412:1;11416:2;11420:14;;;;;;11436:5;11373:30;:69::i;:::-;11368:172;;11477:40;;-1:-1:-1;;;11477:40:25;;;;;;;;;;;11368:172;11581:3;11566:12;:18;11278:308;;11665:12;11648:13;;:29;11644:43;;11679:8;;;11644:43;11239:618;;;11726:117;11756:40;;11781:14;;;;;-1:-1:-1;;;;;11756:40:25;;;11773:1;;-1:-1:-1;;;;;;;;;;;11756:40:25;11773:1;;11756:40;11838:3;11823:12;:18;11726:117;;11239:618;-1:-1:-1;11870:13:25;:28;;;11918:60;;11951:2;11955:12;11969:8;11918:60;:::i;9564:172::-;9621:4;9684:13;;9674:7;:23;9644:85;;;;-1:-1:-1;;9702:20:25;;;;:11;:20;;;;;:27;-1:-1:-1;;;9702:27:25;;;;9701:28;;9564:172::o;18545:189::-;18655:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;18655:29:25;-1:-1:-1;;;;;18655:29:25;;;;;;;;;18699:28;;18655:24;;18699:28;;;;;;;18545:189;;;:::o;1421:172:68:-;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;13620:2082:25:-;13730:35;13768:21;13781:7;13768:12;:21::i;:::-;13730:59;;13826:4;-1:-1:-1;;;;;13804:26:25;:13;:18;;;-1:-1:-1;;;;;13804:26:25;;13800:67;;13839:28;;-1:-1:-1;;;13839:28:25;;;;;;;;;;;13800:67;13878:22;719:10:230;-1:-1:-1;;;;;13904:20:25;;;;:72;;-1:-1:-1;13940:36:25;13957:4;719:10:230;8238:162:25;:::i;13940:36::-;13904:124;;;-1:-1:-1;719:10:230;13992:20:25;14004:7;13992:11;:20::i;:::-;-1:-1:-1;;;;;13992:36:25;;13904:124;13878:151;;14045:17;14040:66;;14071:35;;-1:-1:-1;;;14071:35:25;;;;;;;;;;;14040:66;-1:-1:-1;;;;;14120:16:25;;14116:52;;14145:23;;-1:-1:-1;;;14145:23:25;;;;;;;;;;;14116:52;14284:35;14301:1;14305:7;14314:4;14284:8;:35::i;:::-;-1:-1:-1;;;;;14609:18:25;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;;;;;14609:31:25;;;-1:-1:-1;;;;;14609:31:25;;;-1:-1:-1;;14609:31:25;;;;;;;14654:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;14654:29:25;;;;;;;;;;;14732:20;;;:11;:20;;;;;;14766:18;;-1:-1:-1;;;;;;14798:49:25;;;;-1:-1:-1;;;14831:15:25;14798:49;;;;;;;;;;15117:11;;15176:24;;;;;15218:13;;14732:20;;15176:24;;15218:13;15214:377;;15425:13;;15410:11;:28;15406:171;;15462:20;;15530:28;;;;-1:-1:-1;;;;;15504:54:25;-1:-1:-1;;;15504:54:25;-1:-1:-1;;;;;;15504:54:25;;;-1:-1:-1;;;;;15462:20:25;;15504:54;;;;15406:171;14585:1016;;;15635:7;15631:2;-1:-1:-1;;;;;15616:27:25;15625:4;-1:-1:-1;;;;;15616:27:25;-1:-1:-1;;;;;;;;;;;15616:27:25;;;;;;;;;13720:1982;;13620:2082;;;:::o;16079:2355::-;16158:35;16196:21;16209:7;16196:12;:21::i;:::-;16243:18;;16158:59;;-1:-1:-1;16272:284:25;;;;16305:22;719:10:230;-1:-1:-1;;;;;16331:20:25;;;;:76;;-1:-1:-1;16371:36:25;16388:4;719:10:230;8238:162:25;:::i;16371:36::-;16331:132;;;-1:-1:-1;719:10:230;16427:20:25;16439:7;16427:11;:20::i;:::-;-1:-1:-1;;;;;16427:36:25;;16331:132;16305:159;;16484:17;16479:66;;16510:35;;-1:-1:-1;;;16510:35:25;;;;;;;;;;;16479:66;16291:265;16272:284;16679:35;16696:1;16700:7;16709:4;16679:8;:35::i;:::-;-1:-1:-1;;;;;17038:18:25;;;17004:31;17038:18;;;:12;:18;;;;;;;;17070:24;;-1:-1:-1;;;;;;;;;;17070:24:25;;;;;;;;;-1:-1:-1;;;;;;17070:24:25;;;;17108:29;;;;;17093:1;17108:29;;;;;;;;-1:-1:-1;;;;;;17108:29:25;;;;;;;;;;17267:20;;;:11;:20;;;;;;17301;;-1:-1:-1;;;;17368:15:25;17335:49;;;-1:-1:-1;;;17335:49:25;-1:-1:-1;;;;;;17335:49:25;;;;;;;;;;17398:22;-1:-1:-1;;;17398:22:25;;;17686:11;;;17745:24;;;;;17787:13;;17038:18;;17745:24;;17787:13;17783:377;;17994:13;;17979:11;:28;17975:171;;18031:20;;18099:28;;;;-1:-1:-1;;;;;18073:54:25;-1:-1:-1;;;18073:54:25;-1:-1:-1;;;;;;18073:54:25;;;-1:-1:-1;;;;;18031:20:25;;18073:54;;;;17975:171;-1:-1:-1;;18185:35:25;;18212:7;;-1:-1:-1;18208:1:25;;-1:-1:-1;;;;;;18185:35:25;;;-1:-1:-1;;;;;;;;;;;18185:35:25;18208:1;;18185:35;-1:-1:-1;;18403:12:25;:14;;;;;;-1:-1:-1;;16079:2355:25:o;3430:334:75:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:75;;;;;;;:::i;3531:76::-;3617:16;:36;;-1:-1:-1;;;;;3617:36:75;;-1:-1:-1;;;;;;3663:32:75;;;;;-1:-1:-1;;;3663:32:75;;;;;;;;3711:46;;3767:25:644;;;3711:46:75;;3755:2:644;3740:18;3711:46:75;;;;;;;3430:334;;:::o;4721:1174:25:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;4831:7:25;4929:13;;4922:4;:20;4918:913;;;4966:31;5000:17;;;:11;:17;;;;;;;;;4966:51;;;;;;;;;-1:-1:-1;;;;;4966:51:25;;;;-1:-1:-1;;;4966:51:25;;-1:-1:-1;;;;;4966:51:25;;;;;;;;-1:-1:-1;;;4966:51:25;;;;;;;;;;;;;;5039:774;;5092:14;;-1:-1:-1;;;;;5092:28:25;;5088:107;;5159:9;4721:1174;-1:-1:-1;;;4721:1174:25:o;5088:107::-;-1:-1:-1;;;5555:6:25;5603:17;;;;:11;:17;;;;;;;;;5591:29;;;;;;;;;-1:-1:-1;;;;;5591:29:25;;;;;-1:-1:-1;;;5591:29:25;;-1:-1:-1;;;;;5591:29:25;;;;;;;;-1:-1:-1;;;5591:29:25;;;;;;;;;;;;;5654:28;5650:115;;5725:9;4721:1174;-1:-1:-1;;;4721:1174:25:o;5650:115::-;5512:279;;;4944:887;4918:913;5857:31;;-1:-1:-1;;;5857:31:25;;;;;;;;;;;4535:362:52;4685:25;;4749:24;4760:13;4749:8;:24;:::i;:::-;4821:8;:22;;;;;;;;;;;;;-1:-1:-1;4854:16:52;;;:7;4821:22;4854:16;;;;;;;:36;;4739:34;;-1:-1:-1;4739:34:52;;-1:-1:-1;4854:36:52;;:16;;:36;;;;:::i;:::-;;4535:362;;;;;;:::o;1273:185:54:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1384:18:54;;1339:35;;-1:-1:-1;1384:18:54;;:11;;-1:-1:-1;1384:18:54;;;;-1:-1:-1;1384:18:54;-1:-1:-1;1384:18:54;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4671:362:75:-;4818:6;4811:4;:13;4807:69;;;4840:25;;-1:-1:-1;;;4840:25:75;;;;;;;:::i;4807:69::-;4918:49;;;;;;;;-1:-1:-1;;;;;4918:49:75;;;;;;;;;;;;;-1:-1:-1;4886:29:75;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4886:81:75;;;;;;;;;;;-1:-1:-1;4886:81:75;;;;;;;4983:43;;3767:25:644;;;4918:49:75;;4886:29;;4983:43;;3740:18:644;4983:43:75;;;;;;;4671:362;;;:::o;6538:198:288:-;6621:12;6652:77;6673:6;6681:4;6652:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6645:84;6538:198;-1:-1:-1;;;6538:198:288:o;1137:320::-;-1:-1:-1;;;;;1427:19:288;;:23;;;1137:320::o;19215:650:25:-;19393:72;;-1:-1:-1;;;19393:72:25;;19373:4;;-1:-1:-1;;;;;19393:36:25;;;;;:72;;719:10:230;;19444:4:25;;19450:7;;19459:5;;19393:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19393:72:25;;;;;;;;-1:-1:-1;;19393:72:25;;;;;;;;;;;;:::i;:::-;;;19389:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19624:13:25;;19620:229;;19669:40;;-1:-1:-1;;;19669:40:25;;;;;;;;;;;19620:229;19809:6;19803:13;19794:6;19790:2;19786:15;19779:38;19389:470;-1:-1:-1;;;;;;19511:55:25;-1:-1:-1;;;19511:55:25;;-1:-1:-1;19215:650:25;;;;;;:::o;2849:390:52:-;2911:13;2936:25;2964:17;1729:8;:15;;1655:96;2964:17;2936:45;;2991:24;3018:8;2991:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3042:9;3037:161;3061:17;3057:1;:21;3037:161;;;3117:7;3125:1;3117:10;;;;;;;;:::i;:::-;;;;;;;3106:8;:21;3102:86;;;3154:7;:19;3162:7;3170:1;3162:10;;;;;;;;:::i;:::-;;;;;;;3154:19;;;;;;;;;;;3147:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:390;;;:::o;3102:86::-;3080:6;3085:1;3080:6;;:::i;:::-;;;3037:161;;;-1:-1:-1;3207:25:52;;-1:-1:-1;;;3207:25:52;;14315:2:644;3207:25:52;;;14297:21:644;14354:2;14334:18;;;14327:30;-1:-1:-1;;;14373:18:644;;;14366:45;14428:18;;3207:25:52;14113:339:644;305:703:292;361:13;578:10;574:51;;-1:-1:-1;;604:10:292;;;;;;;;;;;;-1:-1:-1;;;604:10:292;;;;;305:703::o;574:51::-;649:5;634:12;688:75;695:9;;688:75;;720:8;;;;:::i;:::-;;-1:-1:-1;742:10:292;;-1:-1:-1;750:2:292;742:10;;:::i;:::-;;;688:75;;;772:19;804:6;-1:-1:-1;;;;;794:17:292;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;794:17:292;;772:39;;821:150;828:10;;821:150;;854:11;864:1;854:11;;:::i;:::-;;-1:-1:-1;922:10:292;930:2;922:5;:10;:::i;:::-;909:24;;:2;:24;:::i;:::-;896:39;;879:6;886;879:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;879:56:292;;;;;;;;-1:-1:-1;949:11:292;958:2;949:11;;:::i;:::-;;;821:150;;6922:387:288;7063:12;7095:18;7106:6;7095:10;:18::i;:::-;7087:69;;;;-1:-1:-1;;;7087:69:288;;14906:2:644;7087:69:288;;;14888:21:644;14945:2;14925:18;;;14918:30;14984:34;14964:18;;;14957:62;-1:-1:-1;;;15035:18:644;;;15028:36;15081:19;;7087:69:288;14704:402:644;7087:69:288;7168:12;7182:23;7209:6;-1:-1:-1;;;;;7209:19:288;7229:4;7209:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7167:67;;;;7251:51;7268:7;7277:10;7289:12;7251:16;:51::i;:::-;7244:58;6922:387;-1:-1:-1;;;;;;6922:387:288:o;7529:692::-;7675:12;7703:7;7699:516;;;-1:-1:-1;7733:10:288;7726:17;;7699:516;7844:17;;:21;7840:365;;8038:10;8032:17;8098:15;8085:10;8081:2;8077:19;8070:44;7840:365;8177:12;8170:20;;-1:-1:-1;;;8170:20:288;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:173:644;82:20;;-1:-1:-1;;;;;131:31:644;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:127::-;253:10;248:3;244:20;241:1;234:31;284:4;281:1;274:15;308:4;305:1;298:15;324:719;367:5;420:3;413:4;405:6;401:17;397:27;387:55;;438:1;435;428:12;387:55;474:6;461:20;-1:-1:-1;;;;;537:2:644;533;530:10;527:36;;;543:18;;:::i;:::-;618:2;612:9;586:2;672:13;;-1:-1:-1;;668:22:644;;;692:2;664:31;660:40;648:53;;;716:18;;;736:22;;;713:46;710:72;;;762:18;;:::i;:::-;802:10;798:2;791:22;837:2;829:6;822:18;883:3;876:4;871:2;863:6;859:15;855:26;852:35;849:55;;;900:1;897;890:12;849:55;964:2;957:4;949:6;945:17;938:4;930:6;926:17;913:54;1011:1;1004:4;999:2;991:6;987:15;983:26;976:37;1031:6;1022:15;;;;;;324:719;;;;:::o;1048:396::-;1126:6;1134;1187:2;1175:9;1166:7;1162:23;1158:32;1155:52;;;1203:1;1200;1193:12;1155:52;1226:29;1245:9;1226:29;:::i;:::-;1216:39;;1306:2;1295:9;1291:18;1278:32;-1:-1:-1;;;;;1325:6:644;1322:30;1319:50;;;1365:1;1362;1355:12;1319:50;1388;1430:7;1421:6;1410:9;1406:22;1388:50;:::i;:::-;1378:60;;;1048:396;;;;;:::o;1449:131::-;-1:-1:-1;;;;;;1523:32:644;;1513:43;;1503:71;;1570:1;1567;1560:12;1585:245;1643:6;1696:2;1684:9;1675:7;1671:23;1667:32;1664:52;;;1712:1;1709;1702:12;1664:52;1751:9;1738:23;1770:30;1794:5;1770:30;:::i;2027:258::-;2099:1;2109:113;2123:6;2120:1;2117:13;2109:113;;;2199:11;;;2193:18;2180:11;;;2173:39;2145:2;2138:10;2109:113;;;2240:6;2237:1;2234:13;2231:48;;;-1:-1:-1;;2275:1:644;2257:16;;2250:27;2027:258::o;2290:::-;2332:3;2370:5;2364:12;2397:6;2392:3;2385:19;2413:63;2469:6;2462:4;2457:3;2453:14;2446:4;2439:5;2435:16;2413:63;:::i;:::-;2530:2;2509:15;-1:-1:-1;;2505:29:644;2496:39;;;;2537:4;2492:50;;2290:258;-1:-1:-1;;2290:258:644:o;2553:220::-;2702:2;2691:9;2684:21;2665:4;2722:45;2763:2;2752:9;2748:18;2740:6;2722:45;:::i;2778:180::-;2837:6;2890:2;2878:9;2869:7;2865:23;2861:32;2858:52;;;2906:1;2903;2896:12;2858:52;-1:-1:-1;2929:23:644;;2778:180;-1:-1:-1;2778:180:644:o;3171:254::-;3239:6;3247;3300:2;3288:9;3279:7;3275:23;3271:32;3268:52;;;3316:1;3313;3306:12;3268:52;3339:29;3358:9;3339:29;:::i;:::-;3329:39;3415:2;3400:18;;;;3387:32;;-1:-1:-1;;;3171:254:644:o;3430:186::-;3489:6;3542:2;3530:9;3521:7;3517:23;3513:32;3510:52;;;3558:1;3555;3548:12;3510:52;3581:29;3600:9;3581:29;:::i;3803:328::-;3880:6;3888;3896;3949:2;3937:9;3928:7;3924:23;3920:32;3917:52;;;3965:1;3962;3955:12;3917:52;3988:29;4007:9;3988:29;:::i;:::-;3978:39;;4036:38;4070:2;4059:9;4055:18;4036:38;:::i;:::-;4026:48;;4121:2;4110:9;4106:18;4093:32;4083:42;;3803:328;;;;;:::o;4136:248::-;4204:6;4212;4265:2;4253:9;4244:7;4240:23;4236:32;4233:52;;;4281:1;4278;4271:12;4233:52;-1:-1:-1;;4304:23:644;;;4374:2;4359:18;;;4346:32;;-1:-1:-1;4136:248:644:o;4958:685::-;5063:6;5071;5079;5087;5140:3;5128:9;5119:7;5115:23;5111:33;5108:53;;;5157:1;5154;5147:12;5108:53;5180:29;5199:9;5180:29;:::i;:::-;5170:39;;5256:2;5245:9;5241:18;5228:32;5218:42;;5311:2;5300:9;5296:18;5283:32;-1:-1:-1;;;;;5375:2:644;5367:6;5364:14;5361:34;;;5391:1;5388;5381:12;5361:34;5414:50;5456:7;5447:6;5436:9;5432:22;5414:50;:::i;:::-;5404:60;;5517:2;5506:9;5502:18;5489:32;5473:48;;5546:2;5536:8;5533:16;5530:36;;;5562:1;5559;5552:12;5530:36;;5585:52;5629:7;5618:8;5607:9;5603:24;5585:52;:::i;:::-;5575:62;;;4958:685;;;;;;;:::o;5648:322::-;5717:6;5770:2;5758:9;5749:7;5745:23;5741:32;5738:52;;;5786:1;5783;5776:12;5738:52;5826:9;5813:23;-1:-1:-1;;;;;5851:6:644;5848:30;5845:50;;;5891:1;5888;5881:12;5845:50;5914;5956:7;5947:6;5936:9;5932:22;5914:50;:::i;5975:322::-;6052:6;6060;6068;6121:2;6109:9;6100:7;6096:23;6092:32;6089:52;;;6137:1;6134;6127:12;6089:52;6173:9;6160:23;6150:33;;6202:38;6236:2;6225:9;6221:18;6202:38;:::i;6302:347::-;6367:6;6375;6428:2;6416:9;6407:7;6403:23;6399:32;6396:52;;;6444:1;6441;6434:12;6396:52;6467:29;6486:9;6467:29;:::i;:::-;6457:39;;6546:2;6535:9;6531:18;6518:32;6593:5;6586:13;6579:21;6572:5;6569:32;6559:60;;6615:1;6612;6605:12;6559:60;6638:5;6628:15;;;6302:347;;;;;:::o;6654:626::-;6751:6;6759;6812:2;6800:9;6791:7;6787:23;6783:32;6780:52;;;6828:1;6825;6818:12;6780:52;6868:9;6855:23;-1:-1:-1;;;;;6938:2:644;6930:6;6927:14;6924:34;;;6954:1;6951;6944:12;6924:34;6992:6;6981:9;6977:22;6967:32;;7037:7;7030:4;7026:2;7022:13;7018:27;7008:55;;7059:1;7056;7049:12;7008:55;7099:2;7086:16;7125:2;7117:6;7114:14;7111:34;;;7141:1;7138;7131:12;7111:34;7194:7;7189:2;7179:6;7176:1;7172:14;7168:2;7164:23;7160:32;7157:45;7154:65;;;7215:1;7212;7205:12;7154:65;7246:2;7238:11;;;;;7268:6;;-1:-1:-1;6654:626:644;;-1:-1:-1;;;;6654:626:644:o;7285:801::-;7445:4;7474:2;7514;7503:9;7499:18;7544:2;7533:9;7526:21;7567:6;7602;7596:13;7633:6;7625;7618:22;7671:2;7660:9;7656:18;7649:25;;7733:2;7723:6;7720:1;7716:14;7705:9;7701:30;7697:39;7683:53;;7771:2;7763:6;7759:15;7792:1;7802:255;7816:6;7813:1;7810:13;7802:255;;;7909:2;7905:7;7893:9;7885:6;7881:22;7877:36;7872:3;7865:49;7937:40;7970:6;7961;7955:13;7937:40;:::i;:::-;7927:50;-1:-1:-1;8035:12:644;;;;8000:15;;;;7838:1;7831:9;7802:255;;;-1:-1:-1;8074:6:644;;7285:801;-1:-1:-1;;;;;;;7285:801:644:o;8091:538::-;8186:6;8194;8202;8210;8263:3;8251:9;8242:7;8238:23;8234:33;8231:53;;;8280:1;8277;8270:12;8231:53;8303:29;8322:9;8303:29;:::i;:::-;8293:39;;8351:38;8385:2;8374:9;8370:18;8351:38;:::i;:::-;8341:48;;8436:2;8425:9;8421:18;8408:32;8398:42;;8491:2;8480:9;8476:18;8463:32;-1:-1:-1;;;;;8510:6:644;8507:30;8504:50;;;8550:1;8547;8540:12;8504:50;8573;8615:7;8606:6;8595:9;8591:22;8573:50;:::i;8634:260::-;8702:6;8710;8763:2;8751:9;8742:7;8738:23;8734:32;8731:52;;;8779:1;8776;8769:12;8731:52;8802:29;8821:9;8802:29;:::i;:::-;8792:39;;8850:38;8884:2;8873:9;8869:18;8850:38;:::i;:::-;8840:48;;8634:260;;;;;:::o;8899:347::-;9101:2;9083:21;;;9140:2;9120:18;;;9113:30;-1:-1:-1;;;9174:2:644;9159:18;;9152:53;9237:2;9222:18;;8899:347::o;9251:380::-;9330:1;9326:12;;;;9373;;;9394:61;;9448:4;9440:6;9436:17;9426:27;;9394:61;9501:2;9493:6;9490:14;9470:18;9467:38;9464:161;;;9547:10;9542:3;9538:20;9535:1;9528:31;9582:4;9579:1;9572:15;9610:4;9607:1;9600:15;9464:161;;9251:380;;;:::o;9636:338::-;9838:2;9820:21;;;9877:2;9857:18;;;9850:30;-1:-1:-1;;;9911:2:644;9896:18;;9889:44;9965:2;9950:18;;9636:338::o;10321:127::-;10382:10;10377:3;10373:20;10370:1;10363:31;10413:4;10410:1;10403:15;10437:4;10434:1;10427:15;10453:127;10514:10;10509:3;10505:20;10502:1;10495:31;10545:4;10542:1;10535:15;10569:4;10566:1;10559:15;10585:168;10625:7;10691:1;10687;10683:6;10679:14;10676:1;10673:21;10668:1;10661:9;10654:17;10650:45;10647:71;;;10698:18;;:::i;:::-;-1:-1:-1;10738:9:644;;10585:168::o;10758:127::-;10819:10;10814:3;10810:20;10807:1;10800:31;10850:4;10847:1;10840:15;10874:4;10871:1;10864:15;10890:120;10930:1;10956;10946:35;;10961:18;;:::i;:::-;-1:-1:-1;10995:9:644;;10890:120::o;11015:521::-;11092:4;11098:6;11158:11;11145:25;11252:2;11248:7;11237:8;11221:14;11217:29;11213:43;11193:18;11189:68;11179:96;;11271:1;11268;11261:12;11179:96;11298:33;;11350:20;;;-1:-1:-1;;;;;;11382:30:644;;11379:50;;;11425:1;11422;11415:12;11379:50;11458:4;11446:17;;-1:-1:-1;11489:14:644;11485:27;;;11475:38;;11472:58;;;11526:1;11523;11516:12;11472:58;11015:521;;;;;:::o;11541:135::-;11580:3;-1:-1:-1;;11601:17:644;;11598:43;;;11621:18;;:::i;:::-;-1:-1:-1;11668:1:644;11657:13;;11541:135::o;11681:470::-;11860:3;11898:6;11892:13;11914:53;11960:6;11955:3;11948:4;11940:6;11936:17;11914:53;:::i;:::-;12030:13;;11989:16;;;;12052:57;12030:13;11989:16;12086:4;12074:17;;12052:57;:::i;:::-;12125:20;;11681:470;-1:-1:-1;;;;11681:470:644:o;12500:339::-;12702:2;12684:21;;;12741:2;12721:18;;;12714:30;-1:-1:-1;;;12775:2:644;12760:18;;12753:45;12830:2;12815:18;;12500:339::o;12844:128::-;12884:3;12915:1;12911:6;12908:1;12905:13;12902:39;;;12921:18;;:::i;:::-;-1:-1:-1;12957:9:644;;12844:128::o;12977:383::-;13174:2;13163:9;13156:21;13137:4;13200:45;13241:2;13230:9;13226:18;13218:6;13200:45;:::i;:::-;13293:9;13285:6;13281:22;13276:2;13265:9;13261:18;13254:50;13321:33;13347:6;13339;13321:33;:::i;:::-;13313:41;12977:383;-1:-1:-1;;;;;12977:383:644:o;13365:489::-;-1:-1:-1;;;;;13634:15:644;;;13616:34;;13686:15;;13681:2;13666:18;;13659:43;13733:2;13718:18;;13711:34;;;13781:3;13776:2;13761:18;;13754:31;;;13559:4;;13802:46;;13828:19;;13820:6;13802:46;:::i;13859:249::-;13928:6;13981:2;13969:9;13960:7;13956:23;13952:32;13949:52;;;13997:1;13994;13987:12;13949:52;14029:9;14023:16;14048:30;14072:5;14048:30;:::i;14457:125::-;14497:4;14525:1;14522;14519:8;14516:34;;;14530:18;;:::i;:::-;-1:-1:-1;14567:9:644;;14457:125::o;14587:112::-;14619:1;14645;14635:35;;14650:18;;:::i;:::-;-1:-1:-1;14684:9:644;;14587:112::o;15111:274::-;15240:3;15278:6;15272:13;15294:53;15340:6;15335:3;15328:4;15320:6;15316:17;15294:53;:::i;:::-;15363:16;;;;;15111:274;-1:-1:-1;;15111:274:644:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "batchFrozen(uint256)": "83040532",
    "batchMintTo(address,uint256,string,bytes)": "754a81d9",
    "burn(uint256)": "42966c68",
    "contractURI()": "e8a3d485",
    "getApproved(uint256)": "081812fc",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isApprovedOrOwner(address,uint256)": "430c2081",
    "mintTo(address,string)": "0075a317",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToMint()": "3b1475a7",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "totalSupply()": "18160ddd",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApprovedOrOwnerOf\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchMintTo(address,uint256,string,bytes)\":{\"details\":\"The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\",\"params\":{\"_baseURI\":\"The baseURI for the `n` number of NFTs minted. The metadata for each NFT is `baseURI/tokenId`\",\"_data\":\"Additional data to pass along during the minting of the NFT.\",\"_quantity\":\"The number of NFTs to mint.\",\"_to\":\"The recipient of the NFT to mint.\"}},\"burn(uint256)\":{\"details\":\"ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\",\"params\":{\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"constructor\":{\"params\":{\"_defaultAdmin\":\"The default admin of the contract.\",\"_name\":\"The name of the contract.\",\"_royaltyBps\":\"The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)\",\"_royaltyRecipient\":\"The address to receive royalties.\",\"_symbol\":\"The symbol of the contract.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"Index of the desired batch in batchIds array.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isApprovedOrOwner(address,uint256)\":{\"params\":{\"_operator\":\"The address to check.\",\"_tokenId\":\"The tokenId of the NFT to check.\"},\"returns\":{\"isApprovedOrOwnerOf\":\"Whether the given address is approved to transfer the given NFT.\"}},\"mintTo(address,string)\":{\"details\":\"The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\",\"params\":{\"_to\":\"The recipient of the NFT to mint.\",\"_tokenURI\":\"The full metadata URI for the NFT minted.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See `BatchMintMetadata` for handling of metadata in this contract.\",\"params\":{\"_tokenId\":\"The tokenId of an NFT.\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"notice\":\"So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"}},\"kind\":\"user\",\"methods\":{\"batchMintTo(address,uint256,string,bytes)\":{\"notice\":\"Lets an authorized address mint multiple NFTs at once to a recipient.\"},\"burn(uint256)\":{\"notice\":\"Lets an owner or approved operator burn the NFT of the given tokenId.\"},\"constructor\":{\"notice\":\"Initializes the contract during construction.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens at the given index.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"isApprovedOrOwner(address,uint256)\":{\"notice\":\"Returns whether a given address is the owner, or approved to transfer an NFT.\"},\"mintTo(address,string)\":{\"notice\":\"Lets an authorized address mint an NFT to a recipient.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the metadata URI for an NFT.\"}},\"notice\":\"The `ERC721Base` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.  It includes the following additions to standard ERC721 logic:      - Ability to mint NFTs via the provided `mint` function.      - Contract metadata for royalty support on platforms such as OpenSea that use        off-chain information to distribute roaylties.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2981 compliance for royalty support on NFT marketplaces.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC721Base.sol\":\"ERC721Base\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC721Base.sol\":{\"keccak256\":\"0x14ed29d51519d2c1d9d175f924b01408bd5e31449b6cf1814d6b879af838042e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4a6059478a5c10426d139c2a674300135921927ee0d322582fba0625882f34ea\",\"dweb:/ipfs/QmesLYAngRgJJPzLFMsKfgueTBTmFHREv6si6BsRNiqyu9\"]},\"contracts/eip/ERC165.sol\":{\"keccak256\":\"0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c\",\"dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr\"]},\"contracts/eip/ERC721AVirtualApprove.sol\":{\"keccak256\":\"0xbc6fe5974d321406155a86d7f29748cad13fe632b5012e2d4979ccf238538516\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d80796f25af8c6507cd1f663c040d4e0c4b09f9d03544b50ead0d36cbbd5ea22\",\"dweb:/ipfs/QmPA5KLaxvbLbPbovSvMMgpj3H2Kj6kUU3s2V5qsgpfqGA\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf\",\"dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He\"]},\"contracts/eip/interface/IERC721.sol\":{\"keccak256\":\"0xbd9f2dd131e8f1e4e50b1b116eae917510ab9bf5d4356de37c5daf4cffdfa049\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ac3530b317083464271b100de1976ed9179b9e7d5a4fc3d992c61c80676a676\",\"dweb:/ipfs/QmUq1AVzymvp7Y8H1eypGEGU4icjzn5vDSvKMNpXnoaeMT\"]},\"contracts/eip/interface/IERC721A.sol\":{\"keccak256\":\"0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8\",\"dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5\"]},\"contracts/eip/interface/IERC721Metadata.sol\":{\"keccak256\":\"0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e\",\"dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4\"]},\"contracts/eip/interface/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0x1d1ee64f8456dc8b4cdd096e27ac4687babd485f49a728146126744d67f25f2f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9e01b0d51bdccbcce9095f606c8624926b518c1385c1349c41896236a0345ee0\",\"dweb:/ipfs/QmWHTbztwRf9Fyq4617MrVSqF8o7UXMT5nFe6epQ92N6L9\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2\",\"dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485\",\"dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b\",\"dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8\"]},\"contracts/external-deps/openzeppelin/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/lib/TWAddress.sol\":{\"keccak256\":\"0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e\",\"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6\"]},\"contracts/lib/TWStrings.sol\":{\"keccak256\":\"0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9\",\"dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalToCurrentOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApproveToCaller"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BalanceQueryForZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintZeroQuantity"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OwnerQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferFromIncorrectOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToNonERC721ReceiverImplementer"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "URIQueryForNonexistentToken"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchMetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "MetadataFrozen",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "batchFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURI",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchMintTo"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedOrOwner",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isApprovedOrOwnerOf",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_tokenURI",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mintTo"
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "batchMintTo(address,uint256,string,bytes)": {
            "details": "The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.",
            "params": {
              "_baseURI": "The baseURI for the `n` number of NFTs minted. The metadata for each NFT is `baseURI/tokenId`",
              "_data": "Additional data to pass along during the minting of the NFT.",
              "_quantity": "The number of NFTs to mint.",
              "_to": "The recipient of the NFT to mint."
            }
          },
          "burn(uint256)": {
            "details": "ERC721A's `_burn(uint256,bool)` internally checks for token approvals.",
            "params": {
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "constructor": {
            "params": {
              "_defaultAdmin": "The default admin of the contract.",
              "_name": "The name of the contract.",
              "_royaltyBps": "The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)",
              "_royaltyRecipient": "The address to receive royalties.",
              "_symbol": "The symbol of the contract."
            }
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "Index of the desired batch in batchIds array."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "isApprovedOrOwner(address,uint256)": {
            "params": {
              "_operator": "The address to check.",
              "_tokenId": "The tokenId of the NFT to check."
            },
            "returns": {
              "isApprovedOrOwnerOf": "Whether the given address is approved to transfer the given NFT."
            }
          },
          "mintTo(address,string)": {
            "details": "The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.",
            "params": {
              "_to": "The recipient of the NFT to mint.",
              "_tokenURI": "The full metadata URI for the NFT minted."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See `BatchMintMetadata` for handling of metadata in this contract.",
            "params": {
              "_tokenId": "The tokenId of an NFT."
            }
          },
          "totalSupply()": {
            "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "batchMintTo(address,uint256,string,bytes)": {
            "notice": "Lets an authorized address mint multiple NFTs at once to a recipient."
          },
          "burn(uint256)": {
            "notice": "Lets an owner or approved operator burn the NFT of the given tokenId."
          },
          "constructor": {
            "notice": "Initializes the contract during construction."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens at the given index."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "isApprovedOrOwner(address,uint256)": {
            "notice": "Returns whether a given address is the owner, or approved to transfer an NFT."
          },
          "mintTo(address,string)": {
            "notice": "Lets an authorized address mint an NFT to a recipient."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "tokenURI(uint256)": {
            "notice": "Returns the metadata URI for an NFT."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC721Base.sol": "ERC721Base"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC721Base.sol": {
        "keccak256": "0x14ed29d51519d2c1d9d175f924b01408bd5e31449b6cf1814d6b879af838042e",
        "urls": [
          "bzz-raw://4a6059478a5c10426d139c2a674300135921927ee0d322582fba0625882f34ea",
          "dweb:/ipfs/QmesLYAngRgJJPzLFMsKfgueTBTmFHREv6si6BsRNiqyu9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC165.sol": {
        "keccak256": "0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b",
        "urls": [
          "bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c",
          "dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr"
        ],
        "license": "MIT"
      },
      "contracts/eip/ERC721AVirtualApprove.sol": {
        "keccak256": "0xbc6fe5974d321406155a86d7f29748cad13fe632b5012e2d4979ccf238538516",
        "urls": [
          "bzz-raw://d80796f25af8c6507cd1f663c040d4e0c4b09f9d03544b50ead0d36cbbd5ea22",
          "dweb:/ipfs/QmPA5KLaxvbLbPbovSvMMgpj3H2Kj6kUU3s2V5qsgpfqGA"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9",
        "urls": [
          "bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf",
          "dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC721.sol": {
        "keccak256": "0xbd9f2dd131e8f1e4e50b1b116eae917510ab9bf5d4356de37c5daf4cffdfa049",
        "urls": [
          "bzz-raw://8ac3530b317083464271b100de1976ed9179b9e7d5a4fc3d992c61c80676a676",
          "dweb:/ipfs/QmUq1AVzymvp7Y8H1eypGEGU4icjzn5vDSvKMNpXnoaeMT"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721A.sol": {
        "keccak256": "0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd",
        "urls": [
          "bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8",
          "dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721Metadata.sol": {
        "keccak256": "0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb",
        "urls": [
          "bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e",
          "dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC721Receiver.sol": {
        "keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
        "urls": [
          "bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
          "dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
        ],
        "license": "MIT"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0x1d1ee64f8456dc8b4cdd096e27ac4687babd485f49a728146126744d67f25f2f",
        "urls": [
          "bzz-raw://9e01b0d51bdccbcce9095f606c8624926b518c1385c1349c41896236a0345ee0",
          "dweb:/ipfs/QmWHTbztwRf9Fyq4617MrVSqF8o7UXMT5nFe6epQ92N6L9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55",
        "urls": [
          "bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2",
          "dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350",
        "urls": [
          "bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485",
          "dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385",
        "urls": [
          "bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b",
          "dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/lib/TWAddress.sol": {
        "keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
        "urls": [
          "bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
          "dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWStrings.sol": {
        "keccak256": "0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8",
        "urls": [
          "bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9",
          "dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt"
        ],
        "license": "Apache 2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC721Base.sol",
    "id": 3977,
    "exportedSymbols": {
      "BatchMintMetadata": [
        17299
      ],
      "ContractMetadata": [
        17526
      ],
      "ERC721A": [
        12224
      ],
      "ERC721Base": [
        3976
      ],
      "IContractMetadata": [
        32437
      ],
      "IERC165": [
        13829
      ],
      "IERC2981": [
        13973
      ],
      "IMulticall": [
        32926
      ],
      "IOwnable": [
        33183
      ],
      "IRoyalty": [
        33409
      ],
      "Multicall": [
        20595
      ],
      "Ownable": [
        21153
      ],
      "Royalty": [
        22395
      ],
      "TWAddress": [
        64152
      ],
      "TWStrings": [
        64852
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:8345:11",
    "nodes": [
      {
        "id": 3646,
        "nodeType": "PragmaDirective",
        "src": "39:23:11",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 3648,
        "nodeType": "ImportDirective",
        "src": "86:59:11",
        "nodes": [],
        "absolutePath": "contracts/eip/ERC721AVirtualApprove.sol",
        "file": "../eip/ERC721AVirtualApprove.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3977,
        "sourceUnit": 12225,
        "symbolAliases": [
          {
            "foreign": {
              "id": 3647,
              "name": "ERC721A",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 12224,
              "src": "95:7:11",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_ERC721A_$12224_$",
                "typeString": "type(contract ERC721A)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 3649,
        "nodeType": "ImportDirective",
        "src": "147:43:11",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3977,
        "sourceUnit": 17527,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3650,
        "nodeType": "ImportDirective",
        "src": "191:36:11",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3977,
        "sourceUnit": 20596,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3651,
        "nodeType": "ImportDirective",
        "src": "228:34:11",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3977,
        "sourceUnit": 21154,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3652,
        "nodeType": "ImportDirective",
        "src": "263:34:11",
        "nodes": [],
        "absolutePath": "contracts/extension/Royalty.sol",
        "file": "../extension/Royalty.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3977,
        "sourceUnit": 22396,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3653,
        "nodeType": "ImportDirective",
        "src": "298:44:11",
        "nodes": [],
        "absolutePath": "contracts/extension/BatchMintMetadata.sol",
        "file": "../extension/BatchMintMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3977,
        "sourceUnit": 17300,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3654,
        "nodeType": "ImportDirective",
        "src": "344:30:11",
        "nodes": [],
        "absolutePath": "contracts/lib/TWStrings.sol",
        "file": "../lib/TWStrings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3977,
        "sourceUnit": 64853,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3976,
        "nodeType": "ContractDefinition",
        "src": "1077:7306:11",
        "nodes": [
          {
            "id": 3670,
            "nodeType": "UsingForDirective",
            "src": "1180:28:11",
            "nodes": [],
            "libraryName": {
              "id": 3668,
              "name": "TWStrings",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 64852,
              "src": "1186:9:11"
            },
            "typeName": {
              "id": 3669,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1200:7:11",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 3674,
            "nodeType": "VariableDeclaration",
            "src": "1390:42:11",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "fullURI",
            "nameLocation": "1425:7:11",
            "scope": 3976,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
              "typeString": "mapping(uint256 => string)"
            },
            "typeName": {
              "id": 3673,
              "keyType": {
                "id": 3671,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1398:7:11",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1390:26:11",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                "typeString": "mapping(uint256 => string)"
              },
              "valueType": {
                "id": 3672,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "1409:6:11",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "visibility": "private"
          },
          {
            "id": 3702,
            "nodeType": "FunctionDefinition",
            "src": "2064:306:11",
            "nodes": [],
            "body": {
              "id": 3701,
              "nodeType": "Block",
              "src": "2261:109:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3693,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3677,
                        "src": "2283:13:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 3692,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21146,
                      "src": "2271:11:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 3694,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2271:26:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3695,
                  "nodeType": "ExpressionStatement",
                  "src": "2271:26:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3697,
                        "name": "_royaltyRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3683,
                        "src": "2332:17:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3698,
                        "name": "_royaltyBps",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3685,
                        "src": "2351:11:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      ],
                      "id": 3696,
                      "name": "_setupDefaultRoyaltyInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22326,
                      "src": "2307:24:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3699,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2307:56:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3700,
                  "nodeType": "ExpressionStatement",
                  "src": "2307:56:11"
                }
              ]
            },
            "documentation": {
              "id": 3675,
              "nodeType": "StructuredDocumentation",
              "src": "1618:441:11",
              "text": " @notice Initializes the contract during construction.\n @param _defaultAdmin     The default admin of the contract.\n @param _name             The name of the contract.\n @param _symbol           The symbol of the contract.\n @param _royaltyRecipient The address to receive royalties.\n @param _royaltyBps       The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 3688,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3679,
                    "src": "2245:5:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 3689,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3681,
                    "src": "2252:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 3690,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 3687,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 12224,
                  "src": "2237:7:11"
                },
                "nodeType": "ModifierInvocation",
                "src": "2237:23:11"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 3686,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3677,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "2093:13:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3702,
                  "src": "2085:21:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3676,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2085:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3679,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "2130:5:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3702,
                  "src": "2116:19:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3678,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2116:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3681,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "2159:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3702,
                  "src": "2145:21:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3680,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2145:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3683,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "2184:17:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3702,
                  "src": "2176:25:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3682,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2176:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3685,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "2219:11:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3702,
                  "src": "2211:19:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 3684,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2211:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2075:161:11"
            },
            "returnParameters": {
              "id": 3691,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2261:0:11"
            },
            "scope": 3976,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 3733,
            "nodeType": "FunctionDefinition",
            "src": "2662:444:11",
            "nodes": [],
            "body": {
              "id": 3732,
              "nodeType": "Block",
              "src": "2771:335:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 3730,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 3723,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 3719,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 3715,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3713,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3705,
                            "src": "2800:11:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783031666663396137",
                            "id": 3714,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2815:10:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_33540519_by_1",
                              "typeString": "int_const 33540519"
                            },
                            "value": "0x01ffc9a7"
                          },
                          "src": "2800:25:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 3718,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3716,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3705,
                            "src": "2875:11:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783830616335386364",
                            "id": 3717,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2890:10:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2158778573_by_1",
                              "typeString": "int_const 2158778573"
                            },
                            "value": "0x80ac58cd"
                          },
                          "src": "2875:25:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "2800:100:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 3722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 3720,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3705,
                          "src": "2950:11:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30783562356531333966",
                          "id": 3721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2965:10:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1532892063_by_1",
                            "typeString": "int_const 1532892063"
                          },
                          "value": "0x5b5e139f"
                        },
                        "src": "2950:25:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "2800:175:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "id": 3729,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 3724,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3705,
                        "src": "3033:11:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3726,
                              "name": "IERC2981",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13973,
                              "src": "3053:8:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$13973_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$13973_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            ],
                            "id": 3725,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "3048:4:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 3727,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3048:14:11",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_contract$_IERC2981_$13973",
                            "typeString": "type(contract IERC2981)"
                          }
                        },
                        "id": 3728,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "interfaceId",
                        "nodeType": "MemberAccess",
                        "src": "3048:26:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "src": "3033:41:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2800:274:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3712,
                  "id": 3731,
                  "nodeType": "Return",
                  "src": "2781:293:11"
                }
              ]
            },
            "baseFunctions": [
              10989,
              13828
            ],
            "documentation": {
              "id": 3703,
              "nodeType": "StructuredDocumentation",
              "src": "2556:101:11",
              "text": " @dev See ERC165: https://eips.ethereum.org/EIPS/eip-165\n @inheritdoc IERC165"
            },
            "functionSelector": "01ffc9a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "2671:17:11",
            "overrides": {
              "id": 3709,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 3707,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 12224,
                  "src": "2738:7:11"
                },
                {
                  "id": 3708,
                  "name": "IERC165",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 13829,
                  "src": "2747:7:11"
                }
              ],
              "src": "2729:26:11"
            },
            "parameters": {
              "id": 3706,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3705,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "2696:11:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3733,
                  "src": "2689:18:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 3704,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "2689:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2688:20:11"
            },
            "returnParameters": {
              "id": 3712,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3711,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3733,
                  "src": "2765:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3710,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2765:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2764:6:11"
            },
            "scope": 3976,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3777,
            "nodeType": "FunctionDefinition",
            "src": "3520:379:11",
            "nodes": [],
            "body": {
              "id": 3776,
              "nodeType": "Block",
              "src": "3609:290:11",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    3743
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 3743,
                      "mutability": "mutable",
                      "name": "fullUriForToken",
                      "nameLocation": "3633:15:11",
                      "nodeType": "VariableDeclaration",
                      "scope": 3776,
                      "src": "3619:29:11",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3742,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3619:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 3747,
                  "initialValue": {
                    "baseExpression": {
                      "id": 3744,
                      "name": "fullURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3674,
                      "src": "3651:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                        "typeString": "mapping(uint256 => string storage ref)"
                      }
                    },
                    "id": 3746,
                    "indexExpression": {
                      "id": 3745,
                      "name": "_tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3736,
                      "src": "3659:8:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3651:17:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3619:49:11"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 3754,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 3750,
                            "name": "fullUriForToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3743,
                            "src": "3688:15:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 3749,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3682:5:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 3748,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "3682:5:11",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 3751,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3682:22:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 3752,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3682:29:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 3753,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3714:1:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3682:33:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3758,
                  "nodeType": "IfStatement",
                  "src": "3678:86:11",
                  "trueBody": {
                    "id": 3757,
                    "nodeType": "Block",
                    "src": "3717:47:11",
                    "statements": [
                      {
                        "expression": {
                          "id": 3755,
                          "name": "fullUriForToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3743,
                          "src": "3738:15:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 3741,
                        "id": 3756,
                        "nodeType": "Return",
                        "src": "3731:22:11"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    3760
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 3760,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "3788:8:11",
                      "nodeType": "VariableDeclaration",
                      "scope": 3776,
                      "src": "3774:22:11",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3759,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3774:6:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 3764,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 3762,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3736,
                        "src": "3811:8:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3761,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17141,
                      "src": "3799:11:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 3763,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3799:21:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3774:46:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 3769,
                            "name": "batchUri",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3760,
                            "src": "3861:8:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 3770,
                                "name": "_tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3736,
                                "src": "3871:8:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 3771,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "toString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 64734,
                              "src": "3871:17:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 3772,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3871:19:11",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 3767,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3844:3:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 3768,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "3844:16:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 3773,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3844:47:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 3766,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3837:6:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 3765,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3837:6:11",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 3774,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3837:55:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 3741,
                  "id": 3775,
                  "nodeType": "Return",
                  "src": "3830:62:11"
                }
              ]
            },
            "baseFunctions": [
              11233
            ],
            "documentation": {
              "id": 3734,
              "nodeType": "StructuredDocumentation",
              "src": "3298:217:11",
              "text": "  @notice         Returns the metadata URI for an NFT.\n  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n  @param _tokenId The tokenId of an NFT."
            },
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "3529:8:11",
            "overrides": {
              "id": 3738,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3576:8:11"
            },
            "parameters": {
              "id": 3737,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3736,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3546:8:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3777,
                  "src": "3538:16:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3735,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3538:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3537:18:11"
            },
            "returnParameters": {
              "id": 3741,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3740,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3777,
                  "src": "3594:13:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3739,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3594:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3593:15:11"
            },
            "scope": 3976,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3804,
            "nodeType": "FunctionDefinition",
            "src": "4435:217:11",
            "nodes": [],
            "body": {
              "id": 3803,
              "nodeType": "Block",
              "src": "4504:148:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 3786,
                          "name": "_canMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3947,
                          "src": "4522:8:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 3787,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4522:10:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a656420746f206d696e742e",
                        "id": 3788,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4534:25:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        },
                        "value": "Not authorized to mint."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        }
                      ],
                      "id": 3785,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4514:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4514:46:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3790,
                  "nodeType": "ExpressionStatement",
                  "src": "4514:46:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 3792,
                          "name": "nextTokenIdToMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3857,
                          "src": "4583:17:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 3793,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4583:19:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 3794,
                        "name": "_tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3782,
                        "src": "4604:9:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 3791,
                      "name": "_setTokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3920,
                      "src": "4570:12:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 3795,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4570:44:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3796,
                  "nodeType": "ExpressionStatement",
                  "src": "4570:44:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3798,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3780,
                        "src": "4634:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 3799,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4639:1:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "hexValue": "",
                        "id": 3800,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4642:2:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 3797,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11474,
                        11637
                      ],
                      "referencedDeclaration": 11637,
                      "src": "4624:9:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,bytes memory)"
                      }
                    },
                    "id": 3801,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4624:21:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3802,
                  "nodeType": "ExpressionStatement",
                  "src": "4624:21:11"
                }
              ]
            },
            "documentation": {
              "id": 3778,
              "nodeType": "StructuredDocumentation",
              "src": "4086:344:11",
              "text": "  @notice          Lets an authorized address mint an NFT to a recipient.\n  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\n  @param _to       The recipient of the NFT to mint.\n  @param _tokenURI The full metadata URI for the NFT minted."
            },
            "functionSelector": "0075a317",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintTo",
            "nameLocation": "4444:6:11",
            "parameters": {
              "id": 3783,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3780,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "4459:3:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3804,
                  "src": "4451:11:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3779,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4451:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3782,
                  "mutability": "mutable",
                  "name": "_tokenURI",
                  "nameLocation": "4478:9:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3804,
                  "src": "4464:23:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3781,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4464:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4450:38:11"
            },
            "returnParameters": {
              "id": 3784,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4504:0:11"
            },
            "scope": 3976,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3836,
            "nodeType": "FunctionDefinition",
            "src": "5213:325:11",
            "nodes": [],
            "body": {
              "id": 3835,
              "nodeType": "Block",
              "src": "5363:175:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 3817,
                          "name": "_canMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3947,
                          "src": "5381:8:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 3818,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5381:10:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a656420746f206d696e742e",
                        "id": 3819,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5393:25:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        },
                        "value": "Not authorized to mint."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        }
                      ],
                      "id": 3816,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5373:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3820,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5373:46:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3821,
                  "nodeType": "ExpressionStatement",
                  "src": "5373:46:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 3823,
                          "name": "nextTokenIdToMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3857,
                          "src": "5448:17:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 3824,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5448:19:11",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 3825,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3809,
                        "src": "5469:9:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 3826,
                        "name": "_baseURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3811,
                        "src": "5480:8:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 3822,
                      "name": "_batchMintMetadata",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17298,
                      "src": "5429:18:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256,uint256,string memory) returns (uint256,uint256)"
                      }
                    },
                    "id": 3827,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5429:60:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "id": 3828,
                  "nodeType": "ExpressionStatement",
                  "src": "5429:60:11"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3830,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3807,
                        "src": "5509:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3831,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3809,
                        "src": "5514:9:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 3832,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3813,
                        "src": "5525:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 3829,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11474,
                        11637
                      ],
                      "referencedDeclaration": 11637,
                      "src": "5499:9:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,bytes memory)"
                      }
                    },
                    "id": 3833,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5499:32:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3834,
                  "nodeType": "ExpressionStatement",
                  "src": "5499:32:11"
                }
              ]
            },
            "documentation": {
              "id": 3805,
              "nodeType": "StructuredDocumentation",
              "src": "4658:550:11",
              "text": "  @notice          Lets an authorized address mint multiple NFTs at once to a recipient.\n  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\n  @param _to       The recipient of the NFT to mint.\n  @param _quantity The number of NFTs to mint.\n  @param _baseURI  The baseURI for the `n` number of NFTs minted. The metadata for each NFT is `baseURI/tokenId`\n  @param _data     Additional data to pass along during the minting of the NFT."
            },
            "functionSelector": "754a81d9",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "batchMintTo",
            "nameLocation": "5222:11:11",
            "parameters": {
              "id": 3814,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3807,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "5251:3:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3836,
                  "src": "5243:11:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3806,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5243:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3809,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "5272:9:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3836,
                  "src": "5264:17:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3808,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5264:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3811,
                  "mutability": "mutable",
                  "name": "_baseURI",
                  "nameLocation": "5305:8:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3836,
                  "src": "5291:22:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3810,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "5291:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3813,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "5336:5:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3836,
                  "src": "5323:18:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 3812,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5323:5:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5233:114:11"
            },
            "returnParameters": {
              "id": 3815,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5363:0:11"
            },
            "scope": 3976,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3848,
            "nodeType": "FunctionDefinition",
            "src": "5812:87:11",
            "nodes": [],
            "body": {
              "id": 3847,
              "nodeType": "Block",
              "src": "5861:38:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3843,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3839,
                        "src": "5877:8:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "74727565",
                        "id": 3844,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5887:4:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3842,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11937,
                        12119
                      ],
                      "referencedDeclaration": 12119,
                      "src": "5871:5:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
                        "typeString": "function (uint256,bool)"
                      }
                    },
                    "id": 3845,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5871:21:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3846,
                  "nodeType": "ExpressionStatement",
                  "src": "5871:21:11"
                }
              ]
            },
            "documentation": {
              "id": 3837,
              "nodeType": "StructuredDocumentation",
              "src": "5544:263:11",
              "text": "  @notice         Lets an owner or approved operator burn the NFT of the given tokenId.\n  @dev            ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\n  @param _tokenId The tokenId of the NFT to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "5821:4:11",
            "parameters": {
              "id": 3840,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3839,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "5834:8:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3848,
                  "src": "5826:16:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3838,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5826:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5825:18:11"
            },
            "returnParameters": {
              "id": 3841,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5861:0:11"
            },
            "scope": 3976,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 3857,
            "nodeType": "FunctionDefinition",
            "src": "6154:104:11",
            "nodes": [],
            "body": {
              "id": 3856,
              "nodeType": "Block",
              "src": "6221:37:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 3854,
                    "name": "_currentIndex",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10874,
                    "src": "6238:13:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 3853,
                  "id": 3855,
                  "nodeType": "Return",
                  "src": "6231:20:11"
                }
              ]
            },
            "documentation": {
              "id": 3849,
              "nodeType": "StructuredDocumentation",
              "src": "6083:66:11",
              "text": "@notice The tokenId assigned to the next new NFT to be minted."
            },
            "functionSelector": "3b1475a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToMint",
            "nameLocation": "6163:17:11",
            "parameters": {
              "id": 3850,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6180:2:11"
            },
            "returnParameters": {
              "id": 3853,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3852,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3857,
                  "src": "6212:7:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3851,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6212:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6211:9:11"
            },
            "scope": 3976,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3892,
            "nodeType": "FunctionDefinition",
            "src": "6590:357:11",
            "nodes": [],
            "body": {
              "id": 3891,
              "nodeType": "Block",
              "src": "6745:202:11",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    3868
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 3868,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "6763:5:11",
                      "nodeType": "VariableDeclaration",
                      "scope": 3891,
                      "src": "6755:13:11",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 3867,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6755:7:11",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 3872,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 3870,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3862,
                        "src": "6779:8:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3869,
                      "name": "ownerOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11170,
                      "src": "6771:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 3871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6771:17:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6755:33:11"
                },
                {
                  "expression": {
                    "id": 3889,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 3873,
                      "name": "isApprovedOrOwnerOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3865,
                      "src": "6798:19:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 3887,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 3881,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3876,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3874,
                                "name": "_operator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3860,
                                "src": "6821:9:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 3875,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3868,
                                "src": "6834:5:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "6821:18:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "id": 3878,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3868,
                                  "src": "6872:5:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 3879,
                                  "name": "_operator",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3860,
                                  "src": "6879:9:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 3877,
                                "name": "isApprovedForAll",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11362,
                                "src": "6855:16:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address,address) view returns (bool)"
                                }
                              },
                              "id": 3880,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6855:34:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "6821:68:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 3886,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "id": 3883,
                                  "name": "_tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3862,
                                  "src": "6917:8:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 3882,
                                "name": "getApproved",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11310,
                                "src": "6905:11:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                  "typeString": "function (uint256) view returns (address)"
                                }
                              },
                              "id": 3884,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6905:21:11",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 3885,
                              "name": "_operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3860,
                              "src": "6930:9:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "6905:34:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "6821:118:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 3888,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "6820:120:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "6798:142:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3890,
                  "nodeType": "ExpressionStatement",
                  "src": "6798:142:11"
                }
              ]
            },
            "documentation": {
              "id": 3858,
              "nodeType": "StructuredDocumentation",
              "src": "6264:321:11",
              "text": " @notice Returns whether a given address is the owner, or approved to transfer an NFT.\n @param _operator The address to check.\n @param _tokenId  The tokenId of the NFT to check.\n @return isApprovedOrOwnerOf Whether the given address is approved to transfer the given NFT."
            },
            "functionSelector": "430c2081",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isApprovedOrOwner",
            "nameLocation": "6599:17:11",
            "parameters": {
              "id": 3863,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3860,
                  "mutability": "mutable",
                  "name": "_operator",
                  "nameLocation": "6625:9:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3892,
                  "src": "6617:17:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3859,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6617:7:11",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3862,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "6644:8:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3892,
                  "src": "6636:16:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3861,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6636:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6616:37:11"
            },
            "returnParameters": {
              "id": 3866,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3865,
                  "mutability": "mutable",
                  "name": "isApprovedOrOwnerOf",
                  "nameLocation": "6720:19:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3892,
                  "src": "6715:24:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3864,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6715:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6714:26:11"
            },
            "scope": 3976,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 3920,
            "nodeType": "FunctionDefinition",
            "src": "7360:202:11",
            "nodes": [],
            "body": {
              "id": 3919,
              "nodeType": "Block",
              "src": "7442:120:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3909,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 3903,
                                  "name": "fullURI",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3674,
                                  "src": "7466:7:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                    "typeString": "mapping(uint256 => string storage ref)"
                                  }
                                },
                                "id": 3905,
                                "indexExpression": {
                                  "id": 3904,
                                  "name": "_tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3895,
                                  "src": "7474:8:11",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7466:17:11",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_storage",
                                  "typeString": "string storage ref"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_storage",
                                  "typeString": "string storage ref"
                                }
                              ],
                              "id": 3902,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7460:5:11",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                "typeString": "type(bytes storage pointer)"
                              },
                              "typeName": {
                                "id": 3901,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "7460:5:11",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 3906,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7460:24:11",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes storage pointer"
                            }
                          },
                          "id": 3907,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7460:31:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 3908,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7495:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "7460:36:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "55524920616c726561647920736574",
                        "id": 3910,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7498:17:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_27d33880a42c6c5e26aeadac7f095967881b47de4646734561d17c92845393d6",
                          "typeString": "literal_string \"URI already set\""
                        },
                        "value": "URI already set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_27d33880a42c6c5e26aeadac7f095967881b47de4646734561d17c92845393d6",
                          "typeString": "literal_string \"URI already set\""
                        }
                      ],
                      "id": 3900,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7452:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3911,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7452:64:11",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3912,
                  "nodeType": "ExpressionStatement",
                  "src": "7452:64:11"
                },
                {
                  "expression": {
                    "id": 3917,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 3913,
                        "name": "fullURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3674,
                        "src": "7526:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                          "typeString": "mapping(uint256 => string storage ref)"
                        }
                      },
                      "id": 3915,
                      "indexExpression": {
                        "id": 3914,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3895,
                        "src": "7534:8:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7526:17:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 3916,
                      "name": "_tokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3897,
                      "src": "7546:9:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "7526:29:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 3918,
                  "nodeType": "ExpressionStatement",
                  "src": "7526:29:11"
                }
              ]
            },
            "documentation": {
              "id": 3893,
              "nodeType": "StructuredDocumentation",
              "src": "7150:205:11",
              "text": " @notice Sets the metadata URI for a given tokenId.\n @param _tokenId  The tokenId of the NFT to set the URI for.\n @param _tokenURI The URI to set for the given tokenId."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setTokenURI",
            "nameLocation": "7369:12:11",
            "parameters": {
              "id": 3898,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3895,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "7390:8:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3920,
                  "src": "7382:16:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3894,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7382:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3897,
                  "mutability": "mutable",
                  "name": "_tokenURI",
                  "nameLocation": "7414:9:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 3920,
                  "src": "7400:23:11",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3896,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7400:6:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7381:43:11"
            },
            "returnParameters": {
              "id": 3899,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7442:0:11"
            },
            "scope": 3976,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3934,
            "nodeType": "FunctionDefinition",
            "src": "7658:121:11",
            "nodes": [],
            "body": {
              "id": 3933,
              "nodeType": "Block",
              "src": "7734:45:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3931,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3927,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "7751:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3928,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "7751:10:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3929,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "7765:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3930,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7765:7:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7751:21:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3926,
                  "id": 3932,
                  "nodeType": "Return",
                  "src": "7744:28:11"
                }
              ]
            },
            "baseFunctions": [
              17525
            ],
            "documentation": {
              "id": 3921,
              "nodeType": "StructuredDocumentation",
              "src": "7568:85:11",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "7667:18:11",
            "overrides": {
              "id": 3923,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7710:8:11"
            },
            "parameters": {
              "id": 3922,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7685:2:11"
            },
            "returnParameters": {
              "id": 3926,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3925,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3934,
                  "src": "7728:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3924,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7728:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7727:6:11"
            },
            "scope": 3976,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3947,
            "nodeType": "FunctionDefinition",
            "src": "7868:102:11",
            "nodes": [],
            "body": {
              "id": 3946,
              "nodeType": "Block",
              "src": "7925:45:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3944,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3940,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "7942:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3941,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "7942:10:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3942,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "7956:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3943,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7956:7:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7942:21:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3939,
                  "id": 3945,
                  "nodeType": "Return",
                  "src": "7935:28:11"
                }
              ]
            },
            "documentation": {
              "id": 3935,
              "nodeType": "StructuredDocumentation",
              "src": "7785:78:11",
              "text": "@dev Returns whether a token can be minted in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canMint",
            "nameLocation": "7877:8:11",
            "parameters": {
              "id": 3936,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7885:2:11"
            },
            "returnParameters": {
              "id": 3939,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3938,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3947,
                  "src": "7919:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3937,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7919:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7918:6:11"
            },
            "scope": 3976,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3961,
            "nodeType": "FunctionDefinition",
            "src": "8054:115:11",
            "nodes": [],
            "body": {
              "id": 3960,
              "nodeType": "Block",
              "src": "8124:45:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3958,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3954,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "8141:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3955,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "8141:10:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3956,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "8155:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3957,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8155:7:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "8141:21:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3953,
                  "id": 3959,
                  "nodeType": "Return",
                  "src": "8134:28:11"
                }
              ]
            },
            "baseFunctions": [
              21152
            ],
            "documentation": {
              "id": 3948,
              "nodeType": "StructuredDocumentation",
              "src": "7976:73:11",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "8063:12:11",
            "overrides": {
              "id": 3950,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8100:8:11"
            },
            "parameters": {
              "id": 3949,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8075:2:11"
            },
            "returnParameters": {
              "id": 3953,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3952,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3961,
                  "src": "8118:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3951,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8118:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8117:6:11"
            },
            "scope": 3976,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3975,
            "nodeType": "FunctionDefinition",
            "src": "8260:121:11",
            "nodes": [],
            "body": {
              "id": 3974,
              "nodeType": "Block",
              "src": "8336:45:11",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3972,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3968,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "8353:3:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3969,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "8353:10:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3970,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "8367:5:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3971,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8367:7:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "8353:21:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3967,
                  "id": 3973,
                  "nodeType": "Return",
                  "src": "8346:28:11"
                }
              ]
            },
            "baseFunctions": [
              22394
            ],
            "documentation": {
              "id": 3962,
              "nodeType": "StructuredDocumentation",
              "src": "8175:80:11",
              "text": "@dev Returns whether royalty info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetRoyaltyInfo",
            "nameLocation": "8269:18:11",
            "overrides": {
              "id": 3964,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8312:8:11"
            },
            "parameters": {
              "id": 3963,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8287:2:11"
            },
            "returnParameters": {
              "id": 3967,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3966,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3975,
                  "src": "8330:4:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3965,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8330:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8329:6:11"
            },
            "scope": 3976,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3656,
              "name": "ERC721A",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 12224,
              "src": "1100:7:11"
            },
            "id": 3657,
            "nodeType": "InheritanceSpecifier",
            "src": "1100:7:11"
          },
          {
            "baseName": {
              "id": 3658,
              "name": "ContractMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17526,
              "src": "1109:16:11"
            },
            "id": 3659,
            "nodeType": "InheritanceSpecifier",
            "src": "1109:16:11"
          },
          {
            "baseName": {
              "id": 3660,
              "name": "Multicall",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20595,
              "src": "1127:9:11"
            },
            "id": 3661,
            "nodeType": "InheritanceSpecifier",
            "src": "1127:9:11"
          },
          {
            "baseName": {
              "id": 3662,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21153,
              "src": "1138:7:11"
            },
            "id": 3663,
            "nodeType": "InheritanceSpecifier",
            "src": "1138:7:11"
          },
          {
            "baseName": {
              "id": 3664,
              "name": "Royalty",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 22395,
              "src": "1147:7:11"
            },
            "id": 3665,
            "nodeType": "InheritanceSpecifier",
            "src": "1147:7:11"
          },
          {
            "baseName": {
              "id": 3666,
              "name": "BatchMintMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17299,
              "src": "1156:17:11"
            },
            "id": 3667,
            "nodeType": "InheritanceSpecifier",
            "src": "1156:17:11"
          }
        ],
        "canonicalName": "ERC721Base",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 3655,
          "nodeType": "StructuredDocumentation",
          "src": "376:699:11",
          "text": "  The `ERC721Base` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.\n  It includes the following additions to standard ERC721 logic:\n      - Ability to mint NFTs via the provided `mint` function.\n      - Contract metadata for royalty support on platforms such as OpenSea that use\n        off-chain information to distribute roaylties.\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2981 compliance for royalty support on NFT marketplaces."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          3976,
          17299,
          22395,
          33409,
          13973,
          21153,
          33183,
          20595,
          32926,
          17526,
          32437,
          12224,
          14176,
          14222,
          14105,
          7823,
          13829,
          48483
        ],
        "name": "ERC721Base",
        "nameLocation": "1086:10:11",
        "scope": 3977,
        "usedErrors": [
          14117,
          14120,
          14123,
          14126,
          14129,
          14132,
          14135,
          14138,
          14141,
          14144,
          14147,
          14150,
          14153
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 11
}