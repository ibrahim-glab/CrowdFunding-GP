{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_primarySaleRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "condition",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "resetEligibility",
          "type": "bool"
        }
      ],
      "name": "ClaimConditionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "PrimarySaleRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "votes",
              "type": "uint224"
            }
          ],
          "internalType": "struct ERC20Votes.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "_allowlistProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCondition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaimableSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantityLimitPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "getSupplyClaimedByWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primarySaleRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "_condition",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_saleRecipient",
          "type": "address"
        }
      ],
      "name": "setPrimarySaleRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "_allowlistProof",
          "type": "tuple"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOverride",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6101006040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0523480156200003657600080fd5b5060405162003e2738038062003e27833981016040819052620000599162000423565b8282818181600590805190602001906200007592919062000293565b5080516200008b90600690602084019062000293565b50504660a052503060c052620000a0620000c6565b60805250620000b19050846200015d565b620000bc81620001af565b50505050620004f0565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000f3620001f9565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b6060600580546200020a90620004b3565b80601f01602080910402602001604051908101604052809291908181526020018280546200023890620004b3565b8015620002895780601f106200025d5761010080835404028352916020019162000289565b820191906000526020600020905b8154815290600101906020018083116200026b57829003601f168201915b5050505050905090565b828054620002a190620004b3565b90600052602060002090601f016020900481019282620002c5576000855562000310565b82601f10620002e057805160ff191683800117855562000310565b8280016001018555821562000310579182015b8281111562000310578251825591602001919060010190620002f3565b506200031e92915062000322565b5090565b5b808211156200031e576000815560010162000323565b80516001600160a01b03811681146200035157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200037e57600080fd5b81516001600160401b03808211156200039b576200039b62000356565b604051601f8301601f19908116603f01168101908282118183101715620003c657620003c662000356565b81604052838152602092508683858801011115620003e357600080fd5b600091505b83821015620004075785820183015181830184015290820190620003e8565b83821115620004195760008385830101525b9695505050505050565b600080600080608085870312156200043a57600080fd5b620004458562000339565b60208601519094506001600160401b03808211156200046357600080fd5b62000471888389016200036c565b945060408701519150808211156200048857600080fd5b5062000497878288016200036c565b925050620004a86060860162000339565b905092959194509250565b600181811c90821680620004c857607f821691505b60208210811415620004ea57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516138fd6200052a60003960006110d001526000610793015260006107bd015260006107e701526138fd6000f3fe6080604052600436106101a45760003560e01c806370a08231116100e857806370a082311461041c5780637ecebe001461043c57806384bb1e421461045c5780638da5cb5b1461046f5780638e539e8c14610484578063938e3d7b146104a457806395d89b41146104c45780639ab24eb0146104d9578063a457c2d7146104f9578063a9059cbb14610519578063ac9650d814610539578063c3cda52014610566578063d505accf14610586578063d637ed59146105a6578063dd62ed3e146105cf578063e8a3d485146105ef578063eec8897c14610604578063f1127ed81461062457600080fd5b806306fdde03146101a9578063079fe40e146101d4578063095ea7b31461020157806313af40351461023157806318160ddd1461025357806323b872dd14610272578063313ce5671461029257806335b65e1f146102ae5780633644e515146102f257806339509351146103075780633a46b1a814610327578063426cfaf31461034757806342966c6814610367578063587cde1e146103875780635c19a95c146103a75780636f4f2837146103c75780636fcfff45146103e7575b600080fd5b3480156101b557600080fd5b506101be61066e565b6040516101cb9190612f99565b60405180910390f35b3480156101e057600080fd5b506101e9610700565b6040516001600160a01b0390911681526020016101cb565b34801561020d57600080fd5b5061022161021c366004612fc8565b61070f565b60405190151581526020016101cb565b34801561023d57600080fd5b5061025161024c366004612ff2565b610727565b005b34801561025f57600080fd5b506004545b6040519081526020016101cb565b34801561027e57600080fd5b5061022161028d36600461300d565b610760565b34801561029e57600080fd5b50604051601281526020016101cb565b3480156102ba57600080fd5b506102646102c9366004612ff2565b60145460009081526015602090815260408083206001600160a01b039094168352929052205490565b3480156102fe57600080fd5b50610264610786565b34801561031357600080fd5b50610221610322366004612fc8565b610816565b34801561033357600080fd5b50610264610342366004612fc8565b610855565b34801561035357600080fd5b50610251610362366004613057565b610898565b34801561037357600080fd5b506102516103823660046130ae565b610aa8565b34801561039357600080fd5b506101e96103a2366004612ff2565b610aff565b3480156103b357600080fd5b506102516103c2366004612ff2565b610b1d565b3480156103d357600080fd5b506102516103e2366004612ff2565b610b27565b3480156103f357600080fd5b50610407610402366004612ff2565b610b54565b60405163ffffffff90911681526020016101cb565b34801561042857600080fd5b50610264610437366004612ff2565b610b7c565b34801561044857600080fd5b50610264610457366004612ff2565b610b97565b61025161046a366004613164565b610bb5565b34801561047b57600080fd5b506101e9610c82565b34801561049057600080fd5b5061026461049f3660046130ae565b610c91565b3480156104b057600080fd5b506102516104bf36600461320e565b610cbd565b3480156104d057600080fd5b506101be610cea565b3480156104e557600080fd5b506102646104f4366004612ff2565b610cf9565b34801561050557600080fd5b50610221610514366004612fc8565b610d7f565b34801561052557600080fd5b50610221610534366004612fc8565b610e1c565b34801561054557600080fd5b50610559610554366004613256565b610e2a565b6040516101cb91906132ca565b34801561057257600080fd5b5061025161058136600461333d565b610f1e565b34801561059257600080fd5b506102516105a1366004613395565b61107c565b3480156105b257600080fd5b506105bb6111e2565b6040516101cb9897969594939291906133ff565b3480156105db57600080fd5b506102646105ea366004613454565b6112a1565b3480156105fb57600080fd5b506101be6112cc565b34801561061057600080fd5b5061022161061f366004613487565b61135a565b34801561063057600080fd5b5061064461063f3660046134f8565b611705565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101cb565b60606005805461067d9061352d565b80601f01602080910402602001604051908101604052809291908181526020018280546106a99061352d565b80156106f65780601f106106cb576101008083540402835291602001916106f6565b820191906000526020600020905b8154815290600101906020018083116106d957829003601f168201915b5050505050905090565b600b546001600160a01b031690565b60003361071d818585611788565b5060019392505050565b61072f6118ac565b6107545760405162461bcd60e51b815260040161074b90613562565b60405180910390fd5b61075d816118cf565b50565b60003361076e858285611921565b61077985858561199b565b60019150505b9392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156107df57507f000000000000000000000000000000000000000000000000000000000000000046145b1561080957507f000000000000000000000000000000000000000000000000000000000000000090565b610811611b5d565b905090565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919061071d90829086906108509087906135a0565b611788565b60004382106108765760405162461bcd60e51b815260040161074b906135b8565b6001600160a01b038316600090815260096020526040902061077f9083611bf2565b6108a06118ac565b6108bc5760405162461bcd60e51b815260040161074b90613562565b601454600e548215610906575060003360405160609190911b6001600160601b03191660208201524360348201526054016040516020818303038152906040528051906020012091505b836020013581111561094f5760405162461bcd60e51b81526020600482015260126024820152711b585e081cdd5c1c1b1e4818db185a5b595960721b604482015260640161074b565b604051806101000160405280856000013581526020018560200135815260200182815260200185606001358152602001856080013581526020018560a0013581526020018560c00160208101906109a69190612ff2565b6001600160a01b031681526020016109c160e08701876135ef565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152508051600c908155602080830151600d556040830151600e556060830151600f55608083015160105560a083015160115560c0830151601280546001600160a01b0319166001600160a01b0390921691909117905560e08301518051610a60926013920190612eb1565b50505060148290556040517f6dab9d7d05d468100139089b2516cb8ff286c3972ff070d3b509e371f0d0d4b890610a9a9086908690613665565b60405180910390a150505050565b80610ab233610b7c565b1015610af55760405162461bcd60e51b81526020600482015260126024820152716e6f7420656e6f7567682062616c616e636560701b604482015260640161074b565b61075d3382611cae565b6001600160a01b039081166000908152600860205260409020541690565b61075d3382611cc6565b610b2f6118ac565b610b4b5760405162461bcd60e51b815260040161074b90613562565b61075d81611d46565b6001600160a01b038116600090815260096020526040812054610b7690611d90565b92915050565b6001600160a01b031660009081526002602052604090205490565b6001600160a01b038116600090815260076020526040812054610b76565b601454610bc5338787878761135a565b5085600c6002016000828254610bdb91906135a0565b9091555050600081815260156020908152604080832033845290915281208054889290610c099084906135a0565b90915550610c1c90506000878787611df9565b6000610c288888611f49565b9050806001600160a01b038916336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de68a604051610c7091815260200190565b60405180910390a45050505050505050565b6001546001600160a01b031690565b6000438210610cb25760405162461bcd60e51b815260040161074b906135b8565b610b76600a83611bf2565b610cc56118ac565b610ce15760405162461bcd60e51b815260040161074b90613562565b61075d81611f5e565b60606006805461067d9061352d565b6001600160a01b0381166000908152600960205260408120548015610d6c576001600160a01b0383166000908152600960205260409020610d3b600183613731565b81548110610d4b57610d4b613748565b600091825260209091200154600160201b90046001600160e01b0316610d6f565b60005b6001600160e01b03169392505050565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919083811015610e045760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161074b565b610e118286868403611788565b506001949350505050565b60003361071d81858561199b565b6060816001600160401b03811115610e4457610e446130d9565b604051908082528060200260200182016040528015610e7757816020015b6060815260200190600190039081610e625790505b50905060005b82811015610f1757610ee730858584818110610e9b57610e9b613748565b9050602002810190610ead91906135ef565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061203f92505050565b828281518110610ef957610ef9613748565b60200260200101819052508080610f0f9061375e565b915050610e7d565b5092915050565b83421115610f6e5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161074b565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b03881691810191909152606081018690526080810185905260009060a0016040516020818303038152906040528051906020012090506000611002610fe2610786565b8360405161190160f01b8152600281019290925260228201526042902090565b9050600061101282878787612064565b905061101d8161208c565b88146110675760405162461bcd60e51b81526020600482015260196024820152784552433230566f7465733a20696e76616c6964206e6f6e636560381b604482015260640161074b565b611071818a611cc6565b505050505050505050565b834211156110cc5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161074b565b60007f00000000000000000000000000000000000000000000000000000000000000008888886110fb8c61208c565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000611158610fe2610786565b9050600061116882878787612064565b9050896001600160a01b0316816001600160a01b0316146111cb5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161074b565b6111d68a8a8a611788565b50505050505050505050565b600c8054600d54600e54600f54601054601154601254601380549798969795969495939492936001600160a01b03909216929161121e9061352d565b80601f016020809104026020016040519081016040528092919081815260200182805461124a9061352d565b80156112975780601f1061126c57610100808354040283529160200191611297565b820191906000526020600020905b81548152906001019060200180831161127a57829003601f168201915b5050505050905088565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600080546112d99061352d565b80601f01602080910402602001604051908101604052809291908181526020018280546113059061352d565b80156113525780601f1061132757610100808354040283529160200191611352565b820191906000526020600020905b81548152906001019060200180831161133557829003601f168201915b505050505081565b6040805161010081018252600c80548252600d546020830152600e5492820192909252600f546060820152601054608082015260115460a08201526012546001600160a01b031660c082015260138054600093849392909160e0840191906113c19061352d565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed9061352d565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b50505091909252505050606081015160a082015160c0830151608084015193945091929091901561151a576115166114728780613779565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505060808088015191508d9060208b01359060408c0135906114c7908d0160608e01612ff2565b6040516001600160601b0319606095861b811660208301526034820194909452605481019290925290921b166074820152608801604051602081830303815290604052805190602001206120b4565b5094505b841561159f57602086013561152f5782611535565b85602001355b92506000198660400135141561154b5781611551565b85604001355b9150600019866040013514158015611582575060006115766080880160608901612ff2565b6001600160a01b031614155b61158c578061159c565b61159c6080870160608801612ff2565b90505b60145460009081526015602090815260408083206001600160a01b03808f168552925290912054908981169083161415806115da5750828814155b1561161a5760405162461bcd60e51b815260206004820152601060248201526f2150726963654f7243757272656e637960801b604482015260640161074b565b89158061162f57508361162d828c6135a0565b115b156116655760405162461bcd60e51b815260040161074b906020808252600490820152632151747960e01b604082015260600190565b84602001518a866040015161167a91906135a0565b11156116b55760405162461bcd60e51b815260206004820152600a602482015269214d6178537570706c7960b01b604482015260640161074b565b84514210156116f75760405162461bcd60e51b815260206004820152600e60248201526d18d85b9d0818db185a5b481e595d60921b604482015260640161074b565b505050505095945050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600960205260409020805463ffffffff841690811061174957611749613748565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091529392505050565b6001600160a01b0383166117ea5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161074b565b6001600160a01b03821661184b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161074b565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006118b6610c82565b6001600160a01b0316336001600160a01b031614905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b600061192d84846112a1565b9050600019811461199557818110156119885760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161074b565b6119958484848403611788565b50505050565b6001600160a01b0383166119ff5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161074b565b6001600160a01b038216611a615760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161074b565b6001600160a01b03831660009081526002602052604090205481811015611ad95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161074b565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290611b109084906135a0565b92505081905550826001600160a01b0316846001600160a01b03166000805160206138a883398151915284604051611b4a91815260200190565b60405180910390a3611995848484612187565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611b8861066e565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8154600090815b81811015611c56576000611c0d82846121a2565b905084868281548110611c2257611c22613748565b60009182526020909120015463ffffffff161115611c4257809250611c50565b611c4d8160016135a0565b91505b50611bf9565b8115611c995784611c68600184613731565b81548110611c7857611c78613748565b600091825260209091200154600160201b90046001600160e01b0316611c9c565b60005b6001600160e01b031695945050505050565b611cb882826121bd565b611995600a6123008361230c565b6000611cd183610aff565b90506000611cde84610b7c565b6001600160a01b0385811660008181526008602052604080822080546001600160a01b031916898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611995828483612483565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b600063ffffffff821115611df55760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161074b565b5090565b80611e3a573415611e355760405162461bcd60e51b81526020600482015260066024820152652156616c756560d01b604482015260640161074b565b611995565b6000670de0b6b3a7640000611e4f83866137c2565b611e5991906137e1565b905060008111611e9e5760405162461bcd60e51b815260206004820152601060248201526f7175616e7469747920746f6f206c6f7760801b604482015260640161074b565b60006001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611ece5750348114611ed2565b5034155b80611f135760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206d73672076616c756560781b604482015260640161074b565b60006001600160a01b03871615611f2a5786611f32565b611f32610700565b9050611f40853383866125c0565b50505050505050565b6000611f558383612605565b50600092915050565b6000808054611f6c9061352d565b80601f0160208091040260200160405190810160405280929190818152602001828054611f989061352d565b8015611fe55780601f10611fba57610100808354040283529160200191611fe5565b820191906000526020600020905b815481529060010190602001808311611fc857829003601f168201915b5050855193945061200193600093506020870192509050612eb1565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051612033929190613803565b60405180910390a15050565b606061077f83836040518060600160405280602781526020016138816027913961268f565b60008060006120758787878761276a565b9150915061208281612824565b5095945050505050565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b6000808281805b8751811015612176576120cf6002836137c2565b915060008882815181106120e5576120e5613748565b60200260200101519050808411612127576040805160208101869052908101829052606001604051602081830303815290604052805190602001209350612163565b604080516020810183905290810185905260600160405160208183030381529060405280519060200120935060018361216091906135a0565b92505b508061216e8161375e565b9150506120bb565b50941495939450505050565b505050565b61218261219384610aff565b61219c84610aff565b83612483565b60006121b160028484186137e1565b61077f908484166135a0565b6001600160a01b03821661221d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161074b565b6001600160a01b038216600090815260026020526040902054818110156122915760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161074b565b6001600160a01b03831660009081526002602052604081208383039055600480548492906122c0908490613731565b90915550506040518281526000906001600160a01b038516906000805160206138a88339815191529060200160405180910390a361218283600084612187565b600061077f8284613731565b8254600090819080156123565785612325600183613731565b8154811061233557612335613748565b600091825260209091200154600160201b90046001600160e01b0316612359565b60005b6001600160e01b0316925061237283858763ffffffff16565b91506000811180156123b05750438661238c600184613731565b8154811061239c5761239c613748565b60009182526020909120015463ffffffff16145b15612410576123be8261296d565b866123ca600184613731565b815481106123da576123da613748565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b0316021790555061247a565b85604051806040016040528061242543611d90565b63ffffffff1681526020016124398561296d565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b50935093915050565b816001600160a01b0316836001600160a01b0316141580156124a55750600081115b15612182576001600160a01b03831615612533576001600160a01b038316600090815260096020526040812081906124e0906123008561230c565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612528929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615612182576001600160a01b03821660009081526009602052604081208190612569906129d68561230c565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516125b1929190918252602082015260400190565b60405180910390a25050505050565b806125ca57611995565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156125f957611e3582826129e2565b61199584848484612a84565b61260f8282612add565b6004546001600160e01b0310156126815760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161074b565b611995600a6129d68361230c565b606061269a84612bb6565b6126f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161074b565b600080856001600160a01b0316856040516127109190613831565b600060405180830381855af49150503d806000811461274b576040519150601f19603f3d011682016040523d82523d6000602084013e612750565b606091505b5091509150612760828286612bc5565b9695505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115612797575060009050600361281b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156127eb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128145760006001925092505061281b565b9150600090505b94509492505050565b60008160048111156128385761283861384d565b14156128415750565b60018160048111156128555761285561384d565b141561289e5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b604482015260640161074b565b60028160048111156128b2576128b261384d565b14156129005760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161074b565b60038160048111156129145761291461384d565b141561075d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161074b565b60006001600160e01b03821115611df55760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161074b565b600061077f82846135a0565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612a2f576040519150601f19603f3d011682016040523d82523d6000602084013e612a34565b606091505b50509050806121825760405162461bcd60e51b815260206004820152601c60248201527b1b985d1a5d99481d1bdad95b881d1c985b9cd9995c8819985a5b195960221b604482015260640161074b565b816001600160a01b0316836001600160a01b03161415612aa357611995565b6001600160a01b038316301415612ac857611e356001600160a01b0385168383612bfe565b6119956001600160a01b038516848484612c61565b6001600160a01b038216612b335760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161074b565b8060046000828254612b4591906135a0565b90915550506001600160a01b03821660009081526002602052604081208054839290612b729084906135a0565b90915550506040518181526001600160a01b038316906000906000805160206138a88339815191529060200160405180910390a3612bb260008383612187565b5050565b6001600160a01b03163b151590565b60608315612bd457508161077f565b825115612be45782518084602001fd5b8160405162461bcd60e51b815260040161074b9190612f99565b6040516001600160a01b03831660248201526044810182905261218290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c99565b6040516001600160a01b03808516602483015283166044820152606481018290526119959085906323b872dd60e01b90608401612c2a565b6000612cee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d6b9092919063ffffffff16565b8051909150156121825780806020019051810190612d0c9190613863565b6121825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161074b565b6060612d7a8484600085612d82565b949350505050565b606082471015612de35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161074b565b612dec85612bb6565b612e385760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161074b565b600080866001600160a01b03168587604051612e549190613831565b60006040518083038185875af1925050503d8060008114612e91576040519150601f19603f3d011682016040523d82523d6000602084013e612e96565b606091505b5091509150612ea6828286612bc5565b979650505050505050565b828054612ebd9061352d565b90600052602060002090601f016020900481019282612edf5760008555612f25565b82601f10612ef857805160ff1916838001178555612f25565b82800160010185558215612f25579182015b82811115612f25578251825591602001919060010190612f0a565b50611df59291505b80821115611df55760008155600101612f2d565b60005b83811015612f5c578181015183820152602001612f44565b838111156119955750506000910152565b60008151808452612f85816020860160208601612f41565b601f01601f19169290920160200192915050565b60208152600061077f6020830184612f6d565b80356001600160a01b0381168114612fc357600080fd5b919050565b60008060408385031215612fdb57600080fd5b612fe483612fac565b946020939093013593505050565b60006020828403121561300457600080fd5b61077f82612fac565b60008060006060848603121561302257600080fd5b61302b84612fac565b925061303960208501612fac565b9150604084013590509250925092565b801515811461075d57600080fd5b6000806040838503121561306a57600080fd5b82356001600160401b0381111561308057600080fd5b8301610100818603121561309357600080fd5b915060208301356130a381613049565b809150509250929050565b6000602082840312156130c057600080fd5b5035919050565b6000608082840312156120ae57600080fd5b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115613109576131096130d9565b604051601f8501601f19908116603f01168101908282118183101715613131576131316130d9565b8160405280935085815286868601111561314a57600080fd5b858560208301376000602087830101525050509392505050565b60008060008060008060c0878903121561317d57600080fd5b61318687612fac565b95506020870135945061319b60408801612fac565b93506060870135925060808701356001600160401b03808211156131be57600080fd5b6131ca8a838b016130c7565b935060a08901359150808211156131e057600080fd5b508701601f810189136131f257600080fd5b613201898235602084016130ef565b9150509295509295509295565b60006020828403121561322057600080fd5b81356001600160401b0381111561323657600080fd5b8201601f8101841361324757600080fd5b612d7a848235602084016130ef565b6000806020838503121561326957600080fd5b82356001600160401b038082111561328057600080fd5b818501915085601f83011261329457600080fd5b8135818111156132a357600080fd5b8660208260051b85010111156132b857600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561331f57603f1988860301845261330d858351612f6d565b945092850192908501906001016132f1565b5092979650505050505050565b803560ff81168114612fc357600080fd5b60008060008060008060c0878903121561335657600080fd5b61335f87612fac565b9550602087013594506040870135935061337b6060880161332c565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a0312156133b057600080fd5b6133b988612fac565b96506133c760208901612fac565b955060408801359450606088013593506133e36080890161332c565b925060a0880135915060c0880135905092959891949750929550565b60006101008a83528960208401528860408401528760608401528660808401528560a084015260018060a01b03851660c08401528060e084015261344581840185612f6d565b9b9a5050505050505050505050565b6000806040838503121561346757600080fd5b61347083612fac565b915061347e60208401612fac565b90509250929050565b600080600080600060a0868803121561349f57600080fd5b6134a886612fac565b9450602086013593506134bd60408701612fac565b92506060860135915060808601356001600160401b038111156134df57600080fd5b6134eb888289016130c7565b9150509295509295909350565b6000806040838503121561350b57600080fd5b61351483612fac565b9150602083013563ffffffff811681146130a357600080fd5b600181811c9082168061354157607f821691505b602082108114156120ae57634e487b7160e01b600052602260045260246000fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156135b3576135b361358a565b500190565b6020808252601f908201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604082015260600190565b6000808335601e1984360301811261360657600080fd5b8301803591506001600160401b0382111561362057600080fd5b60200191503681900382131561363557600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152823560408201526020830135606082015260408301356080820152606083013560a0820152608083013560c082015260a083013560e082015260006136b060c08501612fac565b6001600160a01b03166101008381019190915260e08501359036869003601e190182126136dc57600080fd5b9085019081356001600160401b038111156136f657600080fd5b80360387131561370557600080fd5b8161012086015261371e6101408601826020860161363c565b935050505061077f602083018415159052565b6000828210156137435761374361358a565b500390565b634e487b7160e01b600052603260045260246000fd5b60006000198214156137725761377261358a565b5060010190565b6000808335601e1984360301811261379057600080fd5b8301803591506001600160401b038211156137aa57600080fd5b6020019150600581901b360382131561363557600080fd5b60008160001904831182151516156137dc576137dc61358a565b500290565b6000826137fe57634e487b7160e01b600052601260045260246000fd5b500490565b6040815260006138166040830185612f6d565b82810360208401526138288185612f6d565b95945050505050565b60008251613843818460208701612f41565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561387557600080fd5b815161077f8161304956fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202dab9fbffabe7c99fc9ca46150f082e40eed0a6c1044a825be76a508679a2f5b64736f6c634300080c0033",
    "sourceMap": "1305:3686:7:-:0;;;1443:95:224;1390:148;;1595:278:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1755:5;1762:7;1832:5:224;1839:7;2089:5:223;2081;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2104:17:223;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;1877:13:224::1;1858:32;::::0;-1:-1:-1;1923:4:224::1;1900:28;::::0;1965:23:::1;:21;:23::i;:::-;1938:50;::::0;-1:-1:-1;1781:26:7::1;::::0;-1:-1:-1;1793:13:7;1781:11:::1;:26::i;:::-;1817:49;1844:21:::0;1817:26:::1;:49::i;:::-;1595:278:::0;;;;1305:3686;;3296:438:224;3351:7;3448:95;3581:6;:4;:6::i;:::-;3565:24;;;;;;;3416:297;;;;;;2215:25:644;;;;2256:18;;;2249:34;;;;3611:14:224;2299:18:644;;;2292:34;3647:13:224;2342:18:644;;;2335:34;3690:4:224;2385:19:644;;;2378:61;2187:19;;3416:297:224;;;;;;;;;;;;3389:338;;;;;;3370:357;;3296:438;:::o;1421:172:68:-;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;1499:170:72:-;1578:9;:26;;-1:-1:-1;;;;;;1578:26:72;-1:-1:-1;;;;;1578:26:72;;;;;;;;1619:43;;;;-1:-1:-1;;1619:43:72;1499:170;:::o;2193:98:223:-;2247:13;2279:5;2272:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98;:::o;1305:3686:7:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1305:3686:7;;;-1:-1:-1;1305:3686:7;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:644;93:13;;-1:-1:-1;;;;;135:31:644;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:885;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:644;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:644;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;912:3;907:2;902;894:6;890:15;886:24;883:33;880:53;;;929:1;926;919:12;880:53;951:1;942:10;;961:133;975:2;972:1;969:9;961:133;;;1063:14;;;1059:23;;1053:30;1032:14;;;1028:23;;1021:63;986:10;;;;961:133;;;1112:2;1109:1;1106:9;1103:80;;;1171:1;1166:2;1161;1153:6;1149:15;1145:24;1138:35;1103:80;1201:6;328:885;-1:-1:-1;;;;;;328:885:644:o;1218:733::-;1335:6;1343;1351;1359;1412:3;1400:9;1391:7;1387:23;1383:33;1380:53;;;1429:1;1426;1419:12;1380:53;1452:40;1482:9;1452:40;:::i;:::-;1536:2;1521:18;;1515:25;1442:50;;-1:-1:-1;;;;;;1589:14:644;;;1586:34;;;1616:1;1613;1606:12;1586:34;1639:61;1692:7;1683:6;1672:9;1668:22;1639:61;:::i;:::-;1629:71;;1746:2;1735:9;1731:18;1725:25;1709:41;;1775:2;1765:8;1762:16;1759:36;;;1791:1;1788;1781:12;1759:36;;1814:63;1869:7;1858:8;1847:9;1843:24;1814:63;:::i;:::-;1804:73;;;1896:49;1941:2;1930:9;1926:18;1896:49;:::i;:::-;1886:59;;1218:733;;;;;;;:::o;2450:380::-;2529:1;2525:12;;;;2572;;;2593:61;;2647:4;2639:6;2635:17;2625:27;;2593:61;2700:2;2692:6;2689:14;2669:18;2666:38;2663:161;;;2746:10;2741:3;2737:20;2734:1;2727:31;2781:4;2778:1;2771:15;2809:4;2806:1;2799:15;2663:161;;2450:380;;;:::o;:::-;1305:3686:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "1305:3686:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98:223;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;676:104:72;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;929:32:644;;;911:51;;899:2;884:18;676:104:72;765:203:644;4470:197:223;;;;;;;;;;-1:-1:-1;4470:197:223;;;;;:::i;:::-;;:::i;:::-;;;1671:14:644;;1664:22;1646:41;;1634:2;1619:18;4470:197:223;1506:187:644;1133:173:68;;;;;;;;;;-1:-1:-1;1133:173:68;;;;;:::i;:::-;;:::i;:::-;;3281:106:223;;;;;;;;;;-1:-1:-1;3368:12:223;;3281:106;;;2035:25:644;;;2023:2;2008:18;3281:106:223;1889:177:644;5229:286:223;;;;;;;;;;-1:-1:-1;5229:286:223;;;;;:::i;:::-;;:::i;3130:91::-;;;;;;;;;;-1:-1:-1;3130:91:223;;3212:2;2546:36:644;;2534:2;2519:18;3130:91:223;2404:184:644;5881:150:58;;;;;;;;;;-1:-1:-1;5881:150:58;;;;;:::i;:::-;6002:11;;5954:7;5980:34;;;:21;:34;;;;;;;;-1:-1:-1;;;;;5980:44:58;;;;;;;;;;;5881:150;3018:272:224;;;;;;;;;;;;;:::i;5910:236:223:-;;;;;;;;;;-1:-1:-1;5910:236:223;;;;;:::i;:::-;;:::i;2684:265:225:-;;;;;;;;;;-1:-1:-1;2684:265:225;;;;;:::i;:::-;;:::i;2330:1219:58:-;;;;;;;;;;-1:-1:-1;2330:1219:58;;;;;:::i;:::-;;:::i;2275:164:7:-;;;;;;;;;;-1:-1:-1;2275:164:7;;;;;:::i;:::-;;:::i;2077:126:225:-;;;;;;;;;;-1:-1:-1;2077:126:225;;;;;:::i;:::-;;:::i;5107:167::-;;;;;;;;;;-1:-1:-1;5107:167:225;;;;;:::i;:::-;;:::i;1189:228:72:-;;;;;;;;;;-1:-1:-1;1189:228:72;;;;;:::i;:::-;;:::i;1840:149:225:-;;;;;;;;;;-1:-1:-1;1840:149:225;;;;;:::i;:::-;;:::i;:::-;;;3786:10:644;3774:23;;;3756:42;;3744:2;3729:18;1840:149:225;3612:192:644;3445:125:223;;;;;;;;;;-1:-1:-1;3445:125:223;;;;;:::i;:::-;;:::i;2768:126:224:-;;;;;;;;;;-1:-1:-1;2768:126:224;;;;;:::i;:::-;;:::i;1181:1086:58:-;;;;;;:::i;:::-;;:::i;871:86:68:-;;;;;;;;;;;;;:::i;3228:256:225:-;;;;;;;;;;-1:-1:-1;3228:256:225;;;;;:::i;:::-;;:::i;1003:188:54:-;;;;;;;;;;-1:-1:-1;1003:188:54;;;;;:::i;:::-;;:::i;2404:102:223:-;;;;;;;;;;;;;:::i;2282:209:225:-;;;;;;;;;;-1:-1:-1;2282:209:225;;;;;:::i;:::-;;:::i;6633:429:223:-;;;;;;;;;;-1:-1:-1;6633:429:223;;;;;:::i;:::-;;:::i;3766:189::-;;;;;;;;;;-1:-1:-1;3766:189:223;;;;;:::i;:::-;;:::i;698:319:63:-;;;;;;;;;;-1:-1:-1;698:319:63;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5543:613:225:-;;;;;;;;;;-1:-1:-1;5543:613:225;;;;;:::i;:::-;;:::i;2056:651:224:-;;;;;;;;;;-1:-1:-1;2056:651:224;;;;;:::i;:::-;;:::i;463:36:58:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;4013:149:223:-;;;;;;;;;;-1:-1:-1;4013:149:223;;;;;:::i;:::-;;:::i;565:34:54:-;;;;;;;;;;;;;:::i;3646:2154:58:-;;;;;;;;;;-1:-1:-1;3646:2154:58;;;;;:::i;:::-;;:::i;1617:148:225:-;;;;;;;;;;-1:-1:-1;1617:148:225;;;;;:::i;:::-;;:::i;:::-;;;;11238:13:644;;11253:10;11234:30;11216:49;;11325:4;11313:17;;;11307:24;-1:-1:-1;;;;;11303:50:644;11281:20;;;11274:80;;;;11189:18;1617:148:225;11012:348:644;2193:98:223;2247:13;2279:5;2272:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2193:98;:::o;676:104:72:-;764:9;;-1:-1:-1;;;;;764:9:72;;676:104::o;4470:197:223:-;4553:4;719:10:230;4607:32:223;719:10:230;4623:7:223;4632:6;4607:8;:32::i;:::-;-1:-1:-1;4656:4:223;;4470:197;-1:-1:-1;;;4470:197:223:o;1133:173:68:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:68;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;5229:286:223:-;5356:4;719:10:230;5412:38:223;5428:4;719:10:230;5443:6:223;5412:15;:38::i;:::-;5460:27;5470:4;5476:2;5480:6;5460:9;:27::i;:::-;5504:4;5497:11;;;5229:286;;;;;;:::o;3018:272:224:-;3076:7;3107:4;-1:-1:-1;;;;;3116:12:224;3099:29;;:66;;;;;3149:16;3132:13;:33;3099:66;3095:189;;;-1:-1:-1;3188:24:224;;3018:272::o;3095:189::-;3250:23;:21;:23::i;:::-;3243:30;;3018:272;:::o;5910:236:223:-;719:10:230;5998:4:223;6077:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6077:27:223;;;;;;;;;;5998:4;;719:10:230;6052:66:223;;719:10:230;;6077:27:223;;:40;;6107:10;;6077:40;:::i;:::-;6052:8;:66::i;2684:265:225:-;2782:7;2823:12;2809:11;:26;2801:70;;;;-1:-1:-1;;;2801:70:225;;;;;;;:::i;:::-;-1:-1:-1;;;;;2907:21:225;;;;;;:12;:21;;;;;2888:54;;2930:11;2888:18;:54::i;2330:1219:58:-;2456:24;:22;:24::i;:::-;2451:80;;2496:24;;-1:-1:-1;;;2496:24:58;;;;;;;:::i;2451:80::-;2569:11;;2621:28;;2660:170;;;;-1:-1:-1;2725:1:58;719:10:230;2770:48:58;;12920:2:644;12891:15;;;;-1:-1:-1;;;;;;12887:45:644;2770:48:58;;;12875:58:644;2805:12:58;12949::644;;;12942:28;12986:12;;2770:48:58;;;;;;;;;;;;2760:59;;;;;;2740:79;;2660:170;2867:10;:29;;;2844:20;:52;2840:111;;;2912:28;;-1:-1:-1;;;2912:28:58;;13211:2:644;2912:28:58;;;13193:21:644;13250:2;13230:18;;;13223:30;-1:-1:-1;;;13269:18:644;;;13262:48;13327:18;;2912:28:58;13009:342:644;2840:111:58;2978:450;;;;;;;;3023:10;:25;;;2978:450;;;;3082:10;:29;;;2978:450;;;;3140:20;2978:450;;;;3198:10;:33;;;2978:450;;;;3257:10;:21;;;2978:450;;;;3307:10;:24;;;2978:450;;;;3355:10;:19;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2978:450:58;;;;;3398:19;;;;:10;:19;:::i;:::-;2978:450;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2978:450:58;;-1:-1:-1;2961:467:58;;:14;:467;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2961:467:58;-1:-1:-1;;;;;2961:467:58;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;3438:11:58;:31;;;3485:57;;;;;;3507:10;;3519:22;;3485:57;:::i;:::-;;;;;;;;2441:1108;;2330:1219;;:::o;2275:164:7:-;2366:7;2341:21;2351:10;2341:9;:21::i;:::-;:32;;2333:63;;;;-1:-1:-1;;;2333:63:7;;15725:2:644;2333:63:7;;;15707:21:644;15764:2;15744:18;;;15737:30;-1:-1:-1;;;15783:18:644;;;15776:48;15841:18;;2333:63:7;15523:342:644;2333:63:7;2406:26;2412:10;2424:7;2406:5;:26::i;2077:126:225:-;-1:-1:-1;;;;;2177:19:225;;;2151:7;2177:19;;;:10;:19;;;;;;;;2077:126::o;5107:167::-;5233:34;719:10:230;5257:9:225;5233;:34::i;1189:228:72:-;1279:29;:27;:29::i;:::-;1274:85;;1324:24;;-1:-1:-1;;;1324:24:72;;;;;;;:::i;1274:85::-;1368:42;1395:14;1368:26;:42::i;1840:149:225:-;-1:-1:-1;;;;;1953:21:225;;1910:6;1953:21;;;:12;:21;;;;;:28;1935:47;;:17;:47::i;:::-;1928:54;1840:149;-1:-1:-1;;1840:149:225:o;3445:125:223:-;-1:-1:-1;;;;;3545:18:223;3519:7;3545:18;;;:9;:18;;;;;;;3445:125::o;2768:126:224:-;-1:-1:-1;;;;;2863:14:224;;2837:7;2863:14;;;:7;:14;;;;;918::231;2863:24:224;827:112:231;1181:1086:58;1558:11;;1580:84;719:10:230;1610:9:58;1621;1632:14;1648:15;1580:11;:84::i;:::-;;1741:9;1709:14;:28;;;:41;;;;;;;:::i;:::-;;;;-1:-1:-1;;1760:40:58;;;;:21;:40;;;;;;;;719:10:230;1760:58:58;;;;;;;:71;;1822:9;;1760:40;:71;;1822:9;;1760:71;:::i;:::-;;;;-1:-1:-1;1888:70:58;;-1:-1:-1;1917:1:58;1921:9;1932;1943:14;1888:20;:70::i;:::-;2015:20;2038:44;2061:9;2072;2038:22;:44::i;:::-;2015:67;-1:-1:-1;2015:67:58;-1:-1:-1;;;;;2098:67:58;;719:10:230;-1:-1:-1;;;;;2098:67:58;;2155:9;2098:67;;;;2035:25:644;;2023:2;2008:18;;1889:177;2098:67:58;;;;;;;;1424:843;;1181:1086;;;;;;:::o;871:86:68:-;944:6;;-1:-1:-1;;;;;944:6:68;;871:86::o;3228:256:225:-;3315:7;3356:12;3342:11;:26;3334:70;;;;-1:-1:-1;;;3334:70:225;;;;;;;:::i;:::-;3421:56;3440:23;3465:11;3421:18;:56::i;1003:188:54:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:54;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;2404:102:223:-;2460:13;2492:7;2485:14;;;;;:::i;2282:209:225:-;-1:-1:-1;;;;;2388:21:225;;2355:7;2388:21;;;:12;:21;;;;;:28;2433:8;;:51;;-1:-1:-1;;;;;2448:21:225;;;;;;:12;:21;;;;;2470:7;2476:1;2470:3;:7;:::i;:::-;2448:30;;;;;;;;:::i;:::-;;;;;;;;;;:36;-1:-1:-1;;;2448:36:225;;-1:-1:-1;;;;;2448:36:225;2433:51;;;2444:1;2433:51;-1:-1:-1;;;;;2426:58:225;;2282:209;-1:-1:-1;;;2282:209:225:o;6633:429:223:-;719:10:230;6726:4:223;6807:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6807:27:223;;;;;;;;;;6726:4;;719:10:230;6852:35:223;;;;6844:85;;;;-1:-1:-1;;;6844:85:223;;16334:2:644;6844:85:223;;;16316:21:644;16373:2;16353:18;;;16346:30;16412:34;16392:18;;;16385:62;-1:-1:-1;;;16463:18:644;;;16456:35;16508:19;;6844:85:223;16132:401:644;6844:85:223;6963:60;6972:5;6979:7;7007:15;6988:16;:34;6963:8;:60::i;:::-;-1:-1:-1;7051:4:223;;6633:429;-1:-1:-1;;;;6633:429:223:o;3766:189::-;3845:4;719:10:230;3899:28:223;719:10:230;3916:2:223;3920:6;3899:9;:28::i;698:319:63:-;775:22;831:4;-1:-1:-1;;;;;819:24:63;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:34;;858:9;853:134;873:15;;;853:134;;;922:54;961:4;968;;973:1;968:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;922:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;922:30:63;;-1:-1:-1;;;922:54:63:i;:::-;909:7;917:1;909:10;;;;;;;;:::i;:::-;;;;;;:67;;;;890:3;;;;;:::i;:::-;;;;853:134;;;;698:319;;;;:::o;5543:613:225:-;5762:6;5743:15;:25;;5735:67;;;;-1:-1:-1;;;5735:67:225;;17406:2:644;5735:67:225;;;17388:21:644;17445:2;17425:18;;;17418:30;17484:31;17464:18;;;17457:59;17533:18;;5735:67:225;17204:353:644;5735:67:225;5844:58;;;1306:71;5844:58;;;17793:25:644;-1:-1:-1;;;;;17854:32:644;;17834:18;;;17827:60;;;;17903:18;;;17896:34;;;17946:18;;;17939:34;;;5813:18:225;;17765:19:644;;5844:58:225;;;;;;;;;;;;5834:69;;;;;;5813:90;;5913:12;5928:53;5950:18;:16;:18::i;:::-;5970:10;8689:4:237;8683:11;-1:-1:-1;;;8707:23:237;;8759:4;8750:14;;8743:39;;;;8811:4;8802:14;;8795:34;8865:4;8850:20;;;8489:397;5928:53:225;5913:68;;5991:14;6008:28;6022:4;6028:1;6031;6034;6008:13;:28::i;:::-;5991:45;;6064:17;6074:6;6064:9;:17::i;:::-;6055:5;:26;6047:64;;;;-1:-1:-1;;;6047:64:225;;18186:2:644;6047:64:225;;;18168:21:644;18225:2;18205:18;;;18198:30;-1:-1:-1;;;18244:18:644;;;18237:55;18309:18;;6047:64:225;17984:349:644;6047:64:225;6121:28;6131:6;6139:9;6121;:28::i;:::-;5725:431;;;5543:613;;;;;;:::o;2056:651:224:-;2291:8;2272:15;:27;;2264:69;;;;-1:-1:-1;;;2264:69:224;;18540:2:644;2264:69:224;;;18522:21:644;18579:2;18559:18;;;18552:30;18618:31;18598:18;;;18591:59;18667:18;;2264:69:224;18338:353:644;2264:69:224;2344:18;2386:16;2404:5;2411:7;2420:5;2427:16;2437:5;2427:9;:16::i;:::-;2375:79;;;;;;18983:25:644;;;;-1:-1:-1;;;;;19082:15:644;;;19062:18;;;19055:43;19134:15;;;;19114:18;;;19107:43;19166:18;;;19159:34;19209:19;;;19202:35;19253:19;;;19246:35;;;18955:19;;2375:79:224;;;;;;;;;;;;2365:90;;;;;;2344:111;;2466:12;2481:53;2503:18;:16;:18::i;2481:53::-;2466:68;;2545:14;2562:28;2576:4;2582:1;2585;2588;2562:13;:28::i;:::-;2545:45;;2618:5;-1:-1:-1;;;;;2608:15:224;:6;-1:-1:-1;;;;;2608:15:224;;2600:58;;;;-1:-1:-1;;;2600:58:224;;19494:2:644;2600:58:224;;;19476:21:644;19533:2;19513:18;;;19506:30;19572:32;19552:18;;;19545:60;19622:18;;2600:58:224;19292:354:644;2600:58:224;2669:31;2678:5;2685:7;2694:5;2669:8;:31::i;:::-;2254:453;;;2056:651;;;;;;;:::o;463:36:58:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;463:36:58;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4013:149:223:-;-1:-1:-1;;;;;4128:18:223;;;4102:7;4128:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4013:149::o;565:34:54:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3646:2154:58:-;3882:56;;;;;;;;3924:14;3882:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3882:56:58;;;;;;;;3855:15;;;;3882:56;3924:14;;3882:56;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3882:56:58;;;;-1:-1:-1;;;3969:40:58;;;;4040:31;;;;4105:26;;;;4146:28;;;;3882:56;;-1:-1:-1;3969:40:58;;4040:31;;4105:26;4146:42;4142:515;;4221:425;4257:21;:15;;:21;:::i;:::-;4221:425;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4296:28:58;;;;;;-1:-1:-1;4415:8:58;;4449:38;;;;;4513:29;;;;;4568:24;;;;;;;;:::i;:::-;4373:241;;-1:-1:-1;;;;;;20436:2:644;20472:15;;;20468:24;;4373:241:58;;;20456:37:644;20509:12;;;20502:28;;;;20546:12;;;20539:28;;;;20601:15;;;20597:24;20583:12;;;20576:46;20638:13;;4373:241:58;;;;;;;;;;;;4342:290;;;;;;4221:18;:425::i;:::-;-1:-1:-1;4204:442:58;-1:-1:-1;4142:515:58;4671:10;4667:534;;;4710:38;;;;:129;;4829:10;4710:129;;;4772:15;:38;;;4710:129;4697:142;;-1:-1:-1;;4866:15:58;:29;;;:50;;:127;;4983:10;4866:127;;;4935:15;:29;;;4866:127;4853:140;;-1:-1:-1;;5023:15:58;:29;;;:50;;:92;;;;-1:-1:-1;5113:1:58;5077:24;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5077:38:58;;;5023:92;:167;;5177:13;5023:167;;;5134:24;;;;;;;;:::i;:::-;5007:183;;4667:534;5266:11;;5211:30;5244:34;;;:21;:34;;;;;;;;-1:-1:-1;;;;;5244:44:58;;;;;;;;;;;;5303:26;;;;;;;;;:58;;;5351:10;5333:14;:28;;5303:58;5299:115;;;5377:26;;-1:-1:-1;;;5377:26:58;;20864:2:644;5377:26:58;;;20846:21:644;20903:2;20883:18;;;20876:30;-1:-1:-1;;;20922:18:644;;;20915:46;20978:18;;5377:26:58;20662:340:644;5299:115:58;5428:14;;;:67;;-1:-1:-1;5484:10:58;5447:34;5459:22;5447:9;:34;:::i;:::-;:47;5428:67;5424:112;;;5511:14;;-1:-1:-1;;;5511:14:58;;;;;;21209:2:644;21191:21;;;21248:1;21228:18;;;21221:29;-1:-1:-1;;;21281:2:644;21266:18;;21259:34;21325:2;21310:18;;21007:327;5424:112:58;5596:17;:36;;;5584:9;5550:17;:31;;;:43;;;;:::i;:::-;:82;5546:133;;;5648:20;;-1:-1:-1;;;5648:20:58;;21541:2:644;5648:20:58;;;21523:21:644;21580:2;21560:18;;;21553:30;-1:-1:-1;;;21599:18:644;;;21592:40;21649:18;;5648:20:58;21339:334:644;5546:133:58;5693:32;;5728:15;-1:-1:-1;5689:105:58;;;5759:24;;-1:-1:-1;;;5759:24:58;;21880:2:644;5759:24:58;;;21862:21:644;21919:2;21899:18;;;21892:30;-1:-1:-1;;;21938:18:644;;;21931:44;21992:18;;5759:24:58;21678:338:644;5689:105:58;3872:1928;;;;;3646:2154;;;;;;;:::o;1617:148:225:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;1732:21:225;;;;;;:12;:21;;;;;:26;;;;;;;;;;;;:::i;:::-;;;;;;;;;;1725:33;;;;;;;;;1732:26;;1725:33;;;;;;-1:-1:-1;;;1725:33:225;;-1:-1:-1;;;;;1725:33:225;;;;;;;;;1617:148;-1:-1:-1;;;1617:148:225:o;10160:370:223:-;-1:-1:-1;;;;;10291:19:223;;10283:68;;;;-1:-1:-1;;;10283:68:223;;22223:2:644;10283:68:223;;;22205:21:644;22262:2;22242:18;;;22235:30;22301:34;22281:18;;;22274:62;-1:-1:-1;;;22352:18:644;;;22345:34;22396:19;;10283:68:223;22021:400:644;10283:68:223;-1:-1:-1;;;;;10369:21:223;;10361:68;;;;-1:-1:-1;;;10361:68:223;;22628:2:644;10361:68:223;;;22610:21:644;22667:2;22647:18;;;22640:30;22706:34;22686:18;;;22679:62;-1:-1:-1;;;22757:18:644;;;22750:32;22799:19;;10361:68:223;22426:398:644;10361:68:223;-1:-1:-1;;;;;10440:18:223;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10491:32;;2035:25:644;;;10491:32:223;;2008:18:644;10491:32:223;;;;;;;10160:370;;;:::o;4643:115:7:-;4707:4;4744:7;:5;:7::i;:::-;-1:-1:-1;;;;;4730:21:7;:10;-1:-1:-1;;;;;4730:21:7;;4723:28;;4643:115;:::o;1421:172:68:-;1501:6;;;-1:-1:-1;;;;;1517:18:68;;;-1:-1:-1;;;;;;1517:18:68;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;10807:441:223:-;10937:24;10964:25;10974:5;10981:7;10964:9;:25::i;:::-;10937:52;;-1:-1:-1;;11003:16:223;:37;10999:243;;11084:6;11064:16;:26;;11056:68;;;;-1:-1:-1;;;11056:68:223;;23031:2:644;11056:68:223;;;23013:21:644;23070:2;23050:18;;;23043:30;23109:31;23089:18;;;23082:59;23158:18;;11056:68:223;22829:353:644;11056:68:223;11166:51;11175:5;11182:7;11210:6;11191:16;:25;11166:8;:51::i;:::-;10927:321;10807:441;;;:::o;7525:651::-;-1:-1:-1;;;;;7651:18:223;;7643:68;;;;-1:-1:-1;;;7643:68:223;;23389:2:644;7643:68:223;;;23371:21:644;23428:2;23408:18;;;23401:30;23467:34;23447:18;;;23440:62;-1:-1:-1;;;23518:18:644;;;23511:35;23563:19;;7643:68:223;23187:401:644;7643:68:223;-1:-1:-1;;;;;7729:16:223;;7721:64;;;;-1:-1:-1;;;7721:64:223;;23795:2:644;7721:64:223;;;23777:21:644;23834:2;23814:18;;;23807:30;23873:34;23853:18;;;23846:62;-1:-1:-1;;;23924:18:644;;;23917:33;23967:19;;7721:64:223;23593:399:644;7721:64:223;-1:-1:-1;;;;;7867:15:223;;7845:19;7867:15;;;:9;:15;;;;;;7900:21;;;;7892:72;;;;-1:-1:-1;;;7892:72:223;;24199:2:644;7892:72:223;;;24181:21:644;24238:2;24218:18;;;24211:30;24277:34;24257:18;;;24250:62;-1:-1:-1;;;24328:18:644;;;24321:36;24374:19;;7892:72:223;23997:402:644;7892:72:223;-1:-1:-1;;;;;7998:15:223;;;;;;;:9;:15;;;;;;8016:20;;;7998:38;;8056:13;;;;;;;;:23;;8030:6;;7998:15;8056:23;;8030:6;;8056:23;:::i;:::-;;;;;;;;8110:2;-1:-1:-1;;;;;8095:26:223;8104:4;-1:-1:-1;;;;;8095:26:223;-1:-1:-1;;;;;;;;;;;8114:6:223;8095:26;;;;2035:25:644;;2023:2;2008:18;;1889:177;8095:26:223;;;;;;;;8132:37;8152:4;8158:2;8162:6;8132:19;:37::i;3296:438:224:-;3351:7;3448:95;3581:6;:4;:6::i;:::-;3565:24;;;;;;;3416:297;;;;;;24663:25:644;;;;24704:18;;;24697:34;;;;3611:14:224;24747:18:644;;;24740:34;3647:13:224;24790:18:644;;;24783:34;3690:4:224;24833:19:644;;;24826:61;24635:19;;3416:297:224;;;;;;;;;;;;3389:338;;;;;;3370:357;;3296:438;:::o;3568:1458:225:-;4689:12;;3667:7;;;4736:229;4749:4;4743:3;:10;4736:229;;;4769:11;4783:23;4796:3;4801:4;4783:12;:23::i;:::-;4769:37;;4847:11;4824:5;4830:3;4824:10;;;;;;;;:::i;:::-;;;;;;;;;;:20;;;:34;4820:135;;;4885:3;4878:10;;4820:135;;;4933:7;:3;4939:1;4933:7;:::i;:::-;4927:13;;4820:135;4755:210;4736:229;;;4982:9;;:37;;4998:5;5004:8;5011:1;5004:4;:8;:::i;:::-;4998:15;;;;;;;;:::i;:::-;;;;;;;;;;:21;-1:-1:-1;;;4998:21:225;;-1:-1:-1;;;;;4998:21:225;4982:37;;;4994:1;4982:37;-1:-1:-1;;;;;4975:44:225;;3568:1458;-1:-1:-1;;;;;3568:1458:225:o;6824:190::-;6908:28;6920:7;6929:6;6908:11;:28::i;:::-;6947:60;6964:23;6989:9;7000:6;6947:16;:60::i;7558:380::-;7642:23;7668:20;7678:9;7668;:20::i;:::-;7642:46;;7698:24;7725:20;7735:9;7725;:20::i;:::-;-1:-1:-1;;;;;7755:21:225;;;;;;;:10;:21;;;;;;:33;;-1:-1:-1;;;;;;7755:33:225;;;;;;;;;;7804:54;;7698:47;;-1:-1:-1;7755:33:225;7804:54;;;;;;7755:21;7804:54;7869:62;7886:15;7903:9;7914:16;7869;:62::i;1499:170:72:-;1578:9;:26;;-1:-1:-1;;;;;;1578:26:72;-1:-1:-1;;;;;1578:26:72;;;;;;;;1619:43;;;;-1:-1:-1;;1619:43:72;1499:170;:::o;3045:187:240:-;3101:6;3136:16;3127:25;;;3119:76;;;;-1:-1:-1;;;3119:76:240;;25100:2:644;3119:76:240;;;25082:21:644;25139:2;25119:18;;;25112:30;25178:34;25158:18;;;25151:62;-1:-1:-1;;;25229:18:644;;;25222:36;25275:19;;3119:76:240;24898:402:644;3119:76:240;-1:-1:-1;3219:5:240;3045:187::o;2728:925:7:-;2936:19;2932:103;;2979:9;:14;2971:33;;;;-1:-1:-1;;;2971:33:7;;25507:2:644;2971:33:7;;;25489:21:644;25546:1;25526:18;;;25519:29;-1:-1:-1;;;25564:18:644;;;25557:36;25610:18;;2971:33:7;25305:329:644;2971:33:7;3018:7;;2932:103;3045:18;3104:7;3067:33;3086:14;3067:16;:33;:::i;:::-;3066:45;;;;:::i;:::-;3045:66;;3142:1;3129:10;:14;3121:43;;;;-1:-1:-1;;;3121:43:7;;26236:2:644;3121:43:7;;;26218:21:644;26275:2;26255:18;;;26248:30;-1:-1:-1;;;26294:18:644;;;26287:46;26350:18;;3121:43:7;26034:340:644;3121:43:7;3175:18;-1:-1:-1;;;;;3207:45:7;;408:42:284;3207:45:7;3203:176;;;-1:-1:-1;3284:9:7;:23;;3203:176;;;-1:-1:-1;3354:9:7;:14;3203:176;3396:13;3388:43;;;;-1:-1:-1;;;3388:43:7;;26581:2:644;3388:43:7;;;26563:21:644;26620:2;26600:18;;;26593:30;-1:-1:-1;;;26639:18:644;;;26632:47;26696:18;;3388:43:7;26379:341:644;3388:43:7;3442:21;-1:-1:-1;;;;;3466:35:7;;;:84;;3529:21;3466:84;;;3504:22;:20;:22::i;:::-;3442:108;;3560:86;3597:9;3608:10;3620:13;3635:10;3560:36;:86::i;:::-;2922:731;;;2728:925;;;;:::o;3708:224::-;3851:7;3874:33;3880:3;3885:21;3874:5;:33::i;:::-;-1:-1:-1;3924:1:7;3708:224;;;;:::o;1273:185:54:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1384:18:54;;1339:35;;-1:-1:-1;1384:18:54;;:11;;-1:-1:-1;1384:18:54;;;;-1:-1:-1;1384:18:54;-1:-1:-1;1384:18:54;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;6538:198:288:-;6621:12;6652:77;6673:6;6681:4;6652:77;;;;;;;;;;;;;;;;;:20;:77::i;6711:270:237:-;6834:7;6854:17;6873:18;6895:25;6906:4;6912:1;6915;6918;6895:10;:25::i;:::-;6853:67;;;;6930:18;6942:5;6930:11;:18::i;:::-;-1:-1:-1;6965:9:237;6711:270;-1:-1:-1;;;;;6711:270:237:o;3865:203:224:-;-1:-1:-1;;;;;3985:14:224;;3925:15;3985:14;;;:7;:14;;;;;918::231;;1050:1;1032:19;;;;918:14;4044:17:224;3942:126;3865:203;;;:::o;898:906:286:-;1019:4;;1067;1019;;1109:567;1133:5;:12;1129:1;:16;1109:567;;;1166:10;1175:1;1166:10;;:::i;:::-;;;1190:20;1213:5;1219:1;1213:8;;;;;;;;:::i;:::-;;;;;;;1190:31;;1256:12;1240;:28;1236:430;;1391:44;;;;;;27270:19:644;;;27305:12;;;27298:28;;;27342:12;;1391:44:286;;;;;;;;;;;;1381:55;;;;;;1366:70;;1236:430;;;1578:44;;;;;;27270:19:644;;;27305:12;;;27298:28;;;27342:12;;1578:44:286;;;;;;;;;;;;1568:55;;;;;;1553:70;;1650:1;1641:10;;;;;:::i;:::-;;;1236:430;-1:-1:-1;1147:3:286;;;;:::i;:::-;;;;1109:567;;;-1:-1:-1;1769:20:286;;;;;-1:-1:-1;;;;898:906:286:o;11832:121:223:-;;;;:::o;7147:254:225:-;7338:56;7355:15;7365:4;7355:9;:15::i;:::-;7372:13;7382:2;7372:9;:13::i;:::-;7387:6;7338:16;:56::i;678:153:239:-;740:7;813:11;823:1;814:5;;;813:11;:::i;:::-;803:21;;804:5;;;803:21;:::i;9161:576:223:-;-1:-1:-1;;;;;9244:21:223;;9236:67;;;;-1:-1:-1;;;9236:67:223;;27567:2:644;9236:67:223;;;27549:21:644;27606:2;27586:18;;;27579:30;27645:34;27625:18;;;27618:62;-1:-1:-1;;;27696:18:644;;;27689:31;27737:19;;9236:67:223;27365:397:644;9236:67:223;-1:-1:-1;;;;;9399:18:223;;9374:22;9399:18;;;:9;:18;;;;;;9435:24;;;;9427:71;;;;-1:-1:-1;;;9427:71:223;;27969:2:644;9427:71:223;;;27951:21:644;28008:2;27988:18;;;27981:30;28047:34;28027:18;;;28020:62;-1:-1:-1;;;28098:18:644;;;28091:32;28140:19;;9427:71:223;27767:398:644;9427:71:223;-1:-1:-1;;;;;9532:18:223;;;;;;:9;:18;;;;;9553:23;;;9532:44;;9596:12;:22;;9570:6;;9532:18;9596:22;;9570:6;;9596:22;:::i;:::-;;;;-1:-1:-1;;9634:37:223;;2035:25:644;;;9660:1:223;;-1:-1:-1;;;;;9634:37:223;;;-1:-1:-1;;;;;;;;;;;9634:37:223;2023:2:644;2008:18;9634:37:223;;;;;;;9682:48;9702:7;9719:1;9723:6;9682:19;:48::i;9348:101:225:-;9411:7;9437:5;9441:1;9437;:5;:::i;8577:663::-;8809:12;;8747:17;;;;8843:8;;:35;;8858:5;8864:7;8870:1;8864:3;:7;:::i;:::-;8858:14;;;;;;;;:::i;:::-;;;;;;;;;;:20;-1:-1:-1;;;8858:20:225;;-1:-1:-1;;;;;8858:20:225;8843:35;;;8854:1;8843:35;-1:-1:-1;;;;;8831:47:225;;;8900:20;8903:9;8914:5;8900:2;:20;;:::i;:::-;8888:32;;8941:1;8935:3;:7;:51;;;;-1:-1:-1;8974:12:225;8946:5;8952:7;8958:1;8952:3;:7;:::i;:::-;8946:14;;;;;;;;:::i;:::-;;;;;;;;;;:24;;;:40;8935:51;8931:303;;;9025:29;9044:9;9025:18;:29::i;:::-;9002:5;9008:7;9014:1;9008:3;:7;:::i;:::-;9002:14;;;;;;;;:::i;:::-;;;;;;;;:20;;;:52;;;;;-1:-1:-1;;;;;9002:52:225;;;;;-1:-1:-1;;;;;9002:52:225;;;;;;8931:303;;;9085:5;9113:96;;;;;;;;9137:31;9155:12;9137:17;:31::i;:::-;9113:96;;;;;;9177:29;9196:9;9177:18;:29::i;:::-;-1:-1:-1;;;;;9113:96:225;;;;;;9085:138;;;;;;;-1:-1:-1;9085:138:225;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9085:138:225;;;;;;;;;;;;8931:303;8785:455;8577:663;;;;;;:::o;7944:627::-;8071:3;-1:-1:-1;;;;;8064:10:225;:3;-1:-1:-1;;;;;8064:10:225;;;:24;;;;;8087:1;8078:6;:10;8064:24;8060:505;;;-1:-1:-1;;;;;8108:17:225;;;8104:221;;-1:-1:-1;;;;;8203:17:225;;8146;8203;;;:12;:17;;;;;8146;;8186:54;;8222:9;8233:6;8186:16;:54::i;:::-;8145:95;;;;8284:3;-1:-1:-1;;;;;8263:47:225;;8289:9;8300;8263:47;;;;;;28344:25:644;;;28400:2;28385:18;;28378:34;28332:2;28317:18;;28170:248;8263:47:225;;;;;;;;8127:198;;8104:221;-1:-1:-1;;;;;8343:17:225;;;8339:216;;-1:-1:-1;;;;;8438:17:225;;8381;8438;;;:12;:17;;;;;8381;;8421:49;;8457:4;8463:6;8421:16;:49::i;:::-;8380:90;;;;8514:3;-1:-1:-1;;;;;8493:47:225;;8519:9;8530;8493:47;;;;;;28344:25:644;;;28400:2;28385:18;;28378:34;28332:2;28317:18;;28170:248;8493:47:225;;;;;;;;8362:193;;7944:627;;;:::o;508:385:284:-;659:12;655:49;;687:7;;655:49;-1:-1:-1;;;;;718:25:284;;408:42;718:25;714:173;;;759:37;783:3;788:7;759:23;:37::i;714:173::-;827:49;845:9;856:5;863:3;868:7;827:17;:49::i;6450:285:225:-;6534:28;6546:7;6555:6;6534:11;:28::i;:::-;3368:12:223;;-1:-1:-1;;;;;;6580:29:225;6572:90;;;;-1:-1:-1;;;6572:90:225;;28625:2:644;6572:90:225;;;28607:21:644;28664:2;28644:18;;;28637:30;28703:34;28683:18;;;28676:62;-1:-1:-1;;;28754:18:644;;;28747:46;28810:19;;6572:90:225;28423:412:644;6572:90:225;6673:55;6690:23;6715:4;6721:6;6673:16;:55::i;6922:387:288:-;7063:12;7095:18;7106:6;7095:10;:18::i;:::-;7087:69;;;;-1:-1:-1;;;7087:69:288;;29042:2:644;7087:69:288;;;29024:21:644;29081:2;29061:18;;;29054:30;29120:34;29100:18;;;29093:62;-1:-1:-1;;;29171:18:644;;;29164:36;29217:19;;7087:69:288;28840:402:644;7087:69:288;7168:12;7182:23;7209:6;-1:-1:-1;;;;;7209:19:288;7229:4;7209:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7167:67;;;;7251:51;7268:7;7277:10;7289:12;7251:16;:51::i;:::-;7244:58;6922:387;-1:-1:-1;;;;;;6922:387:288:o;5084:1494:237:-;5210:7;;-1:-1:-1;;;;;6121:79:237;;6117:161;;;-1:-1:-1;6232:1:237;;-1:-1:-1;6236:30:237;6216:51;;6117:161;6389:24;;;6372:14;6389:24;;;;;;;;;29753:25:644;;;29826:4;29814:17;;29794:18;;;29787:45;;;;29848:18;;;29841:34;;;29891:18;;;29884:34;;;6389:24:237;;29725:19:644;;6389:24:237;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6389:24:237;;-1:-1:-1;;6389:24:237;;;-1:-1:-1;;;;;;;6427:20:237;;6423:101;;6479:1;6483:29;6463:50;;;;;;;6423:101;6542:6;-1:-1:-1;6550:20:237;;-1:-1:-1;5084:1494:237;;;;;;;;:::o;585:511::-;662:20;653:5;:29;;;;;;;;:::i;:::-;;649:441;;;585:511;:::o;649:441::-;758:29;749:5;:38;;;;;;;;:::i;:::-;;745:345;;;803:34;;-1:-1:-1;;;803:34:237;;30263:2:644;803:34:237;;;30245:21:644;30302:2;30282:18;;;30275:30;-1:-1:-1;;;30321:18:644;;;30314:54;30385:18;;803:34:237;30061:348:644;745:345:237;867:35;858:5;:44;;;;;;;;:::i;:::-;;854:236;;;918:41;;-1:-1:-1;;;918:41:237;;30616:2:644;918:41:237;;;30598:21:644;30655:2;30635:18;;;30628:30;30694:33;30674:18;;;30667:61;30745:18;;918:41:237;30414:355:644;854:236:237;989:30;980:5;:39;;;;;;;;:::i;:::-;;976:114;;;1035:44;;-1:-1:-1;;;1035:44:237;;30976:2:644;1035:44:237;;;30958:21:644;31015:2;30995:18;;;30988:30;31054:34;31034:18;;;31027:62;-1:-1:-1;;;31105:18:644;;;31098:32;31147:19;;1035:44:237;30774:398:644;1135:192:240;1192:7;-1:-1:-1;;;;;1219:26:240;;;1211:78;;;;-1:-1:-1;;;1211:78:240;;31379:2:644;1211:78:240;;;31361:21:644;31418:2;31398:18;;;31391:30;31457:34;31437:18;;;31430:62;-1:-1:-1;;;31508:18:644;;;31501:37;31555:19;;1211:78:240;31177:403:644;9246:96:225;9304:7;9330:5;9334:1;9330;:5;:::i;2532:292:284:-;2714:12;2732:2;-1:-1:-1;;;;;2732:7:284;2748:5;2732:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2713:46;;;2777:7;2769:48;;;;-1:-1:-1;;;2769:48:284;;31997:2:644;2769:48:284;;;31979:21:644;32036:2;32016:18;;;32009:30;-1:-1:-1;;;32055:18:644;;;32048:58;32123:18;;2769:48:284;31795:352:644;2073:396:284;2234:3;-1:-1:-1;;;;;2225:12:284;:5;-1:-1:-1;;;;;2225:12:284;;2221:49;;;2253:7;;2221:49;-1:-1:-1;;;;;2284:22:284;;2301:4;2284:22;2280:183;;;2322:44;-1:-1:-1;;;;;2322:30:284;;2353:3;2358:7;2322:30;:44::i;2280:183::-;2397:55;-1:-1:-1;;;;;2397:34:284;;2432:5;2439:3;2444:7;2397:34;:55::i;8452:389:223:-;-1:-1:-1;;;;;8535:21:223;;8527:65;;;;-1:-1:-1;;;8527:65:223;;32354:2:644;8527:65:223;;;32336:21:644;32393:2;32373:18;;;32366:30;32432:33;32412:18;;;32405:61;32483:18;;8527:65:223;32152:355:644;8527:65:223;8679:6;8663:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8695:18:223;;;;;;:9;:18;;;;;:28;;8717:6;;8695:18;:28;;8717:6;;8695:28;:::i;:::-;;;;-1:-1:-1;;8738:37:223;;2035:25:644;;;-1:-1:-1;;;;;8738:37:223;;;8755:1;;-1:-1:-1;;;;;;;;;;;8738:37:223;2023:2:644;2008:18;8738:37:223;;;;;;;8786:48;8814:1;8818:7;8827:6;8786:19;:48::i;:::-;8452:389;;:::o;1137:320:288:-;-1:-1:-1;;;;;1427:19:288;;:23;;;1137:320::o;7529:692::-;7675:12;7703:7;7699:516;;;-1:-1:-1;7733:10:288;7726:17;;7699:516;7844:17;;:21;7840:365;;8038:10;8032:17;8098:15;8085:10;8081:2;8077:19;8070:44;7840:365;8177:12;8170:20;;-1:-1:-1;;;8170:20:288;;;;;;;;:::i;735:205:226:-;874:58;;-1:-1:-1;;;;;32704:32:644;;874:58:226;;;32686:51:644;32753:18;;;32746:34;;;847:86:226;;867:5;;-1:-1:-1;;;897:23:226;32659:18:644;;874:58:226;;;;-1:-1:-1;;874:58:226;;;;;;;;;;;;;;-1:-1:-1;;;;;874:58:226;-1:-1:-1;;;;;;874:58:226;;;;;;;;;;847:19;:86::i;946:241::-;1111:68;;-1:-1:-1;;;;;33049:15:644;;;1111:68:226;;;33031:34:644;33101:15;;33081:18;;;33074:43;33133:18;;;33126:34;;;1084:96:226;;1104:5;;-1:-1:-1;;;1134:27:226;32966:18:644;;1111:68:226;32791:375:644;3241:706:226;3660:23;3686:69;3714:4;3686:69;;;;;;;;;;;;;;;;;3694:5;-1:-1:-1;;;;;3686:27:226;;;:69;;;;;:::i;:::-;3769:17;;3660:95;;-1:-1:-1;3769:21:226;3765:176;;3864:10;3853:30;;;;;;;;;;;;:::i;:::-;3845:85;;;;-1:-1:-1;;;3845:85:226;;33623:2:644;3845:85:226;;;33605:21:644;33662:2;33642:18;;;33635:30;33701:34;33681:18;;;33674:62;-1:-1:-1;;;33752:18:644;;;33745:40;33802:19;;3845:85:226;33421:406:644;3827:223:288;3960:12;3991:52;4013:6;4021:4;4027:1;4030:12;3991:21;:52::i;:::-;3984:59;3827:223;-1:-1:-1;;;;3827:223:288:o;4914:501::-;5079:12;5136:5;5111:21;:30;;5103:81;;;;-1:-1:-1;;;5103:81:288;;34034:2:644;5103:81:288;;;34016:21:644;34073:2;34053:18;;;34046:30;34112:34;34092:18;;;34085:62;-1:-1:-1;;;34163:18:644;;;34156:36;34209:19;;5103:81:288;33832:402:644;5103:81:288;5202:18;5213:6;5202:10;:18::i;:::-;5194:60;;;;-1:-1:-1;;;5194:60:288;;34441:2:644;5194:60:288;;;34423:21:644;34480:2;34460:18;;;34453:30;34519:31;34499:18;;;34492:59;34568:18;;5194:60:288;34239:353:644;5194:60:288;5266:12;5280:23;5307:6;-1:-1:-1;;;;;5307:11:288;5327:5;5335:4;5307:33;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5265:75;;;;5357:51;5374:7;5383:10;5395:12;5357:16;:51::i;:::-;5350:58;4914:501;-1:-1:-1;;;;;;;4914:501:288:o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:258:644;86:1;96:113;110:6;107:1;104:13;96:113;;;186:11;;;180:18;167:11;;;160:39;132:2;125:10;96:113;;;227:6;224:1;221:13;218:48;;;-1:-1:-1;;262:1:644;244:16;;237:27;14:258::o;277:::-;319:3;357:5;351:12;384:6;379:3;372:19;400:63;456:6;449:4;444:3;440:14;433:4;426:5;422:16;400:63;:::i;:::-;517:2;496:15;-1:-1:-1;;492:29:644;483:39;;;;524:4;479:50;;277:258;-1:-1:-1;;277:258:644:o;540:220::-;689:2;678:9;671:21;652:4;709:45;750:2;739:9;735:18;727:6;709:45;:::i;973:173::-;1041:20;;-1:-1:-1;;;;;1090:31:644;;1080:42;;1070:70;;1136:1;1133;1126:12;1070:70;973:173;;;:::o;1151:254::-;1219:6;1227;1280:2;1268:9;1259:7;1255:23;1251:32;1248:52;;;1296:1;1293;1286:12;1248:52;1319:29;1338:9;1319:29;:::i;:::-;1309:39;1395:2;1380:18;;;;1367:32;;-1:-1:-1;;;1151:254:644:o;1698:186::-;1757:6;1810:2;1798:9;1789:7;1785:23;1781:32;1778:52;;;1826:1;1823;1816:12;1778:52;1849:29;1868:9;1849:29;:::i;2071:328::-;2148:6;2156;2164;2217:2;2205:9;2196:7;2192:23;2188:32;2185:52;;;2233:1;2230;2223:12;2185:52;2256:29;2275:9;2256:29;:::i;:::-;2246:39;;2304:38;2338:2;2327:9;2323:18;2304:38;:::i;:::-;2294:48;;2389:2;2378:9;2374:18;2361:32;2351:42;;2071:328;;;;;:::o;2775:118::-;2861:5;2854:13;2847:21;2840:5;2837:32;2827:60;;2883:1;2880;2873:12;2898:524;2998:6;3006;3059:2;3047:9;3038:7;3034:23;3030:32;3027:52;;;3075:1;3072;3065:12;3027:52;3115:9;3102:23;-1:-1:-1;;;;;3140:6:644;3137:30;3134:50;;;3180:1;3177;3170:12;3134:50;3203:22;;3259:3;3241:16;;;3237:26;3234:46;;;3276:1;3273;3266:12;3234:46;3299:2;-1:-1:-1;3351:2:644;3336:18;;3323:32;3364:28;3323:32;3364:28;:::i;:::-;3411:5;3401:15;;;2898:524;;;;;:::o;3427:180::-;3486:6;3539:2;3527:9;3518:7;3514:23;3510:32;3507:52;;;3555:1;3552;3545:12;3507:52;-1:-1:-1;3578:23:644;;3427:180;-1:-1:-1;3427:180:644:o;3809:163::-;3876:5;3921:3;3912:6;3907:3;3903:16;3899:26;3896:46;;;3938:1;3935;3928:12;3977:127;4038:10;4033:3;4029:20;4026:1;4019:31;4069:4;4066:1;4059:15;4093:4;4090:1;4083:15;4109:631;4173:5;-1:-1:-1;;;;;4244:2:644;4236:6;4233:14;4230:40;;;4250:18;;:::i;:::-;4325:2;4319:9;4293:2;4379:15;;-1:-1:-1;;4375:24:644;;;4401:2;4371:33;4367:42;4355:55;;;4425:18;;;4445:22;;;4422:46;4419:72;;;4471:18;;:::i;:::-;4511:10;4507:2;4500:22;4540:6;4531:15;;4570:6;4562;4555:22;4610:3;4601:6;4596:3;4592:16;4589:25;4586:45;;;4627:1;4624;4617:12;4586:45;4677:6;4672:3;4665:4;4657:6;4653:17;4640:44;4732:1;4725:4;4716:6;4708;4704:19;4700:30;4693:41;;;;4109:631;;;;;:::o;4745:1006::-;4893:6;4901;4909;4917;4925;4933;4986:3;4974:9;4965:7;4961:23;4957:33;4954:53;;;5003:1;5000;4993:12;4954:53;5026:29;5045:9;5026:29;:::i;:::-;5016:39;;5102:2;5091:9;5087:18;5074:32;5064:42;;5125:38;5159:2;5148:9;5144:18;5125:38;:::i;:::-;5115:48;;5210:2;5199:9;5195:18;5182:32;5172:42;;5265:3;5254:9;5250:19;5237:33;-1:-1:-1;;;;;5330:2:644;5322:6;5319:14;5316:34;;;5346:1;5343;5336:12;5316:34;5369:74;5435:7;5426:6;5415:9;5411:22;5369:74;:::i;:::-;5359:84;;5496:3;5485:9;5481:19;5468:33;5452:49;;5526:2;5516:8;5513:16;5510:36;;;5542:1;5539;5532:12;5510:36;-1:-1:-1;5565:24:644;;5620:4;5612:13;;5608:27;-1:-1:-1;5598:55:644;;5649:1;5646;5639:12;5598:55;5672:73;5737:7;5732:2;5719:16;5714:2;5710;5706:11;5672:73;:::i;:::-;5662:83;;;4745:1006;;;;;;;;:::o;5756:450::-;5825:6;5878:2;5866:9;5857:7;5853:23;5849:32;5846:52;;;5894:1;5891;5884:12;5846:52;5934:9;5921:23;-1:-1:-1;;;;;5959:6:644;5956:30;5953:50;;;5999:1;5996;5989:12;5953:50;6022:22;;6075:4;6067:13;;6063:27;-1:-1:-1;6053:55:644;;6104:1;6101;6094:12;6053:55;6127:73;6192:7;6187:2;6174:16;6169:2;6165;6161:11;6127:73;:::i;6211:626::-;6308:6;6316;6369:2;6357:9;6348:7;6344:23;6340:32;6337:52;;;6385:1;6382;6375:12;6337:52;6425:9;6412:23;-1:-1:-1;;;;;6495:2:644;6487:6;6484:14;6481:34;;;6511:1;6508;6501:12;6481:34;6549:6;6538:9;6534:22;6524:32;;6594:7;6587:4;6583:2;6579:13;6575:27;6565:55;;6616:1;6613;6606:12;6565:55;6656:2;6643:16;6682:2;6674:6;6671:14;6668:34;;;6698:1;6695;6688:12;6668:34;6751:7;6746:2;6736:6;6733:1;6729:14;6725:2;6721:23;6717:32;6714:45;6711:65;;;6772:1;6769;6762:12;6711:65;6803:2;6795:11;;;;;6825:6;;-1:-1:-1;6211:626:644;;-1:-1:-1;;;;6211:626:644:o;6842:801::-;7002:4;7031:2;7071;7060:9;7056:18;7101:2;7090:9;7083:21;7124:6;7159;7153:13;7190:6;7182;7175:22;7228:2;7217:9;7213:18;7206:25;;7290:2;7280:6;7277:1;7273:14;7262:9;7258:30;7254:39;7240:53;;7328:2;7320:6;7316:15;7349:1;7359:255;7373:6;7370:1;7367:13;7359:255;;;7466:2;7462:7;7450:9;7442:6;7438:22;7434:36;7429:3;7422:49;7494:40;7527:6;7518;7512:13;7494:40;:::i;:::-;7484:50;-1:-1:-1;7592:12:644;;;;7557:15;;;;7395:1;7388:9;7359:255;;;-1:-1:-1;7631:6:644;;6842:801;-1:-1:-1;;;;;;;6842:801:644:o;7648:156::-;7714:20;;7774:4;7763:16;;7753:27;;7743:55;;7794:1;7791;7784:12;7809:531;7911:6;7919;7927;7935;7943;7951;8004:3;7992:9;7983:7;7979:23;7975:33;7972:53;;;8021:1;8018;8011:12;7972:53;8044:29;8063:9;8044:29;:::i;:::-;8034:39;;8120:2;8109:9;8105:18;8092:32;8082:42;;8171:2;8160:9;8156:18;8143:32;8133:42;;8194:36;8226:2;8215:9;8211:18;8194:36;:::i;:::-;8184:46;;8277:3;8266:9;8262:19;8249:33;8239:43;;8329:3;8318:9;8314:19;8301:33;8291:43;;7809:531;;;;;;;;:::o;8345:606::-;8456:6;8464;8472;8480;8488;8496;8504;8557:3;8545:9;8536:7;8532:23;8528:33;8525:53;;;8574:1;8571;8564:12;8525:53;8597:29;8616:9;8597:29;:::i;:::-;8587:39;;8645:38;8679:2;8668:9;8664:18;8645:38;:::i;:::-;8635:48;;8730:2;8719:9;8715:18;8702:32;8692:42;;8781:2;8770:9;8766:18;8753:32;8743:42;;8804:37;8836:3;8825:9;8821:19;8804:37;:::i;:::-;8794:47;;8888:3;8877:9;8873:19;8860:33;8850:43;;8940:3;8929:9;8925:19;8912:33;8902:43;;8345:606;;;;;;;;;;:::o;8956:769::-;9264:4;9293:3;9323:6;9312:9;9305:25;9366:6;9361:2;9350:9;9346:18;9339:34;9409:6;9404:2;9393:9;9389:18;9382:34;9452:6;9447:2;9436:9;9432:18;9425:34;9496:6;9490:3;9479:9;9475:19;9468:35;9540:6;9534:3;9523:9;9519:19;9512:35;9613:1;9609;9604:3;9600:11;9596:19;9588:6;9584:32;9578:3;9567:9;9563:19;9556:61;9654:2;9648:3;9637:9;9633:19;9626:31;9674:45;9715:2;9704:9;9700:18;9692:6;9674:45;:::i;:::-;9666:53;8956:769;-1:-1:-1;;;;;;;;;;;8956:769:644:o;9730:260::-;9798:6;9806;9859:2;9847:9;9838:7;9834:23;9830:32;9827:52;;;9875:1;9872;9865:12;9827:52;9898:29;9917:9;9898:29;:::i;:::-;9888:39;;9946:38;9980:2;9969:9;9965:18;9946:38;:::i;:::-;9936:48;;9730:260;;;;;:::o;9995:657::-;10125:6;10133;10141;10149;10157;10210:3;10198:9;10189:7;10185:23;10181:33;10178:53;;;10227:1;10224;10217:12;10178:53;10250:29;10269:9;10250:29;:::i;:::-;10240:39;;10326:2;10315:9;10311:18;10298:32;10288:42;;10349:38;10383:2;10372:9;10368:18;10349:38;:::i;:::-;10339:48;;10434:2;10423:9;10419:18;10406:32;10396:42;;10489:3;10478:9;10474:19;10461:33;-1:-1:-1;;;;;10509:6:644;10506:30;10503:50;;;10549:1;10546;10539:12;10503:50;10572:74;10638:7;10629:6;10618:9;10614:22;10572:74;:::i;:::-;10562:84;;;9995:657;;;;;;;;:::o;10657:350::-;10724:6;10732;10785:2;10773:9;10764:7;10760:23;10756:32;10753:52;;;10801:1;10798;10791:12;10753:52;10824:29;10843:9;10824:29;:::i;:::-;10814:39;;10903:2;10892:9;10888:18;10875:32;10947:10;10940:5;10936:22;10929:5;10926:33;10916:61;;10973:1;10970;10963:12;11365:380;11444:1;11440:12;;;;11487;;;11508:61;;11562:4;11554:6;11550:17;11540:27;;11508:61;11615:2;11607:6;11604:14;11584:18;11581:38;11578:161;;;11661:10;11656:3;11652:20;11649:1;11642:31;11696:4;11693:1;11686:15;11724:4;11721:1;11714:15;11750:338;11952:2;11934:21;;;11991:2;11971:18;;;11964:30;-1:-1:-1;;;12025:2:644;12010:18;;12003:44;12079:2;12064:18;;11750:338::o;12093:127::-;12154:10;12149:3;12145:20;12142:1;12135:31;12185:4;12182:1;12175:15;12209:4;12206:1;12199:15;12225:128;12265:3;12296:1;12292:6;12289:1;12286:13;12283:39;;;12302:18;;:::i;:::-;-1:-1:-1;12338:9:644;;12225:128::o;12358:355::-;12560:2;12542:21;;;12599:2;12579:18;;;12572:30;12638:33;12633:2;12618:18;;12611:61;12704:2;12689:18;;12358:355::o;13356:522::-;13434:4;13440:6;13500:11;13487:25;13594:2;13590:7;13579:8;13563:14;13559:29;13555:43;13535:18;13531:68;13521:96;;13613:1;13610;13603:12;13521:96;13640:33;;13692:20;;;-1:-1:-1;;;;;;13724:30:644;;13721:50;;;13767:1;13764;13757:12;13721:50;13800:4;13788:17;;-1:-1:-1;13831:14:644;13827:27;;;13817:38;;13814:58;;;13868:1;13865;13858:12;13814:58;13356:522;;;;;:::o;13883:267::-;13972:6;13967:3;13960:19;14024:6;14017:5;14010:4;14005:3;14001:14;13988:43;-1:-1:-1;14076:1:644;14051:16;;;14069:4;14047:27;;;14040:38;;;;14132:2;14111:15;;;-1:-1:-1;;14107:29:644;14098:39;;;14094:50;;13883:267::o;14155:1363::-;14374:2;14363:9;14356:21;14426:6;14413:20;14408:2;14397:9;14393:18;14386:48;14495:4;14487:6;14483:17;14470:31;14465:2;14454:9;14450:18;14443:59;14564:2;14556:6;14552:15;14539:29;14533:3;14522:9;14518:19;14511:58;14631:2;14623:6;14619:15;14606:29;14600:3;14589:9;14585:19;14578:58;14698:3;14690:6;14686:16;14673:30;14667:3;14656:9;14652:19;14645:59;14766:3;14758:6;14754:16;14741:30;14735:3;14724:9;14720:19;14713:59;14337:4;14801:36;14832:3;14824:6;14820:16;14801:36;:::i;:::-;-1:-1:-1;;;;;14898:38:644;14856:6;14878:18;;;14871:66;;;;14997:3;14985:16;;14972:30;;15053:14;15049:27;;;-1:-1:-1;;15045:41:644;15021:66;;15011:94;;15101:1;15098;15091:12;15011:94;15127:31;;;;15181:19;;-1:-1:-1;;;;;15212:30:644;;15209:50;;;15255:1;15252;15245:12;15209:50;15303:6;15287:14;15283:27;15275:6;15271:40;15268:60;;;15324:1;15321;15314:12;15268:60;15365:2;15359:3;15348:9;15344:19;15337:31;15385:73;15453:3;15442:9;15438:19;15430:6;15423:4;15416:5;15412:16;15385:73;:::i;:::-;15377:81;;;;;15467:45;15506:4;15495:9;15491:20;15483:6;1480:13;1473:21;1461:34;;1410:91;15870:125;15910:4;15938:1;15935;15932:8;15929:34;;;15943:18;;:::i;:::-;-1:-1:-1;15980:9:644;;15870:125::o;16000:127::-;16061:10;16056:3;16052:20;16049:1;16042:31;16092:4;16089:1;16082:15;16116:4;16113:1;16106:15;17064:135;17103:3;-1:-1:-1;;17124:17:644;;17121:43;;;17144:18;;:::i;:::-;-1:-1:-1;17191:1:644;17180:13;;17064:135::o;19651:545::-;19744:4;19750:6;19810:11;19797:25;19904:2;19900:7;19889:8;19873:14;19869:29;19865:43;19845:18;19841:68;19831:96;;19923:1;19920;19913:12;19831:96;19950:33;;20002:20;;;-1:-1:-1;;;;;;20034:30:644;;20031:50;;;20077:1;20074;20067:12;20031:50;20110:4;20098:17;;-1:-1:-1;20161:1:644;20157:14;;;20141;20137:35;20127:46;;20124:66;;;20186:1;20183;20176:12;25639:168;25679:7;25745:1;25741;25737:6;25733:14;25730:1;25727:21;25722:1;25715:9;25708:17;25704:45;25701:71;;;25752:18;;:::i;:::-;-1:-1:-1;25792:9:644;;25639:168::o;25812:217::-;25852:1;25878;25868:132;;25922:10;25917:3;25913:20;25910:1;25903:31;25957:4;25954:1;25947:15;25985:4;25982:1;25975:15;25868:132;-1:-1:-1;26014:9:644;;25812:217::o;26725:383::-;26922:2;26911:9;26904:21;26885:4;26948:45;26989:2;26978:9;26974:18;26966:6;26948:45;:::i;:::-;27041:9;27033:6;27029:22;27024:2;27013:9;27009:18;27002:50;27069:33;27095:6;27087;27069:33;:::i;:::-;27061:41;26725:383;-1:-1:-1;;;;;26725:383:644:o;29247:274::-;29376:3;29414:6;29408:13;29430:53;29476:6;29471:3;29464:4;29456:6;29452:17;29430:53;:::i;:::-;29499:16;;;;;29247:274;-1:-1:-1;;29247:274:644:o;29929:127::-;29990:10;29985:3;29981:20;29978:1;29971:31;30021:4;30018:1;30011:15;30045:4;30042:1;30035:15;33171:245;33238:6;33291:2;33279:9;33270:7;33266:23;33262:32;33259:52;;;33307:1;33304;33297:12;33259:52;33339:9;33333:16;33358:28;33380:5;33358:28;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "47279": [
        {
          "start": 2023,
          "length": 32
        }
      ],
      "47281": [
        {
          "start": 1981,
          "length": 32
        }
      ],
      "47283": [
        {
          "start": 1939,
          "length": 32
        }
      ],
      "47288": [
        {
          "start": 4304,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "DOMAIN_SEPARATOR()": "3644e515",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "checkpoints(address,uint32)": "f1127ed8",
    "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": "84bb1e42",
    "claimCondition()": "d637ed59",
    "contractURI()": "e8a3d485",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "delegate(address)": "5c19a95c",
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": "c3cda520",
    "delegates(address)": "587cde1e",
    "getPastTotalSupply(uint256)": "8e539e8c",
    "getPastVotes(address,uint256)": "3a46b1a8",
    "getSupplyClaimedByWallet(address)": "35b65e1f",
    "getVotes(address)": "9ab24eb0",
    "increaseAllowance(address,uint256)": "39509351",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nonces(address)": "7ecebe00",
    "numCheckpoints(address)": "6fcfff45",
    "owner()": "8da5cb5b",
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
    "primarySaleRecipient()": "079fe40e",
    "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": "426cfaf3",
    "setContractURI(string)": "938e3d7b",
    "setOwner(address)": "13af4035",
    "setPrimarySaleRecipient(address)": "6f4f2837",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": "eec8897c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_primarySaleRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimarySaleRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getSupplyClaimedByWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primarySaleRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"_condition\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"}],\"name\":\"setPrimarySaleRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Caller should own the `_amount` of tokens.\",\"params\":{\"_amount\":\"The number of tokens to burn.\"}},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"details\":\"Lets an account claim tokens.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"Delegate votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`\"},\"delegates(address)\":{\"details\":\"Get the address `account` is currently delegating to.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined\"},\"getPastVotes(address,uint256)\":{\"details\":\"Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined\"},\"getSupplyClaimedByWallet(address)\":{\"details\":\"Returns the supply claimed by claimer for active conditionId.\"},\"getVotes(address)\":{\"details\":\"Gets the current votes balance for `account`\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"primarySaleRecipient()\":{\"details\":\"Returns primary sale recipient address.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"details\":\"Lets a contract admin set claim conditions.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setPrimarySaleRecipient(address)\":{\"details\":\"Caller should be authorized to set primary sales info.                  See {_canSetPrimarySaleRecipient}.                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.\",\"params\":{\"_saleRecipient\":\"Address to be set as new recipient of primary sales.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))\":{\"details\":\"Checks a request to claim NFTs against the active claim condition's criteria.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimConditionUpdated((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Emitted when the contract's claim conditions are updated.\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are claimed via `claim`.\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner a given amount of their tokens.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setPrimarySaleRecipient(address)\":{\"notice\":\"Updates primary sale recipient.\"}},\"notice\":\"BASE:      ERC20Votes      EXTENSION: DropSinglePhase  The `ERC20Drop` contract uses the `DropSinglePhase` extensions, along with `ERC20Votes`.  It implements the ERC20 standard, along with the following additions to standard ERC20 logic:      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by                             presenting a message signed by the account.  The `drop` mechanism in the `DropSinglePhase` extension is a distribution mechanism tokens. It lets  you set restrictions such as a price to charge, an allowlist etc. when an address atttempts to mint tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC20DropVote.sol\":\"ERC20DropVote\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/base/ERC20DropVote.sol\":{\"keccak256\":\"0x8da4e838881ada6083a292cc755a7600282e2a61045bb05177e702e6d479ef8f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3d0681828628b641ef3fabcb793016a1e36bc3f876f27fb725bfbe6a3c5b47c2\",\"dweb:/ipfs/QmS9dRsuPie1VGtkabhaSL2haika2WoKCXP3iNaPfF7YYM\"]},\"contracts/eip/interface/IERC20.sol\":{\"keccak256\":\"0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592\",\"dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA\"]},\"contracts/eip/interface/IERC20Metadata.sol\":{\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65\",\"dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1\"]},\"contracts/eip/interface/IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/DropSinglePhase.sol\":{\"keccak256\":\"0x836429b5346bd4f6a2078e5b2db2702a692afddc74f316a92fd6c1335f03ff3a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://bc0858bb7a2c05013eb6352cc47087d6334824a32cc8545e549dddcf69a0dc31\",\"dweb:/ipfs/QmPMDq6F9G9u4nGEQTUPpUv7pm3cm3vY5hcb6ue9paEmGS\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2\",\"dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/PrimarySale.sol\":{\"keccak256\":\"0x9ef1ad82fadf988a07f4034b92ccdb3281682693e41759a79042814d36095f42\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0d962b48453e1f50b808193135c2f14265324fa8b75fe3b405ef7836e38921f7\",\"dweb:/ipfs/QmZDLNsZQj9kNcb15nBuWRpPwDdDvJS2gtFwqEs2Lwxb1N\"]},\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IDropSinglePhase.sol\":{\"keccak256\":\"0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9\",\"dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IPrimarySale.sol\":{\"keccak256\":\"0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869\",\"dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF\"]},\"contracts/external-deps/openzeppelin/governance/utils/IVotes.sol\":{\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f41fe2bddc33c17ccccfc25379b1869354e9ee62d8b28d2acc95229eeba37a86\",\"dweb:/ipfs/Qmb6SF2XL2uSvH6k5JSjtx4Xoqz41ACkhdAhtbW1Yh3RiY\"]},\"contracts/external-deps/openzeppelin/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x7f3dc5aeafe05fc114cf580056869cfc017e173f510dccec06b65b8199af139b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99fd2c9705e29c559783f8a63b356bb0e27b35d92a5383b331e342769d3d7c08\",\"dweb:/ipfs/QmXsPDArztRMiNzondL6b9JRxzENZPvPpKrrqwt9ikMFAA\"]},\"contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0x4bd6e2c824d3306bf73098f468366fc5ab8bc302065b8dbe40100115ac19579c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63c8e1da97d932e80e6916c068c7d275b0de0fd8ba42ddcf8949febd94a4455a\",\"dweb:/ipfs/QmSaKN8JXUiEwqTJZ7DhjocMwppXr6725ozguwdtHmw7Sn\"]},\"contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol\":{\"keccak256\":\"0x4bc56493138c15be393a406f26235def55a3aeea9072c78b37636978aeb78247\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32d281d685a548efcce017392bde241810793ecf2888c63d7c87b14ad1cb6e34\",\"dweb:/ipfs/QmTLzjD7a8kTK5Ek26jKfMr5H8GTjLx6KgGPSccWNas85B\"]},\"contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xa6149938a7c7c8af4244743aeaafcfb1fd9ce15ad45de58fa9576f0ed5599b2c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://839aa4ea6ef6d1972881bfd7420a9ddcd2f37139e3f0bf25310f93f48410702d\",\"dweb:/ipfs/QmSH65kStfbgMbfjFdfJqV412omPy6nB1JMvMt9q7SsytW\"]},\"contracts/external-deps/openzeppelin/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/external-deps/openzeppelin/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"contracts/external-deps/openzeppelin/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x2e5b68f695b674731ee7f041a4924d7bb917b87d1efc8cf8ec00904ee7ab8b49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f0ead0687405faad7c08e19bfa4d26d3517ca30fa5bdf5b7b77f09d074f6918\",\"dweb:/ipfs/QmaovoMzoEnW8t8EbuA5XXrUxXvgEmNk7F9aqzR56BQA6v\"]},\"contracts/external-deps/openzeppelin/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba\",\"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT\"]},\"contracts/external-deps/openzeppelin/utils/math/Math.sol\":{\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab84f13e6e6e0823854a0cddd49e96df052092d5919f95587607f0ed28a64cb6\",\"dweb:/ipfs/QmbNtqAq23ZDjCzHukQaa7B3y6rcobscm6FZF5PMQXcnVr\"]},\"contracts/external-deps/openzeppelin/utils/math/SafeCast.sol\":{\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb62abcee612c175f1b9bc70e5dfe5bd23473c99987ade6e80e291f68dc60ff1\",\"dweb:/ipfs/QmZCMajhG7FtRYNDwBchXN89mXR6HLPVzr9732qfUdNf9E\"]},\"contracts/infra/interface/IWETH.sol\":{\"keccak256\":\"0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1\",\"dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU\"]},\"contracts/lib/CurrencyTransferLib.sol\":{\"keccak256\":\"0x4a30bc9a8cd6cc8b855621fb1a651e2c3a1639b0ad153f1139c3ba463605672d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://417cc64ec6393f3cc89981ca9c32bbcc444a5f91363d69f84dd8ace888b2b859\",\"dweb:/ipfs/QmZeaQsYGx4VNoP8e1fcwC87PwvyakheWYeuwEwhFSJnvB\"]},\"contracts/lib/MerkleProof.sol\":{\"keccak256\":\"0xfeb51ecaba6f9c1649a143825dc3b7ca0eb9edff7787c7a54957dfd542f7ece0\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://8819ab0f7546a6a0dc126d5dbf019ba015563220689f661b1da4174f7ce87bbf\",\"dweb:/ipfs/QmT6Q9YQGMJbCWhE6G4ze8dsqjMyewnErTNGgLFSAHkFU7\"]},\"contracts/lib/TWAddress.sol\":{\"keccak256\":\"0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e\",\"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6\"]},\"contracts/lib/TWStrings.sol\":{\"keccak256\":\"0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9\",\"dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_primarySaleRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "resetEligibility",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "fromDelegate",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "toDelegate",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "DelegateChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "previousBalance",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "newBalance",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DelegateVotesChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "PrimarySaleRecipientUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DOMAIN_SEPARATOR",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "pos",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkpoints",
          "outputs": [
            {
              "internalType": "struct ERC20Votes.Checkpoint",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "fromBlock",
                  "type": "uint32"
                },
                {
                  "internalType": "uint224",
                  "name": "votes",
                  "type": "uint224"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "_allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "claimCondition",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegatee",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "delegate"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegatee",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "delegateBySig"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "delegates",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPastTotalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPastVotes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSupplyClaimedByWallet",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getVotes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "nonces",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "numCheckpoints",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permit"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "primarySaleRecipient",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "_condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "_resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_saleRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPrimarySaleRecipient"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "_allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isOverride",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "DOMAIN_SEPARATOR()": {
            "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "burn(uint256)": {
            "details": "Caller should own the `_amount` of tokens.",
            "params": {
              "_amount": "The number of tokens to burn."
            }
          },
          "checkpoints(address,uint32)": {
            "details": "Get the `pos`-th checkpoint for `account`."
          },
          "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
            "details": "Lets an account claim tokens."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "delegate(address)": {
            "details": "Delegate votes from the sender to `delegatee`."
          },
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "Delegates votes from signer to `delegatee`"
          },
          "delegates(address)": {
            "details": "Get the address `account` is currently delegating to."
          },
          "getPastTotalSupply(uint256)": {
            "details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"
          },
          "getPastVotes(address,uint256)": {
            "details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"
          },
          "getSupplyClaimedByWallet(address)": {
            "details": "Returns the supply claimed by claimer for active conditionId."
          },
          "getVotes(address)": {
            "details": "Gets the current votes balance for `account`"
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "nonces(address)": {
            "details": "See {IERC20Permit-nonces}."
          },
          "numCheckpoints(address)": {
            "details": "Get number of checkpoints for `account`."
          },
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "See {IERC20Permit-permit}."
          },
          "primarySaleRecipient()": {
            "details": "Returns primary sale recipient address."
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
            "details": "Lets a contract admin set claim conditions."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setPrimarySaleRecipient(address)": {
            "details": "Caller should be authorized to set primary sales info.                  See {_canSetPrimarySaleRecipient}.                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.",
            "params": {
              "_saleRecipient": "Address to be set as new recipient of primary sales."
            }
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": {
            "details": "Checks a request to claim NFTs against the active claim condition's criteria."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(uint256)": {
            "notice": "Lets an owner a given amount of their tokens."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setPrimarySaleRecipient(address)": {
            "notice": "Updates primary sale recipient."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC20DropVote.sol": "ERC20DropVote"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC20DropVote.sol": {
        "keccak256": "0x8da4e838881ada6083a292cc755a7600282e2a61045bb05177e702e6d479ef8f",
        "urls": [
          "bzz-raw://3d0681828628b641ef3fabcb793016a1e36bc3f876f27fb725bfbe6a3c5b47c2",
          "dweb:/ipfs/QmS9dRsuPie1VGtkabhaSL2haika2WoKCXP3iNaPfF7YYM"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20.sol": {
        "keccak256": "0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff",
        "urls": [
          "bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592",
          "dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20Metadata.sol": {
        "keccak256": "0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734",
        "urls": [
          "bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65",
          "dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20Permit.sol": {
        "keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
        "urls": [
          "bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
          "dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
        ],
        "license": "MIT"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DropSinglePhase.sol": {
        "keccak256": "0x836429b5346bd4f6a2078e5b2db2702a692afddc74f316a92fd6c1335f03ff3a",
        "urls": [
          "bzz-raw://bc0858bb7a2c05013eb6352cc47087d6334824a32cc8545e549dddcf69a0dc31",
          "dweb:/ipfs/QmPMDq6F9G9u4nGEQTUPpUv7pm3cm3vY5hcb6ue9paEmGS"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55",
        "urls": [
          "bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2",
          "dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/PrimarySale.sol": {
        "keccak256": "0x9ef1ad82fadf988a07f4034b92ccdb3281682693e41759a79042814d36095f42",
        "urls": [
          "bzz-raw://0d962b48453e1f50b808193135c2f14265324fa8b75fe3b405ef7836e38921f7",
          "dweb:/ipfs/QmZDLNsZQj9kNcb15nBuWRpPwDdDvJS2gtFwqEs2Lwxb1N"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimCondition.sol": {
        "keccak256": "0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6",
        "urls": [
          "bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459",
          "dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDropSinglePhase.sol": {
        "keccak256": "0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36",
        "urls": [
          "bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9",
          "dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IPrimarySale.sol": {
        "keccak256": "0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004",
        "urls": [
          "bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869",
          "dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/governance/utils/IVotes.sol": {
        "keccak256": "0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0",
        "urls": [
          "bzz-raw://f41fe2bddc33c17ccccfc25379b1869354e9ee62d8b28d2acc95229eeba37a86",
          "dweb:/ipfs/Qmb6SF2XL2uSvH6k5JSjtx4Xoqz41ACkhdAhtbW1Yh3RiY"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/ERC20.sol": {
        "keccak256": "0x7f3dc5aeafe05fc114cf580056869cfc017e173f510dccec06b65b8199af139b",
        "urls": [
          "bzz-raw://99fd2c9705e29c559783f8a63b356bb0e27b35d92a5383b331e342769d3d7c08",
          "dweb:/ipfs/QmXsPDArztRMiNzondL6b9JRxzENZPvPpKrrqwt9ikMFAA"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Permit.sol": {
        "keccak256": "0x4bd6e2c824d3306bf73098f468366fc5ab8bc302065b8dbe40100115ac19579c",
        "urls": [
          "bzz-raw://63c8e1da97d932e80e6916c068c7d275b0de0fd8ba42ddcf8949febd94a4455a",
          "dweb:/ipfs/QmSaKN8JXUiEwqTJZ7DhjocMwppXr6725ozguwdtHmw7Sn"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol": {
        "keccak256": "0x4bc56493138c15be393a406f26235def55a3aeea9072c78b37636978aeb78247",
        "urls": [
          "bzz-raw://32d281d685a548efcce017392bde241810793ecf2888c63d7c87b14ad1cb6e34",
          "dweb:/ipfs/QmTLzjD7a8kTK5Ek26jKfMr5H8GTjLx6KgGPSccWNas85B"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0xa6149938a7c7c8af4244743aeaafcfb1fd9ce15ad45de58fa9576f0ed5599b2c",
        "urls": [
          "bzz-raw://839aa4ea6ef6d1972881bfd7420a9ddcd2f37139e3f0bf25310f93f48410702d",
          "dweb:/ipfs/QmSH65kStfbgMbfjFdfJqV412omPy6nB1JMvMt9q7SsytW"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Counters.sol": {
        "keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
        "urls": [
          "bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
          "dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/cryptography/ECDSA.sol": {
        "keccak256": "0x2e5b68f695b674731ee7f041a4924d7bb917b87d1efc8cf8ec00904ee7ab8b49",
        "urls": [
          "bzz-raw://9f0ead0687405faad7c08e19bfa4d26d3517ca30fa5bdf5b7b77f09d074f6918",
          "dweb:/ipfs/QmaovoMzoEnW8t8EbuA5XXrUxXvgEmNk7F9aqzR56BQA6v"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/cryptography/EIP712.sol": {
        "keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
        "urls": [
          "bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
          "dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/math/Math.sol": {
        "keccak256": "0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2",
        "urls": [
          "bzz-raw://ab84f13e6e6e0823854a0cddd49e96df052092d5919f95587607f0ed28a64cb6",
          "dweb:/ipfs/QmbNtqAq23ZDjCzHukQaa7B3y6rcobscm6FZF5PMQXcnVr"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/math/SafeCast.sol": {
        "keccak256": "0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7",
        "urls": [
          "bzz-raw://fb62abcee612c175f1b9bc70e5dfe5bd23473c99987ade6e80e291f68dc60ff1",
          "dweb:/ipfs/QmZCMajhG7FtRYNDwBchXN89mXR6HLPVzr9732qfUdNf9E"
        ],
        "license": "MIT"
      },
      "contracts/infra/interface/IWETH.sol": {
        "keccak256": "0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b",
        "urls": [
          "bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1",
          "dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/CurrencyTransferLib.sol": {
        "keccak256": "0x4a30bc9a8cd6cc8b855621fb1a651e2c3a1639b0ad153f1139c3ba463605672d",
        "urls": [
          "bzz-raw://417cc64ec6393f3cc89981ca9c32bbcc444a5f91363d69f84dd8ace888b2b859",
          "dweb:/ipfs/QmZeaQsYGx4VNoP8e1fcwC87PwvyakheWYeuwEwhFSJnvB"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/MerkleProof.sol": {
        "keccak256": "0xfeb51ecaba6f9c1649a143825dc3b7ca0eb9edff7787c7a54957dfd542f7ece0",
        "urls": [
          "bzz-raw://8819ab0f7546a6a0dc126d5dbf019ba015563220689f661b1da4174f7ce87bbf",
          "dweb:/ipfs/QmT6Q9YQGMJbCWhE6G4ze8dsqjMyewnErTNGgLFSAHkFU7"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWAddress.sol": {
        "keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
        "urls": [
          "bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
          "dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWStrings.sol": {
        "keccak256": "0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8",
        "urls": [
          "bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9",
          "dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt"
        ],
        "license": "Apache 2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC20DropVote.sol",
    "id": 3060,
    "exportedSymbols": {
      "Context": [
        48483
      ],
      "ContractMetadata": [
        17526
      ],
      "Counters": [
        48557
      ],
      "CurrencyTransferLib": [
        63578
      ],
      "DropSinglePhase": [
        19497
      ],
      "ECDSA": [
        49745
      ],
      "EIP712": [
        49899
      ],
      "ERC20": [
        47256
      ],
      "ERC20DropVote": [
        3059
      ],
      "ERC20Permit": [
        47498
      ],
      "ERC20Votes": [
        48145
      ],
      "IClaimCondition": [
        32285
      ],
      "IContractMetadata": [
        32437
      ],
      "IDropSinglePhase": [
        32707
      ],
      "IERC20": [
        13899
      ],
      "IERC20Metadata": [
        13918
      ],
      "IERC20Permit": [
        13954
      ],
      "IMulticall": [
        32926
      ],
      "IOwnable": [
        33183
      ],
      "IPrimarySale": [
        33345
      ],
      "IVotes": [
        45384
      ],
      "IWETH": [
        54557
      ],
      "Math": [
        49987
      ],
      "MerkleProof": [
        63678
      ],
      "Multicall": [
        20595
      ],
      "Ownable": [
        21153
      ],
      "PrimarySale": [
        22067
      ],
      "SafeCast": [
        50380
      ],
      "SafeERC20": [
        48369
      ],
      "TWAddress": [
        64152
      ],
      "TWStrings": [
        64852
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:4953:7",
    "nodes": [
      {
        "id": 2807,
        "nodeType": "PragmaDirective",
        "src": "39:23:7",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 2808,
        "nodeType": "ImportDirective",
        "src": "86:77:7",
        "nodes": [],
        "absolutePath": "contracts/external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol",
        "file": "../external-deps/openzeppelin/token/ERC20/extensions/ERC20Votes.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3060,
        "sourceUnit": 48146,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2809,
        "nodeType": "ImportDirective",
        "src": "165:43:7",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3060,
        "sourceUnit": 17527,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2810,
        "nodeType": "ImportDirective",
        "src": "209:36:7",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3060,
        "sourceUnit": 20596,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2811,
        "nodeType": "ImportDirective",
        "src": "246:34:7",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3060,
        "sourceUnit": 21154,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2812,
        "nodeType": "ImportDirective",
        "src": "281:38:7",
        "nodes": [],
        "absolutePath": "contracts/extension/PrimarySale.sol",
        "file": "../extension/PrimarySale.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3060,
        "sourceUnit": 22068,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2813,
        "nodeType": "ImportDirective",
        "src": "320:42:7",
        "nodes": [],
        "absolutePath": "contracts/extension/DropSinglePhase.sol",
        "file": "../extension/DropSinglePhase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3060,
        "sourceUnit": 19498,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2814,
        "nodeType": "ImportDirective",
        "src": "364:40:7",
        "nodes": [],
        "absolutePath": "contracts/lib/CurrencyTransferLib.sol",
        "file": "../lib/CurrencyTransferLib.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 3060,
        "sourceUnit": 63579,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3059,
        "nodeType": "ContractDefinition",
        "src": "1305:3686:7",
        "nodes": [
          {
            "id": 2851,
            "nodeType": "FunctionDefinition",
            "src": "1595:278:7",
            "nodes": [],
            "body": {
              "id": 2850,
              "nodeType": "Block",
              "src": "1771:102:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2843,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2829,
                        "src": "1793:13:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2842,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21146,
                      "src": "1781:11:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 2844,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1781:26:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2845,
                  "nodeType": "ExpressionStatement",
                  "src": "1781:26:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2847,
                        "name": "_primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2835,
                        "src": "1844:21:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2846,
                      "name": "_setupPrimarySaleRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 22060,
                      "src": "1817:26:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 2848,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1817:49:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2849,
                  "nodeType": "ExpressionStatement",
                  "src": "1817:49:7"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 2838,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2831,
                    "src": "1755:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 2839,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2833,
                    "src": "1762:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 2840,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 2837,
                  "name": "ERC20Permit",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47498,
                  "src": "1743:11:7"
                },
                "nodeType": "ModifierInvocation",
                "src": "1743:27:7"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 2836,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2829,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "1624:13:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2851,
                  "src": "1616:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2828,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1616:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2831,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1661:5:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2851,
                  "src": "1647:19:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 2830,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1647:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2833,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1690:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2851,
                  "src": "1676:21:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 2832,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1676:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2835,
                  "mutability": "mutable",
                  "name": "_primarySaleRecipient",
                  "nameLocation": "1715:21:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2851,
                  "src": "1707:29:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2834,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1707:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1606:136:7"
            },
            "returnParameters": {
              "id": 2841,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1771:0:7"
            },
            "scope": 3059,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 2874,
            "nodeType": "FunctionDefinition",
            "src": "2275:164:7",
            "nodes": [],
            "body": {
              "id": 2873,
              "nodeType": "Block",
              "src": "2323:116:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2863,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2859,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "2351:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2860,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2351:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2858,
                            "name": "balanceOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46767,
                            "src": "2341:9:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 2861,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2341:21:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 2862,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2854,
                          "src": "2366:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2341:32:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6e6f7420656e6f7567682062616c616e6365",
                        "id": 2864,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2375:20:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        },
                        "value": "not enough balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        }
                      ],
                      "id": 2857,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2333:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2865,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2333:63:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2866,
                  "nodeType": "ExpressionStatement",
                  "src": "2333:63:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2868,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2412:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2869,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2412:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2870,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2854,
                        "src": "2424:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2867,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        47882
                      ],
                      "referencedDeclaration": 47882,
                      "src": "2406:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2406:26:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2872,
                  "nodeType": "ExpressionStatement",
                  "src": "2406:26:7"
                }
              ]
            },
            "documentation": {
              "id": 2852,
              "nodeType": "StructuredDocumentation",
              "src": "2058:212:7",
              "text": "  @notice          Lets an owner a given amount of their tokens.\n  @dev             Caller should own the `_amount` of tokens.\n  @param _amount   The number of tokens to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "2284:4:7",
            "parameters": {
              "id": 2855,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2854,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2297:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2874,
                  "src": "2289:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2853,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2289:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2288:17:7"
            },
            "returnParameters": {
              "id": 2856,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2323:0:7"
            },
            "scope": 3059,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 2970,
            "nodeType": "FunctionDefinition",
            "src": "2728:925:7",
            "nodes": [],
            "body": {
              "id": 2969,
              "nodeType": "Block",
              "src": "2922:731:7",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2889,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2887,
                      "name": "_pricePerToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2883,
                      "src": "2936:14:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 2888,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2954:1:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2936:19:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2900,
                  "nodeType": "IfStatement",
                  "src": "2932:103:7",
                  "trueBody": {
                    "id": 2899,
                    "nodeType": "Block",
                    "src": "2957:78:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2894,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2891,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "2979:3:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 2892,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "2979:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2893,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2992:1:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "2979:14:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "2156616c7565",
                              "id": 2895,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2995:8:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_208006903b0d1b8c530b3b2de29e1f765aa4311b3f136f1a342e9de039eda1b1",
                                "typeString": "literal_string \"!Value\""
                              },
                              "value": "!Value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_208006903b0d1b8c530b3b2de29e1f765aa4311b3f136f1a342e9de039eda1b1",
                                "typeString": "literal_string \"!Value\""
                              }
                            ],
                            "id": 2890,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2971:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2896,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2971:33:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2897,
                        "nodeType": "ExpressionStatement",
                        "src": "2971:33:7"
                      },
                      {
                        "functionReturnParameters": 2886,
                        "id": 2898,
                        "nodeType": "Return",
                        "src": "3018:7:7"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    2902
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2902,
                      "mutability": "mutable",
                      "name": "totalPrice",
                      "nameLocation": "3053:10:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 2969,
                      "src": "3045:18:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2901,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3045:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2909,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2908,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2905,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2903,
                            "name": "_quantityToClaim",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2879,
                            "src": "3067:16:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 2904,
                            "name": "_pricePerToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2883,
                            "src": "3086:14:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3067:33:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2906,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "3066:35:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "31",
                      "id": 2907,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3104:7:7",
                      "subdenomination": "ether",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000000000000000_by_1",
                        "typeString": "int_const 1000000000000000000"
                      },
                      "value": "1"
                    },
                    "src": "3066:45:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3045:66:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2913,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2911,
                          "name": "totalPrice",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2902,
                          "src": "3129:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 2912,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3142:1:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3129:14:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7175616e7469747920746f6f206c6f77",
                        "id": 2914,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3145:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_95a3372d1911e2925e89e306668e1a589c72f142035fcdac95957bce7fe59721",
                          "typeString": "literal_string \"quantity too low\""
                        },
                        "value": "quantity too low"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_95a3372d1911e2925e89e306668e1a589c72f142035fcdac95957bce7fe59721",
                          "typeString": "literal_string \"quantity too low\""
                        }
                      ],
                      "id": 2910,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3121:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2915,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3121:43:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2916,
                  "nodeType": "ExpressionStatement",
                  "src": "3121:43:7"
                },
                {
                  "assignments": [
                    2918
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2918,
                      "mutability": "mutable",
                      "name": "validMsgValue",
                      "nameLocation": "3180:13:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 2969,
                      "src": "3175:18:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 2917,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3175:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2919,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3175:18:7"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 2923,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2920,
                      "name": "_currency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2881,
                      "src": "3207:9:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 2921,
                        "name": "CurrencyTransferLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63578,
                        "src": "3220:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CurrencyTransferLib_$63578_$",
                          "typeString": "type(library CurrencyTransferLib)"
                        }
                      },
                      "id": 2922,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "NATIVE_TOKEN",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 63346,
                      "src": "3220:32:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3207:45:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 2939,
                    "nodeType": "Block",
                    "src": "3324:55:7",
                    "statements": [
                      {
                        "expression": {
                          "id": 2937,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2932,
                            "name": "validMsgValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2918,
                            "src": "3338:13:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2936,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2933,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "3354:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2934,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "3354:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 2935,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3367:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3354:14:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3338:30:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2938,
                        "nodeType": "ExpressionStatement",
                        "src": "3338:30:7"
                      }
                    ]
                  },
                  "id": 2940,
                  "nodeType": "IfStatement",
                  "src": "3203:176:7",
                  "trueBody": {
                    "id": 2931,
                    "nodeType": "Block",
                    "src": "3254:64:7",
                    "statements": [
                      {
                        "expression": {
                          "id": 2929,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2924,
                            "name": "validMsgValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2918,
                            "src": "3268:13:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2928,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2925,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "3284:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2926,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "3284:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 2927,
                              "name": "totalPrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2902,
                              "src": "3297:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3284:23:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3268:39:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2930,
                        "nodeType": "ExpressionStatement",
                        "src": "3268:39:7"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2942,
                        "name": "validMsgValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2918,
                        "src": "3396:13:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c6964206d73672076616c7565",
                        "id": 2943,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3411:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_de0d8376eff7771bcc57765656c140a92c651b9eeb4df686f809560770e7fe49",
                          "typeString": "literal_string \"Invalid msg value\""
                        },
                        "value": "Invalid msg value"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_de0d8376eff7771bcc57765656c140a92c651b9eeb4df686f809560770e7fe49",
                          "typeString": "literal_string \"Invalid msg value\""
                        }
                      ],
                      "id": 2941,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3388:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2944,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3388:43:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2945,
                  "nodeType": "ExpressionStatement",
                  "src": "3388:43:7"
                },
                {
                  "assignments": [
                    2947
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2947,
                      "mutability": "mutable",
                      "name": "saleRecipient",
                      "nameLocation": "3450:13:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 2969,
                      "src": "3442:21:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2946,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3442:7:7",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2958,
                  "initialValue": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 2953,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 2948,
                        "name": "_primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2877,
                        "src": "3466:21:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 2951,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3499:1:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 2950,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3491:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 2949,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3491:7:7",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2952,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3491:10:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "3466:35:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 2956,
                      "name": "_primarySaleRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2877,
                      "src": "3529:21:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 2957,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "3466:84:7",
                    "trueExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 2954,
                        "name": "primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22024,
                        "src": "3504:20:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 2955,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3504:22:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3442:108:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2962,
                        "name": "_currency",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2881,
                        "src": "3597:9:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 2963,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3608:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2964,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3608:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2965,
                        "name": "saleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2947,
                        "src": "3620:13:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2966,
                        "name": "totalPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2902,
                        "src": "3635:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 2959,
                        "name": "CurrencyTransferLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63578,
                        "src": "3560:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CurrencyTransferLib_$63578_$",
                          "typeString": "type(library CurrencyTransferLib)"
                        }
                      },
                      "id": 2961,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferCurrency",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 63383,
                      "src": "3560:36:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,address,uint256)"
                      }
                    },
                    "id": 2967,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3560:86:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2968,
                  "nodeType": "ExpressionStatement",
                  "src": "3560:86:7"
                }
              ]
            },
            "baseFunctions": [
              19481
            ],
            "documentation": {
              "id": 2875,
              "nodeType": "StructuredDocumentation",
              "src": "2642:81:7",
              "text": "@dev Collects and distributes the primary sale value of tokens being claimed."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_collectPriceOnClaim",
            "nameLocation": "2737:20:7",
            "overrides": {
              "id": 2885,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2913:8:7"
            },
            "parameters": {
              "id": 2884,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2877,
                  "mutability": "mutable",
                  "name": "_primarySaleRecipient",
                  "nameLocation": "2775:21:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2970,
                  "src": "2767:29:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2876,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2767:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2879,
                  "mutability": "mutable",
                  "name": "_quantityToClaim",
                  "nameLocation": "2814:16:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2970,
                  "src": "2806:24:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2878,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2806:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2881,
                  "mutability": "mutable",
                  "name": "_currency",
                  "nameLocation": "2848:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2970,
                  "src": "2840:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2880,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2840:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2883,
                  "mutability": "mutable",
                  "name": "_pricePerToken",
                  "nameLocation": "2875:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2970,
                  "src": "2867:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2882,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2867:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2757:138:7"
            },
            "returnParameters": {
              "id": 2886,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2922:0:7"
            },
            "scope": 3059,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 2989,
            "nodeType": "FunctionDefinition",
            "src": "3708:224:7",
            "nodes": [],
            "body": {
              "id": 2988,
              "nodeType": "Block",
              "src": "3864:68:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2982,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2973,
                        "src": "3880:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2983,
                        "name": "_quantityBeingClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2975,
                        "src": "3885:21:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2981,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        47859
                      ],
                      "referencedDeclaration": 47859,
                      "src": "3874:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2984,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3874:33:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2985,
                  "nodeType": "ExpressionStatement",
                  "src": "3874:33:7"
                },
                {
                  "expression": {
                    "hexValue": "30",
                    "id": 2986,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3924:1:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "functionReturnParameters": 2980,
                  "id": 2987,
                  "nodeType": "Return",
                  "src": "3917:8:7"
                }
              ]
            },
            "baseFunctions": [
              19491
            ],
            "documentation": {
              "id": 2971,
              "nodeType": "StructuredDocumentation",
              "src": "3659:44:7",
              "text": "@dev Transfers the tokens being claimed."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transferTokensOnClaim",
            "nameLocation": "3717:22:7",
            "overrides": {
              "id": 2977,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3825:8:7"
            },
            "parameters": {
              "id": 2976,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2973,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "3748:3:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2989,
                  "src": "3740:11:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2972,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3740:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2975,
                  "mutability": "mutable",
                  "name": "_quantityBeingClaimed",
                  "nameLocation": "3761:21:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 2989,
                  "src": "3753:29:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2974,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3753:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3739:44:7"
            },
            "returnParameters": {
              "id": 2980,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2979,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2989,
                  "src": "3851:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2978,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3851:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3850:9:7"
            },
            "scope": 3059,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3003,
            "nodeType": "FunctionDefinition",
            "src": "4027:125:7",
            "nodes": [],
            "body": {
              "id": 3002,
              "nodeType": "Block",
              "src": "4107:45:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3000,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2996,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4124:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 2997,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4124:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 2998,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "4138:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 2999,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4138:7:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4124:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2995,
                  "id": 3001,
                  "nodeType": "Return",
                  "src": "4117:28:7"
                }
              ]
            },
            "baseFunctions": [
              19496
            ],
            "documentation": {
              "id": 2990,
              "nodeType": "StructuredDocumentation",
              "src": "3938:84:7",
              "text": "@dev Checks whether platform fee info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetClaimConditions",
            "nameLocation": "4036:22:7",
            "overrides": {
              "id": 2992,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4083:8:7"
            },
            "parameters": {
              "id": 2991,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4058:2:7"
            },
            "returnParameters": {
              "id": 2995,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2994,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3003,
                  "src": "4101:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2993,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4101:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4100:6:7"
            },
            "scope": 3059,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3017,
            "nodeType": "FunctionDefinition",
            "src": "4248:121:7",
            "nodes": [],
            "body": {
              "id": 3016,
              "nodeType": "Block",
              "src": "4324:45:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3014,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3010,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4341:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3011,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4341:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3012,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "4355:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3013,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4355:7:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4341:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3009,
                  "id": 3015,
                  "nodeType": "Return",
                  "src": "4334:28:7"
                }
              ]
            },
            "baseFunctions": [
              17525
            ],
            "documentation": {
              "id": 3004,
              "nodeType": "StructuredDocumentation",
              "src": "4158:85:7",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "4257:18:7",
            "overrides": {
              "id": 3006,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4300:8:7"
            },
            "parameters": {
              "id": 3005,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4275:2:7"
            },
            "returnParameters": {
              "id": 3009,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3008,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3017,
                  "src": "4318:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3007,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4318:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4317:6:7"
            },
            "scope": 3059,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3030,
            "nodeType": "FunctionDefinition",
            "src": "4457:102:7",
            "nodes": [],
            "body": {
              "id": 3029,
              "nodeType": "Block",
              "src": "4514:45:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3027,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3023,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4531:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3024,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4531:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3025,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "4545:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3026,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4545:7:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4531:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3022,
                  "id": 3028,
                  "nodeType": "Return",
                  "src": "4524:28:7"
                }
              ]
            },
            "documentation": {
              "id": 3018,
              "nodeType": "StructuredDocumentation",
              "src": "4375:77:7",
              "text": "@dev Returns whether tokens can be minted in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canMint",
            "nameLocation": "4466:8:7",
            "parameters": {
              "id": 3019,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4474:2:7"
            },
            "returnParameters": {
              "id": 3022,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3021,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3030,
                  "src": "4508:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3020,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4508:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4507:6:7"
            },
            "scope": 3059,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3044,
            "nodeType": "FunctionDefinition",
            "src": "4643:115:7",
            "nodes": [],
            "body": {
              "id": 3043,
              "nodeType": "Block",
              "src": "4713:45:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3041,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3037,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4730:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3038,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4730:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3039,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "4744:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3040,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4744:7:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4730:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3036,
                  "id": 3042,
                  "nodeType": "Return",
                  "src": "4723:28:7"
                }
              ]
            },
            "baseFunctions": [
              21152
            ],
            "documentation": {
              "id": 3031,
              "nodeType": "StructuredDocumentation",
              "src": "4565:73:7",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "4652:12:7",
            "overrides": {
              "id": 3033,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4689:8:7"
            },
            "parameters": {
              "id": 3032,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4664:2:7"
            },
            "returnParameters": {
              "id": 3036,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3035,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3044,
                  "src": "4707:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3034,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4707:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4706:6:7"
            },
            "scope": 3059,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 3058,
            "nodeType": "FunctionDefinition",
            "src": "4859:130:7",
            "nodes": [],
            "body": {
              "id": 3057,
              "nodeType": "Block",
              "src": "4944:45:7",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 3055,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 3051,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4961:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 3052,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4961:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3053,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21105,
                        "src": "4975:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 3054,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4975:7:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4961:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 3050,
                  "id": 3056,
                  "nodeType": "Return",
                  "src": "4954:28:7"
                }
              ]
            },
            "baseFunctions": [
              22066
            ],
            "documentation": {
              "id": 3045,
              "nodeType": "StructuredDocumentation",
              "src": "4764:90:7",
              "text": "@dev Returns whether primary sale recipient can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetPrimarySaleRecipient",
            "nameLocation": "4868:27:7",
            "overrides": {
              "id": 3047,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4920:8:7"
            },
            "parameters": {
              "id": 3046,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4895:2:7"
            },
            "returnParameters": {
              "id": 3050,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3049,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3058,
                  "src": "4938:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3048,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4938:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4937:6:7"
            },
            "scope": 3059,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 2816,
              "name": "ContractMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17526,
              "src": "1331:16:7"
            },
            "id": 2817,
            "nodeType": "InheritanceSpecifier",
            "src": "1331:16:7"
          },
          {
            "baseName": {
              "id": 2818,
              "name": "Multicall",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20595,
              "src": "1349:9:7"
            },
            "id": 2819,
            "nodeType": "InheritanceSpecifier",
            "src": "1349:9:7"
          },
          {
            "baseName": {
              "id": 2820,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21153,
              "src": "1360:7:7"
            },
            "id": 2821,
            "nodeType": "InheritanceSpecifier",
            "src": "1360:7:7"
          },
          {
            "baseName": {
              "id": 2822,
              "name": "ERC20Votes",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 48145,
              "src": "1369:10:7"
            },
            "id": 2823,
            "nodeType": "InheritanceSpecifier",
            "src": "1369:10:7"
          },
          {
            "baseName": {
              "id": 2824,
              "name": "PrimarySale",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 22067,
              "src": "1381:11:7"
            },
            "id": 2825,
            "nodeType": "InheritanceSpecifier",
            "src": "1381:11:7"
          },
          {
            "baseName": {
              "id": 2826,
              "name": "DropSinglePhase",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 19497,
              "src": "1394:15:7"
            },
            "id": 2827,
            "nodeType": "InheritanceSpecifier",
            "src": "1394:15:7"
          }
        ],
        "canonicalName": "ERC20DropVote",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 2815,
          "nodeType": "StructuredDocumentation",
          "src": "406:897:7",
          "text": "      BASE:      ERC20Votes\n      EXTENSION: DropSinglePhase\n  The `ERC20Drop` contract uses the `DropSinglePhase` extensions, along with `ERC20Votes`.\n  It implements the ERC20 standard, along with the following additions to standard ERC20 logic:\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by\n                             presenting a message signed by the account.\n  The `drop` mechanism in the `DropSinglePhase` extension is a distribution mechanism tokens. It lets\n  you set restrictions such as a price to charge, an allowlist etc. when an address atttempts to mint tokens."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          3059,
          19497,
          32707,
          32285,
          22067,
          33345,
          48145,
          47498,
          13954,
          47256,
          13918,
          13899,
          48483,
          45384,
          21153,
          33183,
          20595,
          32926,
          17526,
          32437
        ],
        "name": "ERC20DropVote",
        "nameLocation": "1314:13:7",
        "scope": 3060,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 7
}