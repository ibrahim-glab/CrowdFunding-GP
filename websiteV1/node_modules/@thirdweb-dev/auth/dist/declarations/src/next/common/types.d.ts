import type { GenericAuthWallet } from "@thirdweb-dev/wallets";
import { z } from "zod";
import { Json, User } from "../../core";
export declare const PayloadBodySchema: z.ZodObject<{
    address: z.ZodString;
    chainId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    address: string;
    chainId?: string | undefined;
}, {
    address: string;
    chainId?: string | undefined;
}>;
export declare const ActiveBodySchema: z.ZodObject<{
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
}, {
    address: string;
}>;
export declare const LoginPayloadBodySchema: z.ZodObject<{
    payload: z.ZodObject<{
        signature: z.ZodString;
        payload: z.ZodObject<{
            domain: z.ZodString;
            nonce: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"evm">;
            address: z.ZodString;
            statement: z.ZodDefault<z.ZodString>;
            uri: z.ZodOptional<z.ZodString>;
            version: z.ZodDefault<z.ZodString>;
            chain_id: z.ZodOptional<z.ZodString>;
            resources: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            issued_at: z.ZodString;
            expiration_time: z.ZodString;
            invalid_before: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            domain: string;
            nonce: string;
            type: "evm";
            address: string;
            statement: string;
            version: string;
            issued_at: string;
            expiration_time: string;
            invalid_before: string;
            uri?: string | undefined;
            chain_id?: string | undefined;
            resources?: string[] | undefined;
        }, {
            domain: string;
            type: "evm";
            address: string;
            issued_at: string;
            expiration_time: string;
            invalid_before: string;
            nonce?: string | undefined;
            statement?: string | undefined;
            uri?: string | undefined;
            version?: string | undefined;
            chain_id?: string | undefined;
            resources?: string[] | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        payload: {
            domain: string;
            nonce: string;
            type: "evm";
            address: string;
            statement: string;
            version: string;
            issued_at: string;
            expiration_time: string;
            invalid_before: string;
            uri?: string | undefined;
            chain_id?: string | undefined;
            resources?: string[] | undefined;
        };
        signature: string;
    }, {
        payload: {
            domain: string;
            type: "evm";
            address: string;
            issued_at: string;
            expiration_time: string;
            invalid_before: string;
            nonce?: string | undefined;
            statement?: string | undefined;
            uri?: string | undefined;
            version?: string | undefined;
            chain_id?: string | undefined;
            resources?: string[] | undefined;
        };
        signature: string;
    }>;
}, "strip", z.ZodTypeAny, {
    payload: {
        payload: {
            domain: string;
            nonce: string;
            type: "evm";
            address: string;
            statement: string;
            version: string;
            issued_at: string;
            expiration_time: string;
            invalid_before: string;
            uri?: string | undefined;
            chain_id?: string | undefined;
            resources?: string[] | undefined;
        };
        signature: string;
    };
}, {
    payload: {
        payload: {
            domain: string;
            type: "evm";
            address: string;
            issued_at: string;
            expiration_time: string;
            invalid_before: string;
            nonce?: string | undefined;
            statement?: string | undefined;
            uri?: string | undefined;
            version?: string | undefined;
            chain_id?: string | undefined;
            resources?: string[] | undefined;
        };
        signature: string;
    };
}>;
export type ThirdwebAuthRoute = "payload" | "login" | "logout" | "user" | "switch-account";
export type ThirdwebAuthUser<TData extends Json = Json, TSession extends Json = Json> = User<TSession> & {
    data?: TData;
};
export type ThirdwebAuthConfigShared = {
    domain: string;
    wallet: GenericAuthWallet;
    authOptions?: {
        statement?: string;
        uri?: string;
        version?: string;
        chainId?: string;
        resources?: string[];
        validateNonce?: ((nonce: string) => void) | ((nonce: string) => Promise<void>);
        validateTokenId?: ((tokenId: string) => void) | ((tokenId: string) => Promise<void>);
        loginPayloadDurationInSeconds?: number;
        tokenDurationInSeconds?: number;
        refreshIntervalInSeconds?: number;
    };
    cookieOptions?: {
        domain?: string;
        path?: string;
        sameSite?: "lax" | "strict" | "none";
        secure?: boolean;
    };
};
export type ThirdwebNextContext = {
    params?: Record<string, string | string[]>;
};
//# sourceMappingURL=types.d.ts.map