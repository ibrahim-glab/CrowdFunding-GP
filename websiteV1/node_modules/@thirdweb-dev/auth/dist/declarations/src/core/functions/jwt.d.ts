import { AuthenticationPayload } from "../schema/authenticate";
import { Json, User } from "../schema/common";
import { BuildJwtParams, RefreshJwtParams, GenerateJwtParams, AuthenticateJwtParams } from "../schema/functions";
/**
 * Build JWT token based on the authentication payload
 */
export declare function buildJWT({ wallet, payload, }: BuildJwtParams): Promise<string>;
/**
 * Generate a new JWT using a login payload
 */
export declare function generateJWT({ wallet, payload, options, }: GenerateJwtParams): Promise<string>;
/**
 * Parse data from an encoded auth JWT
 */
export declare function parseJWT(jwt: string): AuthenticationPayload;
/**
 * Refresh an existing JWT
 */
export declare function refreshJWT({ wallet, jwt, options, }: RefreshJwtParams): Promise<string>;
/**
 * Validate a JWT and extract the user's info
 */
export declare function authenticateJWT<TSession extends Json = Json>({ wallet, jwt, options, }: AuthenticateJwtParams): Promise<User<TSession>>;
//# sourceMappingURL=jwt.d.ts.map