import { z } from "zod";
export declare const LoginOptionsSchema: z.ZodObject<{
    domain: z.ZodString;
    address: z.ZodOptional<z.ZodString>;
    statement: z.ZodOptional<z.ZodString>;
    uri: z.ZodOptional<z.ZodString>;
    version: z.ZodOptional<z.ZodString>;
    chainId: z.ZodOptional<z.ZodString>;
    nonce: z.ZodOptional<z.ZodString>;
    expirationTime: z.ZodDefault<z.ZodDate>;
    invalidBefore: z.ZodDefault<z.ZodDate>;
    resources: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    domain: string;
    expirationTime: Date;
    invalidBefore: Date;
    address?: string | undefined;
    statement?: string | undefined;
    uri?: string | undefined;
    version?: string | undefined;
    chainId?: string | undefined;
    nonce?: string | undefined;
    resources?: string[] | undefined;
}, {
    domain: string;
    address?: string | undefined;
    statement?: string | undefined;
    uri?: string | undefined;
    version?: string | undefined;
    chainId?: string | undefined;
    nonce?: string | undefined;
    expirationTime?: Date | undefined;
    invalidBefore?: Date | undefined;
    resources?: string[] | undefined;
}>;
export declare const LoginPayloadDataSchema: z.ZodObject<{
    type: z.ZodLiteral<"evm">;
    domain: z.ZodString;
    address: z.ZodString;
    statement: z.ZodDefault<z.ZodString>;
    uri: z.ZodOptional<z.ZodString>;
    version: z.ZodDefault<z.ZodString>;
    chain_id: z.ZodOptional<z.ZodString>;
    nonce: z.ZodDefault<z.ZodString>;
    issued_at: z.ZodEffects<z.ZodDefault<z.ZodDate>, string, Date | undefined>;
    expiration_time: z.ZodEffects<z.ZodDate, string, Date>;
    invalid_before: z.ZodEffects<z.ZodDefault<z.ZodDate>, string, Date | undefined>;
    resources: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    domain: string;
    nonce: string;
    type: "evm";
    address: string;
    statement: string;
    version: string;
    issued_at: string;
    expiration_time: string;
    invalid_before: string;
    uri?: string | undefined;
    chain_id?: string | undefined;
    resources?: string[] | undefined;
}, {
    domain: string;
    type: "evm";
    address: string;
    expiration_time: Date;
    statement?: string | undefined;
    uri?: string | undefined;
    version?: string | undefined;
    chain_id?: string | undefined;
    nonce?: string | undefined;
    issued_at?: Date | undefined;
    invalid_before?: Date | undefined;
    resources?: string[] | undefined;
}>;
export declare const LoginPayloadSchema: z.ZodObject<{
    payload: z.ZodObject<{
        type: z.ZodLiteral<"evm">;
        domain: z.ZodString;
        address: z.ZodString;
        statement: z.ZodDefault<z.ZodString>;
        uri: z.ZodOptional<z.ZodString>;
        version: z.ZodDefault<z.ZodString>;
        chain_id: z.ZodOptional<z.ZodString>;
        nonce: z.ZodDefault<z.ZodString>;
        issued_at: z.ZodEffects<z.ZodDefault<z.ZodDate>, string, Date | undefined>;
        expiration_time: z.ZodEffects<z.ZodDate, string, Date>;
        invalid_before: z.ZodEffects<z.ZodDefault<z.ZodDate>, string, Date | undefined>;
        resources: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        domain: string;
        nonce: string;
        type: "evm";
        address: string;
        statement: string;
        version: string;
        issued_at: string;
        expiration_time: string;
        invalid_before: string;
        uri?: string | undefined;
        chain_id?: string | undefined;
        resources?: string[] | undefined;
    }, {
        domain: string;
        type: "evm";
        address: string;
        expiration_time: Date;
        statement?: string | undefined;
        uri?: string | undefined;
        version?: string | undefined;
        chain_id?: string | undefined;
        nonce?: string | undefined;
        issued_at?: Date | undefined;
        invalid_before?: Date | undefined;
        resources?: string[] | undefined;
    }>;
    signature: z.ZodString;
}, "strip", z.ZodTypeAny, {
    payload: {
        domain: string;
        nonce: string;
        type: "evm";
        address: string;
        statement: string;
        version: string;
        issued_at: string;
        expiration_time: string;
        invalid_before: string;
        uri?: string | undefined;
        chain_id?: string | undefined;
        resources?: string[] | undefined;
    };
    signature: string;
}, {
    payload: {
        domain: string;
        type: "evm";
        address: string;
        expiration_time: Date;
        statement?: string | undefined;
        uri?: string | undefined;
        version?: string | undefined;
        chain_id?: string | undefined;
        nonce?: string | undefined;
        issued_at?: Date | undefined;
        invalid_before?: Date | undefined;
        resources?: string[] | undefined;
    };
    signature: string;
}>;
export declare const LoginPayloadOutputSchema: z.ZodObject<{
    signature: z.ZodString;
    payload: z.ZodObject<{
        domain: z.ZodString;
        nonce: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"evm">;
        address: z.ZodString;
        statement: z.ZodDefault<z.ZodString>;
        uri: z.ZodOptional<z.ZodString>;
        version: z.ZodDefault<z.ZodString>;
        chain_id: z.ZodOptional<z.ZodString>;
        resources: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        issued_at: z.ZodString;
        expiration_time: z.ZodString;
        invalid_before: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        domain: string;
        nonce: string;
        type: "evm";
        address: string;
        statement: string;
        version: string;
        issued_at: string;
        expiration_time: string;
        invalid_before: string;
        uri?: string | undefined;
        chain_id?: string | undefined;
        resources?: string[] | undefined;
    }, {
        domain: string;
        type: "evm";
        address: string;
        issued_at: string;
        expiration_time: string;
        invalid_before: string;
        nonce?: string | undefined;
        statement?: string | undefined;
        uri?: string | undefined;
        version?: string | undefined;
        chain_id?: string | undefined;
        resources?: string[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    payload: {
        domain: string;
        nonce: string;
        type: "evm";
        address: string;
        statement: string;
        version: string;
        issued_at: string;
        expiration_time: string;
        invalid_before: string;
        uri?: string | undefined;
        chain_id?: string | undefined;
        resources?: string[] | undefined;
    };
    signature: string;
}, {
    payload: {
        domain: string;
        type: "evm";
        address: string;
        issued_at: string;
        expiration_time: string;
        invalid_before: string;
        nonce?: string | undefined;
        statement?: string | undefined;
        uri?: string | undefined;
        version?: string | undefined;
        chain_id?: string | undefined;
        resources?: string[] | undefined;
    };
    signature: string;
}>;
export type LoginOptions = z.input<typeof LoginOptionsSchema>;
export type LoginPayloadData = z.output<typeof LoginPayloadDataSchema>;
export type LoginPayload = z.output<typeof LoginPayloadSchema>;
export type LoginOptionsWithOptionalDomain = Omit<LoginOptions, "domain"> & {
    domain?: string;
};
//# sourceMappingURL=login.d.ts.map