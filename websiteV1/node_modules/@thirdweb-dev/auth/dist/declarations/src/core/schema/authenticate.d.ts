import { z } from "zod";
export declare const AuthenticationPayloadDataSchema: z.ZodObject<{
    iss: z.ZodString;
    sub: z.ZodString;
    aud: z.ZodString;
    exp: z.ZodEffects<z.ZodDate, number, Date>;
    nbf: z.ZodEffects<z.ZodDate, number, Date>;
    iat: z.ZodEffects<z.ZodDate, number, Date>;
    jti: z.ZodDefault<z.ZodString>;
    ctx: z.ZodOptional<z.ZodType<import("./common").Json, z.ZodTypeDef, import("./common").Json>>;
}, "strip", z.ZodTypeAny, {
    sub: string;
    iss: string;
    aud: string;
    exp: number;
    nbf: number;
    iat: number;
    jti: string;
    ctx?: import("./common").Json | undefined;
}, {
    sub: string;
    iss: string;
    aud: string;
    exp: Date;
    nbf: Date;
    iat: Date;
    jti?: string | undefined;
    ctx?: import("./common").Json | undefined;
}>;
export declare const AuthenticationPayloadSchema: z.ZodObject<{
    payload: z.ZodObject<{
        iss: z.ZodString;
        sub: z.ZodString;
        aud: z.ZodString;
        exp: z.ZodEffects<z.ZodDate, number, Date>;
        nbf: z.ZodEffects<z.ZodDate, number, Date>;
        iat: z.ZodEffects<z.ZodDate, number, Date>;
        jti: z.ZodDefault<z.ZodString>;
        ctx: z.ZodOptional<z.ZodType<import("./common").Json, z.ZodTypeDef, import("./common").Json>>;
    }, "strip", z.ZodTypeAny, {
        sub: string;
        iss: string;
        aud: string;
        exp: number;
        nbf: number;
        iat: number;
        jti: string;
        ctx?: import("./common").Json | undefined;
    }, {
        sub: string;
        iss: string;
        aud: string;
        exp: Date;
        nbf: Date;
        iat: Date;
        jti?: string | undefined;
        ctx?: import("./common").Json | undefined;
    }>;
    signature: z.ZodString;
}, "strip", z.ZodTypeAny, {
    payload: {
        sub: string;
        iss: string;
        aud: string;
        exp: number;
        nbf: number;
        iat: number;
        jti: string;
        ctx?: import("./common").Json | undefined;
    };
    signature: string;
}, {
    payload: {
        sub: string;
        iss: string;
        aud: string;
        exp: Date;
        nbf: Date;
        iat: Date;
        jti?: string | undefined;
        ctx?: import("./common").Json | undefined;
    };
    signature: string;
}>;
export declare const AuthenticateOptionsSchema: z.ZodObject<{
    domain: z.ZodString;
    issuerAddress: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    validateTokenId: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    domain: string;
    issuerAddress?: string | undefined;
    validateTokenId?: ((args_0: string, ...args_1: unknown[]) => unknown) | undefined;
}, {
    domain: string;
    issuerAddress?: string | undefined;
    validateTokenId?: ((args_0: string, ...args_1: unknown[]) => unknown) | undefined;
}>;
export type AuthenticationPayloadDataInput = z.input<typeof AuthenticationPayloadDataSchema>;
export type AuthenticationPayloadData = z.output<typeof AuthenticationPayloadDataSchema>;
export type AuthenticationPayload = z.output<typeof AuthenticationPayloadSchema>;
export type AuthenticateOptions = z.output<typeof AuthenticateOptionsSchema>;
export type AuthenticateOptionsWithOptionalDomain = Omit<AuthenticateOptions, "domain"> & {
    domain?: string;
};
//# sourceMappingURL=authenticate.d.ts.map