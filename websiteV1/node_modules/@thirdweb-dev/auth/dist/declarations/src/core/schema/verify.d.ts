import { z } from "zod";
export declare const VerifyOptionsSchema: z.ZodObject<{
    domain: z.ZodString;
    statement: z.ZodOptional<z.ZodString>;
    uri: z.ZodOptional<z.ZodString>;
    version: z.ZodOptional<z.ZodString>;
    chainId: z.ZodOptional<z.ZodString>;
    validateNonce: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodUnknown>>;
    resources: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    domain: string;
    statement?: string | undefined;
    uri?: string | undefined;
    version?: string | undefined;
    chainId?: string | undefined;
    validateNonce?: ((args_0: string, ...args_1: unknown[]) => unknown) | undefined;
    resources?: string[] | undefined;
}, {
    domain: string;
    statement?: string | undefined;
    uri?: string | undefined;
    version?: string | undefined;
    chainId?: string | undefined;
    validateNonce?: ((args_0: string, ...args_1: unknown[]) => unknown) | undefined;
    resources?: string[] | undefined;
}>;
export type VerifyOptions = z.input<typeof VerifyOptionsSchema>;
export type VerifyOptionsWithOptionalDomain = Omit<VerifyOptions, "domain"> & {
    domain?: string;
};
//# sourceMappingURL=verify.d.ts.map