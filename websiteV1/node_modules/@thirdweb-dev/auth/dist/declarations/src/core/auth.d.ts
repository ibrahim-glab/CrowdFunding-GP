import type { GenericAuthWallet } from "@thirdweb-dev/wallets";
import { Json, User } from "./schema/common";
import { LoginOptionsWithOptionalDomain, LoginPayload, LoginPayloadData } from "./schema/login";
import { VerifyOptionsWithOptionalDomain } from "./schema/verify";
import { GenerateOptionsWithOptionalDomain } from "./schema/generate";
import { AuthenticateOptionsWithOptionalDomain, AuthenticationPayload } from "./schema/authenticate";
export declare class ThirdwebAuth {
    private domain;
    private wallet;
    constructor(wallet: GenericAuthWallet, domain: string);
    updateWallet(wallet: GenericAuthWallet): void;
    payload(options?: LoginOptionsWithOptionalDomain): Promise<LoginPayloadData>;
    loginWithPayload(payload: LoginPayloadData): Promise<LoginPayload>;
    login(options?: LoginOptionsWithOptionalDomain): Promise<LoginPayload>;
    verify(payload: LoginPayload, options?: VerifyOptionsWithOptionalDomain): Promise<string>;
    generate(payload: LoginPayload, options?: GenerateOptionsWithOptionalDomain): Promise<string>;
    refresh(jwt: string, expirationTime?: Date): Promise<string>;
    authenticate<TSession extends Json = Json>(jwt: string, options?: AuthenticateOptionsWithOptionalDomain): Promise<User<TSession>>;
    parseToken(jwt: string): AuthenticationPayload;
    private formatOptions;
}
//# sourceMappingURL=auth.d.ts.map