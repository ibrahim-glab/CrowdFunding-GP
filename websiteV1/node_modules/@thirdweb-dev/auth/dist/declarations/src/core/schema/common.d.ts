import { z } from "zod";
declare const literalSchema: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull]>;
type Literal = z.infer<typeof literalSchema>;
export type Json = Literal | {
    [key: string]: Json;
} | Json[];
export declare const JsonSchema: z.ZodType<Json>;
export declare const AddressSchema: z.ZodEffects<z.ZodString, string, string>;
export declare const RawDateSchema: z.ZodEffects<z.ZodDate, number, Date>;
export declare const AccountTypeSchema: z.ZodLiteral<"evm">;
export type User<TContext extends Json = Json> = {
    address: string;
    session?: TContext;
};
export {};
//# sourceMappingURL=common.d.ts.map