import { z } from "zod";
export declare const GenerateOptionsSchema: z.ZodObject<{
    domain: z.ZodString;
    tokenId: z.ZodOptional<z.ZodString>;
    expirationTime: z.ZodDefault<z.ZodDate>;
    invalidBefore: z.ZodOptional<z.ZodDate>;
    session: z.ZodOptional<z.ZodUnion<[z.ZodType<import("./common").Json, z.ZodTypeDef, import("./common").Json>, z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodUnknown>]>>;
    verifyOptions: z.ZodOptional<z.ZodObject<Omit<{
        domain: z.ZodString;
        statement: z.ZodOptional<z.ZodString>;
        uri: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        chainId: z.ZodOptional<z.ZodString>;
        validateNonce: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString], z.ZodUnknown>, z.ZodUnknown>>;
        resources: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "domain">, "strip", z.ZodTypeAny, {
        chainId?: string | undefined;
        statement?: string | undefined;
        uri?: string | undefined;
        version?: string | undefined;
        resources?: string[] | undefined;
        validateNonce?: ((args_0: string, ...args_1: unknown[]) => unknown) | undefined;
    }, {
        chainId?: string | undefined;
        statement?: string | undefined;
        uri?: string | undefined;
        version?: string | undefined;
        resources?: string[] | undefined;
        validateNonce?: ((args_0: string, ...args_1: unknown[]) => unknown) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    domain: string;
    expirationTime: Date;
    tokenId?: string | undefined;
    invalidBefore?: Date | undefined;
    session?: ((args_0: string, ...args_1: unknown[]) => unknown) | import("./common").Json | undefined;
    verifyOptions?: {
        chainId?: string | undefined;
        statement?: string | undefined;
        uri?: string | undefined;
        version?: string | undefined;
        resources?: string[] | undefined;
        validateNonce?: ((args_0: string, ...args_1: unknown[]) => unknown) | undefined;
    } | undefined;
}, {
    domain: string;
    tokenId?: string | undefined;
    expirationTime?: Date | undefined;
    invalidBefore?: Date | undefined;
    session?: ((args_0: string, ...args_1: unknown[]) => unknown) | import("./common").Json | undefined;
    verifyOptions?: {
        chainId?: string | undefined;
        statement?: string | undefined;
        uri?: string | undefined;
        version?: string | undefined;
        resources?: string[] | undefined;
        validateNonce?: ((args_0: string, ...args_1: unknown[]) => unknown) | undefined;
    } | undefined;
}>;
export type GenerateOptions = z.input<typeof GenerateOptionsSchema>;
export type GenerateOptionsWithOptionalDomain = Omit<GenerateOptions, "domain"> & {
    domain?: string;
};
//# sourceMappingURL=generate.d.ts.map