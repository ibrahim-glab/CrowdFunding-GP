import { ContractAddress } from "../types";
import { UseQueryResult } from "@tanstack/react-query";
import { Chain } from "@thirdweb-dev/chains";
import { BigNumber } from "ethers";
/**
 * Hook for getting a wallet's current balance of native or (optional) ERC20 token balance
 *
 * @example
 *
 * ### get the balance of the native token
 *
 * ```jsx
 * import { useBalance } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const { data, isLoading } = useBalance();
 * }
 * ```
 *
 * ### get the balance of any other token
 *
 * ```jsx
 * import { useBalance } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const { data, isLoading } = useBalance(tokenAddress);
 * }
 * ```
 *
 * @param tokenAddress - The address of the token contract, if not provided, it defaults to the native token
 *
 * @returns
 * The hook's `data` property contains the token's balance in the `value` property as a `BigNumber` object.
 *
 * @token
 */
export declare function useBalance(tokenAddress?: ContractAddress): UseQueryResult<{
    symbol: string;
    value: BigNumber;
    name: string;
    decimals: number;
    displayValue: string;
} | undefined, unknown>;
/**
 * This hook is similar to the `useBalance` hook, but it for fetching the native token balance of any given wallet address.
 *
 * This hook only fetches the native token balance of the given wallet address. If you want to get the ERC20 balance from a given wallet, use `useTokenBalance`
 *
 * @example
 * ```ts
 * const { data, isLoading } = useBalanceForAddress(walletAddress)
 * ```
 *
 * @param walletAddress - The address of the wallet that you want to get the native balance
 *
 * @returns
 * The hook's `data` property contains the native token's balance in the `value` property as a `BigNumber` object.
 *
 * @token
 */
export declare function useBalanceForAddress(walletAddress: string): UseQueryResult<{
    symbol: string;
    value: BigNumber;
    name: string;
    decimals: number;
    displayValue: string;
}, unknown>;
/**
 * @internal
 */
export declare function useConnectedWallet(): import("ethers").Signer | undefined;
/**
 * Get the address of the connected wallet.
 *
 * Returns `undefined` if no wallet is connected.
 *
 * @example
 * ```tsx
 * import { useAddress } from "@thirdweb-dev/react"
 *
 * function Example() {
 *   const address = useAddress()
 *
 *   return <div>{address}</div>
 * }
 * ```
 *
 * @walletConnection
 */
export declare function useAddress(): string | undefined;
/**
 * Hook for accessing the chain ID of the network the current wallet is connected to
 *
 * ```javascript
 * import { useChainId } from "@thirdweb-dev/react"
 * ```
 *
 * @example
 * ```javascript
 * import { useChainId } from "@thirdweb-dev/react"
 *
 * const App = () => {
 *   const chainId = useChainId()
 *
 *   return <div>{chainId}</div>
 * }
 * ```
 *
 * @returns
 * A `number` representing the current chain id, or `undefined` if the user is not connected to a wallet.
 *
 * For Example, if the user is connected to the Ethereum Mainnet, the return value will be `1`.
 *
 * @networkConnection
 */
export declare function useChainId(): number | undefined;
/**
 * Hook for getting the `Chain` object of the network that the user is connected - but only if
 * it's a supported network (added in the `ThirdwebProvider`'s `supportedChains` or one of default chains
 *
 * Returns `undefined` if the network is not supported or the user is not connected to a wallet. You can use the `useConnectionStatus` hook to check if the user is connected to a wallet or not to differentiate between the two cases.
 *
 * If you only want to get the chain id of the network the user is connected to regardless of whether it's supported or not, use `useChainId` instead.
 *
 * ```jsx
 * import { useChain } from "@thirdweb-dev/react";
 *
 * const chain = useChain();
 * ```
 *
 * @example
 *
 * ```jsx
 * import { useChain, useConnectionStatus } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const chain = useChain();
 *   const status = useConnectionStatus();
 *
 *   if (status === "unknown") return <div> Loading... </div>;
 *   if (status === "disconnected") return <div> disconnected </div>;
 *   if (status === "connecting") return <div> connecting... </div>;
 *
 *   if (chain) {
 *     return <p> Connected to {chain.name} </p>;
 *   }
 *
 *   return <p> Connected to an unsupported network </p>;
 * }
 * ```
 *
 * @returns
 * An object of type `Chain` from [`@thirdweb-dev/chains`](https://www.npmjs.com/package/\@thirdweb-dev/chains) package containing various information about the network, or `undefined` if the network is not supported or user is not connected to a wallet.
 *
 * @networkConnection
 */
export declare function useChain(): Chain | undefined;
/**
 * @internal
 * @deprecated
 *
 * This hook is renamed to `useChain`
 *
 * use the `useChain` hook instead
 */
export declare function useActiveChain(): Chain | undefined;
//# sourceMappingURL=wallet.d.ts.map