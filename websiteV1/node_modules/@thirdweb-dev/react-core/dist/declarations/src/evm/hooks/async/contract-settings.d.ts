import { RequiredParam } from "../../../core/query-utils/required-param";
import { UseMutationResult, UseQueryResult } from "@tanstack/react-query";
import type { ValidContractInstance } from "@thirdweb-dev/sdk";
import type { providers } from "ethers";
/**
 * Hook for getting the primary sales recipient of a smart contract.
 *
 * Available to use on contracts that implement the [`PrimarySale`](https://portal.thirdweb.com/contracts/build/extensions/general/PrimarySale) interface.
 *
 * @example
 * ```jsx
 * import { useContract, usePrimarySaleRecipient } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const { contract } = useContract(contractAddress);
 *   const { data, isLoading, error } = usePrimarySaleRecipient(contract);
 * }
 * ```
 *
 * @param contract - Instance of a `SmartContract`
 *
 * @returns The hook's `data` property, once loaded, is a `string` with the wallet address of the primary sales recipient.
 *
 * @twfeature PrimarySale
 * @platformFees
 */
export declare function usePrimarySaleRecipient(contract: RequiredParam<ValidContractInstance>): UseQueryResult<string, unknown>;
/**
 * Hook for updating the primary sale recipient on a smart contract.
 *
 * Available to use on smart contracts that implement the [`PrimarySale`](https://portal.thirdweb.com/contracts/build/extensions/general/PrimarySale) interface.
 *
 * The wallet that initiates this transaction must have the required permissions to change the primary sale recipient (defaults to `"admin"` level).
 *
 * @example
 * ```jsx
 * import {
 *   useUpdatePrimarySaleRecipient,
 *   useContract,
 *   Web3Button,
 * } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const { contract } = useContract(contractAddress);
 *   const {
 *     mutateAsync: updatePrimarySaleRecipient,
 *     isLoading,
 *     error,
 *   } = useUpdatePrimarySaleRecipient(contract);
 *
 *   return (
 *     <Web3Button
 *       contractAddress={contractAddress}
 *       action={() => updatePrimarySaleRecipient("{{wallet_address}}")}
 *     >
 *       Update Primary Sale Recipient
 *     </Web3Button>
 *   );
 * }
 * ```
 *
 * @param contract - Instance of a `SmartContract`
 * @returns A mutation object to update the primary sales recipient
 *
 * ```ts
 * const { mutateAsync, isLoading, error } = useUpdatePrimarySaleRecipient(contract);
 * ```
 *
 * ### options
 *
 * The mutation function takes a `walletAddress` as argument:
 *
 * #### walletAddress
 *
 * The wallet address to set as the primary sale recipient.
 *
 * @twfeature PrimarySale
 * @platformFees
 */
export declare function useUpdatePrimarySaleRecipient(contract: RequiredParam<ValidContractInstance>): UseMutationResult<{
    receipt: providers.TransactionReceipt;
}, unknown, string, unknown>;
/**
 * Hook for retrieving royalty settings of a smart contract.
 *
 * Available to use on contracts that implement the [`Royalty`](https://portal.thirdweb.com/contracts/build/extensions/general/Royalty) interface.
 *
 * @example
 * ```jsx
 * import { useContract, useRoyaltySettings } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const { contract } = useContract(contractAddress);
 *   const { data, isLoading, error } = useRoyaltySettings(contract);
 * }
 * ```
 *
 * @param contract - Instance of a `SmartContract`
 *
 * @returns
 * The hook's `data` property, once loaded, is an object with two properties:
 *
 * ```ts
 * {
 *   seller_fee_basis_points: number;
 *   fee_recipient: string;
 * }
 * ```
 *
 * - The `seller_fee_basis_points` is the royalty amount (in basis points) that the seller
 *   will receive for each token sale on secondary markets.
 * - The `fee_recipient` is the wallet address that will receive the royalty payments.
 *
 * @twfeature Royalty
 * @platformFees
 */
export declare function useRoyaltySettings(contract: RequiredParam<ValidContractInstance>): UseQueryResult<{
    seller_fee_basis_points: number;
    fee_recipient: string;
}, unknown>;
/**
 * Hook for updating royalty settings on a smart contract.
 *
 * Available to use on smart contracts that implement the [`Royalty`](https://portal.thirdweb.com/contracts/build/extensions/general/Royalty) interface.
 *
 * @example
 * ```jsx
 * import {
 *   useUpdateRoyaltySettings,
 *   useContract,
 *   Web3Button,
 * } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const { contract } = useContract(contractAddress);
 *   const {
 *     mutateAsync: updateRoyaltySettings,
 *     isLoading,
 *     error,
 *   } = useUpdateRoyaltySettings(contract);
 *
 *   return (
 *     <Web3Button
 *       contractAddress={contractAddress}
 *       action={() =>
 *         updateRoyaltySettings({
 *           seller_fee_basis_points: 0,
 *           fee_recipient: "{{wallet_address}}",
 *         })
 *       }
 *     >
 *       Update Royalty Settings
 *     </Web3Button>
 *   );
 * }
 * ```
 *
 * @param contract - Instance of a `SmartContract`
 *
 * @returns
 * A mutation object to update the royalty settings
 *
 * ```ts
 * const { mutateAsync, isLoading, error } = useUpdateRoyaltySettings(contract);
 * ```
 *
 * ### options
 *
 * The mutation function takes an object with below properties:
 *
 * #### seller_fee_basis_points
 *
 * The `seller_fee_basis_points` property is a `number` between `0` - `10000` that defines the fee rate.
 *
 * This number is in percentage points. i.e. `100` is a 1% fee and `10000` is a 100% fee.
 *
 * #### fee_recipient
 *
 * The `fee_recipient` property is the address of the wallet that will receive the fees.
 *
 * @twfeature Royalty
 * @platformFees
 */
export declare function useUpdateRoyaltySettings(contract: RequiredParam<ValidContractInstance>): UseMutationResult<{
    receipt: providers.TransactionReceipt;
    data: () => Promise<{
        seller_fee_basis_points: number;
        fee_recipient: string;
    }>;
}, unknown, {
    seller_fee_basis_points?: number | undefined;
    fee_recipient?: string | undefined;
}, unknown>;
/**
 * Hook for getting the platform fee settings of a contract.
 *
 * Available to use on contracts that implement the [`PlatformFee`](https://portal.thirdweb.com/contracts/build/extensions/general/PlatformFee) interface.
 *
 * @example
 *
 * ```jsx
 * import { useContract, usePlatformFees } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const { contract } = useContract(contractAddress);
 *   const { data, isLoading, error } = usePlatformFees(contract);
 * }
 * ```
 *
 * @param contract - Instance of a `SmartContract`
 *
 * @returns
 * The hook's `data` property, once loaded, is an object containing two fields:
 *
 * - `platform_fee_basis_points`: the platform fee basis points set on the contract
 * - `platform_fee_recipient`: the wallet address of the platform fee recipient
 *
 * _Note_: The basis points are in percentage format, meaning that a value of `500` is equivalent to a `5%` fee.
 *
 * ```ts
 * {
 *   platform_fee_basis_points: number;
 *   platform_fee_recipient: string;
 * }
 * ```
 *
 * @twfeature PlatformFee
 * @platformFees
 */
export declare function usePlatformFees(contract: RequiredParam<ValidContractInstance>): UseQueryResult<{
    platform_fee_basis_points: number;
    platform_fee_recipient: string;
}, unknown>;
/**
 * Hook for updating platform fees on a smart contract.
 *
 * Available to use on smart contracts that implement the [`PlatformFee`](https://portal.thirdweb.com/contracts/build/extensions/general/PlatformFee) interface.
 *
 * ```jsx
 * import {
 *   useUpdatePlatformFees,
 *   useContract,
 *   Web3Button,
 * } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const { contract } = useContract(contractAddress);
 *   const {
 *     mutateAsync: updatePlatformFees,
 *     isLoading,
 *     error,
 *   } = useUpdatePlatformFees(contract);
 *
 *   return (
 *     <Web3Button
 *       contractAddress={contractAddress}
 *       action={() =>
 *         updatePlatformFees({
 *           platform_fee_basis_points: 0,
 *           fee_recipient: "{{wallet_address}}",
 *         })
 *       }
 *     >
 *       Update Platform Fees
 *     </Web3Button>
 *   );
 * }
 * ```
 *
 * @param contract - Instance of a `SmartContract`
 *
 * @returns A mutation object to update the platform fees settings
 *
 * ```ts
 * const { mutateAsync, isLoading, error } = useUpdatePlatformFees(contract);
 * ```
 *
 * ### options
 *
 * The mutation function takes an object with below properties:
 *
 * #### platform_fee_basis_points
 *
 * The `platform_fee_basis_points` property is a `number` between `0` - `10000` that defines the fee rate.
 *
 * This number is in percentage points. i.e. `100` is a 1% fee and `10000` is a 100% fee.
 *
 * #### fee_recipient
 *
 * The `fee_recipient` property is the address of the wallet that will receive the fees.
 *
 * Use the `useAddress` hook to get the current wallet address.
 *
 * @twfeature PlatformFee
 * @platformFees
 */
export declare function useUpdatePlatformFees(contract: RequiredParam<ValidContractInstance>): UseMutationResult<Omit<{
    receipt: providers.TransactionReceipt;
    data: () => Promise<unknown>;
}, "data">, unknown, {
    platform_fee_basis_points?: number | undefined;
    fee_recipient?: string | undefined;
}, unknown>;
/**
 * Hook for getting the metadata associated with a smart contract.
 *
 * Available to use on contracts that implement the [Contract Metadata](https://portal.thirdweb.com/contracts/build/extensions/general/ContractMetadata) interface.
 *
 * @example
 * ```jsx
 * import { useContract, useMetadata } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const { contract } = useContract(contractAddress);
 *   const { data, isLoading, error } = useMetadata(contract);
 * }
 * ```
 *
 * @param contract - Instance of a `SmartContract`
 * @returns
 * A `CustomContractMetadata` object containing the metadata
 *
 * The hook's `data` property, once loaded, is an object containing the contract's metadata.
 *
 * ```ts
 * CustomContractMetadata | undefined;
 * ```
 *
 * ```ts
 * interface CustomContractMetadata {
 *   // The name of the contract.
 *   name: string;
 *   // A description of the contract.
 *   description?: string;
 *   // The image associated with the contract.
 *   image?: any;
 *   // An external link associated with the contract.
 *   external_link?: string;
 * }
 * ```
 *
 * @metadata
 */
export declare function useMetadata(contract: RequiredParam<ValidContractInstance>): UseQueryResult;
/**
 * Hook for updating the metadata of a smart contract.
 *
 * Available to use on smart contracts that implement the `ContractMetadata` interface.
 *
 * The wallet initiating this transaction must have the required permissions to update the metadata, (`admin` permissions required by default).
 *
 * Provide your contract instance from the `useContract` hook as the first argument, and
 * an object fitting the [contract-level metadata standards](https://docs.opensea.io/docs/contract-level-metadata) of
 * the new metadata as the second argument, including:
 *
 * - `name`: A `string` for the name of the smart contract (required).
 * - `description`: A `string` to describe the smart contract (optional).
 * - `image`: A `string` or `File` object containing the URL or file data of an image to associate with the contract (optional).
 * - `external_link`: A `string` containing a URL to view the smart contract on your website (optional).
 *
 * @example
 *
 * ```jsx
 * import {
 *   useUpdateMetadata,
 *   useContract,
 *   Web3Button,
 * } from "@thirdweb-dev/react";
 *
 * function App() {
 *   const { contract } = useContract(contractAddress);
 *   const {
 *     mutateAsync: updateMetadata,
 *     isLoading,
 *     error,
 *   } = useUpdateMetadata(contract);
 *
 *   return (
 *     <Web3Button
 *       contractAddress={contractAddress}
 *       action={() =>
 *         updateMetadata({
 *           name: "My App",
 *           description: "My awesome Ethereum App",
 *           image: "/path/to/image.jpg", // URL, URI, or File object
 *           external_link: "https://myapp.com",
 *         })
 *       }
 *     >
 *       Update Metadata
 *     </Web3Button>
 *   );
 * }
 * ```
 *
 * @param contract - Instance of a `SmartContract`
 * @returns Mutation object that to update the metadata
 * @metadata
 */
export declare function useUpdateMetadata(contract: RequiredParam<ValidContractInstance>): UseMutationResult<any, any, any>;
//# sourceMappingURL=contract-settings.d.ts.map