import { ethers } from 'ethers';
import { SmartWalletConnector } from '../../smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js';
import { a as ERC6551_REGISTRY } from '../../../../dist/constants-5a6f7f26.browser.esm.js';
import '../../../../dist/connector-05689d68.browser.esm.js';
import 'eventemitter3';
import '../../../../dist/url-a45219bd.browser.esm.js';
import '@thirdweb-dev/chains';
import '../../../../dist/headers-6010cf81.browser.esm.js';
import '@account-abstraction/contracts';
import '../../../../dist/defineProperty-d7c057bf.browser.esm.js';
import '@thirdweb-dev/sdk';

class TokenBoundSmartWalletConnector extends SmartWalletConnector {
  constructor(input) {
    super({
      ...input,
      factoryAddress: input.registryAddress || ERC6551_REGISTRY
    });
    this.tbaConfig = input;
    // TODO default account implementation address
  }
  defaultFactoryInfo() {
    return {
      createAccount: async factory => {
        return factory.prepare("createAccount", [this.tbaConfig.accountImplementation, this.chainId, this.tbaConfig.tokenContract, this.tbaConfig.tokenId, this.tbaConfig.salt, ethers.utils.toUtf8Bytes("")]);
      },
      getAccountAddress: async factory => {
        return await factory.call("account", [this.tbaConfig.accountImplementation, this.chainId, this.tbaConfig.tokenContract, this.tbaConfig.tokenId, this.tbaConfig.salt]);
      }
    };
  }
}

export { TokenBoundSmartWalletConnector };
