import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';
import { AbstractWallet } from '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';
import { ethers } from 'ethers';
import { getChainProvider } from '@thirdweb-dev/sdk';
import '../../../../dist/defineProperty-d7c057bf.browser.esm.js';
import 'eventemitter3';

/**
 * Wallet interface to connect using a Private Key
 *
 * @example
 * ```ts
 * import { PrivateKeyWallet } from "@thirdweb-dev/wallets";
 *
 * // can be any ethers.js signer
 * const privateKey = process.env.PRIVATE_KEY;
 * const wallet = new PrivateKeyWallet(privateKey);
 * ```
 *
 * @wallet
 */
var _signer = /*#__PURE__*/new WeakMap();
class PrivateKeyWallet extends AbstractWallet {
  /**
   * Create instance of `PrivateKeyWallet`
   *
   * @param privateKey - The private key to use for signing transactions.
   *
   * @param chain - The chain or rpc url to connect to when querying the blockchain directly through this wallet.
   *
   * @param secretKey -
   * Provide `secretKey` to use the thirdweb RPCs for given `chain`
   *
   * You can create a secret key from [thirdweb dashboard](https://thirdweb.com/create-api-key).
   */
  constructor(privateKey, chain, secretKey) {
    super();
    _classPrivateFieldInitSpec(this, _signer, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _signer, new ethers.Wallet(privateKey, chain ? getChainProvider(chain, {
      secretKey
    }) : undefined));
  }

  /**
   * Get the [ethers.js signer](https://docs.ethers.io/v5/api/signer/) object used by the wallet
   */
  async getSigner() {
    return _classPrivateFieldGet(this, _signer);
  }
}

export { PrivateKeyWallet };
