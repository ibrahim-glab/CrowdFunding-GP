import { ChainOrRpcUrl } from "@thirdweb-dev/sdk";
import { BytesLike } from "ethers";
export type AccessibleSmartWallets = {
    owned: string;
    hasSignerRole: string[];
};
/**
 * Get all the signers added to the given smart wallet (excluding owner)
 * @param chain - The chain to use
 * @param factoryAddress - The factory address
 * @param smartWalletAddress - The smart wallet address
 * @returns The list of signers
 */
export declare function getAllSigners(chain: ChainOrRpcUrl, factoryAddress: string, smartWalletAddress: string): Promise<any>;
/**
 * Get all the smart wallets associated with a personal wallet address
 * @param chain - The chain to use
 * @param factoryAddress - The factory address
 * @param personalWalletAddress - The personal wallet address
 * @returns The list of smart wallets
 */
export declare function getAllSmartWallets(chain: ChainOrRpcUrl, factoryAddress: string, personalWalletAddress: string): Promise<AccessibleSmartWallets>;
/**
 * Check if a smart wallet is deployed for a given personal wallet address
 * @param chain - The chain to use
 * @param factoryAddress - The factory address
 * @param personalWalletAddress - The personal wallet address
 * @returns True if the smart wallet is deployed
 */
export declare function isSmartWalletDeployed(chain: ChainOrRpcUrl, factoryAddress: string, personalWalletAddress: string, data?: BytesLike): Promise<boolean>;
/**
 * Get the associated smart wallet address for a given personal wallet address
 * @param chain - The chain to use
 * @param factoryAddress - The factory address
 * @param personalWalletAddress - The personal wallet address
 * @returns The smart wallet address
 */
export declare function getSmartWalletAddress(chain: ChainOrRpcUrl, factoryAddress: string, personalWalletAddress: string, data?: BytesLike): Promise<string>;
export declare function getUserOpReceipt(chain: ChainOrRpcUrl, userOpHash: string, timeout?: number, interval?: number, entryPointAddress?: string): Promise<string | null>;
//# sourceMappingURL=utils.d.ts.map