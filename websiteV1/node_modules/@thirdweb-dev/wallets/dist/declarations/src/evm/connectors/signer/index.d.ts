import { ConnectParams, Connector } from "../../interfaces/connector";
import type { LocalWalletConnectionArgs } from "../../wallets/local-wallet";
import type { Chain } from "@thirdweb-dev/chains";
import type { Signer } from "ethers";
import { providers } from "ethers";
export type SignerWalletConnectorOptions = {
    chain: Chain;
    signer: Signer;
    chains: Chain[];
    clientId?: string;
    secretKey?: string;
};
export declare class SignerConnector extends Connector<LocalWalletConnectionArgs> {
    #private;
    options: SignerWalletConnectorOptions;
    constructor(options: SignerWalletConnectorOptions);
    connect(args: ConnectParams<LocalWalletConnectionArgs>): Promise<string>;
    disconnect(): Promise<void>;
    getAddress(): Promise<string>;
    isConnected(): Promise<boolean>;
    getProvider(): Promise<providers.Provider>;
    getSigner(): Promise<Signer>;
    switchChain(chainId: number): Promise<void>;
    protected onChainChanged: (chainId: number | string) => void;
    setupListeners(): Promise<void>;
    updateChains(chains: Chain[]): void;
}
//# sourceMappingURL=index.d.ts.map