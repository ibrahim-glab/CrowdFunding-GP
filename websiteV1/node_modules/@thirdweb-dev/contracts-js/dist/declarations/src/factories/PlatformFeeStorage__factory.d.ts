import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PlatformFeeStorage, PlatformFeeStorageInterface } from "../PlatformFeeStorage.js";
type PlatformFeeStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class PlatformFeeStorage__factory extends ContractFactory {
    constructor(...args: PlatformFeeStorageConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<PlatformFeeStorage>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): PlatformFeeStorage;
    connect(signer: Signer): PlatformFeeStorage__factory;
    static readonly bytecode = "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806327789ec8146038575b600080fd5b605e7fc0c34308b4a2f4c5ee9af8ba82541cfb3c33b076d1fd05c65f9ce7060c64c40081565b60405190815260200160405180910390f3fea2646970667358221220b92bcbdbc43d610aa8c3a6b682ec72a1bc4f30565a4171a14d700bb2b0cec52664736f6c634300080c0033";
    static readonly abi: {
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): PlatformFeeStorageInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PlatformFeeStorage;
}
export {};
//# sourceMappingURL=PlatformFeeStorage__factory.d.ts.map