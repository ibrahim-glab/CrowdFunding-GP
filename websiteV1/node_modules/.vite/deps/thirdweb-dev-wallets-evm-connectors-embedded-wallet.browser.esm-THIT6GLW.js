import {
  AuthProvider,
  EmbeddedWalletSdk,
  UserWalletStatus
} from "./chunk-X4RZ3UWJ.js";
import "./chunk-YGRF7CTW.js";
import {
  Connector
} from "./chunk-7ZKPRNKP.js";
import "./chunk-JBE6NEQY.js";
import "./chunk-NXVKFCGN.js";
import "./chunk-ZTGC7WRH.js";
import {
  normalizeChainId
} from "./chunk-FG2CDSPQ.js";
import {
  walletIds
} from "./chunk-7WSDJM3S.js";
import {
  _classPrivateFieldGet,
  _classPrivateFieldInitSpec,
  _classPrivateFieldSet
} from "./chunk-I5FN74TN.js";
import {
  _defineProperty
} from "./chunk-YUOLCEGR.js";
import "./chunk-XZJ3BFHI.js";
import "./chunk-KPZQRWIA.js";
import "./chunk-UKVXXSPA.js";
import "./chunk-TI3A73K2.js";
import "./chunk-QNCFKN2B.js";
import "./chunk-J5LOCPST.js";
import "./chunk-GB2PCLYH.js";
import "./chunk-EYSJPGEF.js";
import "./chunk-LVUYF6WC.js";
import "./chunk-HT4B25DF.js";
import "./chunk-4DRVVL7D.js";
import "./chunk-LZSJYQ2X.js";
import "./chunk-EM4EVOCV.js";
import "./chunk-TQNN2U7J.js";
import "./chunk-GKTF4MIN.js";
import "./chunk-B6R5BCLS.js";
import "./chunk-HSXVVCEX.js";
import "./chunk-TVBEQ3OD.js";
import "./chunk-C52BRAYJ.js";
import "./chunk-5XIQKRKG.js";
import "./chunk-YQAUWGV2.js";
import "./chunk-4UWMVSMF.js";
import {
  require_utils
} from "./chunk-7NNND3QZ.js";
import "./chunk-LYEG5PGG.js";
import "./chunk-NI75G64R.js";
import "./chunk-NXQSFSYO.js";
import "./chunk-7JTQECNY.js";
import "./chunk-UHBWZKE6.js";
import "./chunk-IZHG3VIP.js";
import "./chunk-YKWEALR3.js";
import "./chunk-FNDLL6VS.js";
import "./chunk-6D6UEHK3.js";
import "./chunk-YN6UTFQV.js";
import "./chunk-AFD3C642.js";
import "./chunk-U7CFD5RQ.js";
import "./chunk-TVZY4654.js";
import "./chunk-XZ6OD6N5.js";
import {
  init_lib7 as init_lib,
  utils_exports
} from "./chunk-WYHBVST3.js";
import "./chunk-SPBWBR4K.js";
import "./chunk-6OCL4JXY.js";
import "./chunk-A6WPANBE.js";
import "./chunk-OP3MHZRI.js";
import "./chunk-TZBESOIF.js";
import "./chunk-7GHALKSO.js";
import "./chunk-JVHSL6P6.js";
import "./chunk-XRYAEC2L.js";
import "./chunk-3JC5L5ZG.js";
import "./chunk-UFR7PFM3.js";
import "./chunk-RPXC7Q6H.js";
import {
  __toESM
} from "./chunk-HY2WJTHE.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js
init_lib();
var import_utils = __toESM(require_utils());
var _embeddedWalletSdk = /* @__PURE__ */ new WeakMap();
var _signer = /* @__PURE__ */ new WeakMap();
var EmbeddedWalletConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "id", walletIds.paper);
    _defineProperty(this, "name", "Embedded Wallet");
    _defineProperty(this, "ready", true);
    _defineProperty(this, "user", null);
    _classPrivateFieldInitSpec(this, _embeddedWalletSdk, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _signer, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "onAccountsChanged", async (accounts) => {
      if (accounts.length === 0) {
        await this.onDisconnect();
      } else {
        this.emit("change", {
          account: utils_exports.getAddress(accounts[0])
        });
      }
    });
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = this.options.chains.findIndex((c) => c.chainId === id) === -1;
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    _defineProperty(this, "onDisconnect", async () => {
      this.emit("disconnect");
    });
    this.options = options;
  }
  getEmbeddedWalletSDK() {
    if (!_classPrivateFieldGet(this, _embeddedWalletSdk)) {
      _classPrivateFieldSet(this, _embeddedWalletSdk, new EmbeddedWalletSdk({
        clientId: this.options.clientId,
        chain: "Ethereum",
        onAuthSuccess: this.options.onAuthSuccess
      }));
    }
    return _classPrivateFieldGet(this, _embeddedWalletSdk);
  }
  async connect(args) {
    if (!args) {
      const result = await this.authenticate({
        strategy: "iframe"
      });
      if (!result.user) {
        throw new Error("Error connecting User");
      }
      this.user = result.user;
    } else {
      if (!args.authResult) {
        throw new Error("Missing authData - call authenticate() first with your authentication strategy");
      }
      if (!args.authResult.user) {
        throw new Error("Missing authData.user - call authenticate() first with your authentication strategy");
      }
      this.user = args.authResult.user;
    }
    if (args == null ? void 0 : args.chainId) {
      this.switchChain(args.chainId);
    }
    return this.getAddress();
  }
  async disconnect() {
    const paper = _classPrivateFieldGet(this, _embeddedWalletSdk);
    await (paper == null ? void 0 : paper.auth.logout());
    _classPrivateFieldSet(this, _signer, void 0);
    _classPrivateFieldSet(this, _embeddedWalletSdk, void 0);
    this.user = null;
  }
  async getAddress() {
    if (!this.user) {
      throw new Error("Embedded Wallet is not connected");
    }
    return await this.getSigner().then((signer) => signer.getAddress());
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch (e) {
      return false;
    }
  }
  async getProvider() {
    const signer = await this.getSigner();
    if (!signer.provider) {
      throw new Error("Provider not found");
    }
    return signer.provider;
  }
  async getSigner() {
    if (_classPrivateFieldGet(this, _signer)) {
      return _classPrivateFieldGet(this, _signer);
    }
    const user = await this.getUser();
    const signer = await user.wallet.getEthersJsSigner({
      rpcEndpoint: this.options.chain.rpc[0] || ""
      // TODO: handle chain.rpc being empty array
    });
    if (!signer) {
      throw new Error("Signer not found");
    }
    _classPrivateFieldSet(this, _signer, signer);
    return signer;
  }
  async isAuthorized() {
    return false;
  }
  async switchChain(chainId) {
    var _a, _b;
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error("Chain not configured");
    }
    try {
      await ((_a = this.user) == null ? void 0 : _a.wallet.setChain({
        chain: "Ethereum"
      }));
      _classPrivateFieldSet(this, _signer, await ((_b = this.user) == null ? void 0 : _b.wallet.getEthersJsSigner({
        rpcEndpoint: chain.rpc[0] || ""
      })));
      this.emit("change", {
        chain: {
          id: chainId,
          unsupported: false
        }
      });
    } catch (e) {
      console.warn("Failed to switch chain", e);
    }
  }
  async setupListeners() {
    return Promise.resolve();
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
  async getUser() {
    if (!this.user || !this.user.wallet || !this.user.wallet.getEthersJsSigner) {
      const embeddedWalletSdk = this.getEmbeddedWalletSDK();
      const user = await embeddedWalletSdk.getUser();
      switch (user.status) {
        case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {
          this.user = user;
          break;
        }
        default: {
          throw new Error("Embedded Wallet is not authenticated, please authenticate first");
        }
      }
    }
    return this.user;
  }
  async getEmail() {
    const user = await this.getUser();
    return user.authDetails.email;
  }
  async getRecoveryInformation() {
    const user = await this.getUser();
    return user.authDetails;
  }
  async sendVerificationEmail(_ref) {
    let {
      email
    } = _ref;
    const ewSDK = this.getEmbeddedWalletSDK();
    return ewSDK.auth.sendEmailLoginOtp({
      email
    });
  }
  async authenticate(params) {
    const ewSDK = this.getEmbeddedWalletSDK();
    const strategy = params.strategy;
    switch (strategy) {
      case "email_verification": {
        return await ewSDK.auth.verifyEmailLoginOtp({
          email: params.email,
          otp: params.verificationCode,
          recoveryCode: params.recoveryCode
        });
      }
      case "apple":
      case "facebook":
      case "google": {
        const oauthProvider = oauthStrategyToAuthProvider[strategy];
        return ewSDK.auth.loginWithOauth({
          oauthProvider,
          closeOpenedWindow: params.closeOpenedWindow,
          openedWindow: params.openedWindow
        });
      }
      case "jwt": {
        return ewSDK.auth.loginWithCustomJwt({
          jwt: params.jwt,
          encryptionKey: params.encryptionKey
        });
      }
      case "auth_endpoint": {
        return ewSDK.auth.loginWithCustomAuthEndpoint({
          payload: params.payload,
          encryptionKey: params.encryptionKey
        });
      }
      case "iframe_email_verification": {
        return ewSDK.auth.loginWithEmailOtp({
          email: params.email
        });
      }
      case "iframe": {
        return ewSDK.auth.loginWithModal();
      }
      default:
        assertUnreachable(strategy);
    }
  }
};
function assertUnreachable(x) {
  throw new Error("Invalid param: " + x);
}
var oauthStrategyToAuthProvider = {
  google: AuthProvider.GOOGLE,
  facebook: AuthProvider.FACEBOOK,
  apple: AuthProvider.APPLE
};
export {
  EmbeddedWalletConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm-THIT6GLW.js.map
