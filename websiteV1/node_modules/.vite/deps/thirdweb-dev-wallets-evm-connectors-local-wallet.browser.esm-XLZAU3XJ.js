import "./chunk-OAS74USQ.js";
import {
  Connector
} from "./chunk-GCCNDEE6.js";
import {
  normalizeChainId
} from "./chunk-NFVSMFYV.js";
import {
  _classPrivateFieldGet,
  _classPrivateFieldInitSpec,
  _classPrivateFieldSet
} from "./chunk-O3XEUKFA.js";
import {
  _defineProperty
} from "./chunk-NOVSDTX6.js";
import "./chunk-5A2FE2ER.js";
import "./chunk-QPV4FZ5V.js";
import "./chunk-O7PTIWBQ.js";
import "./chunk-MBWMTJGL.js";
import "./chunk-P47MSBEL.js";
import "./chunk-F66KJ3MO.js";
import "./chunk-BKLKQHBD.js";
import "./chunk-3LTN6VWJ.js";
import "./chunk-NQBSEIQW.js";
import "./chunk-AIWA7TTA.js";
import "./chunk-FD2ND6T4.js";
import "./chunk-DCYQVSPK.js";
import "./chunk-HDGG475V.js";
import "./chunk-TU2R4PHN.js";
import "./chunk-NF2R5LDW.js";
import "./chunk-GW2VTAJE.js";
import "./chunk-MP37DYHG.js";
import "./chunk-EG3CND37.js";
import "./chunk-JEPSYNMU.js";
import "./chunk-3M6RMWCZ.js";
import "./chunk-PUKV7ZAP.js";
import "./chunk-MHYZDSJZ.js";
import "./chunk-LIXULRTR.js";
import "./chunk-R54CBKQA.js";
import "./chunk-YRDCNHJF.js";
import "./chunk-EWRZHZCC.js";
import {
  getChainProvider,
  getDefaultGasOverrides
} from "./chunk-DH5ORYRE.js";
import "./chunk-ALZVY6XD.js";
import {
  require_utils
} from "./chunk-GGTUGTMY.js";
import "./chunk-IPWV37YA.js";
import "./chunk-TOTZGILQ.js";
import "./chunk-ULMQ5M2J.js";
import {
  init_lib7 as init_lib
} from "./chunk-4CCDGKES.js";
import {
  Signer
} from "./chunk-RN5BNASC.js";
import "./chunk-FQ3VPZMN.js";
import "./chunk-4FGL2VA3.js";
import "./chunk-MC3ZE6YI.js";
import "./chunk-JPRHTH4L.js";
import "./chunk-S6N5TO4J.js";
import "./chunk-YO67V5O2.js";
import "./chunk-ZNZQX44K.js";
import "./chunk-WZAZHEFN.js";
import "./chunk-3JC5L5ZG.js";
import "./chunk-ZXSTHQ62.js";
import "./chunk-T6FU7KQN.js";
import "./chunk-IFLWFOT6.js";
import "./chunk-KWLF5MZH.js";
import "./chunk-SHK4Q3CR.js";
import "./chunk-G5HFVUVZ.js";
import "./chunk-DLXTD4FJ.js";
import "./chunk-LKX6VO3E.js";
import {
  __toESM
} from "./chunk-HY2WJTHE.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js
init_lib();
var import_utils = __toESM(require_utils());
var WrappedSigner = class _WrappedSigner extends Signer {
  constructor(signer) {
    super();
    this.signer = signer;
    (0, import_utils.defineReadOnly)(this, "provider", signer.provider);
  }
  async getAddress() {
    return await this.signer.getAddress();
  }
  async signMessage(message) {
    return await this.signer.signMessage(message);
  }
  async signTransaction(transaction) {
    return await this.signer.signTransaction(transaction);
  }
  connect(provider) {
    return new _WrappedSigner(this.signer.connect(provider));
  }
  _signTypedData(domain, types, value) {
    return this.signer._signTypedData(domain, types, value);
  }
  async sendTransaction(transaction) {
    if (!this.provider) {
      throw new Error("Provider not found");
    }
    const gas = await getDefaultGasOverrides(this.provider);
    const txWithGas = {
      ...gas,
      ...transaction
    };
    return await this.signer.sendTransaction(txWithGas);
  }
};
var _provider = /* @__PURE__ */ new WeakMap();
var _signer = /* @__PURE__ */ new WeakMap();
var LocalWalletConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "id", "local_wallet");
    _defineProperty(this, "name", "Local Wallet");
    _classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _signer, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "shimDisconnectKey", "localWallet.shimDisconnect");
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    _classPrivateFieldSet(this, _provider, void 0);
    _classPrivateFieldSet(this, _signer, void 0);
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!_classPrivateFieldGet(this, _provider)) {
      _classPrivateFieldSet(this, _provider, getChainProvider(this.options.chain, {
        clientId: this.options.clientId,
        secretKey: this.options.secretKey
      }));
    }
    return _classPrivateFieldGet(this, _provider);
  }
  async getSigner() {
    if (!_classPrivateFieldGet(this, _signer)) {
      const provider = await this.getProvider();
      _classPrivateFieldSet(this, _signer, getSignerFromEthersWallet(this.options.ethersWallet, provider));
    }
    return _classPrivateFieldGet(this, _signer);
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    _classPrivateFieldSet(this, _provider, getChainProvider(chain, {
      clientId: this.options.clientId,
      secretKey: this.options.secretKey
    }));
    _classPrivateFieldSet(this, _signer, getSignerFromEthersWallet(this.options.ethersWallet, _classPrivateFieldGet(this, _provider)));
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getSignerFromEthersWallet(ethersWallet, provider) {
  let signer = ethersWallet;
  if (provider) {
    signer = ethersWallet.connect(provider);
  }
  return new WrappedSigner(signer);
}
export {
  LocalWalletConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm-XLZAU3XJ.js.map
