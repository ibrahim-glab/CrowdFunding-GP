{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/nft-drop-4f7bc814.browser.esm.js"],
  "sourcesContent": ["import { BigNumber, constants } from 'ethers';\r\nimport { D as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-c67b6cd4.browser.esm.js';\r\nimport { dA as NFT_BASE_CONTRACT_ROLES, cq as ContractWrapper, bj as AbiSchema, bR as DropErc721ContractSchema, cN as FEATURE_NFT_REVEALABLE, H as getRoleHash } from './index-e7118e8b.browser.esm.js';\r\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-de84ba20.browser.esm.js';\r\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-3d68505c.browser.esm.js';\r\nimport { C as ContractEncoder } from './fetchCurrencyValue-27d660ae.browser.esm.js';\r\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\r\nimport { C as ContractRoyalty, D as DelayedReveal, a as ContractOwner } from './contract-owner-1f113a23.browser.esm.js';\r\nimport { C as ContractPlatformFee } from './contract-platform-fee-789b7ae1.browser.esm.js';\r\nimport { C as ContractRoles } from './contract-roles-423d8c8f.browser.esm.js';\r\nimport { C as ContractPrimarySale } from './contract-sales-c7829960.browser.esm.js';\r\nimport { D as DropClaimConditions } from './drop-claim-conditions-171f45b9.browser.esm.js';\r\nimport { S as StandardErc721 } from './erc-721-standard-af039d94.browser.esm.js';\r\nimport { P as PaperCheckout } from './thirdweb-checkout-23db4ad3.browser.esm.js';\r\nimport './setErc20Allowance-0fd3045e.browser.esm.js';\r\nimport 'zod';\r\nimport '@thirdweb-dev/chains';\r\nimport '@thirdweb-dev/crypto';\r\nimport 'tiny-invariant';\r\nimport 'bn.js';\r\nimport 'bs58';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\r\nimport 'ethers/lib/utils';\r\nimport 'eventemitter3';\r\nimport '@thirdweb-dev/storage';\r\nimport './signature-61410b74.browser.esm.js';\r\nimport './normalizePriceValue-ee13e65c.browser.esm.js';\r\nimport '@thirdweb-dev/merkletree';\r\nimport './assertEnabled-0bc21898.browser.esm.js';\r\nimport 'uuid';\r\nimport 'fast-deep-equal';\r\nimport './erc-721-91c6bacf.browser.esm.js';\r\n\r\n/**\r\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\r\n *\r\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\r\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");\r\n * ```\r\n *\r\n * @internal\r\n * @deprecated use contract.erc721 instead\r\n */\r\nclass NFTDrop extends StandardErc721 {\r\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n\r\n  /**\r\n   * Configure royalties\r\n   * @remarks Set your own royalties for the entire contract or per token\r\n   * @example\r\n   * ```javascript\r\n   * // royalties on the whole contract\r\n   * contract.royalties.setDefaultRoyaltyInfo({\r\n   *   seller_fee_basis_points: 100, // 1%\r\n   *   fee_recipient: \"0x...\"\r\n   * });\r\n   * // override royalty for a particular token\r\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\r\n   *   seller_fee_basis_points: 500, // 5%\r\n   *   fee_recipient: \"0x...\"\r\n   * });\r\n   * ```\r\n   */\r\n\r\n  /**\r\n   * Configure claim conditions\r\n   * @remarks Define who can claim NFTs in the collection, when and how many.\r\n   * @example\r\n   * ```javascript\r\n   * const presaleStartTime = new Date();\r\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\r\n   * const claimConditions = [\r\n   *   {\r\n   *     startTime: presaleStartTime, // start the presale now\r\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\r\n   *     price: 0.01, // presale price\r\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\r\n   *   },\r\n   *   {\r\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\r\n   *     price: 0.08, // public sale price\r\n   *   }\r\n   * ]);\r\n   * await contract.claimConditions.set(claimConditions);\r\n   * ```\r\n   */\r\n\r\n  /**\r\n   * Delayed reveal\r\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\r\n   * @example\r\n   * ```javascript\r\n   * // the real NFTs, these will be encrypted until you reveal them\r\n   * const realNFTs = [{\r\n   *   name: \"Common NFT #1\",\r\n   *   description: \"Common NFT, one of many.\",\r\n   *   image: fs.readFileSync(\"path/to/image.png\"),\r\n   * }, {\r\n   *   name: \"Super Rare NFT #2\",\r\n   *   description: \"You got a Super Rare NFT!\",\r\n   *   image: fs.readFileSync(\"path/to/image.png\"),\r\n   * }];\r\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\r\n   * const placeholderNFT = {\r\n   *   name: \"Hidden NFT\",\r\n   *   description: \"Will be revealed next week!\"\r\n   * };\r\n   * // Create and encrypt the NFTs\r\n   * await contract.revealer.createDelayedRevealBatch(\r\n   *   placeholderNFT,\r\n   *   realNFTs,\r\n   *   \"my secret password\",\r\n   * );\r\n   * // Whenever you're ready, reveal your NFTs at any time\r\n   * const batchId = 0; // the batch to reveal\r\n   * await contract.revealer.reveal(batchId, \"my secret password\");\r\n   * ```\r\n   */\r\n\r\n  /**\r\n   * Checkout\r\n   * @remarks Create a FIAT currency checkout for your NFT drop.\r\n   */\r\n\r\n  constructor(network, address, storage) {\r\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\r\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\r\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\r\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\r\n    super(contractWrapper, storage, chainId);\r\n    this.abi = AbiSchema.parse(abi || []);\r\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\r\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\r\n    this.roles = new ContractRoles(this.contractWrapper, NFTDrop.contractRoles);\r\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\r\n    this.sales = new ContractPrimarySale(this.contractWrapper);\r\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\r\n    this.encoder = new ContractEncoder(this.contractWrapper);\r\n    this.estimator = new GasCostEstimator(this.contractWrapper);\r\n    this.events = new ContractEvents(this.contractWrapper);\r\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\r\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\r\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\r\n    this.owner = new ContractOwner(this.contractWrapper);\r\n    this.checkout = new PaperCheckout(this.contractWrapper);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  onNetworkUpdated(network) {\r\n    this.contractWrapper.updateSignerOrProvider(network);\r\n  }\r\n  getAddress() {\r\n    return this.contractWrapper.address;\r\n  }\r\n\r\n  /** ******************************\r\n   * READ FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\r\n   */\r\n  async totalSupply() {\r\n    const [claimed, unclaimed] = await Promise.all([this.totalClaimedSupply(), this.totalUnclaimedSupply()]);\r\n    return claimed.add(unclaimed);\r\n  }\r\n\r\n  /**\r\n   * Get All Claimed NFTs\r\n   *\r\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\r\n   *\r\n   * * @example\r\n   * ```javascript\r\n   * const claimedNFTs = await contract.getAllClaimed();\r\n   * const firstOwner = claimedNFTs[0].owner;\r\n   * ```\r\n   *\r\n   * @param queryParams - optional filtering to only fetch a subset of results.\r\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\r\n   */\r\n  async getAllClaimed(queryParams) {\r\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\r\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\r\n    const maxId = Math.min((await this.contractWrapper.read(\"nextTokenIdToClaim\", [])).toNumber(), start + count);\r\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\r\n  }\r\n\r\n  /**\r\n   * Get All Unclaimed NFTs\r\n   *\r\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\r\n   *\r\n   * * @example\r\n   * ```javascript\r\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\r\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\r\n   * ```\r\n   *\r\n   * @param queryParams - optional filtering to only fetch a subset of results.\r\n   * @returns The NFT metadata for all NFTs queried.\r\n   */\r\n  async getAllUnclaimed(queryParams) {\r\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\r\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\r\n    const firstTokenId = BigNumber.from(Math.max((await this.contractWrapper.read(\"nextTokenIdToClaim\", [])).toNumber(), start));\r\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.read(\"nextTokenIdToMint\", [])).toNumber(), firstTokenId.toNumber() + count));\r\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\r\n  }\r\n\r\n  /**\r\n   * Get the claimed supply\r\n   *\r\n   * @remarks Get the number of claimed NFTs in this Drop.\r\n   *\r\n   * * @example\r\n   * ```javascript\r\n   * const claimedNFTCount = await contract.totalClaimedSupply();\r\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\r\n   * ```\r\n   * @returns The unclaimed supply\r\n   */\r\n  async totalClaimedSupply() {\r\n    return this.erc721.totalClaimedSupply();\r\n  }\r\n\r\n  /**\r\n   * Get the unclaimed supply\r\n   *\r\n   * @remarks Get the number of unclaimed NFTs in this Drop.\r\n   *\r\n   * * @example\r\n   * ```javascript\r\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\r\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\r\n   * ```\r\n   * @returns The unclaimed supply\r\n   */\r\n  async totalUnclaimedSupply() {\r\n    return this.erc721.totalUnclaimedSupply();\r\n  }\r\n\r\n  /**\r\n   * Get whether users can transfer NFTs from this contract\r\n   */\r\n  async isTransferRestricted() {\r\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\r\n    return !anyoneCanTransfer;\r\n  }\r\n\r\n  /** ******************************\r\n   * WRITE FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Create a batch of unique NFTs to be claimed in the future\r\n   *\r\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Custom metadata of the NFTs to create\r\n   * const metadatas = [{\r\n   *   name: \"Cool NFT\",\r\n   *   description: \"This is a cool NFT\",\r\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\r\n   * }, {\r\n   *   name: \"Cool NFT\",\r\n   *   description: \"This is a cool NFT\",\r\n   *   image: fs.readFileSync(\"path/to/image.png\"),\r\n   * }];\r\n   *\r\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\r\n   * const firstTokenId = results[0].id; // token id of the first created NFT\r\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\r\n   * ```\r\n   *\r\n   * @param metadatas - The metadata to include in the batch.\r\n   * @param options - optional upload progress callback\r\n   */\r\n  createBatch = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\r\n    return this.erc721.lazyMint.prepare(metadatas, options);\r\n  });\r\n\r\n  /**\r\n   * Construct a claim transaction without executing it.\r\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\r\n   * @param destinationAddress - Address you want to send the token to\r\n   * @param quantity - Quantity of the tokens you want to claim\r\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\r\n   *\r\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\r\n   */\r\n  async getClaimTransaction(destinationAddress, quantity) {\r\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\r\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, {\r\n      checkERC20Allowance\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Claim unique NFTs to a specific Wallet\r\n   *\r\n   * @remarks Let the specified wallet claim NFTs.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\r\n   * const quantity = 1; // how many unique NFTs you want to claim\r\n   *\r\n   * const tx = await contract.claimTo(address, quantity);\r\n   * const receipt = tx[0].receipt; // the transaction receipt\r\n   * const claimedTokenId = tx[0].id; // the id of the NFT claimed\r\n   * const claimedNFT = await tx[0].data(); // (optional) get the claimed NFT metadata\r\n   * ```\r\n   *\r\n   * @param destinationAddress - Address you want to send the token to\r\n   * @param quantity - Quantity of the tokens you want to claim\r\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\r\n   *\r\n   * @returns  an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\r\n   */\r\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\r\n    var _this = this;\r\n    return async function (destinationAddress, quantity) {\r\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\r\n      return _this.erc721.claimTo.prepare(destinationAddress, quantity, {\r\n        checkERC20Allowance\r\n      });\r\n    };\r\n  })());\r\n\r\n  /**\r\n   * Claim NFTs to the connected wallet.\r\n   *\r\n   * @remarks See {@link NFTDrop.claimTo}\r\n   *\r\n   * @returns  an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\r\n   */\r\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\r\n    var _this2 = this;\r\n    return async function (quantity) {\r\n      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\r\n      return _this2.claimTo.prepare(await _this2.contractWrapper.getSignerAddress(), quantity, checkERC20Allowance);\r\n    };\r\n  })());\r\n\r\n  /**\r\n   * Burn a single NFT\r\n   *\r\n   * @param tokenId - the token Id to burn\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const result = await contract.burnToken(tokenId);\r\n   * ```\r\n   *\r\n   */\r\n  burn = /* @__PURE__ */buildTransactionFunction(async tokenId => {\r\n    return this.erc721.burn.prepare(tokenId);\r\n  });\r\n\r\n  /******************************\r\n   * STANDARD ERC721 FUNCTIONS\r\n   ******************************/\r\n\r\n  /**\r\n   * Get a single NFT\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const tokenId = 0;\r\n   * const nft = await contract.get(tokenId);\r\n   * ```\r\n   * @param tokenId - the tokenId of the NFT to retrieve\r\n   * @returns The NFT metadata\r\n   */\r\n  async get(tokenId) {\r\n    return this.erc721.get(tokenId);\r\n  }\r\n\r\n  /**\r\n   * Get the current owner of a given NFT within this Contract\r\n   *\r\n   * @param tokenId - the tokenId of the NFT\r\n   * @returns The address of the owner\r\n   */\r\n  async ownerOf(tokenId) {\r\n    return this.erc721.ownerOf(tokenId);\r\n  }\r\n\r\n  /**\r\n   * Get NFT Balance\r\n   *\r\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const walletAddress = \"{{wallet_address}}\";\r\n   * const balance = await contract.balanceOf(walletAddress);\r\n   * console.log(balance);\r\n   * ```\r\n   */\r\n  async balanceOf(address) {\r\n    return this.erc721.balanceOf(address);\r\n  }\r\n\r\n  /**\r\n   * Get NFT Balance for the currently connected wallet\r\n   */\r\n  async balance() {\r\n    return this.erc721.balance();\r\n  }\r\n\r\n  /**\r\n   * Get whether this wallet has approved transfers from the given operator\r\n   * @param address - the wallet address\r\n   * @param operator - the operator address\r\n   */\r\n  async isApproved(address, operator) {\r\n    return this.erc721.isApproved(address, operator);\r\n  }\r\n\r\n  /**\r\n   * Transfer an NFT\r\n   *\r\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const walletAddress = \"{{wallet_address}}\";\r\n   * const tokenId = 0;\r\n   * await contract.transfer(walletAddress, tokenId);\r\n   * ```\r\n   */\r\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\r\n    return this.erc721.transfer.prepare(to, tokenId);\r\n  });\r\n\r\n  /**\r\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\r\n   * @param operator - the operator's address\r\n   * @param approved - whether to approve or remove\r\n   *\r\n   * @internal\r\n   */\r\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\r\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\r\n  });\r\n\r\n  /**\r\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\r\n   * @param operator - the operator's address\r\n   * @param tokenId - the tokenId to give approval for\r\n   *\r\n   * @internal\r\n   */\r\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"approve\",\r\n      args: [operator, tokenId]\r\n    });\r\n  });\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  async prepare(method, args, overrides) {\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method,\r\n      args,\r\n      overrides\r\n    });\r\n  }\r\n\r\n  /** ******************************\r\n   * PRIVATE FUNCTIONS\r\n   *******************************/\r\n  /**\r\n   * @internal\r\n   */\r\n  async call(functionName, args, overrides) {\r\n    return this.contractWrapper.call(functionName, args, overrides);\r\n  }\r\n}\r\n\r\nexport { NFTDrop };\r\n"],
  "mappings": "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",
  "names": []
}
