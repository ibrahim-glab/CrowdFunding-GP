{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/erc-1155-standard-ed14a5bb.browser.esm.js"],
  "sourcesContent": ["import { d as buildTransactionFunction } from './transactions-de84ba20.browser.esm.js';\r\nimport { E as Erc1155 } from './erc-1155-11567028.browser.esm.js';\r\n\r\n/**\r\n * Standard ERC1155 NFT functions\r\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\r\n * @example\r\n * ```javascript\r\n * const contract = await sdk.getContract(\"{{contract_address}}\");\r\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\r\n * ```\r\n * @public\r\n */\r\nclass StandardErc1155 {\r\n  get chainId() {\r\n    return this._chainId;\r\n  }\r\n  constructor(contractWrapper, storage, chainId) {\r\n    this.contractWrapper = contractWrapper;\r\n    this.storage = storage;\r\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\r\n    this._chainId = chainId;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  onNetworkUpdated(network) {\r\n    this.contractWrapper.updateSignerOrProvider(network);\r\n  }\r\n  getAddress() {\r\n    return this.contractWrapper.address;\r\n  }\r\n\r\n  ////// Standard ERC1155 functions //////\r\n\r\n  /**\r\n   * Get a single NFT\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const nft = await contract.get(\"0\");\r\n   * ```\r\n   * @param tokenId - the tokenId of the NFT to retrieve\r\n   * @returns The NFT metadata\r\n   */\r\n  async get(tokenId) {\r\n    return this.erc1155.get(tokenId);\r\n  }\r\n\r\n  /**\r\n   * Returns the total supply of a specific token\r\n   * @param tokenId - The token ID to get the total supply of\r\n   * @returns The total supply\r\n   */\r\n  async totalSupply(tokenId) {\r\n    return this.erc1155.totalSupply(tokenId);\r\n  }\r\n\r\n  /**\r\n   * Get NFT Balance\r\n   *\r\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to check NFT balance\r\n   * const walletAddress = \"{{wallet_address}}\";\r\n   * const tokenId = 0; // Id of the NFT to check\r\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\r\n   * ```\r\n   */\r\n  async balanceOf(address, tokenId) {\r\n    return this.erc1155.balanceOf(address, tokenId);\r\n  }\r\n\r\n  /**\r\n   * Get NFT Balance for the currently connected wallet\r\n   */\r\n  async balance(tokenId) {\r\n    return this.erc1155.balance(tokenId);\r\n  }\r\n\r\n  /**\r\n   * Get whether this wallet has approved transfers from the given operator\r\n   * @param address - the wallet address\r\n   * @param operator - the operator address\r\n   */\r\n  async isApproved(address, operator) {\r\n    return this.erc1155.isApproved(address, operator);\r\n  }\r\n\r\n  /**\r\n   * Transfer an NFT\r\n   *\r\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to send the NFT to\r\n   * const toAddress = \"{{wallet_address}}\";\r\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\r\n   * const amount = 3; // How many copies of the NFTs to transfer\r\n   * await contract.transfer(toAddress, tokenId, amount);\r\n   * ```\r\n   */\r\n  transfer = /* @__PURE__ */buildTransactionFunction((() => {\r\n    var _this = this;\r\n    return async function (to, tokenId, amount) {\r\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\r\n      return _this.erc1155.transfer.prepare(to, tokenId, amount, data);\r\n    };\r\n  })());\r\n\r\n  /**\r\n   * Transfer multiple NFTs\r\n   * \r\n   * @remarks Transfer multiple NFTs from the connected wallet to another wallet.\r\n   * \r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to send the NFTs to\r\n   * const toAddress = \"{{wallet_address}}\";\r\n   * // Array of token IDs of the NFTs you want to send\r\n   * const tokenIds = [\"0\", \"1\", \"2\"];\r\n   * // Array of amounts of the NFTs you want to send\r\n   * const amounts = [1, 2, 3];\r\n   * await contract.transferBatch(toAddress, tokenIds, amounts);\r\n   * ```\r\n   */\r\n  transferBatch = /* @__PURE__ */buildTransactionFunction((() => {\r\n    var _this2 = this;\r\n    return async function (to, tokenIds, amounts, fromAddress) {\r\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\r\n      return _this2.erc1155.transferBatch.prepare(to, tokenIds, amounts, fromAddress, data);\r\n    };\r\n  })());\r\n\r\n  /**\r\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\r\n   * @param operator - the operator's address\r\n   * @param approved - whether to approve or remove\r\n   *\r\n   * @internal\r\n   */\r\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\r\n    return this.erc1155.setApprovalForAll.prepare(operator, approved);\r\n  });\r\n\r\n  /**\r\n   * Airdrop multiple NFTs\r\n   *\r\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\r\n   * @twfeature ERC1155\r\n   * @example\r\n   * ```javascript\r\n   * // The token ID of the NFT you want to airdrop\r\n   * const tokenId = \"0\";\r\n   * // Array of objects of addresses and quantities to airdrop NFTs to\r\n   * const addresses = [\r\n   *  {\r\n   *    address: \"0x...\",\r\n   *    quantity: 2,\r\n   *  },\r\n   *  {\r\n   *   address: \"0x...\",\r\n   *    quantity: 3,\r\n   *  },\r\n   * ];\r\n   * await contract.airdrop(tokenId, addresses);\r\n   *\r\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\r\n   * const tokenId = \"0\";\r\n   * const addresses = [\r\n   *  \"0x...\", \"0x...\", \"0x...\",\r\n   * ]\r\n   * await contract.airdrop(tokenId, addresses);\r\n   * ```\r\n   */\r\n  airdrop = /* @__PURE__ */buildTransactionFunction((() => {\r\n    var _this3 = this;\r\n    return async function (tokenId, addresses, fromAddress) {\r\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\r\n      return _this3.erc1155.airdrop.prepare(tokenId, addresses, fromAddress, data);\r\n    };\r\n  })());\r\n}\r\n\r\nexport { StandardErc1155 as S };\r\n"],
  "mappings": "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",
  "names": []
}
