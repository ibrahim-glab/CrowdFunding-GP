{
  "version": 3,
  "sources": ["../../@toruslabs/openlogin-ed25519/src/utils.ts"],
  "sourcesContent": ["import nacl from \"@toruslabs/tweetnacl-js\";\n\nexport type SECP256K1KeyType = \"secp256k1\";\nexport type ED25519KeyType = \"ed25519\";\n\nexport type SECP256K1Key = Buffer;\nexport type ED25519Key = Buffer;\n\nconst l = (nacl as any).lowlevel;\n\nexport function getED25519Key(privateKey: string | Buffer): {\n  sk: Buffer;\n  pk: Buffer;\n} {\n  let privKey: Buffer;\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  }\n  // Implementation copied from tweetnacl\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n\n  d[0] &= 248;\n\n  d[31] &= 127;\n\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return { sk: Buffer.from(sk), pk: Buffer.from(pk) };\n}\n"],
  "mappings": ";;;;;;;;;;AAUM,SAAUA,cAAcC,YAA2B;AAIvD,MAAIC;AACJ,MAAI,OAAOD,eAAe,UAAU;AAClCC,cAAUC,OAAOC,KAAKH,YAAY,KAAxB;EACX,OAAM;AACLC,cAAUD;EACX;AAGD,QAAMI,IAAI,IAAIC,WAAW,EAAf;AACV,QAAMC,IAAI,CAACC,EAAEC,GAAF,GAAQD,EAAEC,GAAF,GAAQD,EAAEC,GAAF,GAAQD,EAAEC,GAAF,CAAzB;AACV,QAAMC,KAAK,IAAIJ,WAAW,CAAC,GAAG,IAAIA,WAAWJ,OAAf,GAAyB,GAAG,IAAII,WAAW,EAAf,CAAhC,CAAf;AACX,QAAMK,KAAK,IAAIL,WAAW,EAAf;AACXE,IAAEI,YAAYP,GAAGK,IAAI,EAArB;AAEAL,IAAE,CAAD,KAAO;AAERA,IAAE,EAAD,KAAQ;AAETA,IAAE,EAAD,KAAQ;AACTG,IAAEK,WAAWN,GAAGF,CAAhB;AACAG,IAAEM,KAAKH,IAAIJ,CAAX;AACA,WAASQ,IAAI,GAAGA,IAAI,IAAIA,KAAK;AAAGL,OAAGK,IAAI,EAAL,IAAWJ,GAAGI,CAAD;AAE/C,SAAO;IAAEL,IAAIP,OAAOC,KAAKM,EAAZ;IAAiBC,IAAIR,OAAOC,KAAKO,EAAZ;;AACnC;yBA9BKH;;;;AAAN,IAAMA,IAAKQ,oBAAAA,QAAaC;;;",
  "names": ["getED25519Key", "privateKey", "privKey", "Buffer", "from", "d", "Uint8Array", "p", "l", "gf", "sk", "pk", "crypto_hash", "scalarbase", "pack", "i", "nacl", "lowlevel"]
}
