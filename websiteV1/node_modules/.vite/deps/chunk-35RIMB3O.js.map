{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/contract-platform-fee-789b7ae1.browser.esm.js"],
  "sourcesContent": ["import { d as buildTransactionFunction, T as Transaction } from './transactions-de84ba20.browser.esm.js';\nimport { dp as FEATURE_PLATFORM_FEE, bF as CommonPlatformFeeSchema } from './index-e7118e8b.browser.esm.js';\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\nexport { ContractPlatformFee as C };\n"],
  "mappings": ";;;;;;;;;;;AAiBA,IAAM,sBAAN,MAA0B;AAAA,EAExB,YAAY,iBAAiB;AAD7B,uCAAc,qBAAqB;AAsCnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAqB,yBAAyB,OAAM,oBAAmB;AACrE,YAAM,SAAS,MAAM,wBAAwB,WAAW,eAAe;AACvE,aAAO,YAAY,oBAAoB;AAAA,QACrC,iBAAiB,KAAK;AAAA,QACtB,QAAQ;AAAA,QACR,MAAM,CAAC,OAAO,wBAAwB,OAAO,yBAAyB;AAAA,MACxE,CAAC;AAAA,IACH,CAAC;AA3CC,SAAK,kBAAkB;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,MAAM;AACV,UAAM,CAAC,sBAAsB,cAAc,IAAI,MAAM,KAAK,gBAAgB,KAAK,sBAAsB,CAAC,CAAC;AACvG,WAAO,wBAAwB,WAAW;AAAA,MACxC,wBAAwB;AAAA,MACxB,2BAA2B;AAAA,IAC7B,CAAC;AAAA,EACH;AAwBF;",
  "names": []
}
