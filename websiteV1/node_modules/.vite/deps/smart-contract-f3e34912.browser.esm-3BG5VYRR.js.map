{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/smart-contract-f3e34912.browser.esm.js"],
  "sourcesContent": ["import { a as assertEnabled } from './assertEnabled-0bc21898.browser.esm.js';\nimport { a as ContractEvents, G as GasCostEstimator, C as ContractMetadata, d as detectContractFeature, b as ContractAppURI } from './contract-appuri-3d68505c.browser.esm.js';\nimport { bj as AbiSchema, d1 as FEATURE_ROYALTY, d0 as FEATURE_PERMISSIONS, d3 as FEATURE_PRIMARY_SALE, dp as FEATURE_PLATFORM_FEE, d2 as FEATURE_OWNER, cH as FEATURE_TOKEN, cY as FEATURE_NFT, df as FEATURE_EDITION, c$ as FEATURE_APPURI, dv as FEATURE_DIRECT_LISTINGS, dw as FEATURE_ENGLISH_AUCTIONS, dx as FEATURE_OFFERS, dl as FEATURE_AIRDROP_ERC20, dm as FEATURE_AIRDROP_ERC721, dn as FEATURE_AIRDROP_ERC1155, dj as FEATURE_ACCOUNT_FACTORY, di as FEATURE_ACCOUNT, dk as FEATURE_DYNAMIC_CONTRACT, cq as ContractWrapper, bg as CustomContractSchema, G as ALL_ROLES } from './index-e7118e8b.browser.esm.js';\nimport { C as ContractPublishedMetadata, E as ExtensionManager, b as Airdrop20, c as Airdrop721, d as Airdrop1155, a as AccountFactory, A as Account } from './airdrop-erc1155-1a0a4b59.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-27d660ae.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-1f113a23.browser.esm.js';\nimport { C as ContractPlatformFee } from './contract-platform-fee-789b7ae1.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-423d8c8f.browser.esm.js';\nimport { C as ContractPrimarySale } from './contract-sales-c7829960.browser.esm.js';\nimport { E as Erc1155 } from './erc-1155-11567028.browser.esm.js';\nimport { E as Erc20 } from './erc-20-ce512258.browser.esm.js';\nimport { E as Erc721 } from './erc-721-91c6bacf.browser.esm.js';\nimport { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers } from './marketplacev3-offers-f96181ff.browser.esm.js';\nimport { T as Transaction } from './transactions-de84ba20.browser.esm.js';\nimport 'ethers';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './signature-61410b74.browser.esm.js';\nimport './normalizePriceValue-ee13e65c.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './setErc20Allowance-0fd3045e.browser.esm.js';\nimport 'uuid';\nimport './deployContractDeterministic-df492605.browser.esm.js';\nimport './QueryParams-c67b6cd4.browser.esm.js';\nimport 'fast-deep-equal';\nimport './drop-claim-conditions-171f45b9.browser.esm.js';\nimport './cleanCurrencyAddress-f51f872e.browser.esm.js';\nimport './marketplace-ad8d6c18.browser.esm.js';\n\n/**\n * Custom contract dynamic class with feature detection\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(provider);\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n *\n * // call any function in your contract\n * await contract.call(\"myCustomFunction\", [param1, param2]);\n *\n * // if your contract follows an ERC standard, contract.ercXYZ will be present\n * const allNFTs = await contract.erc721.getAll()\n *\n * // if your contract extends a particular contract extension, the corresponding function will be available\n * const tx = await contract.erc721.mint({\n *     name: \"Cool NFT\",\n *     image: readFileSync(\"some_image.png\"),\n *   });\n * ```\n *\n * @contract\n * @public\n */\nclass SmartContract {\n  // utilities\n\n  get abi() {\n    return AbiSchema.parse(this.contractWrapper.abi || []);\n  }\n\n  /**\n   * Handle royalties\n   */\n  get royalties() {\n    return assertEnabled(this.detectRoyalties(), FEATURE_ROYALTY);\n  }\n\n  /**\n   * Handle permissions\n   */\n  get roles() {\n    return assertEnabled(this.detectRoles(), FEATURE_PERMISSIONS);\n  }\n\n  /**\n   * Handle primary sales\n   */\n  get sales() {\n    return assertEnabled(this.detectPrimarySales(), FEATURE_PRIMARY_SALE);\n  }\n\n  /**\n   * Handle platform fees\n   */\n  get platformFees() {\n    return assertEnabled(this.detectPlatformFees(), FEATURE_PLATFORM_FEE);\n  }\n\n  /**\n   * Set and get the owner of the contract\n   */\n  get owner() {\n    return assertEnabled(this.detectOwnable(), FEATURE_OWNER);\n  }\n\n  /**\n   * Auto-detects ERC20 standard functions.\n   */\n  get erc20() {\n    return assertEnabled(this.detectErc20(), FEATURE_TOKEN);\n  }\n\n  /**\n   * Auto-detects ERC721 standard functions.\n   */\n  get erc721() {\n    return assertEnabled(this.detectErc721(), FEATURE_NFT);\n  }\n\n  /**\n   * Auto-detects ERC1155 standard functions.\n   */\n  get erc1155() {\n    return assertEnabled(this.detectErc1155(), FEATURE_EDITION);\n  }\n\n  /**\n   * Auto-detects AppURI standard functions.\n   */\n  get app() {\n    return assertEnabled(this.detectApp(), FEATURE_APPURI);\n  }\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get airdrop20() {\n    return assertEnabled(this.detectAirdrop20(), FEATURE_AIRDROP_ERC20);\n  }\n  get airdrop721() {\n    return assertEnabled(this.detectAirdrop721(), FEATURE_AIRDROP_ERC721);\n  }\n  get airdrop1155() {\n    return assertEnabled(this.detectAirdrop1155(), FEATURE_AIRDROP_ERC1155);\n  }\n\n  /**\n   * Account Factory\n   *\n   * @remarks Create accounts and fetch data about them.\n   * @example\n   * ```javascript\n   *\n   * // Predict the address of the account that will be created for an admin.\n   * const deterministicAddress = await contract.accountFactory.predictAccountAddress(admin, extraData);\n   *\n   * // Create accounts\n   * const tx = await contract.accountFactory.createAccount(admin, extraData);\n   * // the same as `deterministicAddress`\n   * const accountAddress = tx.address;\n   *\n   * // Get all accounts created by the factory\n   * const allAccounts = await contract.accountFactory.getAllAccounts();\n   *\n   * // Get all accounts on which a signer has been given authority.\n   * const associatedAccounts = await contract.accountFactory.getAssociatedAccounts(signer);\n   *\n   * // Get all signers who have been given authority on a account.\n   * const associatedSigners = await contract.accountFactory.getAssociatedSigners(accountAddress);\n   *\n   * // Check whether a account has already been created for a given admin.\n   * const isAccountDeployed = await contract.accountFactory.isAccountDeployed(admin, extraData);\n   * ```\n   */\n  get accountFactory() {\n    return assertEnabled(this.detectAccountFactory(), FEATURE_ACCOUNT_FACTORY);\n  }\n\n  // TODO documentation\n  get account() {\n    return assertEnabled(this.detectAccount(), FEATURE_ACCOUNT);\n  }\n  get extensions() {\n    return assertEnabled(this.detectBaseRouter(), FEATURE_DYNAMIC_CONTRACT);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, abi, storage) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.publishedMetadata = new ContractPublishedMetadata(this.contractWrapper, this.storage);\n    this.metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Prepare a transaction for sending\n   */\n  prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * Call any function on this contract\n   * @example\n   * ```javascript\n   * // read functions will return the data from the contract\n   * const myValue = await contract.call(\"myReadFunction\");\n   * console.log(myValue);\n   *\n   * // write functions will return the transaction receipt\n   * const tx = await contract.call(\"myWriteFunction\", [arg1, arg2]);\n   * const receipt = tx.receipt;\n   *\n   * // Optionally override transaction options\n   * await contract.call(\"myWriteFunction\", [arg1, arg2], {\n   *  gasLimit: 1000000, // override default gas limit\n   *  value: ethers.utils.parseEther(\"0.1\"), // send 0.1 ether with the contract call\n   * };\n   * ```\n   * @param functionName - the name of the function to call\n   * @param args - the arguments of the function\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectRoyalties() {\n    if (detectContractFeature(this.contractWrapper, \"Royalty\")) {\n      // ContractMetadata is stateless, it's fine to create a new one here\n      // This also makes it not order dependent in the feature detection process\n      const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n      return new ContractRoyalty(this.contractWrapper, metadata);\n    }\n    return undefined;\n  }\n  detectRoles() {\n    if (detectContractFeature(this.contractWrapper, \"Permissions\")) {\n      return new ContractRoles(this.contractWrapper, ALL_ROLES);\n    }\n    return undefined;\n  }\n  detectPrimarySales() {\n    if (detectContractFeature(this.contractWrapper, \"PrimarySale\")) {\n      return new ContractPrimarySale(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectPlatformFees() {\n    if (detectContractFeature(this.contractWrapper, \"PlatformFee\")) {\n      return new ContractPlatformFee(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return new Erc20(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc721() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721\")) {\n      return new Erc721(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc1155() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155\")) {\n      return new Erc1155(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectOwnable() {\n    if (detectContractFeature(this.contractWrapper, \"Ownable\")) {\n      return new ContractOwner(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectApp() {\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return new ContractAppURI(this.contractWrapper, metadata, this.storage);\n    } else if (detectContractFeature(this.contractWrapper, \"ContractMetadata\")) {\n      return new ContractAppURI(this.contractWrapper, metadata, this.storage);\n    }\n    return undefined;\n  }\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectBaseRouter() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_DYNAMIC_CONTRACT.name)) {\n      return new ExtensionManager(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop20() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC20\")) {\n      return new Airdrop20(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop721() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC721\")) {\n      return new Airdrop721(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop1155() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC1155\")) {\n      return new Airdrop1155(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  // ========== Account features ==========\n\n  detectAccountFactory() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT_FACTORY.name)) {\n      return new AccountFactory(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAccount() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT.name)) {\n      return new Account(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\nexport { SmartContract };\n"],
  "mappings": "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",
  "names": []
}
