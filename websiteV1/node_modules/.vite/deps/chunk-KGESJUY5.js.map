{
  "version": 3,
  "sources": ["../../@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json", "../../@thirdweb-dev/sdk/dist/sdk-4ef5aea9.browser.esm.js", "../../@thirdweb-dev/generated-abis/dist/thirdweb-dev-generated-abis.esm.js", "../../@thirdweb-dev/contracts-js/dist/abis/TWFactory.json", "../../@thirdweb-dev/sdk/dist/token-a47df0f1.browser.esm.js", "../../@thirdweb-dev/sdk/dist/watchTransactions-e6ad162b.browser.esm.js", "../../@thirdweb-dev/sdk/dist/thirdweb-dev-sdk.browser.esm.js"],
  "sourcesContent": ["[\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_pluginMap\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"internalType\": \"address[]\",\r\n        \"name\": \"_trustedForwarders\",\r\n        \"type\": \"address[]\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"constructor\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes4\",\r\n        \"name\": \"functionSelector\",\r\n        \"type\": \"bytes4\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"pluginAddress\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"PluginAdded\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes4\",\r\n        \"name\": \"functionSelector\",\r\n        \"type\": \"bytes4\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"pluginAddress\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"PluginRemoved\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes4\",\r\n        \"name\": \"functionSelector\",\r\n        \"type\": \"bytes4\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"functionSignature\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"pluginAddress\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"PluginSet\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes4\",\r\n        \"name\": \"functionSelector\",\r\n        \"type\": \"bytes4\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"oldPluginAddress\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"newPluginAddress\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"PluginUpdated\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"previousAdminRole\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"newAdminRole\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"name\": \"RoleAdminChanged\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"sender\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"RoleGranted\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"sender\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"RoleRevoked\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"stateMutability\": \"payable\",\r\n    \"type\": \"fallback\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"DEFAULT_ADMIN_ROLE\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes4\",\r\n        \"name\": \"_selector\",\r\n        \"type\": \"bytes4\"\r\n      }\r\n    ],\r\n    \"name\": \"_getPluginForFunction\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"components\": [\r\n          {\r\n            \"internalType\": \"bytes4\",\r\n            \"name\": \"functionSelector\",\r\n            \"type\": \"bytes4\"\r\n          },\r\n          {\r\n            \"internalType\": \"string\",\r\n            \"name\": \"functionSignature\",\r\n            \"type\": \"string\"\r\n          },\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"pluginAddress\",\r\n            \"type\": \"address\"\r\n          }\r\n        ],\r\n        \"internalType\": \"struct IPluginMap.Plugin\",\r\n        \"name\": \"_plugin\",\r\n        \"type\": \"tuple\"\r\n      }\r\n    ],\r\n    \"name\": \"addPlugin\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_pluginAddress\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"getAllFunctionsOfPlugin\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bytes4[]\",\r\n        \"name\": \"registered\",\r\n        \"type\": \"bytes4[]\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"getAllPlugins\",\r\n    \"outputs\": [\r\n      {\r\n        \"components\": [\r\n          {\r\n            \"internalType\": \"bytes4\",\r\n            \"name\": \"functionSelector\",\r\n            \"type\": \"bytes4\"\r\n          },\r\n          {\r\n            \"internalType\": \"string\",\r\n            \"name\": \"functionSignature\",\r\n            \"type\": \"string\"\r\n          },\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"pluginAddress\",\r\n            \"type\": \"address\"\r\n          }\r\n        ],\r\n        \"internalType\": \"struct IPluginMap.Plugin[]\",\r\n        \"name\": \"registered\",\r\n        \"type\": \"tuple[]\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes4\",\r\n        \"name\": \"_selector\",\r\n        \"type\": \"bytes4\"\r\n      }\r\n    ],\r\n    \"name\": \"getPluginForFunction\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"name\": \"getRoleAdmin\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"index\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"getRoleMember\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"member\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"name\": \"getRoleMemberCount\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"count\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"grantRole\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"hasRole\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"hasRoleWithSwitch\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"forwarder\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"isTrustedForwarder\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes[]\",\r\n        \"name\": \"data\",\r\n        \"type\": \"bytes[]\"\r\n      }\r\n    ],\r\n    \"name\": \"multicall\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bytes[]\",\r\n        \"name\": \"results\",\r\n        \"type\": \"bytes[]\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"pluginMap\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes4\",\r\n        \"name\": \"_selector\",\r\n        \"type\": \"bytes4\"\r\n      }\r\n    ],\r\n    \"name\": \"removePlugin\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"renounceRole\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"revokeRole\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes4\",\r\n        \"name\": \"interfaceId\",\r\n        \"type\": \"bytes4\"\r\n      }\r\n    ],\r\n    \"name\": \"supportsInterface\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"components\": [\r\n          {\r\n            \"internalType\": \"bytes4\",\r\n            \"name\": \"functionSelector\",\r\n            \"type\": \"bytes4\"\r\n          },\r\n          {\r\n            \"internalType\": \"string\",\r\n            \"name\": \"functionSignature\",\r\n            \"type\": \"string\"\r\n          },\r\n          {\r\n            \"internalType\": \"address\",\r\n            \"name\": \"pluginAddress\",\r\n            \"type\": \"address\"\r\n          }\r\n        ],\r\n        \"internalType\": \"struct IPluginMap.Plugin\",\r\n        \"name\": \"_plugin\",\r\n        \"type\": \"tuple\"\r\n      }\r\n    ],\r\n    \"name\": \"updatePlugin\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"stateMutability\": \"payable\",\r\n    \"type\": \"receive\"\r\n  }\r\n]", "import { a_ as getChainProvider, aI as fetchPublishedContractFromPolygon, aH as THIRDWEB_DEPLOYER$1, aJ as fetchAndCacheDeployMetadata, ax as getCreate2FactoryAddress, aF as encodeConstructorParamsForImplementation, aE as computeDeploymentInfo, av as isContractDeployed, a6 as resolveImplementation, K as fetchContractMetadataFromAddress, ao as fetchSourceFilesFromMetadata, a1 as extractConstructorParamsFromAbi, a4 as resolveContractUriFromAddress, aQ as getContractPublisherAddress, aa as fetchExtendedReleaseMetadata, cp as RPCConnectionHandler, aL as resolveAddress, aM as signTypedDataInternal, aS as ChainId, cq as ContractWrapper, aV as NATIVE_TOKEN_ADDRESS, cr as extractFeatures, ab as detectFeatures, aR as getMultichainRegistryAddress, bj as AbiSchema, ar as COMMON_FACTORY, aw as isEIP155Enforced, cs as CUSTOM_GAS_FOR_CHAIN, aG as getCreate2FactoryDeploymentInfo, aO as CONTRACT_ADDRESSES, ct as AddressZero, P as PackInitializer, b as MarketplaceV3Initializer, M as MarketplaceInitializer, f as SplitInitializer, V as VoteInitializer, g as TokenInitializer, T as TokenDropInitializer, a as EditionInitializer, E as EditionDropInitializer, c as MultiwrapInitializer, e as SignatureDropInitializer, N as NFTCollectionInitializer, d as NFTDropInitializer, aC as computeForwarderAddress, h as PREBUILT_CONTRACTS_MAP, k as getContractName, bF as CommonPlatformFeeSchema, bE as CommonPrimarySaleSchema, bG as CommonTrustedForwarderSchema, bB as CommonContractSchema, bD as CommonRoyaltySchema, bH as CommonSymbolSchema, aA as computeDeploymentAddress, az as getInitBytecodeWithSalt, aT as setSupportedChains, j as getContractTypeForRemoteName, b3 as getSignerAndProvider, ak as getCompositeABI, b1 as isChainConfig, aP as getContractAddressByChainId, cu as getProcessEnv, bR as DropErc721ContractSchema, i as PREBUILT_CONTRACTS_APPURI_MAP, aZ as EventType } from './index-e7118e8b.browser.esm.js';\r\nimport { isBrowser, ThirdwebStorage } from '@thirdweb-dev/storage';\r\nimport { C as ContractPublisher } from './contract-publisher-ba394bd6.browser.esm.js';\r\nimport TWRegistryABI from '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\r\nimport TWRegistryRouterABI from '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\r\nimport { utils, Contract, Wallet, constants, BigNumber, ContractFactory as ContractFactory$1 } from 'ethers';\r\nimport { g as getDefaultGasOverrides, d as buildTransactionFunction, T as Transaction, f as buildDeployTransactionFunction, D as DeployTransaction } from './transactions-de84ba20.browser.esm.js';\r\nimport { i as isNativeToken, a as fetchCurrencyValue, C as ContractEncoder } from './fetchCurrencyValue-27d660ae.browser.esm.js';\r\nimport EventEmitter from 'eventemitter3';\r\nimport invariant from 'tiny-invariant';\r\nimport { n as normalizePriceValue } from './normalizePriceValue-ee13e65c.browser.esm.js';\r\nimport { defaultChains } from '@thirdweb-dev/chains';\r\nimport { GENERATED_ABI } from '@thirdweb-dev/generated-abis';\r\nimport { g as getDeploymentInfo, c as createTransactionBatches, a as deployWithThrowawayDeployer, d as deployContractDeterministic } from './deployContractDeterministic-df492605.browser.esm.js';\r\nimport TWFactoryAbi from '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\r\n\r\nlet alreadyChecked = false;\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction checkClientIdOrSecretKey(message, clientId, secretKey) {\r\n  if (alreadyChecked) {\r\n    return;\r\n  }\r\n  alreadyChecked = true;\r\n  if (clientId || secretKey) {\r\n    return;\r\n  }\r\n  console.warn(message);\r\n}\r\n\r\n/**\r\n *\r\n * @internal\r\n * @param contractName - The name of the contract to predict the address for\r\n * @param chainId - The chain id to use\r\n * @param storage - The storage to use\r\n */\r\nasync function getEncodedConstructorParamsForThirdwebContract(contractName, chainId, storage) {\r\n  let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\r\n  let clientId = arguments.length > 4 ? arguments[4] : undefined;\r\n  let secretKey = arguments.length > 5 ? arguments[5] : undefined;\r\n  let constructorParamMap = arguments.length > 6 ? arguments[6] : undefined;\r\n  const provider = getChainProvider(chainId, {\r\n    clientId,\r\n    secretKey\r\n  });\r\n  const publishedContract = await fetchPublishedContractFromPolygon(THIRDWEB_DEPLOYER$1, contractName, contractVersion, storage, clientId, secretKey);\r\n  const publishUri = publishedContract.metadataUri;\r\n  const metadata = await fetchAndCacheDeployMetadata(publishUri, storage);\r\n  const create2Factory = await getCreate2FactoryAddress(provider);\r\n  invariant(create2Factory, \"Thirdweb stack not found\");\r\n  const {\r\n    extendedMetadata\r\n  } = await fetchAndCacheDeployMetadata(publishUri, storage);\r\n  let encodedArgs;\r\n\r\n  // if pluginMetadata is not empty, then it's a plugin-pattern router contract\r\n  if (extendedMetadata?.routerType === \"plugin\" || extendedMetadata?.routerType === \"dynamic\") {\r\n    const deploymentInfo = await getDeploymentInfo(publishUri, storage, provider, create2Factory, clientId, secretKey);\r\n    encodedArgs = deploymentInfo.find(contract => contract.type === \"implementation\")?.encodedArgs;\r\n  } else {\r\n    encodedArgs = await encodeConstructorParamsForImplementation(metadata.compilerMetadata, provider, storage, create2Factory, constructorParamMap, clientId, secretKey);\r\n  }\r\n  return encodedArgs;\r\n}\r\n\r\n/**\r\n * @deploy\r\n * @public\r\n * @param contractName - The name of the contract to predict the address for\r\n * @param chainId - The chain id to use\r\n * @param storage - The storage to use\r\n */\r\nasync function predictThirdwebContractAddress(contractName, chainId, storage) {\r\n  let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\r\n  let clientId = arguments.length > 4 ? arguments[4] : undefined;\r\n  let secretKey = arguments.length > 5 ? arguments[5] : undefined;\r\n  const provider = getChainProvider(chainId, {\r\n    clientId,\r\n    secretKey\r\n  });\r\n  const publishedContract = await fetchPublishedContractFromPolygon(THIRDWEB_DEPLOYER$1, contractName, contractVersion, storage, clientId, secretKey);\r\n  const publishUri = publishedContract.metadataUri;\r\n  const create2Factory = await getCreate2FactoryAddress(provider);\r\n  invariant(create2Factory, \"Thirdweb stack not found\");\r\n  const {\r\n    extendedMetadata\r\n  } = await fetchAndCacheDeployMetadata(publishUri, storage);\r\n  if (extendedMetadata?.routerType === \"plugin\" || extendedMetadata?.routerType === \"dynamic\") {\r\n    const deploymentInfo = await getDeploymentInfo(publishUri, storage, provider, create2Factory, clientId, secretKey);\r\n    const implementation = deploymentInfo.find(contract => contract.type === \"implementation\")?.transaction.predictedAddress;\r\n    invariant(implementation, \"Error computing address for plugin router\");\r\n    return implementation;\r\n  }\r\n  const implementation = await computeDeploymentInfo(\"implementation\", provider, storage, create2Factory, {\r\n    contractName: contractName\r\n  }, clientId, secretKey);\r\n  return implementation.transaction.predictedAddress;\r\n}\r\n\r\n/**\r\n * @deploy\r\n * @public\r\n * @param contractName - The name of the contract to predict the address for\r\n * @param chainId - The chain id to use\r\n * @param storage - The storage to use\r\n * @param clientId - The client id to use\r\n */\r\nasync function getThirdwebContractAddress(contractName, chainId, storage) {\r\n  let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\r\n  let clientId = arguments.length > 4 ? arguments[4] : undefined;\r\n  let secretKey = arguments.length > 5 ? arguments[5] : undefined;\r\n  const provider = getChainProvider(chainId, {\r\n    clientId: clientId,\r\n    secretKey: secretKey\r\n  });\r\n  const contractAddress = await predictThirdwebContractAddress(contractName, chainId, storage, contractVersion, clientId, secretKey);\r\n  const isDeployed = await isContractDeployed(contractAddress, provider);\r\n  invariant(isDeployed, \"Contract not deployed yet\");\r\n  return contractAddress;\r\n}\r\n\r\nconst VerificationStatus = {\r\n  FAILED: \"Fail - Unable to verify\",\r\n  SUCCESS: \"Pass - Verified\",\r\n  PENDING: \"Pending in queue\",\r\n  ALREADY_VERIFIED: \"Contract source code already verified\",\r\n  AUTOMATICALLY_VERIFIED: \"Already Verified\"\r\n};\r\n\r\nconst RequestStatus = {\r\n  OK: \"1\",\r\n  NOTOK: \"0\"\r\n};\r\n\r\n//\r\n// ==================================\r\n// ======== Core Functions ==========\r\n// ==================================\r\n//\r\n\r\n/**\r\n * @public\r\n *\r\n * Verifies a Thirdweb Prebuilt Contract, e.g. Marketplace, DropERC721, etc\r\n *\r\n * @example\r\n * ```javascript\r\n *\r\n * const explorerAPIUrl = \"\" // e.g. https://api.etherscan.io/api\r\n * const explorerAPIKey = \"\" // Generate API key on the explorer\r\n * const chainId = 1 // Change according to the network\r\n *\r\n * await sdk.verifier.verifyThirdwebPrebuiltImplementation(\r\n *   \"DropERC721\",\r\n *   chainId,\r\n *   explorerAPIUrl,\r\n *   explorerAPIKey,\r\n *   storage // this could be used from the SDK instance, e.g. sdk.storage\r\n * );\r\n * ```\r\n * @param contractName - Name of the contract to verify\r\n * @param chainId - Chain ID of the network\r\n * @param explorerAPIUrl - Explorer API URL\r\n * @param explorerAPIKey - Explorer API Key\r\n * @param storage - Storage instance\r\n */\r\nasync function verifyThirdwebPrebuiltImplementation(contractName, chainId, explorerAPIUrl, explorerAPIKey, storage) {\r\n  let contractVersion = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"latest\";\r\n  let clientId = arguments.length > 6 ? arguments[6] : undefined;\r\n  let secretKey = arguments.length > 7 ? arguments[7] : undefined;\r\n  let constructorArgs = arguments.length > 8 ? arguments[8] : undefined;\r\n  const contractAddress = await getThirdwebContractAddress(contractName, chainId, storage, contractVersion, clientId, secretKey);\r\n  const encodedArgs = await getEncodedConstructorParamsForThirdwebContract(contractName, chainId, storage, contractVersion, clientId, secretKey, constructorArgs);\r\n  console.info(`Verifying ${contractName} at address ${contractAddress}`);\r\n  const guid = await verify(contractAddress, chainId, explorerAPIUrl, explorerAPIKey, storage, encodedArgs?.toString().replace(\"0x\", \"\"));\r\n  return guid;\r\n}\r\n\r\n/**\r\n * @public\r\n *\r\n * Verifies any contract\r\n *\r\n * @example\r\n * ```javascript\r\n *\r\n * const contractAddress = \"\"\r\n * const explorerAPIUrl = \"\" // e.g. https://api.etherscan.io/api\r\n * const explorerAPIKey = \"\" // Generate API key on the explorer\r\n * const chainId = 1 // Change according to the network\r\n *\r\n * await sdk.verifier.verify(\r\n *   contractAddress,\r\n *   chainId,\r\n *   explorerAPIUrl,\r\n *   explorerAPIKey,\r\n *   storage // this could be used from the SDK instance, e.g. sdk.storage\r\n * );\r\n * ```\r\n * @param contractAddress - Address of the contract to verify\r\n * @param chainId - Chain ID of the network\r\n * @param explorerAPIUrl - Explorer API URL\r\n * @param explorerAPIKey - Explorer API Key\r\n * @param storage - Storage instance\r\n */\r\nasync function verify(contractAddress, chainId, explorerAPIUrl, explorerAPIKey, storage, encodedConstructorArgs) {\r\n  try {\r\n    const provider = getChainProvider(chainId, {});\r\n    contractAddress = (await resolveImplementation(contractAddress, provider)).address;\r\n    const compilerMetadata = await fetchContractMetadataFromAddress(contractAddress, provider, storage);\r\n    const compilerVersion = compilerMetadata.metadata.compiler.version;\r\n    const sources = await fetchSourceFilesFromMetadata(compilerMetadata, storage);\r\n    const sourcesWithUrl = compilerMetadata.metadata.sources;\r\n    const sourcesWithContents = {};\r\n    for (const path of Object.keys(sourcesWithUrl)) {\r\n      const sourceCode = sources.find(source => path === source.filename);\r\n      if (!sourceCode) {\r\n        throw new Error(`Could not find source file for ${path}`);\r\n      }\r\n      sourcesWithContents[path] = {\r\n        content: sourceCode.source\r\n      };\r\n    }\r\n    const compilerInput = {\r\n      language: \"Solidity\",\r\n      sources: sourcesWithContents,\r\n      settings: {\r\n        optimizer: compilerMetadata.metadata.settings.optimizer,\r\n        evmVersion: compilerMetadata.metadata.settings.evmVersion,\r\n        remappings: compilerMetadata.metadata.settings.remappings,\r\n        outputSelection: {\r\n          \"*\": {\r\n            \"*\": [\"abi\", \"evm.bytecode\", \"evm.deployedBytecode\", \"evm.methodIdentifiers\", \"metadata\"],\r\n            \"\": [\"ast\"]\r\n          }\r\n        }\r\n      }\r\n    };\r\n    const compilationTarget = compilerMetadata.metadata.settings.compilationTarget;\r\n    const targets = Object.keys(compilationTarget);\r\n    const contractPath = targets[0];\r\n    const encodedArgs = encodedConstructorArgs ? encodedConstructorArgs : await fetchConstructorParams(explorerAPIUrl, explorerAPIKey, contractAddress, compilerMetadata.abi, provider, storage);\r\n    const requestBody = {\r\n      apikey: explorerAPIKey,\r\n      module: \"contract\",\r\n      action: \"verifysourcecode\",\r\n      contractaddress: contractAddress,\r\n      sourceCode: JSON.stringify(compilerInput),\r\n      codeformat: \"solidity-standard-json-input\",\r\n      contractname: `${contractPath}:${compilerMetadata.name}`,\r\n      compilerversion: `v${compilerVersion}`,\r\n      constructorArguements: encodedArgs\r\n    };\r\n    const parameters = new URLSearchParams({\r\n      ...requestBody\r\n    });\r\n    const result = await fetch(explorerAPIUrl, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n      },\r\n      body: parameters.toString()\r\n    });\r\n    const data = await result.json();\r\n    if (data.status === RequestStatus.OK) {\r\n      return data.result;\r\n    } else {\r\n      throw new Error(`${data.result}`);\r\n    }\r\n  } catch (e) {\r\n    throw new Error(e.toString());\r\n  }\r\n}\r\n\r\n//\r\n// ==================================\r\n// ======== Helper Functions ========\r\n// ==================================\r\n//\r\n\r\n/**\r\n * @internal\r\n *\r\n * Check status of the contract submitted for verification to the explorer\r\n * @param explorerAPIUrl - Explorer API URL\r\n * @param explorerAPIKey - Explorer API Key\r\n * @param guid - GUID of the contract verification\r\n */\r\nasync function checkVerificationStatus(explorerAPIUrl, explorerAPIKey, guid) {\r\n  const endpoint = `${explorerAPIUrl}?module=contract&action=checkverifystatus&guid=${guid}&apikey=${explorerAPIKey}\"`;\r\n  return new Promise((resolve, reject) => {\r\n    const intervalId = setInterval(async () => {\r\n      try {\r\n        const result = await fetch(endpoint, {\r\n          method: \"GET\"\r\n        });\r\n        const data = await result.json();\r\n        if (data?.result !== VerificationStatus.PENDING) {\r\n          clearInterval(intervalId);\r\n          resolve(data);\r\n        }\r\n      } catch (e) {\r\n        clearInterval(intervalId);\r\n        reject(e);\r\n      }\r\n    }, 3000);\r\n  });\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Check if the contract is already verified on etherscan\r\n * @param contractAddress - Address of the contract to verify\r\n * @param chainId - Chain ID of the network\r\n * @param explorerAPIUrl - Explorer API URL\r\n * @param explorerAPIKey - Explorer API Key\r\n *\r\n * @param clientId - Client ID: Get from https://thirdweb.com/create-api-key\r\n */\r\nasync function isVerifiedOnEtherscan(contractAddress, chainId, explorerAPIUrl, explorerAPIKey, clientId) {\r\n  const provider = getChainProvider(chainId, {\r\n    clientId\r\n  });\r\n  invariant(await isContractDeployed(contractAddress, provider), \"Contract not deployed yet.\");\r\n  const endpoint = `${explorerAPIUrl}?module=contract&action=getsourcecode&address=${contractAddress}&apikey=${explorerAPIKey}\"`;\r\n  try {\r\n    const result = await fetch(endpoint, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\"\r\n      }\r\n    });\r\n    const data = await result.json();\r\n    const etherscanResult = data.result[0];\r\n    if (etherscanResult.ABI === \"Contract source code not verified\") {\r\n      return false;\r\n    }\r\n    return true;\r\n  } catch (e) {\r\n    throw new Error(`Error checking verification for contract ${contractAddress}: ${e}`);\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Fetch the deploy transaction from the given contract address and extract the encoded constructor parameters\r\n * @param explorerAPIUrl - Explorer API URL\r\n * @param explorerAPIKey - Explorer API Key\r\n * @param contractAddress - Address of the contract to verify\r\n * @param abi - ABI of the contract to verify\r\n * @param provider - Provider instance\r\n * @param storage - Storage instance\r\n */\r\nasync function fetchConstructorParams(explorerAPIUrl, explorerAPIKey, contractAddress, abi, provider, storage) {\r\n  const constructorParamTypes = extractConstructorParamsFromAbi(abi);\r\n  if (constructorParamTypes.length === 0) {\r\n    return \"\";\r\n  }\r\n  const result = await fetch(`${explorerAPIUrl}?module=contract&action=getcontractcreation&contractaddresses=${contractAddress}&apikey=${explorerAPIKey}`);\r\n  const data = await result.json();\r\n  if (data && data.status === RequestStatus.OK && data.result[0] !== undefined) {\r\n    const contract = new utils.Interface(abi);\r\n    const txHash = data.result[0].txHash;\r\n    let constructorArgs = \"\";\r\n    if (contract.deploy.inputs.length === 0) {\r\n      return \"\";\r\n    }\r\n    const tx = await provider.getTransaction(txHash);\r\n    const txDeployBytecode = tx.data;\r\n\r\n    // first: attempt to get it from Publish\r\n    try {\r\n      const bytecode = await fetchDeployBytecodeFromPublishedContractMetadata(contractAddress, provider, storage);\r\n      if (bytecode) {\r\n        // contract was realeased, use the deployable bytecode method (proper solution)\r\n        const bytecodeHex = bytecode.startsWith(\"0x\") ? bytecode : `0x${bytecode}`;\r\n        let create2FactoryAddress;\r\n        try {\r\n          create2FactoryAddress = await getCreate2FactoryAddress(provider);\r\n        } catch (error) {}\r\n\r\n        // if deterministic deploy through create2factory, remove salt length too\r\n        const create2SaltLength = tx.to === create2FactoryAddress ? 64 : 0;\r\n        constructorArgs = txDeployBytecode.substring(bytecodeHex.length + create2SaltLength);\r\n      }\r\n    } catch (e) {\r\n      // contracts not published through thirdweb\r\n    }\r\n\r\n    // second: attempt to decode it from solc metadata bytecode\r\n    if (!constructorArgs) {\r\n      // couldn't find bytecode from Publish, using regex to locate consturctor args thruogh solc metadata\r\n      // https://docs.soliditylang.org/en/v0.8.17/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode\r\n      // {6} = solc version\r\n      // {4} = 0033, but noticed some contracts have values other than 00 33. (uniswap)\r\n      const matches = [...txDeployBytecode.matchAll(/(64736f6c6343[\\w]{6}[\\w]{4})(?!.*\\1)(.*)$/g)];\r\n\r\n      // regex finds the LAST occurence of solc metadata bytes, result always in same position\r\n      if (matches.length > 0) {\r\n        // TODO: we currently don't handle error string embedded in the bytecode, need to strip ascii (upgradeableProxy) in patterns[2]\r\n        // https://etherscan.io/address/0xee6a57ec80ea46401049e92587e52f5ec1c24785#code\r\n        constructorArgs = matches[0][2];\r\n      }\r\n    }\r\n\r\n    // third: attempt to guess it from the ABI inputs\r\n    if (!constructorArgs) {\r\n      // TODO: need to guess array / struct properly\r\n      const constructorParamByteLength = constructorParamTypes.length * 64;\r\n      constructorArgs = txDeployBytecode.substring(txDeployBytecode.length - constructorParamByteLength);\r\n    }\r\n    try {\r\n      // sanity check that the constructor params are valid\r\n      // TODO: should we sanity check after each attempt?\r\n      utils.defaultAbiCoder.decode(contract.deploy.inputs, `0x${constructorArgs}`);\r\n    } catch (e) {\r\n      throw new Error(\"Verifying this contract requires it to be published. Run `npx thirdweb publish` to publish this contract, then try again.\");\r\n    }\r\n    return constructorArgs;\r\n  } else {\r\n    // Could not retrieve constructor parameters, using empty parameters as fallback\r\n    return \"\";\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Fetches the Publish metadata on the ContractPublisher registry (on polygon) for the given contract address (on any chain)\r\n * @param contractAddress - Address of the contract to verify\r\n * @param provider - Provider instance\r\n * @param storage - Storage instance\r\n * @returns\r\n */\r\nasync function fetchDeployBytecodeFromPublishedContractMetadata(contractAddress, provider, storage) {\r\n  const compilerMetaUri = await resolveContractUriFromAddress(contractAddress, provider);\r\n  if (compilerMetaUri) {\r\n    const ContractPublisherAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json')).default;\r\n    const contract = new Contract(getContractPublisherAddress(), ContractPublisherAbi, getChainProvider(\"polygon\", {}));\r\n    const publishedMetadataUri = await contract.getPublishedUriFromCompilerUri(compilerMetaUri);\r\n    if (publishedMetadataUri.length === 0) {\r\n      throw Error(`Could not resolve published metadata URI from ${compilerMetaUri}`);\r\n    }\r\n    const pubmeta = await Promise.all(publishedMetadataUri.filter(uri => uri.length > 0).map(uri => fetchExtendedReleaseMetadata(uri, storage)));\r\n    return pubmeta.length > 0 ? await (await storage.download(pubmeta[0].bytecodeUri)).text() : undefined;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Handles verification of new contracts on any EVM\r\n * @public\r\n */\r\nclass ContractVerifier extends RPCConnectionHandler {\r\n  constructor(network, options, storage) {\r\n    super(network, options);\r\n    this.storage = storage;\r\n  }\r\n  updateSignerOrProvider(network) {\r\n    super.updateSignerOrProvider(network);\r\n  }\r\n\r\n  /**\r\n   * Verifies a Thirdweb contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   *\r\n   * // Note: If verifying on a network different from the SDK instance's network,\r\n   * //       update the verifier's chain/network as below:\r\n   * //\r\n   * //       sdk.verifier.updateSignerOrProvider(chainId);\r\n   *\r\n   * const explorerAPIUrl = \"\" // e.g. https://api.etherscan.io/api\r\n   * const explorerAPIKey = \"\" // Generate API key on the explorer\r\n   *\r\n   * await sdk.verifier.verifyThirdwebContract(\r\n   *   \"DropERC721\",\r\n   *   explorerAPIUrl,\r\n   *   explorerAPIKey,\r\n   * );\r\n   * ```\r\n   * @param contractName - Name of the contract to verify\r\n   * @param explorerAPIUrl - Explorer API URL\r\n   * @param explorerAPIKey - Explorer API key\r\n   */\r\n  async verifyThirdwebContract(contractName, explorerAPIUrl, explorerAPIKey) {\r\n    let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\r\n    let constructorArgs = arguments.length > 4 ? arguments[4] : undefined;\r\n    const chainId = (await this.getProvider().getNetwork()).chainId;\r\n    const guid = await verifyThirdwebPrebuiltImplementation(contractName, chainId, explorerAPIUrl, explorerAPIKey, this.storage, contractVersion, this.options.clientId, this.options.secretKey, constructorArgs);\r\n    console.info(\"Checking verification status...\");\r\n    const verificationStatus = await checkVerificationStatus(explorerAPIUrl, explorerAPIKey, guid);\r\n    console.info(verificationStatus);\r\n  }\r\n\r\n  /**\r\n   * Verifies any contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   *\r\n   * // Note: If verifying on a network different from the SDK instance's network,\r\n   * //       update the verifier's chain/network as below:\r\n   * //\r\n   * //       sdk.verifier.updateSignerOrProvider(chainId);\r\n   *\r\n   * const contractAddress = \"\"\r\n   * const explorerAPIUrl = \"\" // e.g. https://api.etherscan.io/api\r\n   * const explorerAPIKey = \"\" // Generate API key on the explorer\r\n   *\r\n   * await sdk.verifier.verifyContract(\r\n   *   contractAddress,\r\n   *   explorerAPIUrl,\r\n   *   explorerAPIKey,\r\n   * );\r\n   * ```\r\n   * @param contractAddress - Address of the contract to verify\r\n   * @param explorerAPIUrl - Explorer API URL\r\n   * @param explorerAPIKey - Explorer API key\r\n   */\r\n  async verifyContract(contractAddress, explorerAPIUrl, explorerAPIKey, constructorArgs) {\r\n    const chainId = (await this.getProvider().getNetwork()).chainId;\r\n    let encodedArgs;\r\n    if (constructorArgs) {\r\n      const paramTypes = Object.values(constructorArgs).map(arg => {\r\n        invariant(arg.type, \"Param type is required\");\r\n        return arg.type;\r\n      });\r\n      const paramValues = Object.values(constructorArgs).map(arg => {\r\n        return arg.value;\r\n      });\r\n      encodedArgs = utils.defaultAbiCoder.encode(paramTypes, paramValues);\r\n    }\r\n    const guid = await verify(contractAddress, chainId, explorerAPIUrl, explorerAPIKey, this.storage, encodedArgs);\r\n    console.info(\"Checking verification status...\");\r\n    const verificationStatus = await checkVerificationStatus(explorerAPIUrl, explorerAPIKey, guid);\r\n    console.info(verificationStatus);\r\n  }\r\n}\r\n\r\n/**\r\n * publicly available wallet for local nodes\r\n */\r\nconst LOCAL_NODE_PKEY = \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\";\r\n\r\n/**\r\n *\r\n * {@link UserWallet} events that you can subscribe to using `sdk.wallet.events`.\r\n *\r\n * @public\r\n */\r\n\r\n/**\r\n * Connect and Interact with a user wallet\r\n * @example\r\n * ```javascript\r\n * const balance = await sdk.wallet.balance();\r\n * ```\r\n * @public\r\n */\r\nclass UserWallet {\r\n  events = new EventEmitter();\r\n  constructor(network, options, storage) {\r\n    this.connection = new RPCConnectionHandler(network, options);\r\n    this.options = options;\r\n    this.events = new EventEmitter();\r\n    this.storage = storage;\r\n  }\r\n\r\n  // TODO disconnect()\r\n  // TODO switchChain()\r\n  // TODO tokens()\r\n  // TODO NFTs()\r\n\r\n  // TODO this will become the source of truth of the signer and have every contract read from it\r\n  // TODO separate signer and provider logics\r\n  connect(network) {\r\n    this.connection.updateSignerOrProvider(network);\r\n    this.events.emit(\"signerChanged\", this.connection.getSigner());\r\n  }\r\n\r\n  /**\r\n   * Transfer native or ERC20 tokens from this wallet to another wallet\r\n   * @example\r\n   * ```javascript\r\n   *  // transfer 0.8 ETH\r\n   * await sdk.wallet.transfer(\"0x...\", 0.8);\r\n   *  // transfer 0.8 tokens of `tokenContractAddress`\r\n   * await sdk.wallet.transfer(\"0x...\", 0.8, tokenContractAddress);\r\n   * ```\r\n   * @param to - the account to send funds to\r\n   * @param amount - the amount in tokens\r\n   * @param currencyAddress - Optional - ERC20 contract address of the token to transfer\r\n   */\r\n  async transfer(to, amount) {\r\n    let currencyAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NATIVE_TOKEN_ADDRESS;\r\n    const [resolvedTo, resolvedCurrency, amountInWei] = await Promise.all([resolveAddress(to), resolveAddress(currencyAddress), normalizePriceValue(this.connection.getProvider(), amount, currencyAddress)]);\r\n    const signer = this.requireWallet();\r\n    if (isNativeToken(resolvedCurrency)) {\r\n      // native token transfer\r\n      const from = await signer.getAddress();\r\n      const gasOverrides = isBrowser() ? {} : await getDefaultGasOverrides(this.connection.getProvider());\r\n      const tx = await signer.sendTransaction({\r\n        from,\r\n        to: resolvedTo,\r\n        value: amountInWei,\r\n        ...gasOverrides\r\n      });\r\n      return {\r\n        receipt: await tx.wait()\r\n      };\r\n    } else {\r\n      // ERC20 token transfer\r\n      const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\r\n      return {\r\n        receipt: await this.createErc20(resolvedCurrency, ERC20Abi).sendTransaction(\"transfer\", [resolvedTo, amountInWei])\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch the native or ERC20 token balance of this wallet\r\n   * @example\r\n   * ```javascript\r\n   * // native currency balance\r\n   * const balance = await sdk.wallet.balance();\r\n   * // ERC20 token balance\r\n   * const erc20balance = await sdk.wallet.balance(tokenContractAddress);\r\n   *\r\n   * ```\r\n   */\r\n  async balance() {\r\n    let currencyAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NATIVE_TOKEN_ADDRESS;\r\n    this.requireWallet();\r\n    const resolvedCurrency = await resolveAddress(currencyAddress);\r\n    const provider = this.connection.getProvider();\r\n    let balance;\r\n    if (isNativeToken(resolvedCurrency)) {\r\n      balance = await provider.getBalance(await this.getAddress());\r\n    } else {\r\n      const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\r\n      balance = await this.createErc20(resolvedCurrency, ERC20Abi).read(\"balanceOf\", [await this.getAddress()]);\r\n    }\r\n    return await fetchCurrencyValue(provider, resolvedCurrency, balance);\r\n  }\r\n\r\n  /**\r\n   * Get the currently connected address\r\n   * @example\r\n   * ```javascript\r\n   * const address = await sdk.wallet.getAddress();\r\n   * ```\r\n   */\r\n  async getAddress() {\r\n    return await this.requireWallet().getAddress();\r\n  }\r\n\r\n  /**\r\n   * Get the currently connected wallet's chainId\r\n   * @internal\r\n   */\r\n  async getChainId() {\r\n    return await this.requireWallet().getChainId();\r\n  }\r\n\r\n  /**\r\n   * Get the number of transactions sent from this address.\r\n   * @param blockTag - Optional - the block tag to read the nonce from\r\n   */\r\n  async getNonce(blockTag) {\r\n    const txCount = await this.connection.getProvider().getTransactionCount(await this.getAddress(), blockTag);\r\n    return txCount;\r\n  }\r\n\r\n  /**\r\n   * Checks whether there's a signer connected with the SDK\r\n   * @internal\r\n   */\r\n  isConnected() {\r\n    try {\r\n      this.requireWallet();\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sign any message with the connected wallet private key\r\n   * @param message - the message to sign\r\n   * @returns The signed message\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // This is the message to be signed\r\n   * const message = \"Sign this message...\";\r\n   *\r\n   * // Now we can sign the message with the connected wallet\r\n   * const signature = await sdk.wallet.sign(message);\r\n   * ```\r\n   */\r\n  async sign(message) {\r\n    const signer = this.requireWallet();\r\n    return await signer.signMessage(message);\r\n  }\r\n\r\n  /**\r\n   * Sign a typed data structure (EIP712) with the connected wallet private key\r\n   * @param domain - the domain as EIP712 standard\r\n   * @param types - the structure and data types as defined by the EIP712 standard\r\n   * @param message - the data to sign\r\n   * @returns The payload and its associated signature\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // This is the message to be signed\r\n   * // Now we can sign the message with the connected wallet\r\n   * const { payload, signature } = await sdk.wallet.signTypedData(\r\n   *   {\r\n          name: \"MyEIP721Domain\",\r\n          version: \"1\",\r\n          chainId: 1,\r\n          verifyingContract: \"0x...\",\r\n        },\r\n        { MyStruct: [ { name: \"to\", type: \"address\" }, { name: \"quantity\", type: \"uint256\" } ] },\r\n        { to: \"0x...\", quantity: 1 },\r\n   * );\r\n   * ```\r\n   */\r\n  async signTypedData(domain, types, message) {\r\n    return await signTypedDataInternal(this.requireWallet(), domain, types, message);\r\n  }\r\n\r\n  /**\r\n   * Recover the signing address from a signed message\r\n   * @param message - the original message that was signed\r\n   * @param signature - the signature to recover the address from\r\n   * @returns The address that signed the message\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const message = \"Sign this message...\";\r\n   * const signature = await sdk.wallet.sign(message);\r\n   *\r\n   * // Now we can recover the signing address\r\n   * const address = sdk.wallet.recoverAddress(message, signature);\r\n   * ```\r\n   */\r\n  recoverAddress(message, signature) {\r\n    const messageHash = utils.hashMessage(message);\r\n    const messageHashBytes = utils.arrayify(messageHash);\r\n    return utils.recoverAddress(messageHashBytes, signature);\r\n  }\r\n\r\n  /**\r\n   * Send a raw transaction to the blockchain from the connected wallet\r\n   * @param transactionRequest - raw transaction data to send to the blockchain\r\n   */\r\n  async sendRawTransaction(transactionRequest) {\r\n    const signer = this.requireWallet();\r\n    // set default gas values\r\n    const gasOverrides = isBrowser() ? {} : await getDefaultGasOverrides(this.connection.getProvider());\r\n    transactionRequest = {\r\n      ...gasOverrides,\r\n      ...transactionRequest\r\n    };\r\n    return signer.sendTransaction(transactionRequest);\r\n  }\r\n\r\n  /**\r\n   * Execute a raw transaction to the blockchain from the connected wallet and wait for it to be mined\r\n   * @param transactionRequest - raw transaction data to send to the blockchain\r\n   */\r\n  async executeRawTransaction(transactionRequest) {\r\n    const tx = await this.sendRawTransaction(transactionRequest);\r\n    return {\r\n      receipt: await tx.wait()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Request funds from a running local node to the currently connected wallet\r\n   * @param amount - the amount in native currency (in ETH) to request\r\n   */\r\n  async requestFunds(amount) {\r\n    const chainId = await this.getChainId();\r\n    if (chainId === ChainId.Localhost || chainId === ChainId.Hardhat) {\r\n      const localWallet = new UserWallet(new Wallet(LOCAL_NODE_PKEY, getChainProvider(chainId, this.options)), this.options, this.storage);\r\n      return localWallet.transfer(await this.getAddress(), amount);\r\n    } else {\r\n      throw new Error(`Requesting funds is not supported on chain: '${chainId}'.`);\r\n    }\r\n  }\r\n\r\n  /** ***********************\r\n   * PRIVATE FUNCTIONS\r\n   * ***********************/\r\n\r\n  requireWallet() {\r\n    const signer = this.connection.getSigner();\r\n    invariant(signer, \"This action requires a connected wallet. Please pass a valid signer to the SDK.\");\r\n    return signer;\r\n  }\r\n  createErc20(currencyAddress, ERC20Abi) {\r\n    return new ContractWrapper(this.connection.getSignerOrProvider(), currencyAddress, ERC20Abi, this.options, this.storage);\r\n  }\r\n}\r\n\r\n/**\r\n * Return all the detected features names in the abi\r\n * @param abi - parsed array of abi entries\r\n * @returns Array of all detected features names\r\n * @internal\r\n * @deprecated use getAllExtensionNames instead\r\n */\r\nfunction getAllDetectedFeatureNames(abi) {\r\n  const features = [];\r\n  extractFeatures(detectFeatures(abi), features);\r\n  return features.map(f => f.name);\r\n}\r\n\r\n/**\r\n * Return all the detected extension names in the abi\r\n * @param abi - parsed array of abi entries\r\n * @returns Array of all detected features names\r\n * @public\r\n */\r\nfunction getAllDetectedExtensionNames(abi) {\r\n  return getAllDetectedFeatureNames(abi);\r\n}\r\n\r\nfunction createStorage(storage, options) {\r\n  if (storage) {\r\n    return storage;\r\n  } else if (options?.gatewayUrls) {\r\n    return new ThirdwebStorage({\r\n      gatewayUrls: options.gatewayUrls,\r\n      clientId: options.clientId,\r\n      secretKey: options.secretKey\r\n    });\r\n  } else {\r\n    return new ThirdwebStorage({\r\n      clientId: options?.clientId,\r\n      secretKey: options?.secretKey\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nclass MultichainRegistry {\r\n  constructor(network, storage) {\r\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n    this.storage = storage;\r\n    this.registryLogic = new ContractWrapper(network, getMultichainRegistryAddress(), TWRegistryABI, options, storage);\r\n    this.registryRouter = new ContractWrapper(network, getMultichainRegistryAddress(), TWRegistryRouterABI, options, storage);\r\n  }\r\n  async updateSigner(signer) {\r\n    this.registryLogic.updateSignerOrProvider(signer);\r\n    this.registryRouter.updateSignerOrProvider(signer);\r\n  }\r\n  async getContractMetadataURI(chainId, address) {\r\n    return await this.registryLogic.read(\"getMetadataUri\", [chainId, await resolveAddress(address)]);\r\n  }\r\n  async getContractMetadata(chainId, address) {\r\n    const uri = await this.getContractMetadataURI(chainId, address);\r\n    if (!uri) {\r\n      throw new Error(`No metadata URI found for contract ${address} on chain ${chainId}`);\r\n    }\r\n    // TODO define the metadata JSON schema\r\n    return await this.storage.downloadJSON(uri);\r\n  }\r\n  async getContractAddresses(walletAddress) {\r\n    return (await this.registryLogic.read(\"getAll\", [await resolveAddress(walletAddress)])).filter(result => utils.isAddress(result.deploymentAddress) && result.deploymentAddress.toLowerCase() !== constants.AddressZero).map(result => ({\r\n      address: result.deploymentAddress,\r\n      chainId: result.chainId.toNumber()\r\n    }));\r\n  }\r\n  addContract = /* @__PURE__ */buildTransactionFunction(async contract => {\r\n    const deployerAddress = await this.registryRouter.getSignerAddress();\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.registryLogic,\r\n      method: \"add\",\r\n      args: [deployerAddress, contract.address, contract.chainId, contract.metadataURI || \"\"]\r\n    });\r\n  });\r\n  addContracts = /* @__PURE__ */buildTransactionFunction(async contracts => {\r\n    const deployerAddress = await this.registryRouter.getSignerAddress();\r\n    const encoded = [];\r\n    const contractEncoder = new ContractEncoder(this.registryLogic);\r\n    contracts.forEach(contact => {\r\n      encoded.push(contractEncoder.encode(\"add\", [deployerAddress, contact.address, contact.chainId, contact.metadataURI || \"\"]));\r\n    });\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.registryRouter,\r\n      method: \"multicall\",\r\n      args: [encoded]\r\n    });\r\n  });\r\n  removeContract = /* @__PURE__ */buildTransactionFunction(async contract => {\r\n    const deployerAddress = await this.registryRouter.getSignerAddress();\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.registryLogic,\r\n      method: \"remove\",\r\n      args: [deployerAddress, await resolveAddress(contract.address), contract.chainId]\r\n    });\r\n  });\r\n  removeContracts = /* @__PURE__ */buildTransactionFunction(async contracts => {\r\n    const deployerAddress = await this.registryRouter.getSignerAddress();\r\n    const contractEncoder = new ContractEncoder(this.registryLogic);\r\n    const encoded = await Promise.all(contracts.map(async contract => contractEncoder.encode(\"remove\", [deployerAddress, await resolveAddress(contract.address), contract.chainId])));\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.registryRouter,\r\n      method: \"multicall\",\r\n      args: [encoded]\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n *\r\n * @param abi - The abi to extract params from\r\n * @param functionName - The function name to extract params from\r\n * @returns\r\n * @internal\r\n */\r\nfunction extractFunctionParamsFromAbi(abi, functionName) {\r\n  const parsedAbi = AbiSchema.parse(abi || []);\r\n  for (const input of parsedAbi) {\r\n    if (input.type === \"function\" && input.name === functionName) {\r\n      return input.inputs || [];\r\n    }\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n *\r\n * @internal\r\n * @param provider - The provider to use\r\n * @param storage - The storage to use\r\n * @param create2Factory - The create2 factory to use\r\n */\r\nasync function computeCloneFactoryAddress(provider, storage, create2Factory, clientId, secretKey) {\r\n  if (!create2Factory) {\r\n    create2Factory = await getCreate2FactoryAddress(provider);\r\n  }\r\n  return (await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\r\n    contractName: \"TWCloneFactory\"\r\n  }, clientId, secretKey)).transaction.predictedAddress;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction convertParamValues(constructorParamTypes, constructorParamValues) {\r\n  // check that both arrays are same length\r\n  if (constructorParamTypes.length !== constructorParamValues.length) {\r\n    throw Error(`Passed the wrong number of constructor arguments: ${constructorParamValues.length}, expected ${constructorParamTypes.length}`);\r\n  }\r\n  return constructorParamTypes.map((p, index) => {\r\n    if (p === \"tuple\" || p.endsWith(\"[]\")) {\r\n      if (typeof constructorParamValues[index] === \"string\") {\r\n        return JSON.parse(constructorParamValues[index]);\r\n      } else {\r\n        return constructorParamValues[index];\r\n      }\r\n    }\r\n    if (p === \"bytes32\") {\r\n      invariant(utils.isHexString(constructorParamValues[index]), `Could not parse bytes32 value. Expected valid hex string but got \"${constructorParamValues[index]}\".`);\r\n      return utils.hexZeroPad(constructorParamValues[index], 32);\r\n    }\r\n    if (p.startsWith(\"bytes\")) {\r\n      invariant(utils.isHexString(constructorParamValues[index]), `Could not parse bytes value. Expected valid hex string but got \"${constructorParamValues[index]}\".`);\r\n      return constructorParamValues[index];\r\n    }\r\n    if (p.startsWith(\"uint\") || p.startsWith(\"int\")) {\r\n      return BigNumber.from(constructorParamValues[index].toString());\r\n    }\r\n    return constructorParamValues[index];\r\n  });\r\n}\r\n\r\n/**\r\n * Deploy Nick's Create2 factory on a given network.\r\n * Deployment is keyless. Signer is needed to fund the keyless signer address.\r\n * Ref: https://github.com/Arachnid/deterministic-deployment-proxy\r\n *\r\n * @deploy\r\n * @public\r\n * @param signer - The signer to use\r\n */\r\nasync function deployCreate2Factory(signer, options) {\r\n  invariant(signer.provider, \"No provider\");\r\n  const commonFactoryExists = await isContractDeployed(COMMON_FACTORY, signer.provider);\r\n  if (commonFactoryExists) {\r\n    return COMMON_FACTORY;\r\n  }\r\n  const enforceEip155 = await isEIP155Enforced(signer.provider);\r\n  const networkId = (await signer.provider.getNetwork()).chainId;\r\n  const chainId = enforceEip155 ? networkId : 0;\r\n  console.debug(`ChainId ${networkId} enforces EIP155: ${enforceEip155}`);\r\n  const deploymentInfo = CUSTOM_GAS_FOR_CHAIN[networkId] ? getCreate2FactoryDeploymentInfo(chainId, {\r\n    gasPrice: CUSTOM_GAS_FOR_CHAIN[networkId].gasPrice,\r\n    gasLimit: CUSTOM_GAS_FOR_CHAIN[networkId].gasLimit\r\n  }) : getCreate2FactoryDeploymentInfo(chainId, {});\r\n  const factoryExists = await isContractDeployed(deploymentInfo.deployment, signer.provider);\r\n\r\n  // deploy community factory if not already deployed\r\n  if (!factoryExists) {\r\n    const gasPrice = CUSTOM_GAS_FOR_CHAIN[networkId]?.gasPrice ? CUSTOM_GAS_FOR_CHAIN[networkId].gasPrice : 100 * 10 ** 9;\r\n    const gasLimit = CUSTOM_GAS_FOR_CHAIN[networkId]?.gasLimit ? CUSTOM_GAS_FOR_CHAIN[networkId].gasLimit : 100000;\r\n    invariant(gasLimit, \"gasLimit undefined for create2 factory deploy\");\r\n    invariant(gasPrice, \"gasPrice undefined for create2 factory deploy\");\r\n\r\n    // send balance to the keyless signer\r\n    const valueToSend = BigNumber.from(gasPrice).mul(gasLimit);\r\n    if ((await signer.provider.getBalance(deploymentInfo.signer)).lt(valueToSend)) {\r\n      await (await signer.sendTransaction({\r\n        to: deploymentInfo.signer,\r\n        value: valueToSend\r\n      })).wait();\r\n    }\r\n\r\n    // deploy\r\n    try {\r\n      console.debug(`deploying CREATE2 factory at: ${deploymentInfo.deployment}`);\r\n      options?.notifier?.(\"deploying\", \"create2Factory\");\r\n      await (await signer.provider.sendTransaction(deploymentInfo.transaction)).wait();\r\n      options?.notifier?.(\"deployed\", \"create2Factory\");\r\n    } catch (err) {\r\n      throw new Error(`Couldn't deploy CREATE2 factory: ${JSON.stringify(err)}`);\r\n    }\r\n  }\r\n  return deploymentInfo.deployment;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nconst SUPPORTED_CHAIN_IDS = [ChainId.Mainnet, ChainId.Goerli, ChainId.Polygon, ChainId.Mumbai, ChainId.Fantom, ChainId.FantomTestnet, ChainId.Avalanche, ChainId.AvalancheFujiTestnet, ChainId.Optimism, ChainId.OptimismGoerli, ChainId.Arbitrum, ChainId.ArbitrumGoerli, ChainId.BinanceSmartChainMainnet, ChainId.BinanceSmartChainTestnet, ChainId.Hardhat, ChainId.Localhost];\r\n\r\n/**\r\n *\r\n * @param chainId - chain id\r\n * @returns The array of trusted forwarders for the given chain id\r\n * @internal\r\n */\r\nfunction getDefaultTrustedForwarders(chainId) {\r\n  const chainEnum = SUPPORTED_CHAIN_IDS.find(c => c === chainId);\r\n  const biconomyForwarder = chainEnum ? CONTRACT_ADDRESSES[chainEnum]?.biconomyForwarder : AddressZero;\r\n  const openzeppelinForwarder = chainEnum ? CONTRACT_ADDRESSES[chainEnum]?.openzeppelinForwarder : AddressZero;\r\n  return [openzeppelinForwarder, biconomyForwarder].filter(a => a !== AddressZero);\r\n}\r\n\r\n/**\r\n * In the past we default `platform_fee_recipient` and `primary_sale_recipient` to AddressZero.\r\n * However due to a recent change in our smart contract extensions (PrimarySale & PlatformFee), AddressZero is no longer an accepted value for those fields.\r\n * So now we set the default value to the signer address.\r\n * https://github.com/thirdweb-dev/contracts/pull/530\r\n *\r\n * @param signerAddress - The address of the contract deployer\r\n * @param recipient - The address that will receive the platform fees and/or sale fees\r\n * @returns `signerAddress` if the `recipient` is AddressZero, otherwise returns `recipient`\r\n * @internal\r\n */\r\nfunction overrideRecipientAddress(signerAddress, recipient) {\r\n  if (recipient === constants.AddressZero) {\r\n    return signerAddress;\r\n  }\r\n  return recipient;\r\n}\r\n\r\n/**\r\n *\r\n * @param contractType - The contract type to get deploy arguments for\r\n * @param metadata - The metadata to get deploy arguments for\r\n * @param contractURI - The contract URI to get deploy arguments for\r\n * @returns\r\n * @internal\r\n */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// TODO: Update function interface: Remove unused param\r\nasync function getDeployArguments(contractType, metadata, contractURI, signer, storage) {\r\n  const signerAddress = await signer.getAddress();\r\n  const trustedForwarders = [];\r\n\r\n  // add any custom forwarders passed in\r\n  if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\r\n    trustedForwarders.push(...metadata.trusted_forwarders);\r\n  }\r\n  switch (contractType) {\r\n    case NFTDropInitializer.contractType:\r\n    case NFTCollectionInitializer.contractType:\r\n      const erc721metadata = await NFTDropInitializer.schema.deploy.parseAsync(metadata);\r\n      return [signerAddress, erc721metadata.name, erc721metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc721metadata.primary_sale_recipient), erc721metadata.fee_recipient, erc721metadata.seller_fee_basis_points, erc721metadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, erc721metadata.platform_fee_recipient)];\r\n    case SignatureDropInitializer.contractType:\r\n      const signatureDropmetadata = await SignatureDropInitializer.schema.deploy.parseAsync(metadata);\r\n      return [signerAddress, signatureDropmetadata.name, signatureDropmetadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, signatureDropmetadata.primary_sale_recipient), signatureDropmetadata.fee_recipient, signatureDropmetadata.seller_fee_basis_points, signatureDropmetadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, signatureDropmetadata.platform_fee_recipient)];\r\n    case MultiwrapInitializer.contractType:\r\n      const multiwrapMetadata = await MultiwrapInitializer.schema.deploy.parseAsync(metadata);\r\n      return [signerAddress, multiwrapMetadata.name, multiwrapMetadata.symbol, contractURI, trustedForwarders, multiwrapMetadata.fee_recipient, multiwrapMetadata.seller_fee_basis_points];\r\n    case EditionDropInitializer.contractType:\r\n    case EditionInitializer.contractType:\r\n      const erc1155metadata = await EditionDropInitializer.schema.deploy.parseAsync(metadata);\r\n      return [signerAddress, erc1155metadata.name, erc1155metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc1155metadata.primary_sale_recipient), erc1155metadata.fee_recipient, erc1155metadata.seller_fee_basis_points, erc1155metadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, erc1155metadata.platform_fee_recipient)];\r\n    case TokenDropInitializer.contractType:\r\n    case TokenInitializer.contractType:\r\n      const erc20metadata = await TokenInitializer.schema.deploy.parseAsync(metadata);\r\n      return [signerAddress, erc20metadata.name, erc20metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc20metadata.primary_sale_recipient), overrideRecipientAddress(signerAddress, erc20metadata.platform_fee_recipient), erc20metadata.platform_fee_basis_points];\r\n    case VoteInitializer.contractType:\r\n      const voteMetadata = await VoteInitializer.schema.deploy.parseAsync(metadata);\r\n      return [voteMetadata.name, contractURI, trustedForwarders, voteMetadata.voting_token_address, voteMetadata.voting_delay_in_blocks, voteMetadata.voting_period_in_blocks, BigNumber.from(voteMetadata.proposal_token_threshold), voteMetadata.voting_quorum_fraction];\r\n    case SplitInitializer.contractType:\r\n      const splitsMetadata = await SplitInitializer.schema.deploy.parseAsync(metadata);\r\n      return [signerAddress, contractURI, trustedForwarders, splitsMetadata.recipients.map(s => s.address), splitsMetadata.recipients.map(s => BigNumber.from(s.sharesBps))];\r\n    case MarketplaceInitializer.contractType:\r\n    case MarketplaceV3Initializer.contractType:\r\n      const marketplaceMetadata = await MarketplaceInitializer.schema.deploy.parseAsync(metadata);\r\n      return [signerAddress, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, marketplaceMetadata.platform_fee_recipient), marketplaceMetadata.platform_fee_basis_points];\r\n    case PackInitializer.contractType:\r\n      const packsMetadata = await PackInitializer.schema.deploy.parseAsync(metadata);\r\n      return [signerAddress, packsMetadata.name, packsMetadata.symbol, contractURI, trustedForwarders, packsMetadata.fee_recipient, packsMetadata.seller_fee_basis_points];\r\n    default:\r\n      return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Get the default trusted forwarders for gasless relaying\r\n * @deploy\r\n * @public\r\n */\r\nasync function getTrustedForwarders(provider, storage, contractName) {\r\n  const chainId = (await provider.getNetwork()).chainId;\r\n  const chainEnum = SUPPORTED_CHAIN_IDS.find(c => c === chainId);\r\n  const trustedForwarders = contractName && contractName === PackInitializer.name ? [] : chainEnum ? getDefaultTrustedForwarders(chainId) : [await computeForwarderAddress(provider, storage)]; // TODO: make this default for all chains (standard + others)\r\n\r\n  return trustedForwarders;\r\n}\r\n\r\n// @deprecated - should not be needed anymore, rely on the publish data instead\r\nconst APPROVED_IMPLEMENTATIONS = {\r\n  [ChainId.Mainnet]: {\r\n    \"nft-drop\": \"0x60fF9952e0084A6DEac44203838cDC91ABeC8736\",\r\n    \"edition-drop\": \"0x74af262d0671F378F97a1EDC3d0970Dbe8A1C550\",\r\n    \"token-drop\": \"0xE1eE43D23f247b6A9aF81fcE2766E76709482728\",\r\n    \"signature-drop\": \"0x6fD690EB509BdE4C50028C5D9C0dE3750C2Fad6A\"\r\n  },\r\n  [ChainId.Polygon]: {\r\n    \"nft-drop\": \"0xB96508050Ba0925256184103560EBADA912Fcc69\",\r\n    \"edition-drop\": \"0x74af262d0671F378F97a1EDC3d0970Dbe8A1C550\",\r\n    \"token-drop\": \"0x5A8eA4Adad8289746D073947BA06D69A62499aaf\",\r\n    \"signature-drop\": \"0xBE2fDc35410E268e41Bec62DBb01AEb43245c7d5\"\r\n  },\r\n  [ChainId.Fantom]: {\r\n    \"nft-drop\": \"0x2A396b2D90BAcEF19cDa973586B2633d22710fC2\",\r\n    \"edition-drop\": \"0x06395FCF9AC6ED827f9dD6e776809cEF1Be0d21B\",\r\n    \"token-drop\": \"0x0148b28a38efaaC31b6aa0a6D9FEb70FE7C91FFa\",\r\n    \"signature-drop\": \"0xe135Ef65C2B2213C3fD56d0Bd6500A2cA147aC10\"\r\n  },\r\n  [ChainId.Avalanche]: {\r\n    \"nft-drop\": \"0x9cF91118C8ee2913F0588e0F10e36B3d63F68bF6\",\r\n    \"edition-drop\": \"0x135fC9D26E5eC51260ece1DF4ED424E2f55c7766\",\r\n    \"token-drop\": \"0xca0B071899E575BA86495D46c5066971b6f3A901\",\r\n    \"signature-drop\": \"0x1d47526C3292B0130ef0afD5F02c1DA052A017B3\"\r\n  },\r\n  [ChainId.Optimism]: {\r\n    \"nft-drop\": \"0xFBd7D24d80ee005671E731a7287DEB6073264dD1\",\r\n    \"edition-drop\": \"0xe135Ef65C2B2213C3fD56d0Bd6500A2cA147aC10\",\r\n    \"token-drop\": \"0x902Dd246e66d8C3CE652375a723F2a52b43b9AAE\",\r\n    \"signature-drop\": \"0x8a4cd3549e548bbEEb38C16E041FFf040a5acabD\"\r\n  },\r\n  [ChainId.Arbitrum]: {\r\n    \"nft-drop\": \"0xC4903c1Ff5367b9ac2c349B63DC2409421AaEE2a\",\r\n    \"edition-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\",\r\n    \"token-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\",\r\n    \"signature-drop\": \"0x2dF9851af45dd41C8584ac55D983C604da985Bc7\"\r\n  },\r\n  [ChainId.BinanceSmartChainMainnet]: {\r\n    \"nft-drop\": \"0x902Dd246e66d8C3CE652375a723F2a52b43b9AAE\",\r\n    \"edition-drop\": \"0x2A396b2D90BAcEF19cDa973586B2633d22710fC2\",\r\n    \"token-drop\": \"0xe135Ef65C2B2213C3fD56d0Bd6500A2cA147aC10\",\r\n    \"signature-drop\": \"0xFBd7D24d80ee005671E731a7287DEB6073264dD1\"\r\n  },\r\n  [ChainId.Goerli]: {\r\n    \"nft-drop\": \"0xD11c97DD5F5546B5bBd630D7D1d7327481B0b92C\",\r\n    \"edition-drop\": \"0x5A8eA4Adad8289746D073947BA06D69A62499aaf\",\r\n    \"token-drop\": \"0x5680933221B752EB443654a014f88B101F868d50\",\r\n    \"signature-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\"\r\n  },\r\n  [ChainId.Mumbai]: {\r\n    \"nft-drop\": \"0xC4903c1Ff5367b9ac2c349B63DC2409421AaEE2a\",\r\n    \"edition-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\",\r\n    \"token-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\",\r\n    \"signature-drop\": \"0x2dF9851af45dd41C8584ac55D983C604da985Bc7\"\r\n  },\r\n  [ChainId.FantomTestnet]: {\r\n    \"nft-drop\": \"0x8a4cd3549e548bbEEb38C16E041FFf040a5acabD\",\r\n    \"edition-drop\": \"0x902Dd246e66d8C3CE652375a723F2a52b43b9AAE\",\r\n    \"token-drop\": \"0xFBd7D24d80ee005671E731a7287DEB6073264dD1\",\r\n    \"signature-drop\": \"0x5A8eA4Adad8289746D073947BA06D69A62499aaf\"\r\n  },\r\n  [ChainId.AvalancheFujiTestnet]: {\r\n    \"nft-drop\": \"0xD11c97DD5F5546B5bBd630D7D1d7327481B0b92C\",\r\n    \"edition-drop\": \"0xE1eE43D23f247b6A9aF81fcE2766E76709482728\",\r\n    \"token-drop\": \"0x6fD690EB509BdE4C50028C5D9C0dE3750C2Fad6A\",\r\n    \"signature-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\"\r\n  },\r\n  [ChainId.OptimismGoerli]: {\r\n    \"nft-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\",\r\n    \"edition-drop\": \"0x6fD690EB509BdE4C50028C5D9C0dE3750C2Fad6A\",\r\n    \"token-drop\": \"0xD11c97DD5F5546B5bBd630D7D1d7327481B0b92C\",\r\n    \"signature-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\"\r\n  },\r\n  [ChainId.ArbitrumGoerli]: {\r\n    \"nft-drop\": \"0x9CfE807a5b124b962064Fa8F7FD823Cc701255b6\",\r\n    \"edition-drop\": \"0x9cF91118C8ee2913F0588e0F10e36B3d63F68bF6\",\r\n    \"token-drop\": \"0x1d47526C3292B0130ef0afD5F02c1DA052A017B3\",\r\n    \"signature-drop\": \"0xE1eE43D23f247b6A9aF81fcE2766E76709482728\"\r\n  },\r\n  [ChainId.BinanceSmartChainTestnet]: {\r\n    \"nft-drop\": \"\",\r\n    \"edition-drop\": \"\",\r\n    \"token-drop\": \"\",\r\n    \"signature-drop\": \"\" // TODO\r\n  },\r\n  [ChainId.Hardhat]: {\r\n    \"nft-drop\": \"\",\r\n    \"edition-drop\": \"\",\r\n    \"token-drop\": \"\",\r\n    \"signature-drop\": \"\" // TODO\r\n  },\r\n  [ChainId.Localhost]: {\r\n    \"nft-drop\": \"\",\r\n    \"edition-drop\": \"\",\r\n    \"token-drop\": \"\",\r\n    \"signature-drop\": \"\" // TODO\r\n  }\r\n};\r\n\r\n/**\r\n * @internal\r\n * @param chainId - The chainId to get the approved implementation for\r\n * @param contractType - The contract type to get the approved implementation for\r\n */\r\nfunction getApprovedImplementation(chainId,\r\n// TODO use SupportedChainId once we deploy to all chains\r\ncontractType) {\r\n  if (chainId in APPROVED_IMPLEMENTATIONS) {\r\n    const approvedImpls = APPROVED_IMPLEMENTATIONS[chainId];\r\n    if (contractType in approvedImpls) {\r\n      return approvedImpls[contractType];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nclass ContractFactory extends ContractWrapper {\r\n  // Map from contract type to version to deploy specific versions by default\r\n  DEFAULT_VERSION_MAP = {\r\n    [NFTDropInitializer.contractType]: 3,\r\n    [NFTCollectionInitializer.contractType]: 1,\r\n    [SignatureDropInitializer.contractType]: 4,\r\n    [MultiwrapInitializer.contractType]: 1,\r\n    [EditionDropInitializer.contractType]: 2,\r\n    [EditionInitializer.contractType]: 1,\r\n    [TokenDropInitializer.contractType]: 2,\r\n    [TokenInitializer.contractType]: 1,\r\n    [VoteInitializer.contractType]: 1,\r\n    [SplitInitializer.contractType]: 1,\r\n    [MarketplaceInitializer.contractType]: 2,\r\n    [MarketplaceV3Initializer.contractType]: 3,\r\n    [PackInitializer.contractType]: 2\r\n  };\r\n  constructor(factoryAddr, network, storage, options) {\r\n    super(network, factoryAddr, TWFactoryAbi, options, storage);\r\n    this.storage = storage;\r\n  }\r\n  deploy = /* @__PURE__ */buildTransactionFunction(async (contractType, contractMetadata, eventEmitter, version, options, onExecute) => {\r\n    const contract = PREBUILT_CONTRACTS_MAP[contractType];\r\n    const metadata = await contract.schema.deploy.parseAsync(contractMetadata);\r\n\r\n    // TODO: is there any special pre-processing we need to do before uploading?\r\n    const contractURI = await this.storage.upload(metadata);\r\n    const implementationAddress = (await this.getImplementation(contract, version)) || undefined;\r\n    if (!implementationAddress || implementationAddress === constants.AddressZero) {\r\n      throw new Error(`No implementation found for ${contractType}`);\r\n    }\r\n    const ABI = await contract.getAbi(implementationAddress, this.getProvider(), this.storage);\r\n    const signer = this.getSigner();\r\n    invariant(signer, \"A signer is required to deploy contracts\");\r\n    const args = await getDeployArguments(contractType, metadata, contractURI, signer, this.storage);\r\n    const encodedFunc = Contract.getInterface(ABI).encodeFunctionData(\"initialize\", args);\r\n    const blockNumber = await this.getProvider().getBlockNumber();\r\n    const salt = options?.saltForProxyDeploy ? utils.id(options.saltForProxyDeploy) : utils.formatBytes32String(blockNumber.toString());\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this,\r\n      method: \"deployProxyByImplementation\",\r\n      args: [implementationAddress, encodedFunc, salt],\r\n      parse: receipt => {\r\n        if (onExecute) {\r\n          onExecute();\r\n        }\r\n        const events = this.parseLogs(\"ProxyDeployed\", receipt.logs);\r\n        if (events.length < 1) {\r\n          throw new Error(\"No ProxyDeployed event found\");\r\n        }\r\n        const contractAddress = events[0].args.proxy;\r\n        eventEmitter.emit(\"contractDeployed\", {\r\n          status: \"completed\",\r\n          contractAddress,\r\n          transactionHash: receipt.transactionHash\r\n        });\r\n        return contractAddress;\r\n      }\r\n    });\r\n  });\r\n\r\n  // TODO once IContractFactory is implemented, this can be probably be moved to its own class\r\n  deployProxyByImplementation = /* @__PURE__ */buildTransactionFunction(async (implementationAddress, implementationAbi, initializerFunction, initializerArgs, eventEmitter, saltForProxyDeploy, onExecute) => {\r\n    const encodedFunc = Contract.getInterface(implementationAbi).encodeFunctionData(initializerFunction, initializerArgs);\r\n    const blockNumber = await this.getProvider().getBlockNumber();\r\n    const salt = saltForProxyDeploy ? utils.id(saltForProxyDeploy) : utils.formatBytes32String(blockNumber.toString());\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this,\r\n      method: \"deployProxyByImplementation\",\r\n      args: [implementationAddress, encodedFunc, salt],\r\n      parse: receipt => {\r\n        if (onExecute) {\r\n          onExecute();\r\n        }\r\n        const events = this.parseLogs(\"ProxyDeployed\", receipt.logs);\r\n        if (events.length < 1) {\r\n          throw new Error(\"No ProxyDeployed event found\");\r\n        }\r\n        const contractAddress = events[0].args.proxy;\r\n        eventEmitter.emit(\"contractDeployed\", {\r\n          status: \"completed\",\r\n          contractAddress,\r\n          transactionHash: receipt.transactionHash\r\n        });\r\n        return contractAddress;\r\n      }\r\n    });\r\n  });\r\n\r\n  /**\r\n   *\r\n   * @param contractType - the contract type to deploy\r\n   * @param metadata - the metadata for the contract\r\n   * @param contractURI - the contract URI\r\n   * @returns\r\n   * @internal\r\n   */\r\n  async getDeployArguments(contractType, metadata, contractURI) {\r\n    let trustedForwarders = [];\r\n    // override default forwarders if custom ones are passed in\r\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\r\n      trustedForwarders = metadata.trusted_forwarders;\r\n    }\r\n    const signerAddress = await this.getSignerAddress();\r\n    switch (contractType) {\r\n      case NFTDropInitializer.contractType:\r\n      case NFTCollectionInitializer.contractType:\r\n        const erc721metadata = await NFTDropInitializer.schema.deploy.parseAsync(metadata);\r\n        return [signerAddress, erc721metadata.name, erc721metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc721metadata.primary_sale_recipient), erc721metadata.fee_recipient, erc721metadata.seller_fee_basis_points, erc721metadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, erc721metadata.platform_fee_recipient)];\r\n      case SignatureDropInitializer.contractType:\r\n        const signatureDropmetadata = await SignatureDropInitializer.schema.deploy.parseAsync(metadata);\r\n        return [signerAddress, signatureDropmetadata.name, signatureDropmetadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, signatureDropmetadata.primary_sale_recipient), signatureDropmetadata.fee_recipient, signatureDropmetadata.seller_fee_basis_points, signatureDropmetadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, signatureDropmetadata.platform_fee_recipient)];\r\n      case MultiwrapInitializer.contractType:\r\n        const multiwrapMetadata = await MultiwrapInitializer.schema.deploy.parseAsync(metadata);\r\n        return [signerAddress, multiwrapMetadata.name, multiwrapMetadata.symbol, contractURI, trustedForwarders, multiwrapMetadata.fee_recipient, multiwrapMetadata.seller_fee_basis_points];\r\n      case EditionDropInitializer.contractType:\r\n      case EditionInitializer.contractType:\r\n        const erc1155metadata = await EditionDropInitializer.schema.deploy.parseAsync(metadata);\r\n        return [signerAddress, erc1155metadata.name, erc1155metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc1155metadata.primary_sale_recipient), erc1155metadata.fee_recipient, erc1155metadata.seller_fee_basis_points, erc1155metadata.platform_fee_basis_points, overrideRecipientAddress(signerAddress, erc1155metadata.platform_fee_recipient)];\r\n      case TokenDropInitializer.contractType:\r\n      case TokenInitializer.contractType:\r\n        const erc20metadata = await TokenInitializer.schema.deploy.parseAsync(metadata);\r\n        return [signerAddress, erc20metadata.name, erc20metadata.symbol, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, erc20metadata.primary_sale_recipient), overrideRecipientAddress(signerAddress, erc20metadata.platform_fee_recipient), erc20metadata.platform_fee_basis_points];\r\n      case VoteInitializer.contractType:\r\n        const voteMetadata = await VoteInitializer.schema.deploy.parseAsync(metadata);\r\n        return [voteMetadata.name, contractURI, trustedForwarders, voteMetadata.voting_token_address, voteMetadata.voting_delay_in_blocks, voteMetadata.voting_period_in_blocks, BigNumber.from(voteMetadata.proposal_token_threshold), voteMetadata.voting_quorum_fraction];\r\n      case SplitInitializer.contractType:\r\n        const splitsMetadata = await SplitInitializer.schema.deploy.parseAsync(metadata);\r\n        return [signerAddress, contractURI, trustedForwarders, splitsMetadata.recipients.map(s => s.address), splitsMetadata.recipients.map(s => BigNumber.from(s.sharesBps))];\r\n      case MarketplaceInitializer.contractType:\r\n        const marketplaceMetadata = await MarketplaceInitializer.schema.deploy.parseAsync(metadata);\r\n        return [signerAddress, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, marketplaceMetadata.platform_fee_recipient), marketplaceMetadata.platform_fee_basis_points];\r\n      case MarketplaceV3Initializer.contractType:\r\n        const marketplaceV3Metadata = await MarketplaceV3Initializer.schema.deploy.parseAsync(metadata);\r\n        return [signerAddress, contractURI, trustedForwarders, overrideRecipientAddress(signerAddress, marketplaceV3Metadata.platform_fee_recipient), marketplaceV3Metadata.platform_fee_basis_points];\r\n      case PackInitializer.contractType:\r\n        const packsMetadata = await PackInitializer.schema.deploy.parseAsync(metadata);\r\n        return [signerAddress, packsMetadata.name, packsMetadata.symbol, contractURI, trustedForwarders, packsMetadata.fee_recipient, packsMetadata.seller_fee_basis_points];\r\n      default:\r\n        return [];\r\n    }\r\n  }\r\n  async getImplementation(contract, version) {\r\n    const encodedType = utils.formatBytes32String(contract.name);\r\n    const chainId = await this.getChainID();\r\n    const approvedImplementation = getApprovedImplementation(chainId, contract.contractType);\r\n    // return approved implementation if it exists and we're not overriding the version\r\n    if (approvedImplementation && approvedImplementation.length > 0 && version === undefined) {\r\n      return approvedImplementation;\r\n    }\r\n    return this.read(\"getImplementation\", [encodedType, version !== undefined ? version : this.DEFAULT_VERSION_MAP[contract.contractType]]);\r\n  }\r\n  async getLatestVersion(contractType) {\r\n    const name = getContractName(contractType);\r\n    if (!name) {\r\n      throw new Error(`Invalid contract type ${contractType}`);\r\n    }\r\n    const encodedType = utils.formatBytes32String(name);\r\n    return this.read(\"currentVersion\", [encodedType]);\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nclass ContractRegistry extends ContractWrapper {\r\n  constructor(registryAddress, network, storage, TWRegistryABI, options) {\r\n    super(network, registryAddress, TWRegistryABI, options, storage);\r\n  }\r\n  async getContractAddresses(walletAddress) {\r\n    // TODO @fixme the filter here is necessary because for some reason getAll returns a 0x0 address for the first entry\r\n    return (await this.read(\"getAll\", [await resolveAddress(walletAddress)])).filter(adr => utils.isAddress(adr) && adr.toLowerCase() !== constants.AddressZero);\r\n  }\r\n  addContract = /* @__PURE__ */buildTransactionFunction(async contractAddress => {\r\n    return await this.addContracts.prepare([contractAddress]);\r\n  });\r\n  addContracts = /* @__PURE__ */buildTransactionFunction(async contractAddresses => {\r\n    const deployerAddress = await this.getSignerAddress();\r\n    const contractEncoder = new ContractEncoder(this);\r\n    const encoded = (await Promise.all(contractAddresses.map(addr => resolveAddress(addr)))).map(address => contractEncoder.encode(\"add\", [deployerAddress, address]));\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this,\r\n      method: \"multicall\",\r\n      args: [encoded]\r\n    });\r\n  });\r\n  removeContract = /* @__PURE__ */buildTransactionFunction(async contractAddress => {\r\n    return await this.removeContracts.prepare([contractAddress]);\r\n  });\r\n  removeContracts = /* @__PURE__ */buildTransactionFunction(async contractAddresses => {\r\n    const deployerAddress = await this.getSignerAddress();\r\n    const contractEncoder = new ContractEncoder(this);\r\n    const encoded = (await Promise.all(contractAddresses.map(addr => resolveAddress(addr)))).map(address => contractEncoder.encode(\"remove\", [deployerAddress, address]));\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this,\r\n      method: \"multicall\",\r\n      args: [encoded]\r\n    });\r\n  });\r\n}\r\n\r\nconst LoyaltyCardContractInput = /* @__PURE__ */(() => CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema))();\r\nconst LoyaltyCardContractDeploy = /* @__PURE__ */(() => LoyaltyCardContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema))();\r\n\r\nconst AirdropContractInput = /* @__PURE__ */(() => CommonContractSchema.merge(CommonSymbolSchema))();\r\nconst AirdropContractDeploy = /* @__PURE__ */(() => AirdropContractInput.merge(CommonTrustedForwarderSchema))();\r\n\r\n/**\r\n * Direct deploy a contract at a deterministic address, using Create2 method\r\n * Address depends on the Create2 factory address and salt (if provided).\r\n *\r\n * @deploy\r\n * @public\r\n *\r\n * @param bytecode - The bytecode to deploy\r\n * @param abi - The abi to use\r\n * @param signer - The signer to use\r\n * @param constructorArgs - The constructor args to use\r\n * @param saltForCreate2 - The salt to use\r\n */\r\nasync function directDeployDeterministic(bytecode, abi, signer, constructorArgs, saltForCreate2) {\r\n  let gasLimit = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 7000000;\r\n  invariant(signer.provider, \"Provider is required\");\r\n  const bytecodePrefixed = bytecode.startsWith(\"0x\") ? bytecode : `0x${bytecode}`;\r\n\r\n  // 1. Deploy CREATE2 factory (if not already exists)\r\n  const create2Factory = await deployCreate2Factory(signer);\r\n\r\n  // 2. Encode constructor params\r\n  const constructorParams = extractConstructorParamsFromAbi(abi);\r\n  const constructorParamTypes = constructorParams.map(p => {\r\n    return p.type;\r\n  });\r\n  const paramValues = convertParamValues(constructorParamTypes, constructorArgs);\r\n  const paramTypesForEncoder = constructorParams.map(p => {\r\n    if (p.type === \"tuple[]\") {\r\n      return utils.ParamType.from(p);\r\n    } else {\r\n      return p.type;\r\n    }\r\n  });\r\n  const encodedArgs = utils.defaultAbiCoder.encode(paramTypesForEncoder, paramValues);\r\n\r\n  // 3. Construct deployment transaction\r\n  const address = computeDeploymentAddress(bytecodePrefixed, encodedArgs, create2Factory, saltForCreate2);\r\n  const contractDeployed = await isContractDeployed(address, signer.provider);\r\n  let initBytecodeWithSalt = \"\";\r\n  if (!contractDeployed) {\r\n    console.debug(`deploying contract via create2 factory at: ${address}`);\r\n    initBytecodeWithSalt = getInitBytecodeWithSalt(bytecodePrefixed, encodedArgs, saltForCreate2);\r\n    const tx = {\r\n      to: create2Factory,\r\n      data: initBytecodeWithSalt\r\n    };\r\n    try {\r\n      await signer.estimateGas(tx);\r\n    } catch (e) {\r\n      console.debug(\"error estimating gas while deploying prebuilt: \", e);\r\n      tx.gasLimit = BigNumber.from(gasLimit);\r\n    }\r\n\r\n    // 4. Deploy\r\n    await (await signer.sendTransaction(tx)).wait();\r\n  } else {\r\n    throw new Error(`Contract already deployed at ${address}`);\r\n  }\r\n  return address;\r\n}\r\n\r\n/**\r\n * Direct deploy a contract at a deterministic address, using Create2 method\r\n * Address depends on the Create2 factory address and salt (if provided).\r\n *\r\n * @public\r\n *\r\n * @param publishMetadataUri - The metadata uri to use\r\n * @param signer - The signer to use\r\n * @param storage - The storage to use\r\n * @param constructorArgs - The constructor args to use\r\n * @param saltForCreate2 - The salt to use\r\n */\r\nasync function directDeployDeterministicWithUri(publishMetadataUri, signer, storage, constructorArgs, saltForCreate2) {\r\n  let gasLimit = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 7000000;\r\n  const {\r\n    compilerMetadata,\r\n    extendedMetadata\r\n  } = await fetchAndCacheDeployMetadata(publishMetadataUri, storage);\r\n  invariant(extendedMetadata?.deployType === \"standard\", \"Must be direct deploy\");\r\n  return await directDeployDeterministic(compilerMetadata.bytecode, compilerMetadata.abi, signer, constructorArgs, saltForCreate2, gasLimit);\r\n}\r\n\r\n/**\r\n * Direct deploy a contract at a deterministic address, using Create2 method\r\n * Address depends on the Create2 factory address and salt (if provided).\r\n *\r\n * @public\r\n *\r\n * @param contractName - The name of the contract to deploy\r\n * @param publisherAddress - The publisher address to use\r\n * @param contractVersion - The contract version to use\r\n * @param constructorArgs - The constructor args to use\r\n * @param signer - The signer to use\r\n * @param storage - The storage to use\r\n * @param clientId - The client id to use\r\n * @param secretKey - The secret key to use\r\n * @param constructorArgs - The constructor args to use\r\n * @param saltForCreate2 - The salt to use\r\n */\r\nasync function directDeployDeterministicPublished(contractName, publisherAddress) {\r\n  let contractVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\r\n  let constructorArgs = arguments.length > 3 ? arguments[3] : undefined;\r\n  let signer = arguments.length > 4 ? arguments[4] : undefined;\r\n  let storage = arguments.length > 5 ? arguments[5] : undefined;\r\n  let clientId = arguments.length > 6 ? arguments[6] : undefined;\r\n  let secretKey = arguments.length > 7 ? arguments[7] : undefined;\r\n  let saltForCreate2 = arguments.length > 8 ? arguments[8] : undefined;\r\n  let gasLimit = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 7000000;\r\n  const publishMetadataUri = (await fetchPublishedContractFromPolygon(publisherAddress, contractName, contractVersion, storage, clientId, secretKey)).metadataUri;\r\n  const {\r\n    compilerMetadata,\r\n    extendedMetadata\r\n  } = await fetchAndCacheDeployMetadata(publishMetadataUri, storage);\r\n  invariant(extendedMetadata?.deployType === \"standard\", \"Must be direct deploy\");\r\n  return await directDeployDeterministic(compilerMetadata.bytecode, compilerMetadata.abi, signer, constructorArgs, saltForCreate2, gasLimit);\r\n}\r\nasync function predictAddressDeterministic(bytecode, abi, provider, constructorArgs, saltForCreate2) {\r\n  const bytecodePrefixed = bytecode.startsWith(\"0x\") ? bytecode : `0x${bytecode}`;\r\n\r\n  // 1. Deploy CREATE2 factory (if not already exists)\r\n  const create2Factory = await getCreate2FactoryAddress(provider);\r\n\r\n  // 2. Encode constructor params\r\n  const constructorParams = extractConstructorParamsFromAbi(abi);\r\n  const constructorParamTypes = constructorParams.map(p => {\r\n    return p.type;\r\n  });\r\n  const paramValues = convertParamValues(constructorParamTypes, constructorArgs);\r\n  const paramTypesForEncoder = constructorParams.map(p => {\r\n    if (p.type === \"tuple[]\") {\r\n      return utils.ParamType.from(p);\r\n    } else {\r\n      return p.type;\r\n    }\r\n  });\r\n  const encodedArgs = utils.defaultAbiCoder.encode(paramTypesForEncoder, paramValues);\r\n\r\n  // 3. Construct deployment transaction\r\n  const address = computeDeploymentAddress(bytecodePrefixed, encodedArgs, create2Factory, saltForCreate2);\r\n  return address;\r\n}\r\nasync function predictAddressDeterministicWithUri(publishMetadataUri, provider, storage, constructorArgs, saltForCreate2) {\r\n  const {\r\n    compilerMetadata,\r\n    extendedMetadata\r\n  } = await fetchAndCacheDeployMetadata(publishMetadataUri, storage);\r\n  invariant(extendedMetadata?.deployType === \"standard\", \"Must be direct deploy\");\r\n  return await predictAddressDeterministic(compilerMetadata.bytecode, compilerMetadata.abi, provider, constructorArgs, saltForCreate2);\r\n}\r\nasync function predictAddressDeterministicPublished(contractName, publisherAddress) {\r\n  let contractVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\r\n  let constructorArgs = arguments.length > 3 ? arguments[3] : undefined;\r\n  let provider = arguments.length > 4 ? arguments[4] : undefined;\r\n  let storage = arguments.length > 5 ? arguments[5] : undefined;\r\n  let clientId = arguments.length > 6 ? arguments[6] : undefined;\r\n  let secretKey = arguments.length > 7 ? arguments[7] : undefined;\r\n  let saltForCreate2 = arguments.length > 8 ? arguments[8] : undefined;\r\n  const publishMetadataUri = (await fetchPublishedContractFromPolygon(publisherAddress, contractName, contractVersion, storage, clientId, secretKey)).metadataUri;\r\n  const {\r\n    compilerMetadata,\r\n    extendedMetadata\r\n  } = await fetchAndCacheDeployMetadata(publishMetadataUri, storage);\r\n  invariant(extendedMetadata?.deployType === \"standard\", \"Must be direct deploy\");\r\n  return await predictAddressDeterministic(compilerMetadata.bytecode, compilerMetadata.abi, provider, constructorArgs, saltForCreate2);\r\n}\r\n\r\n/**\r\n * The main entry point for the thirdweb SDK\r\n * @public\r\n */\r\nclass ThirdwebSDK extends RPCConnectionHandler {\r\n  /**\r\n   * Get an instance of the thirdweb SDK based on an AbstractWallet\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\"\r\n   *\r\n   * const wallet = new AbstractWalletImplementation();\r\n   * const sdk = await ThirdwebSDK.fromWallet(wallet, \"mainnet\");\r\n   * ```\r\n   *\r\n   * @param wallet - the implementation of the AbstractWallet class to use for signing\r\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\r\n   * @param options - the SDK options to use\r\n   * @param storage - optional storage implementation to use\r\n   * @returns An instance of the SDK\r\n   *\r\n   * @beta\r\n   */\r\n  static async fromWallet(wallet, network) {\r\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n    let storage = arguments.length > 3 ? arguments[3] : undefined;\r\n    const signer = await wallet.getSigner();\r\n    return ThirdwebSDK.fromSigner(signer, network, options, storage);\r\n  }\r\n\r\n  /**\r\n   * Get an instance of the thirdweb SDK based on an existing ethers signer\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // get a signer from somewhere (createRandom is being used purely for example purposes)\r\n   * const signer = Wallet.createRandom();\r\n   *\r\n   * // get an instance of the SDK with the signer already setup\r\n   * const sdk = ThirdwebSDK.fromSigner(signer, \"mainnet\");\r\n   * ```\r\n   *\r\n   * @param signer - a ethers Signer to be used for transactions\r\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\r\n   * @param options - the SDK options to use\r\n   * @param storage - optional storage implementation to use\r\n   * @returns An instance of the SDK\r\n   *\r\n   * @beta\r\n   */\r\n  static fromSigner(signer, network) {\r\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n    let storage = arguments.length > 3 ? arguments[3] : undefined;\r\n    let signerWithProvider = signer;\r\n    if (network) {\r\n      try {\r\n        const provider = getChainProvider(network, options);\r\n        signerWithProvider = signer.connect(provider);\r\n      } catch {\r\n        // We have to catch here because browser wallets throw when trying to override provider\r\n      }\r\n    }\r\n    const sdk = new ThirdwebSDK(network || signerWithProvider, network ? addChainToSupportedChains(network, options) : options, storage);\r\n    sdk.updateSignerOrProvider(signerWithProvider);\r\n    return sdk;\r\n  }\r\n\r\n  /**\r\n   * Get an instance of the thirdweb SDK based on a private key.\r\n   *\r\n   * @remarks\r\n   * This should only be used for backend services or scripts, with the private key stored in a secure way.\r\n   * **NEVER** expose your private key to the public in any way.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const sdk = ThirdwebSDK.fromPrivateKey(\"SecretPrivateKey\", \"mainnet\");\r\n   * ```\r\n   *\r\n   * @param privateKey - the private key - **DO NOT EXPOSE THIS TO THE PUBLIC**\r\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\r\n   * @param options - the SDK options to use\r\n   * @param storage - optional storage implementation to use\r\n   * @returns An instance of the SDK\r\n   *\r\n   * @public\r\n   */\r\n  static fromPrivateKey(privateKey, network) {\r\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n    let storage = arguments.length > 3 ? arguments[3] : undefined;\r\n    const provider = getChainProvider(network, options);\r\n    const signer = new Wallet(privateKey, provider);\r\n    return new ThirdwebSDK(signer, addChainToSupportedChains(network, options), storage);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   * the cache of contracts that we have already seen\r\n   */\r\n  contractCache = new Map();\r\n  /**\r\n   * @internal\r\n   * should never be accessed directly, use {@link ThirdwebSDK.getPublisher} instead\r\n   */\r\n\r\n  /**\r\n   * Internal handler for uploading and downloading files\r\n   */\r\n\r\n  /**\r\n   * New contract deployer\r\n   */\r\n\r\n  /**\r\n   * Contract verifier\r\n   */\r\n\r\n  /**\r\n   * The registry of deployed contracts\r\n   */\r\n\r\n  /**\r\n   * Interact with the connected wallet\r\n   */\r\n\r\n  /**\r\n   * Upload and download files from IPFS or from your own storage service\r\n   */\r\n\r\n  constructor(network) {\r\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    let storage = arguments.length > 2 ? arguments[2] : undefined;\r\n    const apiKeyType = \"clientId\" ;\r\n    let warnMessage = `No API key. Please provide a ${apiKeyType}. It is required to access thirdweb's services. You can create a key at https://thirdweb.com/create-api-key`;\r\n    checkClientIdOrSecretKey(warnMessage, options.clientId, options.secretKey);\r\n    options = addChainToSupportedChains(network, options);\r\n    super(network, options);\r\n    setSupportedChains(options?.supportedChains);\r\n    const configuredStorage = createStorage(storage, options);\r\n    this.storage = configuredStorage;\r\n    this.storageHandler = configuredStorage;\r\n    this.wallet = new UserWallet(network, options, configuredStorage);\r\n    this.deployer = new ContractDeployer(network, options, configuredStorage);\r\n    this.verifier = new ContractVerifier(network, options, configuredStorage);\r\n    this.multiChainRegistry = new MultichainRegistry(network, this.storageHandler, this.options);\r\n    this._publisher = new ContractPublisher(network, this.options, this.storageHandler);\r\n  }\r\n  get auth() {\r\n    throw new Error(`The sdk.auth namespace has been moved to the @thirdweb-dev/auth package and is no longer available after @thirdweb-dev/sdk >= 3.7.0.\r\n      Please visit https://portal.thirdweb.com/wallets/auth for instructions on how to switch to using the new auth package (@thirdweb-dev/auth@3.0.0).\r\n\r\n      If you still want to use the old @thirdweb-dev/auth@2.0.0 package, you can downgrade the SDK to version 3.6.0.`);\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a NFT Drop contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const dropContract = await sdk.getDropContract(\"0x1234...\");\r\n   * + const dropContract = await sdk.getContract(\"0x1234...\", \"nft-drop\");\r\n   * ```\r\n   */\r\n  async getNFTDrop(contractAddress) {\r\n    return await this.getContract(contractAddress, \"nft-drop\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Signature Drop contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const signatureDrop = await sdk.getSignatureDrop(\"0x1234...\");\r\n   * + const signatureDrop = await sdk.getContract(\"0x1234...\", \"signature-drop\");\r\n   * ```\r\n   */\r\n  async getSignatureDrop(contractAddress) {\r\n    return await this.getContract(contractAddress, \"signature-drop\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a NFT Collection Drop contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const signatureDrop = await sdk.getNFTCollection(\"0x1234...\");\r\n   * + const signatureDrop = await sdk.getContract(\"0x1234...\", \"nft-collection\");\r\n   * ```\r\n   */\r\n  async getNFTCollection(contractAddress) {\r\n    return await this.getContract(contractAddress, \"nft-collection\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Edition Drop contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const editionDrop = await sdk.getEditionDrop(\"0x1234...\");\r\n   * + const editionDrop = await sdk.getContract(\"0x1234...\", \"edition-drop\");\r\n   * ```\r\n   */\r\n  async getEditionDrop(contractAddress) {\r\n    return await this.getContract(contractAddress, \"edition-drop\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Edition contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const edition = await sdk.getEdition(\"0x1234...\");\r\n   * + const edition = await sdk.getContract(\"0x1234...\", \"edition\");\r\n   * ```\r\n   */\r\n  async getEdition(contractAddress) {\r\n    return await this.getContract(contractAddress, \"edition\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Token Drop contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const tokenDrop = await sdk.getTokenDrop(\"0x1234...\");\r\n   * + const tokenDrop = await sdk.getContract(\"0x1234...\", \"token-drop\");\r\n   * ```\r\n   */\r\n  async getTokenDrop(contractAddress) {\r\n    return await this.getContract(contractAddress, \"token-drop\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Token contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const token = await sdk.getToken(\"0x1234...\");\r\n   * + const token = await sdk.getContract(\"0x1234...\", \"token\");\r\n   * ```\r\n   */\r\n  async getToken(contractAddress) {\r\n    return await this.getContract(contractAddress, \"token\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Vote contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const vote = await sdk.getVote(\"0x1234...\");\r\n   * + const vote = await sdk.getContract(\"0x1234...\", \"vote\");\r\n   * ```\r\n   */\r\n  async getVote(contractAddress) {\r\n    return await this.getContract(contractAddress, \"vote\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Split contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const split = await sdk.getSplit(\"0x1234...\");\r\n   * + const split = await sdk.getContract(\"0x1234...\", \"split\");\r\n   * ```\r\n   */\r\n  async getSplit(contractAddress) {\r\n    return await this.getContract(contractAddress, \"split\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Marketplace contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const marketplace = await sdk.getMarketplace(\"0x1234...\");\r\n   * + const marketplace = await sdk.getContract(\"0x1234...\", \"marketplace\");\r\n   * ```\r\n   */\r\n  async getMarketplace(contractAddress) {\r\n    return await this.getContract(contractAddress, \"marketplace\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Marketplace contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const marketplace = await sdk.getMarketplaceV3(\"0x1234...\");\r\n   * + const marketplace = await sdk.getContract(\"0x1234...\", \"marketplace-v3\");\r\n   * ```\r\n   */\r\n  async getMarketplaceV3(contractAddress) {\r\n    return await this.getContract(contractAddress, \"marketplace-v3\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Pack contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const pack = await sdk.getPack(\"0x1234...\");\r\n   * + const pack = await sdk.getContract(\"0x1234...\", \"pack\");\r\n   * ```\r\n   */\r\n  async getPack(contractAddress) {\r\n    return await this.getContract(contractAddress, \"pack\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Pack contract\r\n   * @param contractAddress - the address of the deployed contract\r\n   * @deprecated\r\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\r\n   * ```diff\r\n   * - const multiWrap = await sdk.getMultiwrap(\"0x1234...\");\r\n   * + const multiWrap = await sdk.getContract(\"0x1234...\", \"multiwrap\");\r\n   * ```\r\n   */\r\n  async getMultiwrap(contractAddress) {\r\n    return await this.getContract(contractAddress, \"multiwrap\");\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Custom ThirdwebContract\r\n   * @param address - the address of the deployed contract\r\n   * @returns The contract\r\n   * @public\r\n   * @example\r\n   * ```javascript\r\n   * const contract = await sdk.getContract(\"{{contract_address}}\");\r\n   * ```\r\n   */\r\n\r\n  /**\r\n   * Get an instance of a Custom ThirdwebContract\r\n   * @param address - the address of the deployed contract\r\n   * @param contractType - the {@link ContractType} of the contract to load\r\n   * @returns The contract\r\n   * @public\r\n   * @example\r\n   * ```javascript\r\n   * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");\r\n   * ```\r\n   */\r\n\r\n  /**\r\n   * Get an instance of a Custom ThirdwebContract\r\n   * @param address - the address of the deployed contract\r\n   * @param abi - the ABI ({@link ContractInterface}) of the contract to load\r\n   * @returns The contract\r\n   * @public\r\n   * @example\r\n   * ```javascript\r\n   * const contract = await sdk.getContract(\"{{contract_address}}\", ABI);\r\n   * ```\r\n   */\r\n\r\n  async getContract(address, contractTypeOrABI) {\r\n    const resolvedAddress = await resolveAddress(address);\r\n\r\n    // if we have a contract in the cache we will return it\r\n    // we will do this **without** checking any contract type things for simplicity, this may have to change in the future?\r\n    if (this.contractCache.has(resolvedAddress)) {\r\n      // we know this will be there since we check the has above\r\n      return this.contractCache.get(resolvedAddress);\r\n    }\r\n    if (resolvedAddress in GENERATED_ABI) {\r\n      return await this.getContractFromAbi(resolvedAddress, GENERATED_ABI[resolvedAddress]);\r\n    }\r\n    let newContract;\r\n\r\n    // if we don't have a contractType or ABI then we will have to resolve it regardless\r\n    // we also handle it being \"custom\" just in case...\r\n    if (!contractTypeOrABI || contractTypeOrABI === \"custom\") {\r\n      try {\r\n        const metadata = await this.getPublisher().fetchCompilerMetadataFromAddress(resolvedAddress);\r\n        newContract = await this.getContractFromAbi(resolvedAddress, metadata.abi);\r\n      } catch (e) {\r\n        // fallback to\r\n        // try resolving the contract type (legacy contracts)\r\n        const resolvedContractType = await this.resolveContractType(resolvedAddress);\r\n        if (resolvedContractType && resolvedContractType !== \"custom\") {\r\n          // otherwise if it's a prebuilt contract we can just use the contract type\r\n          const contractAbi = await PREBUILT_CONTRACTS_MAP[resolvedContractType].getAbi(resolvedAddress, this.getProvider(), this.storage);\r\n          newContract = await this.getContractFromAbi(resolvedAddress, contractAbi);\r\n        } else {\r\n          // we cant fetch the ABI, and we don't know the contract type, throw the original error\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n    // if it's a builtin contract type we can just use the contract type to initialize the contract instance\r\n    else if (typeof contractTypeOrABI === \"string\" && contractTypeOrABI in PREBUILT_CONTRACTS_MAP) {\r\n      newContract = await PREBUILT_CONTRACTS_MAP[contractTypeOrABI].initialize(this.getSignerOrProvider(), resolvedAddress, this.storage, this.options);\r\n    }\r\n    // otherwise it has to be an ABI\r\n    else {\r\n      newContract = await this.getContractFromAbi(resolvedAddress, contractTypeOrABI);\r\n    }\r\n\r\n    // set whatever we have on the cache\r\n    this.contractCache.set(resolvedAddress, newContract);\r\n    // return it\r\n    return newContract;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   * @deprecated use {@link getContract} directly instead\r\n   */\r\n  async getBuiltInContract(address, contractType) {\r\n    return await this.getContract(address, contractType);\r\n  }\r\n\r\n  /**\r\n   * @param contractAddress - the address of the contract to attempt to resolve the contract type for\r\n   * @returns The {@link ContractType} for the given contract address\r\n   *\r\n   */\r\n  async resolveContractType(contractAddress) {\r\n    try {\r\n      const IThirdwebContractABI = (await import('@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json')).default;\r\n      const contract = new Contract(await resolveAddress(contractAddress), IThirdwebContractABI,\r\n      // !provider only! - signer can break things here!\r\n      this.getProvider());\r\n      const remoteContractType = utils.toUtf8String(await contract.contractType())\r\n      // eslint-disable-next-line no-control-regex\r\n      .replace(/\\x00/g, \"\");\r\n      return getContractTypeForRemoteName(remoteContractType);\r\n    } catch (err) {\r\n      return \"custom\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return all the contracts deployed by the specified address\r\n   * @param walletAddress - the deployed address\r\n   * @example\r\n   * ```javascript\r\n   * const contracts = sdk.getContractList(\"{{wallet_address}}\");\r\n   * ```\r\n   */\r\n  async getContractList(walletAddress) {\r\n    // TODO - this only reads from the current registry chain, not the multichain registry\r\n    const addresses = (await (await this.deployer.getRegistry())?.getContractAddresses(await resolveAddress(walletAddress))) || [];\r\n    const chainId = (await this.getProvider().getNetwork()).chainId;\r\n    return await Promise.all(addresses.map(async address => {\r\n      return {\r\n        address: address,\r\n        chainId,\r\n        contractType: () => this.resolveContractType(address),\r\n        metadata: async () => (await this.getContract(address)).metadata.get(),\r\n        extensions: async () => getAllDetectedExtensionNames((await this.getContract(address)).abi)\r\n      };\r\n    }));\r\n  }\r\n  async getMultichainContractList(walletAddress) {\r\n    let chains = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultChains;\r\n    const contracts = await this.multiChainRegistry.getContractAddresses(walletAddress);\r\n    const chainMap = chains.reduce((acc, chain) => {\r\n      acc[chain.chainId] = chain;\r\n      return acc;\r\n    }, {});\r\n    const sdkMap = {};\r\n    return contracts.map(_ref => {\r\n      let {\r\n        address,\r\n        chainId\r\n      } = _ref;\r\n      if (!chainMap[chainId]) {\r\n        // if we don't have the chain in our list of supported chains then we can't resolve the contract type regardless, don't even try to set up the SDK\r\n        return {\r\n          address,\r\n          chainId,\r\n          contractType: async () => \"custom\",\r\n          metadata: async () => ({\r\n            name: \"\"\r\n          }),\r\n          extensions: async () => []\r\n        };\r\n      }\r\n      try {\r\n        let chainSDK = sdkMap[chainId];\r\n        if (!chainSDK) {\r\n          chainSDK = new ThirdwebSDK(chainId, {\r\n            ...this.options,\r\n            // need to disable readonly settings for this to work\r\n            readonlySettings: undefined,\r\n            // @ts-expect-error - zod doesn't like this\r\n            supportedChains: chains\r\n          }, this.storage);\r\n          sdkMap[chainId] = chainSDK;\r\n        }\r\n        return {\r\n          address,\r\n          chainId,\r\n          contractType: () => chainSDK.resolveContractType(address),\r\n          metadata: async () => (await chainSDK.getContract(address)).metadata.get(),\r\n          extensions: async () => getAllDetectedExtensionNames((await chainSDK.getContract(address)).abi)\r\n        };\r\n      } catch (e) {\r\n        return {\r\n          address,\r\n          chainId,\r\n          contractType: async () => \"custom\",\r\n          metadata: async () => ({\r\n            name: \"\"\r\n          }),\r\n          extensions: async () => []\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the active signer or provider for all contracts\r\n   * @param network - the new signer or provider\r\n   */\r\n  updateSignerOrProvider(network) {\r\n    super.updateSignerOrProvider(network);\r\n    this.updateContractSignerOrProvider();\r\n  }\r\n  updateContractSignerOrProvider() {\r\n    this.wallet.connect(this.getSignerOrProvider());\r\n    this.deployer.updateSignerOrProvider(this.getSignerOrProvider());\r\n    this._publisher.updateSignerOrProvider(this.getSignerOrProvider());\r\n    this.multiChainRegistry.updateSigner(this.getSignerOrProvider());\r\n    this.verifier.updateSignerOrProvider(this.getSignerOrProvider());\r\n    for (const [, contract] of this.contractCache) {\r\n      contract.onNetworkUpdated(this.getSignerOrProvider());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an instance of a Custom contract from a json ABI\r\n   * @param address - the address of the deployed contract\r\n   * @param abi - the JSON abi\r\n   * @returns The contract\r\n   * @beta\r\n   * @example\r\n   * ```javascript\r\n   * // Import your ABI from a JSON file\r\n   * import myABI from \"./path/to/myABI.json\";\r\n   *\r\n   * const contract = sdk.getContractFromAbi(\r\n   *   \"{{contract_address}}\",\r\n   *   // Pass in the \"abi\" field from the JSON file\r\n   *   myABI.abi\r\n   * );\r\n   * ```\r\n   */\r\n  async getContractFromAbi(address, abi) {\r\n    const [resolvedAddress, {\r\n      SmartContract\r\n    }] = await Promise.all([resolveAddress(address), import('./smart-contract-f3e34912.browser.esm.js')]);\r\n    if (this.contractCache.has(resolvedAddress)) {\r\n      return this.contractCache.get(resolvedAddress);\r\n    }\r\n    const [, provider] = getSignerAndProvider(this.getSignerOrProvider(), this.options);\r\n    const parsedABI = typeof abi === \"string\" ? JSON.parse(abi) : abi;\r\n    const contract = new SmartContract(this.getSignerOrProvider(), resolvedAddress, await getCompositeABI(resolvedAddress, AbiSchema.parse(parsedABI), provider, this.options, this.storage), this.storageHandler, this.options, (await provider.getNetwork()).chainId);\r\n    this.contractCache.set(resolvedAddress, contract);\r\n    return contract;\r\n  }\r\n\r\n  /**\r\n   * Get the native balance of a given address (wallet or contract)\r\n   * @example\r\n   * ```javascript\r\n   * const balance = await sdk.getBalance(\"0x...\");\r\n   * console.log(balance.displayValue);\r\n   * ```\r\n   * @param address - the address to check the balance for\r\n   */\r\n  async getBalance(address) {\r\n    return fetchCurrencyValue(this.getProvider(), NATIVE_TOKEN_ADDRESS, await this.getProvider().getBalance(await resolveAddress(address)));\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  getPublisher() {\r\n    return this._publisher;\r\n  }\r\n}\r\nfunction addChainToSupportedChains(network, options) {\r\n  if (isChainConfig(network)) {\r\n    options = {\r\n      ...options,\r\n      // @ts-expect-error - we know that the network is assignable despite the readonly mismatch\r\n      supportedChains: [network, ...(options?.supportedChains || [])]\r\n    };\r\n  }\r\n  return options;\r\n}\r\nconst THIRDWEB_DEPLOYER = \"0xdd99b75f095d0c4d5112aCe938e4e6ed962fb024\";\r\n\r\n/**\r\n * Handles deploying new contracts\r\n * @deploy\r\n * @public\r\n */\r\nclass ContractDeployer extends RPCConnectionHandler {\r\n  /**\r\n   * @internal\r\n   * should never be accessed directly, use {@link ContractDeployer.getFactory} instead\r\n   */\r\n\r\n  /**\r\n   * @internal\r\n   * should never be accessed directly, use {@link ContractDeployer.getRegistry} instead\r\n   */\r\n\r\n  transactionListener = event => {\r\n    if (event.status === \"submitted\") {\r\n      this.events.emit(\"contractDeployed\", {\r\n        status: \"submitted\",\r\n        transactionHash: event.transactionHash\r\n      });\r\n    }\r\n  };\r\n  constructor(network, options, storage) {\r\n    super(network, options);\r\n    this.storage = storage;\r\n    this.events = new EventEmitter();\r\n    // Initialize factory and registry (we don't need to make these calls async)\r\n    this.getFactory();\r\n    this.getRegistry();\r\n  }\r\n\r\n  /**\r\n   * Deploys an NFT Collection contract\r\n   *\r\n   * @remarks Deploys an NFT Collection contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployNFTCollection({\r\n   *   name: \"My Collection\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployNFTCollection = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(NFTCollectionInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new NFTDrop contract\r\n   *\r\n   * @remarks Deploys an NFT Drop contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployNFTDrop({\r\n   *   name: \"My Drop\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployNFTDrop = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(NFTDropInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new LoyaltyCard contract\r\n   *\r\n   * @remarks Deploys a LoyaltyCard contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployLoyaltyCard({\r\n   *   name: \"My Loyalty Program\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployLoyaltyCard = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    const parsedMetadata = await LoyaltyCardContractDeploy.parseAsync(metadata);\r\n    const contractURI = await this.storage.upload(parsedMetadata);\r\n    const trustedForwarders = [];\r\n    // add any custom forwarders passed in\r\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\r\n      trustedForwarders.push(...metadata.trusted_forwarders);\r\n    }\r\n    const signerAddress = await this.getSigner()?.getAddress();\r\n    const deployArgs = [signerAddress, parsedMetadata.name, parsedMetadata.symbol, contractURI, trustedForwarders, parsedMetadata.primary_sale_recipient, parsedMetadata.fee_recipient, parsedMetadata.seller_fee_basis_points, parsedMetadata.platform_fee_basis_points, parsedMetadata.platform_fee_recipient];\r\n    return await this.deployReleasedContract.prepare(THIRDWEB_DEPLOYER, \"LoyaltyCard\", deployArgs, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new OpenEditionERC721 contract\r\n   *\r\n   * @remarks Deploys a OpenEdition contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployOpenEdition({\r\n   *   name: \"My Open Edition\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployOpenEdition = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    const parsedMetadata = await DropErc721ContractSchema.deploy.parseAsync(metadata);\r\n    const contractURI = await this.storage.upload(parsedMetadata);\r\n    const trustedForwarders = [];\r\n    // add any custom forwarders passed in\r\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\r\n      trustedForwarders.push(...metadata.trusted_forwarders);\r\n    }\r\n    const signerAddress = await this.getSigner()?.getAddress();\r\n    const deployArgs = [signerAddress, parsedMetadata.name, parsedMetadata.symbol, contractURI, trustedForwarders, parsedMetadata.primary_sale_recipient, parsedMetadata.fee_recipient, parsedMetadata.seller_fee_basis_points];\r\n    return await this.deployPublishedContract.prepare(THIRDWEB_DEPLOYER, \"OpenEditionERC721\", deployArgs, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new SignatureDrop contract\r\n   *\r\n   * @remarks Deploys a SignatureDrop contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deploySignatureDrop({\r\n   *   name: \"My Signature Drop\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deploySignatureDrop = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(SignatureDropInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new Multiwrap contract\r\n   *\r\n   * @remarks Deploys a Multiwrap contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployMultiwrap({\r\n   *   name: \"My Multiwrap\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   * @beta\r\n   */\r\n  deployMultiwrap = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(MultiwrapInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new Edition contract\r\n   *\r\n   * @remarks Deploys an Edition contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployEdition({\r\n   *   name: \"My Edition\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployEdition = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(EditionInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new EditionDrop contract\r\n   *\r\n   * @remarks Deploys an Edition Drop contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployEditionDrop({\r\n   *   name: \"My Edition Drop\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployEditionDrop = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(EditionDropInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new Token contract\r\n   *\r\n   * @remarks Deploys a Token contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployToken({\r\n   *   name: \"My Token\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployToken = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(TokenInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new Token Drop contract\r\n   *\r\n   * @remarks Deploys a Token Drop contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployTokenDrop({\r\n   *   name: \"My Token Drop\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployTokenDrop = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(TokenDropInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new Marketplace contract\r\n   *\r\n   * @remarks Deploys a Marketplace contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployMarketplace({\r\n   *   name: \"My Marketplace\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployMarketplace = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(MarketplaceInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new Marketplace-V3 contract\r\n   *\r\n   * @remarks Deploys a Marketplace-V3 contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployMarketplaceV3({\r\n   *   name: \"My Marketplace\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployMarketplaceV3 = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(MarketplaceV3Initializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new Pack contract\r\n   *\r\n   * @remarks Deploys a Pack contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployPack({\r\n   *   name: \"My Pack\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployPack = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(PackInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new Split contract\r\n   *\r\n   * @remarks Deploys a Split contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deploySplit({\r\n   *   name: \"My Split\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   *   recipients: [\r\n   *    {\r\n   *      address: \"your-address\",\r\n   *      sharesBps: 80 * 100, // 80%\r\n   *    },\r\n   *    {\r\n   *      address: \"another-address\",\r\n   *      sharesBps: 20 * 100, // 20%\r\n   *    },\r\n   *   ],\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deploySplit = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(SplitInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new Vote contract\r\n   *\r\n   * @remarks Deploys an Vote contract and returns the address of the deployed contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const contractAddress = await sdk.deployer.deployVote({\r\n   *   name: \"My Vote\",\r\n   *   primary_sale_recipient: \"your-address\",\r\n   *   voting_token_address: \"your-token-contract-address\",\r\n   * });\r\n   * ```\r\n   * @param metadata - the contract metadata\r\n   * @returns The address of the deployed contract\r\n   */\r\n  deployVote = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    return await this.deployBuiltInContract.prepare(VoteInitializer.contractType, metadata, \"latest\", options);\r\n  });\r\n  deployAirdropERC20 = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    const parsedMetadata = await AirdropContractDeploy.parseAsync(metadata);\r\n    const contractURI = await this.storage.upload(parsedMetadata);\r\n    const trustedForwarders = [];\r\n    // add any custom forwarders passed in\r\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\r\n      trustedForwarders.push(...metadata.trusted_forwarders);\r\n    }\r\n    const signerAddress = await this.getSigner()?.getAddress();\r\n    const deployArgs = [signerAddress, contractURI, trustedForwarders];\r\n    return await this.deployReleasedContract.prepare(THIRDWEB_DEPLOYER, \"AirdropERC20\", deployArgs, \"latest\", options);\r\n  });\r\n  deployAirdropERC721 = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    const parsedMetadata = await AirdropContractDeploy.parseAsync(metadata);\r\n    const contractURI = await this.storage.upload(parsedMetadata);\r\n    const trustedForwarders = [];\r\n    // add any custom forwarders passed in\r\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\r\n      trustedForwarders.push(...metadata.trusted_forwarders);\r\n    }\r\n    const signerAddress = await this.getSigner()?.getAddress();\r\n    const deployArgs = [signerAddress, contractURI, trustedForwarders];\r\n    return await this.deployReleasedContract.prepare(THIRDWEB_DEPLOYER, \"AirdropERC721\", deployArgs, \"latest\", options);\r\n  });\r\n  deployAirdropERC1155 = /* @__PURE__ */buildDeployTransactionFunction(async (metadata, options) => {\r\n    const parsedMetadata = await AirdropContractDeploy.parseAsync(metadata);\r\n    const contractURI = await this.storage.upload(parsedMetadata);\r\n    const trustedForwarders = [];\r\n    // add any custom forwarders passed in\r\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\r\n      trustedForwarders.push(...metadata.trusted_forwarders);\r\n    }\r\n    const signerAddress = await this.getSigner()?.getAddress();\r\n    const deployArgs = [signerAddress, contractURI, trustedForwarders];\r\n    return await this.deployReleasedContract.prepare(THIRDWEB_DEPLOYER, \"AirdropERC1155\", deployArgs, \"latest\", options);\r\n  });\r\n\r\n  /**\r\n   * Deploys a new prebuilt contract\r\n   *\r\n   * @public\r\n   * @param contractType - the type of contract to deploy\r\n   * @param contractMetadata - the metadata to deploy the contract with\r\n   * @param version - the version of the contract to deploy\r\n   * @returns A promise of the address of the newly deployed contract\r\n   */\r\n  deployBuiltInContract = /* @__PURE__ */buildDeployTransactionFunction((() => {\r\n    var _this = this;\r\n    return async function (contractType, contractMetadata) {\r\n      let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\r\n      let options = arguments.length > 3 ? arguments[3] : undefined;\r\n      const signer = _this.getSigner();\r\n      invariant(signer, \"A signer is required to deploy contracts\");\r\n      const parsedMetadata = {\r\n        app_uri: PREBUILT_CONTRACTS_APPURI_MAP[contractType],\r\n        ...(await PREBUILT_CONTRACTS_MAP[contractType].schema.deploy.parseAsync(contractMetadata))\r\n      };\r\n      if (_this.hasLocalFactory()) {\r\n        // old behavior for unit tests, deploy from local factory\r\n        // parse version into the first number of the version string (or undefined if unparseable)\r\n        let parsedVersion = undefined;\r\n        try {\r\n          parsedVersion = parseInt(version);\r\n          if (isNaN(parsedVersion)) {\r\n            parsedVersion = undefined;\r\n          }\r\n        } catch (e) {\r\n          parsedVersion = undefined;\r\n        }\r\n        const factory = await _this.getFactory();\r\n        if (!factory) {\r\n          throw new Error(\"Factory not found\");\r\n        }\r\n        factory.on(EventType.Transaction, _this.transactionListener);\r\n        return factory.deploy.prepare(contractType, parsedMetadata, _this.events, parsedVersion, options, () => {\r\n          factory.off(EventType.Transaction, _this.transactionListener);\r\n        });\r\n      }\r\n\r\n      // For all other chains, fetch from published contracts\r\n      // resolve contract name from type\r\n      const contractName = getContractName(contractType);\r\n      invariant(contractName, \"Contract name not found\");\r\n      // first upload the contract metadata\r\n      const contractURI = await _this.storage.upload(parsedMetadata);\r\n      // then get the deploy arguments\r\n      const constructorParams = await getDeployArguments(contractType, parsedMetadata, contractURI, signer, _this.storage);\r\n\r\n      // fetch the publish URI from the ContractPublisher contract\r\n      const publishedContract = await _this.fetchPublishedContractFromPolygon(THIRDWEB_DEPLOYER, contractName, version);\r\n      return _this.deployContractFromUri.prepare(publishedContract.metadataUri, constructorParams, options);\r\n    };\r\n  })());\r\n\r\n  /**\r\n   * @internal\r\n   * @param contractType - the type of contract to deploy\r\n   */\r\n  async getLatestBuiltInContractVersion(contractType) {\r\n    const factory = await this.getFactory();\r\n    if (!factory) {\r\n      throw new Error(\"Factory not found\");\r\n    }\r\n    return await factory.getLatestVersion(contractType);\r\n  }\r\n\r\n  /**\r\n   * Deploy any published contract by its name\r\n   * @param publisherAddress - the address of the publisher\r\n   * @param contractName - the name of the contract to deploy\r\n   * @param constructorParams - the constructor params to pass to the contract\r\n   *\r\n   * @deprecated use deployPublishedContract instead\r\n   * @internal\r\n   */\r\n  deployReleasedContract = /* @__PURE__ */buildDeployTransactionFunction((() => {\r\n    var _this2 = this;\r\n    return async function (publisherAddress, contractName, constructorParams) {\r\n      let version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\r\n      let options = arguments.length > 4 ? arguments[4] : undefined;\r\n      const publishedContract = await _this2.fetchPublishedContractFromPolygon(publisherAddress, contractName, version);\r\n      return await _this2.deployContractFromUri.prepare(publishedContract.metadataUri, constructorParams, options);\r\n    };\r\n  })());\r\n\r\n  /**\r\n   * Deploy any published contract by its name\r\n   * @param publisherAddress - the address of the publisher\r\n   * @param contractName - the name of the contract to deploy\r\n   * @param constructorParams - the constructor params to pass to the contract\r\n   * @param version - Optional: the version of the contract to deploy or \"latest\"\r\n   * @param options - Optional: the deploy options\r\n   */\r\n  deployPublishedContract = this.deployReleasedContract;\r\n\r\n  /**\r\n   * Deploy any published contract by its name\r\n   * @param contractName - the name of the contract to deploy\r\n   * @param constructorParams - the constructor params to pass to the contract\r\n   * @param publisherAddress - the address of the publisher\r\n   * @param version - Optional: the version of the contract to deploy or \"latest\"\r\n   * @param saltForCreate2 - Optional: salt for create2 deployment, will determine deployment address\r\n   */\r\n  async deployPublishedContractDeterministic(contractName, constructorParams) {\r\n    let publisherAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : THIRDWEB_DEPLOYER;\r\n    let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\r\n    let saltForCreate2 = arguments.length > 4 ? arguments[4] : undefined;\r\n    const signer = this.getSigner();\r\n    invariant(signer, \"Signer is required\");\r\n    return directDeployDeterministicPublished(contractName, publisherAddress, contractVersion, constructorParams, signer, this.storage, this.options.clientId, this.options.secretKey, saltForCreate2);\r\n  }\r\n\r\n  /**\r\n   * Predict Create2 address of a contract\r\n   * @param contractName - the name of the contract\r\n   * @param constructorParams - the constructor params to pass to the contract\r\n   * @param publisherAddres -s the address of the publisher\r\n   * @param version - Optional: the version of the contract to deploy or \"latest\"\r\n   * @param saltForCreate2 - Optional: salt for create2 deployment, will determine deployment address\r\n   */\r\n  async predictAddressDeterministic(contractName, constructorParams) {\r\n    let publisherAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : THIRDWEB_DEPLOYER;\r\n    let contractVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\r\n    let saltForCreate2 = arguments.length > 4 ? arguments[4] : undefined;\r\n    const provider = this.getProvider();\r\n    invariant(provider, \"Provider is required\");\r\n    return predictAddressDeterministicPublished(contractName, publisherAddress, contractVersion, constructorParams, provider, this.storage, this.options.clientId, this.options.secretKey, saltForCreate2);\r\n  }\r\n\r\n  /**\r\n   * Deploy a proxy contract of a given implementation via the given factory\r\n   * @param factoryAddress - the address of the factory\r\n   * @param implementationAddress - the address of the implementation\r\n   * @param implementationAbi - the abi of the implementation\r\n   * @param initializerFunction - the initializer function to call\r\n   * @param initializerArgs - the initializer args to pass to the initializer function\r\n   */\r\n  deployViaFactory = /* @__PURE__ */buildTransactionFunction(async (factoryAddress, implementationAddress, implementationAbi, initializerFunction, initializerArgs, saltForProxyDeploy) => {\r\n    const resolvedFactoryAddress = await resolveAddress(factoryAddress);\r\n    const resolvedImplementationAddress = await resolveAddress(implementationAddress);\r\n    const signer = this.getSigner();\r\n    invariant(signer, \"signer is required\");\r\n    // TODO only require factory interface here - IProxyFactory\r\n    const proxyFactory = new ContractFactory(resolvedFactoryAddress, this.getSignerOrProvider(), this.storage, this.options);\r\n    proxyFactory.on(EventType.Transaction, this.transactionListener);\r\n    return await proxyFactory.deployProxyByImplementation.prepare(resolvedImplementationAddress, implementationAbi, initializerFunction, initializerArgs, this.events, saltForProxyDeploy, () => {\r\n      proxyFactory.off(EventType.Transaction, this.transactionListener);\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Deploy a proxy contract of a given implementation directly\r\n   * @param implementationAddress - the address of the implementation\r\n   * @param implementationAbi - the abi of the implementation\r\n   * @param initializerFunction - the initializer function to call\r\n   * @param initializerArgs - the initializer args to pass to the initializer function\r\n   */\r\n  deployProxy = /* @__PURE__ */buildDeployTransactionFunction(async (implementationAddress, implementationAbi, initializerFunction, initializerArgs) => {\r\n    const resolvedAddress = await resolveAddress(implementationAddress);\r\n    const encodedInitializer = Contract.getInterface(implementationAbi).encodeFunctionData(initializerFunction, initializerArgs);\r\n    const {\r\n      TWProxy__factory\r\n    } = await import('@thirdweb-dev/contracts-js/factories/TWProxy__factory');\r\n    return this.deployContractWithAbi.prepare(TWProxy__factory.abi, TWProxy__factory.bytecode, [resolvedAddress, encodedInitializer]);\r\n  });\r\n\r\n  /**\r\n   * Deploy a proxy contract of a given implementation via thirdweb's Clone factory\r\n   * @param publishMetadataUri - the uri of the publish metadata\r\n   * @param constructorParamValues - the constructor param values\r\n   * @param deployMetadata - the deploy metadata\r\n   * @param signer - the signer to use\r\n   * @param options - the deploy options\r\n   * @internal\r\n   */\r\n  deployViaAutoFactory = /* @__PURE__ */buildDeployTransactionFunction(async (publishMetadataUri, deployMetadata, signer, initializerFunction, paramValues, options) => {\r\n    // any evm deployment flow\r\n\r\n    // 1. Deploy CREATE2 factory (if not already exists)\r\n    const create2Factory = await deployCreate2Factory(signer, options);\r\n\r\n    // 2. get deployment info for any evm\r\n    const deploymentInfo = await getDeploymentInfo(publishMetadataUri, this.storage, this.getProvider(), create2Factory, this.options.clientId, this.options.secretKey);\r\n    const implementationAddress = deploymentInfo.find(i => i.type === \"implementation\")?.transaction.predictedAddress;\r\n\r\n    // 3. deploy infra + plugins + implementation using a throwaway Deployer contract\r\n\r\n    // filter out already deployed contracts (data is empty)\r\n    const transactionsToSend = deploymentInfo.filter(i => i.transaction.data && i.transaction.data.length > 0);\r\n    const transactionsforDirectDeploy = transactionsToSend.filter(i => {\r\n      return i.type !== \"infra\";\r\n    }).map(i => i.transaction);\r\n    const transactionsForThrowawayDeployer = transactionsToSend.filter(i => {\r\n      return i.type === \"infra\";\r\n    }).map(i => i.transaction);\r\n\r\n    // deploy via throwaway deployer, multiple infra contracts in one transaction\r\n    await deployWithThrowawayDeployer(signer, transactionsForThrowawayDeployer, options);\r\n\r\n    // send each transaction directly to Create2 factory\r\n    // process txns one at a time\r\n    for (const tx of transactionsforDirectDeploy) {\r\n      try {\r\n        await deployContractDeterministic(signer, tx, options);\r\n      } catch (e) {\r\n        console.debug(`Error deploying contract at ${tx.predictedAddress}`, e?.message);\r\n        throw e;\r\n      }\r\n    }\r\n    const resolvedImplementationAddress = await resolveAddress(implementationAddress);\r\n\r\n    // 4. deploy proxy with TWStatelessFactory (Clone factory) and return address\r\n    const cloneFactory = await computeCloneFactoryAddress(this.getProvider(), this.storage, create2Factory, this.options.clientId, this.options.secretKey);\r\n    options?.notifier?.(\"deploying\", \"proxy\");\r\n    const proxyDeployTransaction = await this.deployViaFactory.prepare(cloneFactory, resolvedImplementationAddress, deployMetadata.compilerMetadata.abi, initializerFunction, paramValues, options?.saltForProxyDeploy);\r\n    options?.notifier?.(\"deployed\", \"proxy\");\r\n    return proxyDeployTransaction;\r\n  });\r\n\r\n  /**\r\n   * Deploy a proxy contract of a given implementation via a custom factory\r\n   * @param constructorParamValues - the constructor param values\r\n   * @param deployMetadata - the deploy metadata\r\n   * @param signer - the signer to use\r\n   * @param chainId - the chain id to deploy to\r\n   * @internal\r\n   */\r\n  deployViaCustomFactory = /* @__PURE__ */buildDeployTransactionFunction(async (constructorParamValues, deployMetadata, signer, chainId) => {\r\n    const customFactoryAddress = deployMetadata.extendedMetadata?.factoryDeploymentData?.customFactoryInput?.customFactoryAddresses[chainId];\r\n    const resolvedCustomFactoryAddress = await resolveAddress(customFactoryAddress);\r\n    invariant(resolvedCustomFactoryAddress, `customFactoryAddress not found for chainId '${chainId}'`);\r\n    invariant(deployMetadata.extendedMetadata?.factoryDeploymentData?.customFactoryInput?.factoryFunction, `customFactoryFunction not set'`);\r\n    const customFactoryMetadata = await fetchContractMetadataFromAddress(resolvedCustomFactoryAddress, this.getProvider(), this.storage, this.options);\r\n    const factoryFunctionParamTypes = extractFunctionParamsFromAbi(customFactoryMetadata.abi, deployMetadata.extendedMetadata.factoryDeploymentData.customFactoryInput.factoryFunction).map(p => p.type);\r\n    const factoryFunctionparamValues = convertParamValues(factoryFunctionParamTypes, constructorParamValues);\r\n\r\n    // eslint-disable-next-line prefer-const\r\n    let deployedImplementationAddress;\r\n    const deployTransaction = await Transaction.fromContractInfo({\r\n      contractAddress: resolvedCustomFactoryAddress,\r\n      contractAbi: customFactoryMetadata.abi,\r\n      provider: this.getProvider(),\r\n      signer,\r\n      method: deployMetadata.extendedMetadata.factoryDeploymentData.customFactoryInput.factoryFunction,\r\n      args: factoryFunctionparamValues,\r\n      parse: () => {\r\n        return deployedImplementationAddress;\r\n      },\r\n      storage: this.storage\r\n    });\r\n    deployedImplementationAddress = await deployTransaction.simulate();\r\n    return deployTransaction;\r\n  });\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  async getRegistry() {\r\n    // if we already have a registry just return it back\r\n    if (this._registry) {\r\n      return this._registry;\r\n    }\r\n\r\n    // otherwise get the registry address for the active chain and get a new one\r\n\r\n    // have to do it like this otherwise we run it over and over and over\r\n    // \"this._registry\" has to be assigned to the promise upfront.\r\n    return this._registry = this.getProvider().getNetwork().then(async _ref2 => {\r\n      let {\r\n        chainId\r\n      } = _ref2;\r\n      const registryAddress = getContractAddressByChainId(chainId, \"twRegistry\");\r\n      if (!registryAddress) {\r\n        return undefined;\r\n      }\r\n      const TWRegistryABI = (await import('@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json')).default;\r\n      return new ContractRegistry(registryAddress, this.getSignerOrProvider(), this.storage, TWRegistryABI, this.options);\r\n    });\r\n  }\r\n  async getFactory() {\r\n    // if we already have a factory just return it back\r\n    if (this._factory) {\r\n      return this._factory;\r\n    }\r\n\r\n    // otherwise get the factory address for the active chain and get a new one\r\n\r\n    // have to do it like this otherwise we run it over and over and over\r\n    // \"this._factory\" has to be assigned to the promise upfront.\r\n    return this._factory = this.getProvider().getNetwork().then(async _ref3 => {\r\n      let {\r\n        chainId\r\n      } = _ref3;\r\n      const factoryAddress = getContractAddressByChainId(chainId, \"twFactory\");\r\n      if (!factoryAddress) {\r\n        return undefined;\r\n      }\r\n      const factory = new ContractFactory(factoryAddress, this.getSignerOrProvider(), this.storage, this.options);\r\n      return factory;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  updateSignerOrProvider(network) {\r\n    super.updateSignerOrProvider(network);\r\n    this.updateContractSignerOrProvider();\r\n  }\r\n  updateContractSignerOrProvider() {\r\n    // has to be promises now\r\n    this._factory?.then(factory => {\r\n      factory?.updateSignerOrProvider(this.getSignerOrProvider());\r\n    }).catch(() => {\r\n      // ignore\r\n    });\r\n    // has to be promises now\r\n    this._registry?.then(registry => {\r\n      registry?.updateSignerOrProvider(this.getSignerOrProvider());\r\n    }).catch(() => {\r\n      // ignore\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   * @param publishMetadataUri - the uri of the publish metadata\r\n   * @param constructorParamValues - the constructor param values\r\n   * @param options - the deploy options\r\n   */\r\n  deployContractFromUri = /* @__PURE__ */buildDeployTransactionFunction(async (publishMetadataUri, constructorParamValues, options) => {\r\n    const signer = this.getSigner();\r\n    invariant(signer, \"A signer is required\");\r\n    const {\r\n      compilerMetadata,\r\n      extendedMetadata\r\n    } = await fetchAndCacheDeployMetadata(publishMetadataUri, this.storage);\r\n    const forceDirectDeploy = options?.forceDirectDeploy || false;\r\n    const chainId = (await this.getProvider().getNetwork()).chainId;\r\n    const isNetworkEnabled = extendedMetadata?.networksForDeployment?.networksEnabled.includes(chainId) || extendedMetadata?.networksForDeployment?.allNetworks;\r\n    if (extendedMetadata?.networksForDeployment && !isNetworkEnabled && compilerMetadata.name !== \"AccountFactory\" // ignore network restrictions for simple AccountFactory\r\n    ) {\r\n      throw new Error(`Deployments disabled on this network, with chainId: ${chainId}`);\r\n    }\r\n    if (extendedMetadata && extendedMetadata.factoryDeploymentData && (extendedMetadata.isDeployableViaProxy || extendedMetadata.isDeployableViaFactory || extendedMetadata.deployType && extendedMetadata.deployType !== \"standard\") && !forceDirectDeploy) {\r\n      if (extendedMetadata.deployType === \"customFactory\") {\r\n        return await this.deployViaCustomFactory.prepare(constructorParamValues, {\r\n          compilerMetadata,\r\n          extendedMetadata\r\n        }, signer, chainId);\r\n      } else {\r\n        invariant(extendedMetadata.factoryDeploymentData.implementationInitializerFunction, `implementationInitializerFunction not set'`);\r\n        const initializerParamTypes = extractFunctionParamsFromAbi(compilerMetadata.abi, extendedMetadata.factoryDeploymentData.implementationInitializerFunction).map(p => p.type);\r\n        const paramValues = convertParamValues(initializerParamTypes, constructorParamValues);\r\n        const implementationAddress = extendedMetadata.factoryDeploymentData.implementationAddresses[chainId];\r\n        if (!implementationAddress || extendedMetadata.deployType === \"autoFactory\") {\r\n          return await this.deployViaAutoFactory.prepare(publishMetadataUri, {\r\n            compilerMetadata,\r\n            extendedMetadata\r\n          }, signer, extendedMetadata.factoryDeploymentData.implementationInitializerFunction, paramValues, options);\r\n        }\r\n        const resolvedImplementationAddress = await resolveAddress(implementationAddress);\r\n        invariant(resolvedImplementationAddress, `implementationAddress not found for chainId '${chainId}'`);\r\n        if (extendedMetadata.isDeployableViaFactory) {\r\n          // deploy via a factory (prioritise factory)\r\n          invariant(extendedMetadata.factoryDeploymentData.factoryAddresses, \"isDeployableViaFactory is true so factoryAddresses is required\");\r\n          const factoryAddress = extendedMetadata.factoryDeploymentData.factoryAddresses[chainId];\r\n          invariant(factoryAddress, `isDeployableViaFactory is true and factoryAddress not found for chainId '${chainId}'`);\r\n          const resolvedFactoryAddress = await resolveAddress(factoryAddress);\r\n          return await this.deployViaFactory.prepare(resolvedFactoryAddress, resolvedImplementationAddress, compilerMetadata.abi, extendedMetadata.factoryDeploymentData.implementationInitializerFunction, paramValues, options?.saltForProxyDeploy);\r\n        } else if (extendedMetadata.isDeployableViaProxy) {\r\n          // deploy a proxy directly\r\n          return await this.deployProxy.prepare(resolvedImplementationAddress, compilerMetadata.abi, extendedMetadata.factoryDeploymentData.implementationInitializerFunction, paramValues);\r\n        }\r\n      }\r\n    }\r\n    const bytecode = compilerMetadata.bytecode.startsWith(\"0x\") ? compilerMetadata.bytecode : `0x${compilerMetadata.bytecode}`;\r\n    if (!utils.isHexString(bytecode)) {\r\n      throw new Error(`Contract bytecode is invalid.\\n\\n${bytecode}`);\r\n    }\r\n    const constructorParamTypes = extractConstructorParamsFromAbi(compilerMetadata.abi).map(p => p.type);\r\n    const paramValues = convertParamValues(constructorParamTypes, constructorParamValues);\r\n    return this.deployContractWithAbi.prepare(compilerMetadata.abi, bytecode, paramValues);\r\n  });\r\n\r\n  /**\r\n   * @public\r\n   * @param abi - the abi of the contract\r\n   * @param bytecode - the bytecode of the contract\r\n   * @param constructorParams - the constructor params to pass to the contract\r\n   */\r\n  deployContractWithAbi = /* @__PURE__ */buildDeployTransactionFunction(async (abi, bytecode, constructorParams) => {\r\n    const signer = this.getSigner();\r\n    const provider = this.getProvider();\r\n    invariant(signer, \"Signer is required to deploy contracts\");\r\n    const factory = new ContractFactory$1(abi, bytecode).connect(signer);\r\n    return new DeployTransaction({\r\n      args: constructorParams,\r\n      provider,\r\n      signer,\r\n      factory,\r\n      storage: this.storage,\r\n      events: this.events\r\n    });\r\n  });\r\n\r\n  /**\r\n   * @public\r\n   * @param publishMetadataUri - the uri of the publish metadata\r\n   * @param options - the deploy options\r\n   */\r\n  async getTransactionsForDeploy(publishMetadataUri, options) {\r\n    let transactions = [];\r\n    const provider = this.getProvider();\r\n    invariant(provider, \"A provider is required\");\r\n    const {\r\n      extendedMetadata\r\n    } = await fetchAndCacheDeployMetadata(publishMetadataUri, this.storage);\r\n    const forceDirectDeploy = options?.forceDirectDeploy || false;\r\n    if (extendedMetadata && extendedMetadata.factoryDeploymentData && (extendedMetadata.isDeployableViaProxy || extendedMetadata.isDeployableViaFactory || extendedMetadata.deployType === \"autoFactory\") && !forceDirectDeploy) {\r\n      const chainId = (await this.getProvider().getNetwork()).chainId;\r\n      const implementationAddress = extendedMetadata.factoryDeploymentData.implementationAddresses[chainId];\r\n      if (!implementationAddress || extendedMetadata.deployType === \"autoFactory\") {\r\n        const create2FactoryAddress = await getCreate2FactoryAddress(this.getProvider());\r\n        transactions.push({\r\n          contractType: \"create2Factory\",\r\n          addresses: [create2FactoryAddress]\r\n        });\r\n        const deploymentInfo = await getDeploymentInfo(publishMetadataUri, this.storage, this.getProvider(), create2FactoryAddress, this.options.clientId, this.options.secretKey);\r\n        const transactionsToSend = deploymentInfo.filter(i => i.transaction.data && i.transaction.data.length > 0);\r\n        const transactionsforDirectDeploy = transactionsToSend.filter(i => {\r\n          return i.type !== \"infra\";\r\n        }).map(i => i.transaction);\r\n        transactionsforDirectDeploy.forEach(tx => {\r\n          transactions.push({\r\n            contractType: \"preset\",\r\n            addresses: [tx.predictedAddress]\r\n          });\r\n        });\r\n        const transactionsForThrowawayDeployer = transactionsToSend.filter(i => {\r\n          return i.type === \"infra\";\r\n        }).map(i => i.transaction);\r\n        const transactionBatches = createTransactionBatches(transactionsForThrowawayDeployer);\r\n        transactionBatches.forEach(batch => {\r\n          const addresses = batch.map(tx => tx.predictedAddress);\r\n          transactions.push({\r\n            contractType: \"infra\",\r\n            addresses: addresses\r\n          });\r\n        });\r\n      }\r\n      transactions = (await Promise.all(transactions.map(async tx => {\r\n        const addresses = (await Promise.all(tx.addresses.map(async address => {\r\n          const isDeployed = await isContractDeployed(address, provider);\r\n          return isDeployed ? null : address;\r\n        }))).filter(Boolean);\r\n        return addresses.length > 0 ? tx : null;\r\n      }))).filter(Boolean);\r\n      transactions.push({\r\n        contractType: \"proxy\",\r\n        addresses: []\r\n      });\r\n    } else {\r\n      transactions.push({\r\n        contractType: \"custom\",\r\n        addresses: []\r\n      });\r\n    }\r\n    return transactions;\r\n  }\r\n\r\n  /**\r\n   * Listen to all deploy transactions from this deployer\r\n   * @param listener - the listener to add\r\n   */\r\n  addDeployListener(listener) {\r\n    this.events.on(\"contractDeployed\", listener);\r\n  }\r\n\r\n  /**\r\n   * Remove a deploy listener\r\n   * @param listener - the listener to remove\r\n   */\r\n  removeDeployListener(listener) {\r\n    this.events.off(\"contractDeployed\", listener);\r\n  }\r\n\r\n  /**\r\n   * Remove all deploy listeners\r\n   */\r\n  removeAllDeployListeners() {\r\n    this.events.removeAllListeners(\"contractDeployed\");\r\n  }\r\n\r\n  // PRIVATE METHODS\r\n\r\n  async fetchPublishedContractFromPolygon(publisherAddress, contractName, version) {\r\n    const address = await resolveAddress(publisherAddress);\r\n    // TODO don't create a new sdk instance here, instead read from contract directly with provider\r\n    // this will allow moving deployer out of this file and help with tree shaking\r\n    const publishedContract = await new ThirdwebSDK(\"polygon\", {\r\n      clientId: this.options.clientId,\r\n      secretKey: this.options.secretKey\r\n    }, this.storage).getPublisher().getVersion(address, contractName, version);\r\n    if (!publishedContract) {\r\n      throw new Error(`No published contract found for '${contractName}' at version '${version}' by '${address}'`);\r\n    }\r\n    return publishedContract;\r\n  }\r\n  hasLocalFactory() {\r\n    return !!getProcessEnv(\"factoryAddress\");\r\n  }\r\n}\r\n\r\nexport { APPROVED_IMPLEMENTATIONS as A, ContractVerifier as C, LOCAL_NODE_PKEY as L, SUPPORTED_CHAIN_IDS as S, ThirdwebSDK as T, UserWallet as U, ContractDeployer as a, getAllDetectedExtensionNames as b, checkClientIdOrSecretKey as c, verify as d, extractFunctionParamsFromAbi as e, checkVerificationStatus as f, getAllDetectedFeatureNames as g, computeCloneFactoryAddress as h, isVerifiedOnEtherscan as i, getThirdwebContractAddress as j, getEncodedConstructorParamsForThirdwebContract as k, deployCreate2Factory as l, directDeployDeterministic as m, directDeployDeterministicWithUri as n, directDeployDeterministicPublished as o, predictThirdwebContractAddress as p, predictAddressDeterministic as q, predictAddressDeterministicWithUri as r, predictAddressDeterministicPublished as s, convertParamValues as t, getDeployArguments as u, verifyThirdwebPrebuiltImplementation as v, getTrustedForwarders as w, getApprovedImplementation as x, getDefaultTrustedForwarders as y };\r\n", "const GENERATED_ABI = {};\r\n\r\nexport { GENERATED_ABI };\r\n", "[\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_trustedForwarder\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_registry\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"constructor\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"implementation\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"contractType\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"version\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"ImplementationAdded\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"implementation\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"isApproved\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"name\": \"ImplementationApproved\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"implementation\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"proxy\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"deployer\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"ProxyDeployed\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"previousAdminRole\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"newAdminRole\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"name\": \"RoleAdminChanged\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"sender\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"RoleGranted\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": true,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"sender\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"RoleRevoked\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"DEFAULT_ADMIN_ROLE\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"FACTORY_ROLE\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_implementation\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"addImplementation\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"approval\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_implementation\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"_toApprove\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"name\": \"approveImplementation\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"name\": \"currentVersion\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"_type\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"bytes\",\r\n        \"name\": \"_data\",\r\n        \"type\": \"bytes\"\r\n      }\r\n    ],\r\n    \"name\": \"deployProxy\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"_implementation\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"internalType\": \"bytes\",\r\n        \"name\": \"_data\",\r\n        \"type\": \"bytes\"\r\n      },\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"_salt\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"name\": \"deployProxyByImplementation\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"deployedProxy\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"_type\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"bytes\",\r\n        \"name\": \"_data\",\r\n        \"type\": \"bytes\"\r\n      },\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"_salt\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"name\": \"deployProxyDeterministic\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"deployer\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"_type\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"_version\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"getImplementation\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"_type\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"name\": \"getLatestImplementation\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"name\": \"getRoleAdmin\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"index\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"getRoleMember\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"name\": \"getRoleMemberCount\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"grantRole\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"hasRole\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"implementation\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"forwarder\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"isTrustedForwarder\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes[]\",\r\n        \"name\": \"data\",\r\n        \"type\": \"bytes[]\"\r\n      }\r\n    ],\r\n    \"name\": \"multicall\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bytes[]\",\r\n        \"name\": \"results\",\r\n        \"type\": \"bytes[]\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"registry\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"contract TWRegistry\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"renounceRole\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"role\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"account\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"revokeRole\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes4\",\r\n        \"name\": \"interfaceId\",\r\n        \"type\": \"bytes4\"\r\n      }\r\n    ],\r\n    \"name\": \"supportsInterface\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  }\r\n]", "import { _ as hasMatchingAbi, bj as AbiSchema, cv as AmountSchema, ax as getCreate2FactoryAddress, aE as computeDeploymentInfo, av as isContractDeployed, az as getInitBytecodeWithSalt, b7 as BigNumberTransformSchema, b5 as BigNumberSchema, b6 as BigNumberishSchema, b9 as AddressOrEnsSchema } from './index-e7118e8b.browser.esm.js';\r\nimport { utils, BigNumber } from 'ethers';\r\nimport invariant from 'tiny-invariant';\r\nimport { GENERATED_ABI } from '@thirdweb-dev/generated-abis';\r\nimport { z } from 'zod';\r\nimport { C as CommonNFTOutput, a as CommonNFTInput, N as NFTInputOrUriSchema } from './setErc20Allowance-0fd3045e.browser.esm.js';\r\n\r\n/**\r\n * @internal\r\n * @param contractWrapper - The contract wrapper to check\r\n * @param abi - The abi to check\r\n * @returns\r\n */\r\nfunction matchesPrebuiltAbi(contractWrapper, abi) {\r\n  return hasMatchingAbi(AbiSchema.parse(contractWrapper.abi || []), [abi]);\r\n}\r\n\r\nfunction toEther(amount) {\r\n  return utils.formatEther(amount);\r\n}\r\n\r\nfunction toUnits(amount, decimals) {\r\n  return utils.parseUnits(AmountSchema.parse(amount), decimals);\r\n}\r\n\r\nfunction toDisplayValue(amount, decimals) {\r\n  return utils.formatUnits(amount, decimals);\r\n}\r\n\r\n/**\r\n *\r\n * @internal\r\n * @param provider - The provider to use\r\n * @param storage - The storage to use\r\n * @param create2Factory - The create2 factory to use\r\n */\r\nasync function computeNativeTokenAddress(provider, storage, create2Factory, clientId, secretKey) {\r\n  if (!create2Factory || create2Factory === \"\") {\r\n    create2Factory = await getCreate2FactoryAddress(provider);\r\n  }\r\n  return (await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\r\n    contractName: \"WETH9\"\r\n  }, clientId, secretKey)).transaction.predictedAddress;\r\n}\r\n\r\n/**\r\n * Deploy a contract at a deterministic address, using Create2 method\r\n * Address depends on the Create2 factory address.\r\n *\r\n * @internal\r\n *\r\n * @param signer - The signer to use\r\n * @param bytecode - The bytecode to deploy\r\n * @param encodedArgs - The encoded constructor args to use\r\n * @param create2FactoryAddress - The create2 factory address to use\r\n */\r\nasync function deployContractDeterministicRaw(signer, bytecode, encodedArgs, create2FactoryAddress, options, predictedAddress) {\r\n  let gasLimit = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 7000000;\r\n  // Check if the implementation contract is already deployed\r\n  invariant(signer.provider, \"Provider required\");\r\n  const contractDeployed = predictedAddress ? await isContractDeployed(predictedAddress, signer.provider) : false;\r\n  if (!contractDeployed) {\r\n    console.debug(`deploying contract via create2 factory at: ${predictedAddress}`);\r\n    const initBytecodeWithSalt = getInitBytecodeWithSalt(bytecode, encodedArgs);\r\n    const tx = {\r\n      to: create2FactoryAddress,\r\n      data: initBytecodeWithSalt\r\n    };\r\n    try {\r\n      await signer.estimateGas(tx);\r\n    } catch (e) {\r\n      console.debug(\"error estimating gas while deploying prebuilt: \", e);\r\n      tx.gasLimit = BigNumber.from(gasLimit);\r\n    }\r\n    await (await signer.sendTransaction(tx)).wait();\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction getCachedAbiForContract(address) {\r\n  if (address in GENERATED_ABI) {\r\n    return GENERATED_ABI[address];\r\n  }\r\n  return undefined;\r\n}\r\n\r\nlet ProposalState = /*#__PURE__*/function (ProposalState) {\r\n  ProposalState[ProposalState[\"Pending\"] = 0] = \"Pending\";\r\n  ProposalState[ProposalState[\"Active\"] = 1] = \"Active\";\r\n  ProposalState[ProposalState[\"Canceled\"] = 2] = \"Canceled\";\r\n  ProposalState[ProposalState[\"Defeated\"] = 3] = \"Defeated\";\r\n  ProposalState[ProposalState[\"Succeeded\"] = 4] = \"Succeeded\";\r\n  ProposalState[ProposalState[\"Queued\"] = 5] = \"Queued\";\r\n  ProposalState[ProposalState[\"Expired\"] = 6] = \"Expired\";\r\n  ProposalState[ProposalState[\"Executed\"] = 7] = \"Executed\";\r\n  return ProposalState;\r\n}({});\r\n\r\nconst PropertiesInput = /* @__PURE__ */(() => z.object({}).catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\r\n\r\n/**\r\n * @internal\r\n */\r\nconst OptionalPropertiesInput = /* @__PURE__ */(() => z.union([z.array(PropertiesInput), PropertiesInput]).optional())();\r\n\r\n/**\r\n * @internal\r\n */\r\nconst EditionMetadataOutputSchema = /* @__PURE__ */(() => z.object({\r\n  supply: BigNumberSchema,\r\n  metadata: CommonNFTOutput\r\n}))();\r\n\r\n/**\r\n * @internal\r\n */\r\nconst EditionMetadataWithOwnerOutputSchema = /* @__PURE__ */(() => EditionMetadataOutputSchema.extend({\r\n  owner: z.string(),\r\n  quantityOwned: BigNumberSchema\r\n}))();\r\n\r\n/**\r\n * @internal\r\n */\r\nconst EditionMetadataInputSchema = /* @__PURE__ */(() => z.object({\r\n  supply: BigNumberishSchema,\r\n  metadata: CommonNFTInput\r\n}))();\r\n\r\n/**\r\n * @internal\r\n */\r\nconst EditionMetadataInputOrUriSchema = /* @__PURE__ */(() => z.object({\r\n  supply: BigNumberishSchema,\r\n  metadata: NFTInputOrUriSchema\r\n}))();\r\n\r\n/**\r\n * @public\r\n */\r\n\r\n/**\r\n * @public\r\n */\r\n\r\n/**\r\n * @internal\r\n */\r\nconst TokenMintInputSchema = /* @__PURE__ */(() => z.object({\r\n  toAddress: AddressOrEnsSchema,\r\n  amount: AmountSchema\r\n}))();\r\n\r\n/**\r\n * @public\r\n */\r\n\r\nexport { EditionMetadataOutputSchema as E, OptionalPropertiesInput as O, ProposalState as P, TokenMintInputSchema as T, toUnits as a, toDisplayValue as b, computeNativeTokenAddress as c, deployContractDeterministicRaw as d, EditionMetadataWithOwnerOutputSchema as e, EditionMetadataInputSchema as f, getCachedAbiForContract as g, EditionMetadataInputOrUriSchema as h, matchesPrebuiltAbi as m, toEther as t };\r\n", "import { cZ as createLruCache, b3 as getSignerAndProvider, aL as resolveAddress, ak as getCompositeABI, bj as AbiSchema, j as getContractTypeForRemoteName, h as PREBUILT_CONTRACTS_MAP } from './index-e7118e8b.browser.esm.js';\r\nimport { ThirdwebStorage } from '@thirdweb-dev/storage';\r\nimport { Contract, utils } from 'ethers';\r\n\r\nlet STORAGE_CACHE = new ThirdwebStorage();\r\nconst CONTRACT_CACHE = /* @__PURE__ */createLruCache(10);\r\nfunction getContractCacheKey(address, chainId) {\r\n  return `${address}-${chainId}`;\r\n}\r\nfunction inContractCache(address, chainId) {\r\n  const cacheKey = getContractCacheKey(address, chainId);\r\n  return CONTRACT_CACHE.has(cacheKey);\r\n}\r\nfunction getCachedContract(address, chainId) {\r\n  if (!inContractCache(address, chainId)) {\r\n    throw new Error(`Contract ${address} was not found in cache`);\r\n  }\r\n  const cacheKey = getContractCacheKey(address, chainId);\r\n  return CONTRACT_CACHE.get(cacheKey);\r\n}\r\nfunction cacheContract(contract, address, chainId) {\r\n  const cacheKey = getContractCacheKey(address, chainId);\r\n  CONTRACT_CACHE.put(cacheKey, contract);\r\n}\r\nfunction getCachedStorage(storage) {\r\n  return storage || STORAGE_CACHE;\r\n}\r\n\r\nasync function getContractFromAbi(params) {\r\n  const [signer, provider] = getSignerAndProvider(params.network, params.sdkOptions);\r\n  const [resolvedAddress, {\r\n    chainId\r\n  }, {\r\n    SmartContract\r\n  }] = await Promise.all([resolveAddress(params.address), provider.getNetwork(), import('./smart-contract-f3e34912.browser.esm.js')]);\r\n  if (inContractCache(resolvedAddress, chainId)) {\r\n    return getCachedContract(resolvedAddress, chainId);\r\n  }\r\n  const parsedAbi = typeof params.abi === \"string\" ? JSON.parse(params.abi) : params.abi;\r\n  const contract = new SmartContract(signer || provider, resolvedAddress, await getCompositeABI(resolvedAddress, AbiSchema.parse(parsedAbi), provider, params.sdkOptions, getCachedStorage(params.storage)), getCachedStorage(params.storage), params.sdkOptions, chainId);\r\n  cacheContract(contract, resolvedAddress, chainId);\r\n  return contract;\r\n}\r\n\r\nasync function resolveContractType(params) {\r\n  try {\r\n    const IThirdwebContractABI = (await import('@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json')).default;\r\n    const contract = new Contract(params.address, IThirdwebContractABI, params.provider);\r\n    const remoteContractType = utils.toUtf8String(await contract.contractType())\r\n    // eslint-disable-next-line no-control-regex\r\n    .replace(/\\x00/g, \"\");\r\n    return getContractTypeForRemoteName(remoteContractType);\r\n  } catch (err) {\r\n    return \"custom\";\r\n  }\r\n}\r\n\r\nasync function getContract(params) {\r\n  const [signer, provider] = getSignerAndProvider(params.network, params.sdkOptions);\r\n  const [resolvedAddress, {\r\n    chainId\r\n  }, {\r\n    ContractPublisher\r\n  }] = await Promise.all([resolveAddress(params.address), provider.getNetwork(), import('./contract-publisher-ba394bd6.browser.esm.js').then(function (n) { return n.c; })]);\r\n  if (inContractCache(resolvedAddress, chainId)) {\r\n    return getCachedContract(resolvedAddress, chainId);\r\n  }\r\n  if (!params.contractTypeOrAbi || params.contractTypeOrAbi === \"custom\") {\r\n    const contractType = await resolveContractType({\r\n      address: resolvedAddress,\r\n      provider\r\n    });\r\n    if (contractType === \"custom\") {\r\n      const publisher = new ContractPublisher(params.network, params.sdkOptions, getCachedStorage(params.storage));\r\n      try {\r\n        const metadata = await publisher.fetchCompilerMetadataFromAddress(resolvedAddress);\r\n        return getContractFromAbi({\r\n          ...params,\r\n          address: resolvedAddress,\r\n          abi: metadata.abi\r\n        });\r\n      } catch {\r\n        throw new Error(`No ABI found for this contract. Try importing it by visiting: https://thirdweb.com/${chainId}/${resolvedAddress}`);\r\n      }\r\n    } else {\r\n      const abi = await PREBUILT_CONTRACTS_MAP[contractType].getAbi(resolvedAddress, provider, getCachedStorage(params.storage));\r\n      return getContractFromAbi({\r\n        ...params,\r\n        address: resolvedAddress,\r\n        abi\r\n      });\r\n    }\r\n  } else if (typeof params.contractTypeOrAbi === \"string\" && params.contractTypeOrAbi in PREBUILT_CONTRACTS_MAP) {\r\n    const contract = await PREBUILT_CONTRACTS_MAP[params.contractTypeOrAbi].initialize(signer || provider, resolvedAddress, getCachedStorage(params.storage), params.sdkOptions);\r\n    cacheContract(contract, resolvedAddress, chainId);\r\n    return contract;\r\n  } else {\r\n    return getContractFromAbi({\r\n      ...params,\r\n      address: resolvedAddress,\r\n      abi: params.contractTypeOrAbi\r\n    });\r\n  }\r\n}\r\n\r\n// weakmap because if we GC the provider somewhere else we don't need to hold onto the promise anymore\r\nconst CHAIN_ID_CACHE = new WeakMap();\r\n\r\n/**\r\n * A function that returns the chainId for a given network input + sdk options combination.\r\n * This function will cache the promise for the chainId so that it can be reused.\r\n * You can call this function multiple times with the same params and it will only make one request to the provider.\r\n *\r\n * @returns The ChainId\r\n * @internal\r\n */\r\nasync function getChainId(params) {\r\n  const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\r\n  let chainIdPromise;\r\n  // if we already have a promise for the chainId, use that\r\n  if (CHAIN_ID_CACHE.has(provider)) {\r\n    chainIdPromise = CHAIN_ID_CACHE.get(provider);\r\n  } else {\r\n    chainIdPromise = provider.getNetwork()\r\n    // we only want the chainId\r\n    .then(network => network.chainId).catch(err => {\r\n      // in the case where the provider fails we should remove the promise from the cache so we can try again\r\n      CHAIN_ID_CACHE.delete(provider);\r\n      // also re-throw the error so downstream can handle it\r\n      throw err;\r\n    });\r\n    CHAIN_ID_CACHE.set(provider, chainIdPromise);\r\n  }\r\n\r\n  // finally await the promise (will resolve immediately if already in cache and resolved)\r\n  return await chainIdPromise;\r\n}\r\n\r\n/**\r\n * Get the latest block number from a given network.\r\n *\r\n * @example\r\n * ```javascript\r\n * const block = await getBlockNumber({\r\n *  network: \"ethereum\"\r\n * });\r\n * ```\r\n * @returns The latest block number\r\n * @public\r\n */\r\nasync function getBlockNumber(params) {\r\n  const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\r\n  return provider.getBlockNumber();\r\n}\r\nconst BLOCK_PROMISE_CACHE = new Map();\r\n/**\r\n * Get a specific block from a given network.\r\n *\r\n * @example\r\n * ```javascript\r\n * const block = await getBlock({\r\n *  network: \"ethereum\",\r\n *  block: 12345678\r\n * });\r\n * ```\r\n *\r\n * @returns The block for the given block number / block tag\r\n * @public\r\n */\r\nasync function getBlock(params) {\r\n  // first off get the chainId so we can check if we have something in cache for the blockNumber already\r\n  // this is 1 extra call once per possible provider\r\n  const chainId = await getChainId(params);\r\n  const blockTag = params.block;\r\n  const cacheKey = `${chainId}_${blockTag}`;\r\n  let blockPromise;\r\n  if (BLOCK_PROMISE_CACHE.has(cacheKey)) {\r\n    blockPromise = BLOCK_PROMISE_CACHE.get(cacheKey);\r\n  } else {\r\n    const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\r\n    blockPromise = provider.getBlock(blockTag).catch(err => {\r\n      // in the case where the call fails we should remove the promise from the cache so we can try again\r\n      BLOCK_PROMISE_CACHE.delete(cacheKey);\r\n      // also re-throw the error so downstream can handle it\r\n      throw err;\r\n    });\r\n    BLOCK_PROMISE_CACHE.set(cacheKey, blockPromise);\r\n  }\r\n\r\n  // finally await the promise (will resolve immediately if already in cache and resolved)\r\n  return await blockPromise;\r\n}\r\nconst BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE = new Map();\r\n/**\r\n * Get a specific block (with the transactions contained in it) from a given network.\r\n *\r\n * @example\r\n * ```javascript\r\n * const block = await getBlockWithTransactions({\r\n *  network: \"ethereum\",\r\n *  block: 12345678\r\n * });\r\n * ```\r\n *\r\n * @returns The block for the given block number / block tag\r\n * @public\r\n */\r\nasync function getBlockWithTransactions(params) {\r\n  // first off get the chainId so we can check if we have something in cache for the blockNumber already\r\n  // this is 1 extra call once per possible provider\r\n  const chainId = await getChainId(params);\r\n  const blockTag = params.block;\r\n  const cacheKey = `${chainId}_${blockTag}`;\r\n  let blockPromise;\r\n  if (BLOCK_PROMISE_CACHE.has(cacheKey)) {\r\n    blockPromise = BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE.get(cacheKey);\r\n  } else {\r\n    const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\r\n    blockPromise = provider.getBlockWithTransactions(blockTag).catch(err => {\r\n      // in the case where the call fails we should remove the promise from the cache so we can try again\r\n      BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE.delete(cacheKey);\r\n      // also re-throw the error so downstream can handle it\r\n      throw err;\r\n    });\r\n    BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE.set(cacheKey, blockPromise);\r\n  }\r\n\r\n  // finally await the promise (will resolve immediately if already in cache and resolved)\r\n  return await blockPromise;\r\n}\r\n\r\n/**\r\n * Watch for a new block number on a given network.\r\n *\r\n * @example\r\n * ```javascript\r\n * // this will log out the new block number every time a new block is finalized\r\n * const unsubscribe = watchBlockNumber({\r\n *   network: \"ethereum\",\r\n *   onBlockNumber: (blockNumber) => {\r\n *     console.log(\"new block number\", blockNumber);\r\n *   }\r\n * });\r\n * // later on you can call unsubscribe to stop listening for new blocks\r\n * unsubscribe();\r\n * ```\r\n *\r\n * @returns An unsubscribe function that will stop listening for new blocks when called\r\n * @public\r\n */\r\nfunction watchBlockNumber(params) {\r\n  const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\r\n  // start listening\r\n  provider.on(\"block\", params.onBlockNumber);\r\n  // return a function that unsubscribes the listener\r\n  return () => {\r\n    provider.off(\"block\", params.onBlockNumber);\r\n  };\r\n}\r\n/**\r\n * Watch for new blocks on a given network.\r\n *\r\n * @example\r\n * ```javascript\r\n * // this will log out the new block every time a new block is finalized\r\n * const unsubscribe = watchBlock({\r\n *   network: \"ethereum\",\r\n *   onBlock: (block) => {\r\n *     console.log(\"new block\", block);\r\n *   }\r\n * });\r\n * // later on you can call unsubscribe to stop listening for new blocks\r\n * unsubscribe();\r\n * ```\r\n *\r\n * @returns An unsubscribe function that will stop listening for new blocks when called\r\n * @public\r\n */\r\nfunction watchBlock(_ref) {\r\n  let {\r\n    onBlock,\r\n    ...sharedBlockParams\r\n  } = _ref;\r\n  async function onBlockNumber(blockNumber) {\r\n    try {\r\n      onBlock(await getBlock({\r\n        block: blockNumber,\r\n        ...sharedBlockParams\r\n      }));\r\n    } catch (err) {\r\n      // skip the block I guess?\r\n    }\r\n  }\r\n  // start listening and return the unsubscribe function from within watchBlockNumber\r\n  return watchBlockNumber({\r\n    ...sharedBlockParams,\r\n    onBlockNumber\r\n  });\r\n}\r\n/**\r\n * Watch for new blocks on a given network. (Includes parsed transactions)\r\n *\r\n * @example\r\n * ```javascript\r\n * // this will log out the new block every time a new block is finalized\r\n * const unsubscribe = watchBlockWithTransactions({\r\n *   network: \"ethereum\",\r\n *   onBlock: (block) => {\r\n *     console.log(\"new block\", block);\r\n *     console.log(\"new transactions\", block.transactions)\r\n *   }\r\n * });\r\n * // later on you can call unsubscribe to stop listening for new blocks\r\n * unsubscribe();\r\n * ```\r\n *\r\n * @returns An unsubscribe function that will stop listening for new blocks when called\r\n * @public\r\n */\r\nfunction watchBlockWithTransactions(_ref2) {\r\n  let {\r\n    onBlock,\r\n    ...sharedBlockParams\r\n  } = _ref2;\r\n  async function onBlockNumber(blockNumber) {\r\n    try {\r\n      onBlock(await getBlockWithTransactions({\r\n        block: blockNumber,\r\n        ...sharedBlockParams\r\n      }));\r\n    } catch (err) {\r\n      // skip the block I guess?\r\n    }\r\n  }\r\n  // start listening and return the unsubscribe function from within watchBlockNumber\r\n  return watchBlockNumber({\r\n    ...sharedBlockParams,\r\n    onBlockNumber\r\n  });\r\n}\r\n\r\n/**\r\n * Watch for transactions to or from a given address.\r\n *\r\n * @example\r\n * ```javascript\r\n * // this will log out the new transactions every time a new block is finalized\r\n * const unsubscribe = watchTransactions({\r\n *   network: \"ethereum\",\r\n *   address: \"0x1234\",\r\n *   onTransactions: (transactions) => {\r\n *     console.log(\"new transactions\", transactions);\r\n *   }\r\n * });\r\n * // later on you can call unsubscribe to stop listening for new transactions\r\n * unsubscribe();\r\n * ```\r\n *\r\n * @returns An unsubscribe function that will stop listening for new transactions when called\r\n * @public\r\n */\r\nfunction watchTransactions(_ref) {\r\n  let {\r\n    address,\r\n    onTransactions,\r\n    ...sharedBlockParams\r\n  } = _ref;\r\n  // compute the toLowerCase address once so we don't have to do it on every block / transaction\r\n  const lcAddress = address.toLowerCase();\r\n  function onBlock(block) {\r\n    const transactions = block.transactions.filter(tx => {\r\n      // match on from first because it's guaranteed to exist\r\n      if (tx.from.toLowerCase() === lcAddress) {\r\n        // if we have a from address match on that then return true and early exit\r\n        return true;\r\n      }\r\n      // if we have a to address match on that and if it doesn't match then we want to return false anyways :)\r\n      return tx.to?.toLowerCase() === lcAddress;\r\n    });\r\n    // only call the callback if we have transactions to report\r\n    if (transactions.length > 0) {\r\n      onTransactions(transactions);\r\n    }\r\n  }\r\n  return watchBlockWithTransactions({\r\n    ...sharedBlockParams,\r\n    onBlock\r\n  });\r\n}\r\n\r\nexport { getContractFromAbi as a, getChainId as b, getBlock as c, getBlockNumber as d, getBlockWithTransactions as e, watchBlockNumber as f, getContract as g, watchBlockWithTransactions as h, watchTransactions as i, watchBlock as w };\r\n", "export { A as APPROVED_IMPLEMENTATIONS, a as ContractDeployer, C as ContractVerifier, L as LOCAL_NODE_PKEY, S as SUPPORTED_CHAIN_IDS, T as ThirdwebSDK, U as UserWallet, c as checkClientIdOrSecretKey, f as checkVerificationStatus, h as computeCloneFactoryAddress, t as convertParamValues, l as deployCreate2Factory, m as directDeployDeterministic, o as directDeployDeterministicPublished, n as directDeployDeterministicWithUri, e as extractFunctionParamsFromAbi, b as getAllDetectedExtensionNames, g as getAllDetectedFeatureNames, x as getApprovedImplementation, y as getDefaultTrustedForwarders, u as getDeployArguments, k as getEncodedConstructorParamsForThirdwebContract, j as getThirdwebContractAddress, w as getTrustedForwarders, i as isVerifiedOnEtherscan, q as predictAddressDeterministic, s as predictAddressDeterministicPublished, r as predictAddressDeterministicWithUri, p as predictThirdwebContractAddress, d as verify, v as verifyThirdwebPrebuiltImplementation } from './sdk-4ef5aea9.browser.esm.js';\r\nexport { G as ALL_ROLES, bi as AbiObjectSchema, bj as AbiSchema, bh as AbiTypeSchema, b9 as AddressOrEnsSchema, b8 as AddressSchema, v as AdminRoleMissingError, A as AssetNotFoundError, t as AuctionAlreadyStartedError, w as AuctionHasNotEndedError, bc as BYOCContractMetadataSchema, b5 as BigNumberSchema, b7 as BigNumberTransformSchema, b6 as BigNumberishSchema, ar as COMMON_FACTORY, C as CONTRACTS_MAP, aO as CONTRACT_ADDRESSES, ap as CREATE2_FACTORY_BYTECODE, ba as CallOverrideSchema, aS as ChainId, bl as ChainIdToAddressSchema, bC as CommonContractOutputSchema, bB as CommonContractSchema, bF as CommonPlatformFeeSchema, bE as CommonPrimarySaleSchema, bD as CommonRoyaltySchema, bH as CommonSymbolSchema, bG as CommonTrustedForwarderSchema, bz as CompilerMetadataFetchedSchema, by as ContractInfoSchema, bf as CustomContractDeploy, bd as CustomContractInput, be as CustomContractOutput, bg as CustomContractSchema, bm as CustomFactoryInput, au as DEPLOYER_ABI, at as DEPLOYER_BYTECODE, bo as DeployTypeInput, bq as DeploymentNetworkInput, bU as DropErc1155ContractDeploy, bS as DropErc1155ContractInput, bT as DropErc1155ContractOutput, bV as DropErc1155ContractSchema, bQ as DropErc721ContractDeploy, bO as DropErc721ContractInput, bP as DropErc721ContractOutput, bR as DropErc721ContractSchema, D as DuplicateFileNameError, s as DuplicateLeafsError, E as EditionDropInitializer, a as EditionInitializer, aZ as EventType, x as ExtensionNotImplementedError, br as ExtraPublishMetadataSchemaInput, bs as ExtraPublishMetadataSchemaOutput, bn as FactoryDeploymentSchema, r as FetchError, F as FileNameMissingError, bt as FullPublishMetadataSchemaInput, bu as FullPublishMetadataSchemaOutput, u as FunctionDeprecatedError, as as GAS_LIMIT_FOR_DEPLOYER, I as InvalidAddressError, aY as LINK_TOKEN_ADDRESS, L as ListingNotFoundError, bY as MarketplaceContractDeploy, bW as MarketplaceContractInput, bX as MarketplaceContractOutput, bZ as MarketplaceContractSchema, M as MarketplaceInitializer, b as MarketplaceV3Initializer, bI as MerkleSchema, q as MissingOwnerRoleError, o as MissingRoleError, c as MultiwrapInitializer, aW as NATIVE_TOKENS, aV as NATIVE_TOKEN_ADDRESS, N as NFTCollectionInitializer, d as NFTDropInitializer, p as NotEnoughTokensError, n as NotFoundError, aN as OZ_DEFENDER_FORWARDER_ADDRESS, i as PREBUILT_CONTRACTS_APPURI_MAP, h as PREBUILT_CONTRACTS_MAP, c0 as PackContractDeploy, b_ as PackContractInput, b$ as PackContractOutput, c1 as PackContractSchema, P as PackInitializer, bk as PreDeployMetadata, bA as PreDeployMetadataFetchedSchema, bv as ProfileSchemaInput, bw as ProfileSchemaOutput, co as ProposalOutputSchema, bx as PublishedContractSchema, Q as QuantityAboveLimitError, R as RestrictedTransferError, bp as RouterTypeInput, bb as SDKOptionsSchema, aq as SIGNATURE, b4 as SUPPORTED_FEATURES, e as SignatureDropInitializer, bJ as SnapshotEntryInput, bL as SnapshotEntryWithProofSchema, bN as SnapshotInfoSchema, bK as SnapshotInputSchema, bM as SnapshotSchema, f as SplitInitializer, c4 as SplitsContractDeploy, c2 as SplitsContractInput, c3 as SplitsContractOutput, c5 as SplitsContractSchema, S as StaticJsonRpcBatchProvider, aH as THIRDWEB_DEPLOYER, T as TokenDropInitializer, cg as TokenErc1155ContractDeploy, ce as TokenErc1155ContractInput, cf as TokenErc1155ContractOutput, ch as TokenErc1155ContractSchema, c8 as TokenErc20ContractDeploy, c6 as TokenErc20ContractInput, c7 as TokenErc20ContractOutput, c9 as TokenErc20ContractSchema, cc as TokenErc721ContractDeploy, ca as TokenErc721ContractInput, cb as TokenErc721ContractOutput, cd as TokenErc721ContractSchema, g as TokenInitializer, y as TransactionError, U as UploadError, cm as VoteContractDeploy, ck as VoteContractInput, cl as VoteContractOutput, cn as VoteContractSchema, V as VoteInitializer, ci as VoteSettingsInputSchema, cj as VoteSettingsOuputSchema, W as WrongListingTypeError, aA as computeDeploymentAddress, aE as computeDeploymentInfo, aB as computeEOAForwarderAddress, aC as computeForwarderAddress, af as constructAbiFromBytecode, ab as detectFeatures, ac as detectFeaturesFromBytecode, aF as encodeConstructorParamsForImplementation, a0 as extractCommentFromMetadata, a1 as extractConstructorParamsFromAbi, a2 as extractFunctionsFromAbi, a7 as extractIPFSHashFromBytecode, a3 as extractMinimalProxyImplementationAddress, X as fetchAbiFromAddress, aJ as fetchAndCacheDeployMetadata, Y as fetchContractMetadata, K as fetchContractMetadataFromAddress, O as fetchContractMetadataFromBytecode, aa as fetchExtendedReleaseMetadata, a9 as fetchPreDeployMetadata, aI as fetchPublishedContractFromPolygon, a8 as fetchRawPredeployMetadata, ao as fetchSourceFilesFromMetadata, Z as formatCompilerMetadata, ag as getAllDetectedExtensions, ae as getAllDetectedExtensionsFromBytecode, ad as getAllDetectedFeatures, a$ as getChainIdFromNetwork, b0 as getChainIdOrName, a_ as getChainProvider, ak as getCompositeABI, aP as getContractAddressByChainId, J as getContractMetadataFromCache, k as getContractName, aQ as getContractPublisherAddress, j as getContractTypeForRemoteName, ax as getCreate2FactoryAddress, aG as getCreate2FactoryDeploymentInfo, az as getInitBytecodeWithSalt, aD as getKeylessTxn, aR as getMultichainRegistryAddress, aX as getNativeTokenByChainId, b2 as getProviderFromRpcUrl, H as getRoleHash, ay as getSaltHash, b3 as getSignerAndProvider, aU as getSupportedChains, _ as hasMatchingAbi, B as includesErrorMessage, b1 as isChainConfig, av as isContractDeployed, an as isDowngradeVersion, aw as isEIP155Enforced, ai as isExtensionEnabled, ah as isFeatureEnabled, am as isIncrementalVersion, l as isProvider, m as isSigner, aj as joinABIs, $ as matchesAbiFromBytecode, z as parseRevertReason, aL as resolveAddress, a5 as resolveContractUriAndBytecode, a4 as resolveContractUriFromAddress, aK as resolveEns, a6 as resolveImplementation, aT as setSupportedChains, aM as signTypedDataInternal, al as toSemver } from './index-e7118e8b.browser.esm.js';\r\nexport { C as ContractEncoder, f as fetchCurrencyMetadata, a as fetchCurrencyValue, i as isNativeToken } from './fetchCurrencyValue-27d660ae.browser.esm.js';\r\nexport { c as cleanCurrencyAddress } from './cleanCurrencyAddress-f51f872e.browser.esm.js';\r\nexport { n as normalizePriceValue } from './normalizePriceValue-ee13e65c.browser.esm.js';\r\nexport { s as setErc20Allowance } from './setErc20Allowance-0fd3045e.browser.esm.js';\r\nexport { B as BaseSignaturePayloadInput, j as ClaimConditionInputArray, i as ClaimConditionInputSchema, e as ClaimConditionMetadataSchema, k as ClaimConditionOutputSchema, C as ClaimEligibility, l as CurrencySchema, m as CurrencyValueSchema, G as GenericRequest, w as MintRequest1155, M as MintRequest20, v as MintRequest721, x as MintRequest721withQuantity, P as PartialClaimConditionInputSchema, q as Signature1155PayloadInput, r as Signature1155PayloadInputWithTokenId, s as Signature1155PayloadOutput, S as Signature20PayloadInput, n as Signature20PayloadOutput, o as Signature721PayloadInput, p as Signature721PayloadOutput, t as Signature721WithQuantityInput, u as Signature721WithQuantityOutput, a as approveErc20Allowance, c as convertToReadableQuantity, d as createMerkleTreeFromAllowList, b as createSnapshot, f as fetchSnapshotEntryForAddress, g as getProofsForAllowListEntry, h as hashAllowListEntry } from './signature-61410b74.browser.esm.js';\r\nexport { h as hasERC20Allowance } from './hasERC20Allowance-f8e28c92.browser.esm.js';\r\nexport { E as Erc20, a as Erc20SignatureMintable, n as normalizeAmount } from './erc-20-ce512258.browser.esm.js';\r\nexport { h as EditionMetadataInputOrUriSchema, f as EditionMetadataInputSchema, E as EditionMetadataOutputSchema, e as EditionMetadataWithOwnerOutputSchema, O as OptionalPropertiesInput, P as ProposalState, T as TokenMintInputSchema, c as computeNativeTokenAddress, d as deployContractDeterministicRaw, g as getCachedAbiForContract, m as matchesPrebuiltAbi, b as toDisplayValue, t as toEther, a as toUnits } from './token-a47df0f1.browser.esm.js';\r\nexport { E as Erc721, a as Erc721WithQuantitySignatureMintable, t as toWei } from './erc-721-91c6bacf.browser.esm.js';\r\nexport { c as getBlock, d as getBlockNumber, e as getBlockWithTransactions, b as getChainId, g as getContract, a as getContractFromAbi, w as watchBlock, f as watchBlockNumber, h as watchBlockWithTransactions, i as watchTransactions } from './watchTransactions-e6ad162b.browser.esm.js';\r\nexport { b as ContractAppURI, a as ContractEvents, C as ContractMetadata, G as GasCostEstimator, d as detectContractFeature, h as hasFunction } from './contract-appuri-3d68505c.browser.esm.js';\r\nexport { C as ContractRoles } from './contract-roles-423d8c8f.browser.esm.js';\r\nexport { a as ContractOwner, C as ContractRoyalty, D as DelayedReveal } from './contract-owner-1f113a23.browser.esm.js';\r\nexport { C as ContractPrimarySale } from './contract-sales-c7829960.browser.esm.js';\r\nexport { D as DropClaimConditions } from './drop-claim-conditions-171f45b9.browser.esm.js';\r\nexport { D as DropErc1155ClaimConditions, E as Erc1155, a as Erc1155SignatureMintable } from './erc-1155-11567028.browser.esm.js';\r\nexport { A as Account, a as AccountFactory, f as AdminFlag, d as Airdrop1155, b as Airdrop20, c as Airdrop721, C as ContractPublishedMetadata, D as DEFAULT_PERMISSIONS, E as ExtensionManager, P as PermissionSnapshotSchema, h as SignerPermissionRequest, g as SignerPermissionRequestV1, S as SignerPermissionsSchema, e as extractEventsFromAbi } from './airdrop-erc1155-1a0a4b59.browser.esm.js';\r\nexport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\r\nexport { C as ContractPlatformFee } from './contract-platform-fee-789b7ae1.browser.esm.js';\r\nexport { D as DeployTransaction, T as Transaction, e as engineSendFunction, g as getDefaultGasOverrides, a as getDynamicFeeData, b as getGasPrice, c as getPolygonGasPriorityFee, p as prepareGaslessRequest } from './transactions-de84ba20.browser.esm.js';\r\nexport { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers, S as Status } from './marketplacev3-offers-f96181ff.browser.esm.js';\r\nexport { e as extractConstructorParams, a as extractFunctions } from './contract-publisher-ba394bd6.browser.esm.js';\r\nexport { E as EndDateSchema, R as RawDateSchema, S as StartDateSchema, a as assertEnabled } from './assertEnabled-0bc21898.browser.esm.js';\r\nexport { c as createTransactionBatches, d as deployContractDeterministic, a as deployWithThrowawayDeployer, e as estimateGasForDeploy, g as getDeploymentInfo } from './deployContractDeterministic-df492605.browser.esm.js';\r\nexport { a as InterfaceId_IERC1155, I as InterfaceId_IERC721 } from './QueryParams-c67b6cd4.browser.esm.js';\r\nexport { L as ListingType } from './ListingType-cba090cb.browser.esm.js';\r\nexport { V as VoteType } from './Vote-3b66775c.browser.esm.js';\r\nexport { b as ERC1155WrappableSchema, E as ERC20WrappableSchema, a as ERC721WrappableSchema, d as PackMetadataInputSchema, c as PackRewardsOutputSchema, P as PackRewardsSchema } from './pack-98dc5fa2.browser.esm.js';\r\nimport '@thirdweb-dev/storage';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\r\nimport 'ethers';\r\nimport 'eventemitter3';\r\nimport 'tiny-invariant';\r\nimport '@thirdweb-dev/chains';\r\nimport '@thirdweb-dev/generated-abis';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\r\nimport 'zod';\r\nimport '@thirdweb-dev/crypto';\r\nimport 'bn.js';\r\nimport 'bs58';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\r\nimport 'ethers/lib/utils';\r\nimport '@thirdweb-dev/merkletree';\r\nimport 'uuid';\r\nimport 'fast-deep-equal';\r\nimport './marketplace-ad8d6c18.browser.esm.js';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction getRpcUrl(network, clientId) {\r\n  return `https://${network}.rpc.thirdweb.com/${clientId || \"\"}`;\r\n}\r\n\r\n// handle browser vs node global\r\n\r\n// eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\r\nglobalThis.global = globalThis;\r\n\r\nexport { getRpcUrl };\r\n"],
  "mappings": "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",
  "names": ["implementation", "ContractFactory", "THIRDWEB_DEPLOYER", "paramValues", "ProposalState", "ContractPublisher"]
}
