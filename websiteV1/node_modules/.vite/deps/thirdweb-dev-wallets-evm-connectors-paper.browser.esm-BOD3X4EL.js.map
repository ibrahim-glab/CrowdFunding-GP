{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js"],
  "sourcesContent": ["import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\nimport { RecoveryShareManagement, UserStatus } from '@paperxyz/embedded-wallet-service-sdk';\nimport { utils } from 'ethers';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-8e17ffe6.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport 'eventemitter3';\n\nvar _signer = /*#__PURE__*/new WeakMap();\nclass PaperWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", walletIds.paper);\n    _defineProperty(this, \"name\", \"Paper Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.options.chains.findIndex(c => c.chainId === id) === -1;\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getPaperSDK() {\n    if (!this.paper) {\n      this.paper = new Promise(async (resolve, reject) => {\n        const recoveryMethod = this.options.advancedOptions?.recoveryShareManagement;\n        try {\n          const {\n            PaperEmbeddedWalletSdk\n          } = await import('@paperxyz/embedded-wallet-service-sdk');\n          const methodToEnum = {\n            AWS_MANAGED: RecoveryShareManagement.AWS_MANAGED,\n            USER_MANAGED: RecoveryShareManagement.USER_MANAGED\n          };\n          const recoveryShareManagement = recoveryMethod ? methodToEnum[recoveryMethod] : undefined;\n          resolve(new PaperEmbeddedWalletSdk({\n            advancedOptions: {\n              recoveryShareManagement\n            },\n            clientId: this.options.clientId,\n            chain: \"Ethereum\",\n            styles: this.options.styles,\n            onAuthSuccess: this.options.onAuthSuccess\n          }));\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n    return this.paper;\n  }\n  async connect(options) {\n    const paperSDK = await this.getPaperSDK();\n    if (!paperSDK) {\n      throw new Error(\"Paper SDK not initialized\");\n    }\n    const user = await paperSDK.getUser();\n    switch (user.status) {\n      case UserStatus.LOGGED_OUT:\n        {\n          let authResult;\n\n          // Show Google popup\n          if (options?.googleLogin) {\n            const arg = options.googleLogin;\n            authResult = await paperSDK.auth.loginWithGoogle(typeof arg === \"object\" ? arg : undefined);\n          }\n\n          // Headless\n          else if (options?.email && options?.otp) {\n            authResult = await paperSDK.auth.verifyPaperEmailLoginOtp({\n              email: options.email,\n              otp: options.otp,\n              recoveryCode: options.recoveryCode\n            });\n          }\n\n          // Show OTP modal\n          else if (options?.email) {\n            authResult = await paperSDK.auth.loginWithPaperEmailOtp({\n              email: options.email\n            });\n          }\n\n          // Show Full Modal\n          else {\n            authResult = await paperSDK.auth.loginWithPaperModal();\n          }\n          this.user = authResult.user;\n          break;\n        }\n      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n        {\n          if (typeof options?.googleLogin === \"object\") {\n            if (options.googleLogin.closeOpenedWindow && options.googleLogin.openedWindow) {\n              options.googleLogin.closeOpenedWindow(options.googleLogin.openedWindow);\n            }\n          }\n          this.user = user;\n          break;\n        }\n    }\n    if (!this.user) {\n      throw new Error(\"Error connecting User\");\n    }\n    if (options?.chainId) {\n      this.switchChain(options.chainId);\n    }\n    this.setupListeners();\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = await this.paper;\n    await paper?.auth.logout();\n    _classPrivateFieldSet(this, _signer, undefined);\n    this.user = null;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (_classPrivateFieldGet(this, _signer)) {\n      return _classPrivateFieldGet(this, _signer);\n    }\n    if (!this.user) {\n      const paperSDK = await this.getPaperSDK();\n      const user = await paperSDK.getUser();\n      switch (user.status) {\n        case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n      }\n    }\n    const signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    _classPrivateFieldSet(this, _signer, signer);\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n\n    // update chain in wallet\n    await this.user?.wallet.setChain({\n      chain: \"Ethereum\"\n    }); // just pass Ethereum no matter what chain we are going to connect\n\n    // update signer\n    _classPrivateFieldSet(this, _signer, await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    }));\n    this.emit(\"change\", {\n      chain: {\n        id: chainId,\n        unsupported: false\n      }\n    });\n  }\n\n  // private getUser() {\n  //   if (!this.user) {\n  //     throw new Error(\"User not found\");\n  //   }\n  //   return this.user;\n  // }\n\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  async getEmail() {\n    await this.getProvider();\n    if (!this.user) {\n      throw new Error(\"No user found, Paper Wallet is not connected\");\n    }\n    return this.user.authDetails.email;\n  }\n}\n\nexport { PaperWalletConnector };\n"],
  "mappings": "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",
  "names": []
}
