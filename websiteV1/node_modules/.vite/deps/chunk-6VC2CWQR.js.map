{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\r\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\r\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\r\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-9f6736cb.browser.esm.js';\r\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-88295886.browser.esm.js';\r\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\r\nimport { utils, providers } from 'ethers';\r\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\r\nimport '@thirdweb-dev/chains';\r\nimport 'eventemitter3';\r\n\r\nfunction getInjectedName(ethereum) {\r\n  if (!ethereum) {\r\n    return \"Injected\";\r\n  }\r\n  const getName = provider => {\r\n    if (provider.isAvalanche) {\r\n      return \"Core Wallet\";\r\n    }\r\n    if (provider.isBitKeep) {\r\n      return \"BitKeep\";\r\n    }\r\n    if (provider.isBraveWallet) {\r\n      return \"Brave Wallet\";\r\n    }\r\n    if (provider.isCoinbaseWallet) {\r\n      return \"Coinbase Wallet\";\r\n    }\r\n    if (provider.isExodus) {\r\n      return \"Exodus\";\r\n    }\r\n    if (provider.isFrame) {\r\n      return \"Frame\";\r\n    }\r\n    if (provider.isKuCoinWallet) {\r\n      return \"KuCoin Wallet\";\r\n    }\r\n    if (provider.isMathWallet) {\r\n      return \"MathWallet\";\r\n    }\r\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) {\r\n      return \"1inch Wallet\";\r\n    }\r\n    if (provider.isOpera) {\r\n      return \"Opera\";\r\n    }\r\n    if (provider.isPortal) {\r\n      return \"Ripio Portal\";\r\n    }\r\n    if (provider.isTally) {\r\n      return \"Tally\";\r\n    }\r\n    if (provider.isTokenPocket) {\r\n      return \"TokenPocket\";\r\n    }\r\n    if (provider.isTokenary) {\r\n      return \"Tokenary\";\r\n    }\r\n    if (provider.isTrust || provider.isTrustWallet) {\r\n      return \"Trust Wallet\";\r\n    }\r\n    if (provider.isMetaMask) {\r\n      return \"MetaMask\";\r\n    }\r\n  };\r\n\r\n  // Some injected providers detect multiple other providers and create a list at `ethers.providers`\r\n  if (ethereum.providers?.length) {\r\n    // Deduplicate names using Set\r\n    // Coinbase Wallet puts multiple providers in `ethereum.providers`\r\n    const nameSet = new Set();\r\n    let unknownCount = 1;\r\n    for (const provider of ethereum.providers) {\r\n      let name = getName(provider);\r\n      if (!name) {\r\n        name = `Unknown Wallet #${unknownCount}`;\r\n        unknownCount += 1;\r\n      }\r\n      nameSet.add(name);\r\n    }\r\n    const names = [...nameSet];\r\n    if (names.length) {\r\n      return names;\r\n    }\r\n    return names[0] ?? \"Injected\";\r\n  }\r\n  return getName(ethereum) ?? \"Injected\";\r\n}\r\n\r\nvar _provider = /*#__PURE__*/new WeakMap();\r\nclass InjectedConnector extends WagmiConnector {\r\n  constructor(arg) {\r\n    const defaultOptions = {\r\n      shimDisconnect: true,\r\n      getProvider: () => {\r\n        if (assertWindowEthereum(globalThis.window)) {\r\n          return globalThis.window.ethereum;\r\n        }\r\n      }\r\n    };\r\n    const options = {\r\n      ...defaultOptions,\r\n      ...arg.options\r\n    };\r\n    super({\r\n      chains: arg.chains,\r\n      options\r\n    });\r\n    /**\r\n     * Name of the injected connector\r\n     */\r\n    /**\r\n     * Whether the connector is ready to be used\r\n     *\r\n     * `true` if the injected provider is found\r\n     */\r\n    _classPrivateFieldInitSpec(this, _provider, {\r\n      writable: true,\r\n      value: void 0\r\n    });\r\n    _defineProperty(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\r\n    /**\r\n     * handles the `accountsChanged` event from the provider\r\n     * * emits `change` event if connected to a different account\r\n     * * emits `disconnect` event if no accounts available\r\n     */\r\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\r\n      if (accounts.length === 0) {\r\n        this.emit(\"disconnect\");\r\n      } else {\r\n        this.emit(\"change\", {\r\n          account: utils.getAddress(accounts[0])\r\n        });\r\n      }\r\n    });\r\n    /**\r\n     * handles the `chainChanged` event from the provider\r\n     * * emits `change` event if connected to a different chain\r\n     */\r\n    _defineProperty(this, \"onChainChanged\", chainId => {\r\n      const id = normalizeChainId(chainId);\r\n      const unsupported = this.isChainUnsupported(id);\r\n      this.emit(\"change\", {\r\n        chain: {\r\n          id,\r\n          unsupported\r\n        }\r\n      });\r\n    });\r\n    /**\r\n     * handles the `disconnect` event from the provider\r\n     * * emits `disconnect` event\r\n     */\r\n    _defineProperty(this, \"onDisconnect\", async error => {\r\n      // We need this as MetaMask can emit the \"disconnect\" event upon switching chains.\r\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\r\n      // https://github.com/MetaMask/providers/pull/120\r\n      if (error.code === 1013) {\r\n        const provider = await this.getProvider();\r\n        if (provider) {\r\n          try {\r\n            const isAuthorized = await this.getAccount();\r\n            if (isAuthorized) {\r\n              return;\r\n            }\r\n          } catch {\r\n            // If we can't get the account anymore, continue with disconnect\r\n          }\r\n        }\r\n      }\r\n      this.emit(\"disconnect\");\r\n\r\n      // Remove `shimDisconnect` => it signals that wallet is disconnected\r\n      if (this.options.shimDisconnect) {\r\n        await this.connectorStorage.removeItem(this.shimDisconnectKey);\r\n      }\r\n    });\r\n    const _provider2 = options.getProvider();\r\n\r\n    // set the name of the connector\r\n    if (typeof options.name === \"string\") {\r\n      // if name is given, use that\r\n      this.name = options.name;\r\n    } else if (_provider2) {\r\n      // if injected provider is detected, get name from it\r\n      const detectedName = getInjectedName(_provider2);\r\n      if (options.name) {\r\n        this.name = options.name(detectedName);\r\n      } else {\r\n        if (typeof detectedName === \"string\") {\r\n          this.name = detectedName;\r\n        } else {\r\n          this.name = detectedName[0];\r\n        }\r\n      }\r\n    } else {\r\n      // else default to \"Injected\"\r\n      this.name = \"Injected\";\r\n    }\r\n    this.id = \"injected\";\r\n    this.ready = !!_provider2;\r\n    this.connectorStorage = arg.connectorStorage;\r\n  }\r\n\r\n  /**\r\n   * * Connect to the injected provider\r\n   * * switch to the given chain if `chainId` is specified as an argument\r\n   */\r\n  async connect() {\r\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    try {\r\n      const provider = await this.getProvider();\r\n      if (!provider) {\r\n        throw new ConnectorNotFoundError();\r\n      }\r\n      this.setupListeners();\r\n\r\n      // emit \"connecting\" event\r\n      this.emit(\"message\", {\r\n        type: \"connecting\"\r\n      });\r\n\r\n      // request account addresses from injected provider\r\n      const accountAddresses = await provider.request({\r\n        method: \"eth_requestAccounts\"\r\n      });\r\n\r\n      // get the first account address\r\n      const firstAccountAddress = utils.getAddress(accountAddresses[0]);\r\n\r\n      // Switch to given chain if a chainId is specified\r\n      let connectedChainId = await this.getChainId();\r\n      // Check if currently connected chain is unsupported\r\n      // chainId is considered unsupported if chainId is not in the list of this.chains array\r\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\r\n\r\n      // if chainId is specified and it is not the same as the currently connected chain\r\n      if (options.chainId && connectedChainId !== options.chainId) {\r\n        // switch to the given chain\r\n        try {\r\n          await this.switchChain(options.chainId);\r\n          // recalculate connectedChainId and isUnsupported\r\n          connectedChainId = options.chainId;\r\n          isUnsupported = this.isChainUnsupported(options.chainId);\r\n        } catch (e) {\r\n          console.error(`Could not switch to chain id: ${options.chainId}`, e);\r\n        }\r\n      }\r\n\r\n      // if shimDisconnect is enabled\r\n      if (this.options.shimDisconnect) {\r\n        // add the shim shimDisconnectKey => it signals that wallet is connected\r\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\r\n      }\r\n      const connectionInfo = {\r\n        account: firstAccountAddress,\r\n        chain: {\r\n          id: connectedChainId,\r\n          unsupported: isUnsupported\r\n        },\r\n        provider\r\n      };\r\n      this.emit(\"connect\", connectionInfo);\r\n      return connectionInfo;\r\n    } catch (error) {\r\n      if (this.isUserRejectedRequestError(error)) {\r\n        throw new UserRejectedRequestError(error);\r\n      }\r\n      if (error.code === -32002) {\r\n        throw new ResourceUnavailableError(error);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * disconnect from the injected provider\r\n   */\r\n  async disconnect() {\r\n    // perform cleanup\r\n    const provider = await this.getProvider();\r\n    if (!provider?.removeListener) {\r\n      return;\r\n    }\r\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\r\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\r\n    provider.removeListener(\"disconnect\", this.onDisconnect);\r\n\r\n    // if shimDisconnect is enabled\r\n    if (this.options.shimDisconnect) {\r\n      // Remove the shimDisconnectKey => it signals that wallet is disconnected\r\n      await this.connectorStorage.removeItem(this.shimDisconnectKey);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns The first account address from the injected provider\r\n   */\r\n  async getAccount() {\r\n    const provider = await this.getProvider();\r\n    if (!provider) {\r\n      throw new ConnectorNotFoundError();\r\n    }\r\n    const accounts = await provider.request({\r\n      method: \"eth_accounts\"\r\n    });\r\n\r\n    // return checksum address\r\n    // https://docs.ethers.org/v5/api/utils/address/#utils-getAddress\r\n    return utils.getAddress(accounts[0]);\r\n  }\r\n\r\n  /**\r\n   * @returns The `chainId` of the currently connected chain from injected provider normalized to a `number`\r\n   */\r\n  async getChainId() {\r\n    const provider = await this.getProvider();\r\n    if (!provider) {\r\n      throw new ConnectorNotFoundError();\r\n    }\r\n    return provider.request({\r\n      method: \"eth_chainId\"\r\n    }).then(normalizeChainId);\r\n  }\r\n\r\n  /**\r\n   * get the injected provider\r\n   */\r\n  async getProvider() {\r\n    const provider = this.options.getProvider();\r\n    if (provider) {\r\n      _classPrivateFieldSet(this, _provider, provider);\r\n      // setting listeners\r\n    }\r\n    return _classPrivateFieldGet(this, _provider);\r\n  }\r\n\r\n  /**\r\n   * get a `signer` for given `chainId`\r\n   */\r\n  async getSigner() {\r\n    let {\r\n      chainId\r\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\r\n\r\n    // ethers.providers.Web3Provider\r\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns `true` if the connector is connected and address is available, else `false`\r\n   */\r\n  async isAuthorized() {\r\n    try {\r\n      // `false` if connector is disconnected\r\n      if (this.options.shimDisconnect &&\r\n      // If shim does not exist in storage, wallet is disconnected\r\n      !Boolean(await this.connectorStorage.getItem(this.shimDisconnectKey))) {\r\n        return false;\r\n      }\r\n      const provider = await this.getProvider();\r\n      if (!provider) {\r\n        throw new ConnectorNotFoundError();\r\n      }\r\n      // `false` if no account address available, else `true`\r\n      const account = await this.getAccount();\r\n      return !!account;\r\n    } catch {\r\n      // `false` if any error thrown\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * switch to given chain\r\n   */\r\n  async switchChain(chainId) {\r\n    const provider = await this.getProvider();\r\n    if (!provider) {\r\n      throw new ConnectorNotFoundError();\r\n    }\r\n    const chainIdHex = utils.hexValue(chainId);\r\n    try {\r\n      // request provider to switch to given chainIdHex\r\n      await provider.request({\r\n        method: \"wallet_switchEthereumChain\",\r\n        params: [{\r\n          chainId: chainIdHex\r\n        }]\r\n      });\r\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\r\n      if (chain) {\r\n        return chain;\r\n      }\r\n      return {\r\n        chainId: chainId,\r\n        name: `Chain ${chainIdHex}`,\r\n        slug: `${chainIdHex}`,\r\n        nativeCurrency: {\r\n          name: \"Ether\",\r\n          decimals: 18,\r\n          symbol: \"ETH\"\r\n        },\r\n        rpc: [\"\"],\r\n        chain: \"\",\r\n        shortName: \"\",\r\n        testnet: true\r\n      };\r\n    } catch (error) {\r\n      // if could not switch to given chainIdHex\r\n\r\n      // if tried to connect to a chain that is not configured\r\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\r\n      if (!chain) {\r\n        throw new ChainNotConfiguredError({\r\n          chainId,\r\n          connectorId: this.id\r\n        });\r\n      }\r\n\r\n      // if chain is not added to provider\r\n      if (error.code === 4902 ||\r\n      // Unwrapping for MetaMask Mobile\r\n      // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\r\n      error?.data?.originalError?.code === 4902) {\r\n        try {\r\n          // request provider to add chain\r\n          await provider.request({\r\n            method: \"wallet_addEthereumChain\",\r\n            params: [{\r\n              chainId: chainIdHex,\r\n              chainName: chain.name,\r\n              nativeCurrency: chain.nativeCurrency,\r\n              rpcUrls: getValidPublicRPCUrl(chain),\r\n              // no client id on purpose here\r\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\r\n            }]\r\n          });\r\n          return chain;\r\n        } catch (addError) {\r\n          // if user rejects request to add chain\r\n          if (this.isUserRejectedRequestError(addError)) {\r\n            throw new UserRejectedRequestError(error);\r\n          }\r\n\r\n          // else other error\r\n          throw new AddChainError();\r\n        }\r\n      }\r\n      if (this.isUserRejectedRequestError(error)) {\r\n        throw new UserRejectedRequestError(error);\r\n      }\r\n      throw new SwitchChainError(error);\r\n    }\r\n  }\r\n  async setupListeners() {\r\n    const provider = await this.getProvider();\r\n    if (provider.on) {\r\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\r\n      provider.on(\"chainChanged\", this.onChainChanged);\r\n      provider.on(\"disconnect\", this.onDisconnect);\r\n    }\r\n  }\r\n  isUserRejectedRequestError(error) {\r\n    return error.code === 4001;\r\n  }\r\n}\r\n\r\nexport { InjectedConnector };\r\n"],
  "mappings": "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",
  "names": []
}
