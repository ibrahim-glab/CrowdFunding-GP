{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.browser.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\r\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError } from '../../../../dist/errors-9f6736cb.browser.esm.js';\r\nimport { w as walletIds } from '../../../../dist/walletIds-8e17ffe6.browser.esm.js';\r\nimport { InjectedConnector } from '../../injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js';\r\nimport { utils } from 'ethers';\r\nimport { g as getInjectedCryptoDefiWalletProvider } from '../../../../dist/getInjectedCryptoDefiWalletProvider-3a00394e.browser.esm.js';\r\nimport '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\r\nimport '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\r\nimport '@thirdweb-dev/chains';\r\nimport 'eventemitter3';\r\nimport '../../../../dist/assertWindowEthereum-88295886.browser.esm.js';\r\nimport '../../../../dist/url-a45219bd.browser.esm.js';\r\nimport '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\r\n\r\nclass CryptoDefiWalletConnector extends InjectedConnector {\r\n  constructor(arg) {\r\n    const defaultOptions = {\r\n      name: \"Crypto Defi Wallet\",\r\n      shimDisconnect: true,\r\n      shimChainChangedDisconnect: true,\r\n      getProvider: getInjectedCryptoDefiWalletProvider\r\n    };\r\n    const options = {\r\n      ...defaultOptions,\r\n      ...arg.options\r\n    };\r\n    super({\r\n      chains: arg.chains,\r\n      options,\r\n      connectorStorage: arg.connectorStorage\r\n    });\r\n    _defineProperty(this, \"id\", walletIds.cryptoDefiWallet);\r\n  }\r\n\r\n  /**\r\n   * Connect to injected DefiWallet provider\r\n   */\r\n  async connect() {\r\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    try {\r\n      const provider = await this.getProvider();\r\n      if (!provider) {\r\n        throw new ConnectorNotFoundError();\r\n      }\r\n      this.setupListeners();\r\n\r\n      // emit \"connecting\" event\r\n      this.emit(\"message\", {\r\n        type: \"connecting\"\r\n      });\r\n\r\n      // Attempt to show wallet select prompt with `wallet_requestPermissions` when\r\n      // `shimDisconnect` is active and account is in disconnected state (flag in storage)\r\n      let account = null;\r\n      if (this.options?.shimDisconnect && !Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))) {\r\n        account = await this.getAccount().catch(() => null);\r\n        const isConnected = !!account;\r\n        if (isConnected) {\r\n          // Attempt to show another prompt for selecting wallet if already connected\r\n          try {\r\n            await provider.request({\r\n              method: \"wallet_requestPermissions\",\r\n              params: [{\r\n                eth_accounts: {}\r\n              }]\r\n            });\r\n          } catch (error) {\r\n            // Not all injected providers support `wallet_requestPermissions` (e.g. iOS).\r\n            // Only bubble up error if user rejects request\r\n            if (this.isUserRejectedRequestError(error)) {\r\n              throw new UserRejectedRequestError(error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // if account is not already set, request accounts and use the first account\r\n      if (!account) {\r\n        const accounts = await provider.request({\r\n          method: \"eth_requestAccounts\"\r\n        });\r\n        account = utils.getAddress(accounts[0]);\r\n      }\r\n\r\n      // get currently connected chainId\r\n      let connectedChainId = await this.getChainId();\r\n      // check if connected chain is unsupported\r\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\r\n\r\n      // if chainId is given, but does not match the currently connected chainId, switch to the given chainId\r\n      if (options.chainId && connectedChainId !== options.chainId) {\r\n        try {\r\n          await this.switchChain(options.chainId);\r\n          // recalculate the chainId and isUnsupported\r\n          connectedChainId = options.chainId;\r\n          isUnsupported = this.isChainUnsupported(options.chainId);\r\n        } catch (e) {\r\n          console.error(`Could not switch to chain id : ${options.chainId}`, e);\r\n        }\r\n      }\r\n\r\n      // if shimDisconnect is enabled\r\n      if (this.options?.shimDisconnect) {\r\n        // add shimDisconnectKey in storage - this signals that connector is \"connected\"\r\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\r\n      }\r\n      const connectionInfo = {\r\n        chain: {\r\n          id: connectedChainId,\r\n          unsupported: isUnsupported\r\n        },\r\n        provider: provider,\r\n        account\r\n      };\r\n      this.emit(\"connect\", connectionInfo);\r\n      return connectionInfo;\r\n    } catch (error) {\r\n      if (this.isUserRejectedRequestError(error)) {\r\n        throw new UserRejectedRequestError(error);\r\n      }\r\n      if (error.code === -32002) {\r\n        throw new ResourceUnavailableError(error);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport { CryptoDefiWalletConnector };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAUA,IAAM,4BAAN,cAAwC,kBAAkB;AAAA,EACxD,YAAY,KAAK;AACf,UAAM,iBAAiB;AAAA,MACrB,MAAM;AAAA,MACN,gBAAgB;AAAA,MAChB,4BAA4B;AAAA,MAC5B,aAAa;AAAA,IACf;AACA,UAAM,UAAU;AAAA,MACd,GAAG;AAAA,MACH,GAAG,IAAI;AAAA,IACT;AACA,UAAM;AAAA,MACJ,QAAQ,IAAI;AAAA,MACZ;AAAA,MACA,kBAAkB,IAAI;AAAA,IACxB,CAAC;AACD,oBAAgB,MAAM,MAAM,UAAU,gBAAgB;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU;AArClB;AAsCI,QAAI,UAAU,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI,CAAC;AACnF,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,YAAY;AACxC,UAAI,CAAC,UAAU;AACb,cAAM,IAAI,uBAAuB;AAAA,MACnC;AACA,WAAK,eAAe;AAGpB,WAAK,KAAK,WAAW;AAAA,QACnB,MAAM;AAAA,MACR,CAAC;AAID,UAAI,UAAU;AACd,YAAI,UAAK,YAAL,mBAAc,mBAAkB,CAAC,QAAQ,KAAK,iBAAiB,QAAQ,KAAK,iBAAiB,CAAC,GAAG;AACnG,kBAAU,MAAM,KAAK,WAAW,EAAE,MAAM,MAAM,IAAI;AAClD,cAAM,cAAc,CAAC,CAAC;AACtB,YAAI,aAAa;AAEf,cAAI;AACF,kBAAM,SAAS,QAAQ;AAAA,cACrB,QAAQ;AAAA,cACR,QAAQ,CAAC;AAAA,gBACP,cAAc,CAAC;AAAA,cACjB,CAAC;AAAA,YACH,CAAC;AAAA,UACH,SAAS,OAAO;AAGd,gBAAI,KAAK,2BAA2B,KAAK,GAAG;AAC1C,oBAAM,IAAI,yBAAyB,KAAK;AAAA,YAC1C;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAGA,UAAI,CAAC,SAAS;AACZ,cAAM,WAAW,MAAM,SAAS,QAAQ;AAAA,UACtC,QAAQ;AAAA,QACV,CAAC;AACD,kBAAU,cAAM,WAAW,SAAS,CAAC,CAAC;AAAA,MACxC;AAGA,UAAI,mBAAmB,MAAM,KAAK,WAAW;AAE7C,UAAI,gBAAgB,KAAK,mBAAmB,gBAAgB;AAG5D,UAAI,QAAQ,WAAW,qBAAqB,QAAQ,SAAS;AAC3D,YAAI;AACF,gBAAM,KAAK,YAAY,QAAQ,OAAO;AAEtC,6BAAmB,QAAQ;AAC3B,0BAAgB,KAAK,mBAAmB,QAAQ,OAAO;AAAA,QACzD,SAAS,GAAG;AACV,kBAAQ,MAAM,kCAAkC,QAAQ,OAAO,IAAI,CAAC;AAAA,QACtE;AAAA,MACF;AAGA,WAAI,UAAK,YAAL,mBAAc,gBAAgB;AAEhC,cAAM,KAAK,iBAAiB,QAAQ,KAAK,mBAAmB,MAAM;AAAA,MACpE;AACA,YAAM,iBAAiB;AAAA,QACrB,OAAO;AAAA,UACL,IAAI;AAAA,UACJ,aAAa;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,WAAK,KAAK,WAAW,cAAc;AACnC,aAAO;AAAA,IACT,SAAS,OAAO;AACd,UAAI,KAAK,2BAA2B,KAAK,GAAG;AAC1C,cAAM,IAAI,yBAAyB,KAAK;AAAA,MAC1C;AACA,UAAI,MAAM,SAAS,QAAQ;AACzB,cAAM,IAAI,yBAAyB,KAAK;AAAA,MAC1C;AACA,YAAM;AAAA,IACR;AAAA,EACF;AACF;",
  "names": []
}
