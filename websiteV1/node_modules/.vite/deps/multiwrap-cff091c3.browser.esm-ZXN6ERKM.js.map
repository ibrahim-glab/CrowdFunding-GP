{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/multiwrap-cff091c3.browser.esm.js"],
  "sourcesContent": ["import { utils } from 'ethers';\nimport { C as ContractEncoder, f as fetchCurrencyMetadata } from './fetchCurrencyValue-27d660ae.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-f8e28c92.browser.esm.js';\nimport { n as normalizePriceValue } from './normalizePriceValue-ee13e65c.browser.esm.js';\nimport { dC as MULTIWRAP_CONTRACT_ROLES, cq as ContractWrapper, bj as AbiSchema, dD as MultiwrapContractSchema, aL as resolveAddress } from './index-e7118e8b.browser.esm.js';\nimport { i as isTokenApprovedForTransfer } from './marketplace-ad8d6c18.browser.esm.js';\nimport { b as uploadOrExtractURI } from './QueryParams-c67b6cd4.browser.esm.js';\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-de84ba20.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-3d68505c.browser.esm.js';\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-1f113a23.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-423d8c8f.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-af039d94.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './setErc20Allowance-0fd3045e.browser.esm.js';\nimport '@thirdweb-dev/storage';\nimport './signature-61410b74.browser.esm.js';\nimport '@thirdweb-dev/merkletree';\nimport './assertEnabled-0bc21898.browser.esm.js';\nimport 'uuid';\nimport './erc-721-91c6bacf.browser.esm.js';\nimport './drop-claim-conditions-171f45b9.browser.esm.js';\nimport 'fast-deep-equal';\n\n/**\n * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"multiwrap\");\n * ```\n *\n * @beta\n */\n// TODO create extension wrappers for this\nclass Multiwrap extends StandardErc721 {\n  static contractRoles = MULTIWRAP_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, MultiwrapContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Multiwrap.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the contents of a wrapped token bundle\n   * @example\n   * ```javascript\n   * const contents = await contract.getWrappedContents(wrappedTokenId);\n   * console.log(contents.erc20Tokens);\n   * console.log(contents.erc721Tokens);\n   * console.log(contents.erc1155Tokens);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   */\n  async getWrappedContents(wrappedTokenId) {\n    const wrappedTokens = await this.contractWrapper.read(\"getWrappedContents\", [wrappedTokenId]);\n    const erc20Tokens = [];\n    const erc721Tokens = [];\n    const erc1155Tokens = [];\n    for (const token of wrappedTokens) {\n      switch (token.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), token.assetContract);\n            erc20Tokens.push({\n              contractAddress: token.assetContract,\n              quantity: utils.formatUnits(token.totalAmount, tokenMetadata.decimals)\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId,\n              quantity: token.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Tokens,\n      erc721Tokens,\n      erc1155Tokens\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n   * @example\n   * ```javascript\n   * const tx = await contract.wrap({\n   *   erc20Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     quantity: \"0.8\"\n   *   }],\n   *   erc721Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"0\"\n   *   }],\n   *   erc1155Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"1\",\n   *     quantity: \"2\"\n   *   }]\n   * }, {\n   *     name: \"Wrapped bundle\",\n   *     description: \"This is a wrapped bundle of tokens and NFTs\",\n   *     image: \"ipfs://...\",\n   * });\n   * const receipt = tx.receipt(); // the transaction receipt\n   * const wrappedTokenId = tx.id; // the id of the wrapped token bundle\n   * ```\n   * @param contents - the contents to wrap\n   * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the wrapped token bundle to\n   */\n  wrap = /* @__PURE__ */buildTransactionFunction(async (contents, wrappedTokenMetadata, recipientAddress) => {\n    const [uri, tokens, recipient] = await Promise.all([uploadOrExtractURI(wrappedTokenMetadata, this.storage), this.toTokenStructList(contents), resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress())]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"wrap\",\n      args: [tokens, uri, recipient],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensWrapped\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"TokensWrapped event not found\");\n        }\n        const tokenId = event[0].args.tokenIdOfWrappedToken;\n        return {\n          id: tokenId,\n          receipt,\n          data: () => this.get(tokenId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Unwrap a wrapped token bundle, and retrieve its contents\n   * @example\n   * ```javascript\n   * await contract.unwrap(wrappedTokenId);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the unwrapped tokens to\n   */\n  unwrap = /* @__PURE__ */buildTransactionFunction(async (wrappedTokenId, recipientAddress) => {\n    const recipient = await resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"unwrap\",\n      args: [wrappedTokenId, recipient]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toTokenStructList(contents) {\n    const tokens = [];\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    if (contents.erc20Tokens) {\n      for (const erc20 of contents.erc20Tokens) {\n        const normalizedQuantity = await normalizePriceValue(provider, erc20.quantity, erc20.contractAddress);\n        const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, normalizedQuantity);\n        if (!hasAllowance) {\n          throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${erc20.quantity});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc20.contractAddress,\n          totalAmount: normalizedQuantity,\n          tokenId: 0,\n          tokenType: 0\n        });\n      }\n    }\n    if (contents.erc721Tokens) {\n      for (const erc721 of contents.erc721Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc721.contractAddress,\n          totalAmount: 0,\n          tokenId: erc721.tokenId,\n          tokenType: 1\n        });\n      }\n    }\n    if (contents.erc1155Tokens) {\n      for (const erc1155 of contents.erc1155Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc1155.contractAddress,\n          totalAmount: erc1155.quantity,\n          tokenId: erc1155.tokenId,\n          tokenType: 2\n        });\n      }\n    }\n    return tokens;\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Multiwrap };\n"],
  "mappings": "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",
  "names": []
}
