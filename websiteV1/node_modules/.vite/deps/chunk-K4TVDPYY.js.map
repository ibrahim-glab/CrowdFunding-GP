{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/contract-appuri-3d68505c.browser.esm.js", "../../@thirdweb-dev/sdk/dist/fetchCurrencyValue-27d660ae.browser.esm.js"],
  "sourcesContent": ["import { ai as isExtensionEnabled, c_ as FEATURE_METADATA, K as fetchContractMetadataFromAddress, x as ExtensionNotImplementedError, aZ as EventType, c$ as FEATURE_APPURI } from './index-e7118e8b.browser.esm.js';\r\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-de84ba20.browser.esm.js';\r\nimport { utils } from 'ethers';\r\nimport { replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\r\n\r\n/**\r\n * Type guard for contractWrappers depending on passed feature name\r\n * @internal\r\n * @param contractWrapper - The contract wrapper to check\r\n * @param featureName - The feature name to check\r\n */\r\nfunction detectContractFeature(contractWrapper, featureName) {\r\n  const b = isExtensionEnabled(contractWrapper.abi, featureName, contractWrapper.extensions);\r\n  return b;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @param contractWrapper - The contract wrapper to check\r\n * @param functionName - The function name to check\r\n */\r\nfunction hasFunction(functionName, contractWrapper) {\r\n  return functionName in contractWrapper.readContract.functions;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\n\r\n/**\r\n * Handles metadata for a Contract\r\n * @remarks Read and update metadata for this contract\r\n * @example\r\n * ```javascript\r\n * const contract = await sdk.getContract(\"{{contract_address}}\");\r\n * const metadata = await contract.metadata.get();\r\n * await contract.metadata.set({\r\n *   name: \"My Contract\",\r\n *   description: \"My contract description\"\r\n * })\r\n * ```\r\n * @contract\r\n * @public\r\n */\r\nclass ContractMetadata {\r\n  featureName = FEATURE_METADATA.name;\r\n  constructor(contractWrapper, schema, storage) {\r\n    this.contractWrapper = contractWrapper;\r\n    this.schema = schema;\r\n    this.storage = storage;\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  parseOutputMetadata(metadata) {\r\n    return this.schema.output.parseAsync(metadata);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  parseInputMetadata(metadata) {\r\n    return this.schema.input.parseAsync(metadata);\r\n  }\r\n  /**\r\n   * Get the metadata of this contract\r\n   * @remarks Get the metadata of a contract\r\n   * @example\r\n   * ```javascript\r\n   * const metadata = await contract.metadata.get();\r\n   * console.log(metadata);\r\n   * ```\r\n   * @public\r\n   * @returns The metadata of the given contract\r\n   * @twfeature ContractMetadata\r\n   */\r\n  async get() {\r\n    let data;\r\n    if (this.supportsContractMetadata(this.contractWrapper)) {\r\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\r\n      if (uri && uri.includes(\"://\")) {\r\n        data = await this.storage.downloadJSON(uri);\r\n      }\r\n    }\r\n    if (!data) {\r\n      try {\r\n        // try fetching metadata from bytecode and / or contract itself\r\n        let contractName;\r\n        try {\r\n          if (hasFunction(\"name\", this.contractWrapper)) {\r\n            contractName = await this.contractWrapper.read(\"name\", []);\r\n          }\r\n        } catch (err) {\r\n          // no-op\r\n        }\r\n        let contractSymbol;\r\n        try {\r\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\r\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\r\n          }\r\n        } catch (err) {\r\n          // no-op\r\n        }\r\n        let publishedMetadata;\r\n        try {\r\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\r\n        } catch (err) {}\r\n        data = {\r\n          name: contractName || publishedMetadata?.name,\r\n          symbol: contractSymbol,\r\n          description: publishedMetadata?.info.title\r\n        };\r\n      } catch (e) {\r\n        throw new Error(\"Could not fetch contract metadata\");\r\n      }\r\n    }\r\n    return this.parseOutputMetadata(data);\r\n  }\r\n\r\n  /**\r\n   * Set the metadata of this contract\r\n   * @remarks OVERWRITE the metadata of a contract\r\n   * @example\r\n   * ```javascript\r\n   * await contract.metadata.set({\r\n   *   name: \"My Contract\",\r\n   *   description: \"My contract description\"\r\n   * })\r\n   * ```\r\n   * @public\r\n   * @param metadata - the metadata to set\r\n   * @twfeature ContractMetadata\r\n   */\r\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\r\n    const uri = await this._parseAndUploadMetadata(metadata);\r\n    const wrapper = this.contractWrapper;\r\n    if (this.supportsContractMetadata(wrapper)) {\r\n      return Transaction.fromContractWrapper({\r\n        contractWrapper: this.contractWrapper,\r\n        method: \"setContractURI\",\r\n        args: [uri],\r\n        parse: receipt => {\r\n          return {\r\n            receipt,\r\n            data: this.get\r\n          };\r\n        }\r\n      });\r\n    } else {\r\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Update the metadata of a contract\r\n   * @remarks Update the metadata of a contract\r\n   * @example\r\n   * ```javascript\r\n   * await contract.metadata.update({\r\n   *   description: \"My new contract description\"\r\n   * })\r\n   * ```\r\n   * @public\r\n   * @param metadata - the metadata to update\r\n   * @twfeature ContractMetadata\r\n   * */\r\n  update = /* @__PURE__ */buildTransactionFunction(async metadata => {\r\n    return await this.set.prepare({\r\n      ...(await this.get()),\r\n      ...metadata\r\n    });\r\n  });\r\n\r\n  /**\r\n   *\r\n   * @internal\r\n   * @param metadata - the metadata to set\r\n   * @returns\r\n   */\r\n  async _parseAndUploadMetadata(metadata) {\r\n    const parsedMetadata = await this.parseInputMetadata(metadata);\r\n    return this.storage.upload(parsedMetadata);\r\n  }\r\n  supportsContractMetadata(contractWrapper) {\r\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\r\n  }\r\n}\r\n\r\n/**\r\n * Listen to Contract events in real time\r\n * @contract\r\n * @public\r\n */\r\nclass ContractEvents {\r\n  constructor(contractWrapper) {\r\n    this.contractWrapper = contractWrapper;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to transactions in this contract.\r\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\r\n   * @example\r\n   * ```javascript\r\n   * contract.events.addTransactionListener((event) => {\r\n   *   console.log(event);\r\n   * }\r\n   * ```\r\n   * @param listener - the callback function that will be called on every transaction\r\n   * @public\r\n   */\r\n  addTransactionListener(listener) {\r\n    this.contractWrapper.addListener(EventType.Transaction, listener);\r\n  }\r\n\r\n  /**\r\n   * Remove a transaction listener\r\n   * @remarks Remove a listener that was added with addTransactionListener\r\n   * @example\r\n   * ```javascript\r\n   * contract.events.removeTransactionListener((event) => {\r\n   *  console.log(event);\r\n   * }\r\n   * ```\r\n   * @param listener - the callback function to remove\r\n   * @public\r\n   */\r\n  removeTransactionListener(listener) {\r\n    this.contractWrapper.off(EventType.Transaction, listener);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to contract events\r\n   * @remarks You can add a listener for any contract event to run a function when\r\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\r\n   * you could do the following:\r\n   * @example\r\n   * ```javascript\r\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\r\n   *   console.log(event);\r\n   * });\r\n   * ```\r\n   * @public\r\n   * @param eventName - the event name as defined in the contract\r\n   * @param listener - the callback function that will be called on every new event\r\n   * @returns A function to un-subscribe from the event\r\n   */\r\n  addEventListener(\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  eventName, listener) {\r\n    // validates event, throws error if not found\r\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\r\n    const address = this.contractWrapper.address;\r\n    const filter = {\r\n      address,\r\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\r\n    };\r\n    const wrappedListener = log => {\r\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\r\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\r\n    };\r\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\r\n    return () => {\r\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Listen to all events emitted from this contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * contract.events.listenToAllEvents((event) => {\r\n   *   console.log(event.eventName) // the name of the emitted event\r\n   *   console.log(event.data) // event payload\r\n   * }\r\n   * ```\r\n   * @public\r\n   * @param listener - the callback function that will be called on every new event\r\n   * @returns A function that can be called to stop listening to events\r\n   */\r\n  listenToAllEvents(listener) {\r\n    const address = this.contractWrapper.address;\r\n    const filter = {\r\n      address\r\n    };\r\n    const wrappedListener = log => {\r\n      try {\r\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\r\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\r\n      } catch (e) {\r\n        console.error(\"Could not parse event:\", log, e);\r\n      }\r\n    };\r\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\r\n    return () => {\r\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Remove an event listener from this contract\r\n   * @remarks Remove a listener that was added with addEventListener\r\n   * @example\r\n   * ```javascript\r\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\r\n   *   console.log(event);\r\n   * });\r\n   * ```\r\n   * @public\r\n   * @param eventName - the event name as defined in the contract\r\n   * @param listener - the listener to unregister\r\n   */\r\n  removeEventListener(\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  eventName, listener) {\r\n    // validates event, throws error if not found\r\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\r\n    this.contractWrapper.readContract.off(event.name, listener);\r\n  }\r\n\r\n  /**\r\n   * Remove all listeners on this contract\r\n   * @remarks Remove all listeners from a contract\r\n   * @example\r\n   * ```javascript\r\n   * contract.events.removeAllListeners();\r\n   * ```\r\n   * @public\r\n   */\r\n  removeAllListeners() {\r\n    this.contractWrapper.readContract.removeAllListeners();\r\n    const address = this.contractWrapper.address;\r\n    const filter = {\r\n      address\r\n    };\r\n    this.contractWrapper.getProvider().removeAllListeners(filter);\r\n  }\r\n\r\n  /**\r\n   * Get All Events\r\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\r\n   * @example\r\n   * ```javascript\r\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\r\n   * const filters = {\r\n   *   fromBlock: 0,\r\n   *   toBlock: 1000000,\r\n   * }\r\n   * const events = await contract.events.getAllEvents(filters);\r\n   * console.log(events[0].eventName);\r\n   * console.log(events[0].data);\r\n   * ```\r\n   *\r\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\r\n   * @returns The event objects of the events emitted with event names and data for each event\r\n   */\r\n  async getAllEvents() {\r\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\r\n      fromBlock: 0,\r\n      toBlock: \"latest\",\r\n      order: \"desc\"\r\n    };\r\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\r\n    const orderedEvents = events.sort((a, b) => {\r\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\r\n    });\r\n    return this.parseEvents(orderedEvents);\r\n  }\r\n\r\n  /**\r\n   * Get Events\r\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\r\n   * @example\r\n   * ```javascript\r\n   * // The name of the event to get logs for\r\n   * const eventName = \"Transfer\";\r\n   *\r\n   * // Optionally pass in options to limit the blocks from which events are retrieved\r\n   * const options = {\r\n   *   fromBlock: 0,\r\n   *   toBlock: 1000000, // can also pass \"latest\"\r\n   *   order: \"desc\",\r\n   *   // Configure event filters (filter on indexed event parameters)\r\n   *   filters: {\r\n   *     from: \"0x...\",\r\n   *     to: \"0x...\"\r\n   *   }\r\n   * };\r\n   *\r\n   * const events = await contract.events.getEvents(eventName, options);\r\n   * console.log(events[0].eventName);\r\n   * console.log(events[0].data);\r\n   * ```\r\n   *\r\n   * @param eventName - The name of the event to get logs for\r\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\r\n   * @returns The requested event objects with event data\r\n   */\r\n  async getEvents(eventName) {\r\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\r\n      fromBlock: 0,\r\n      toBlock: \"latest\",\r\n      order: \"desc\"\r\n    };\r\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\r\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\r\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\r\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\r\n    const orderedEvents = events.sort((a, b) => {\r\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\r\n    });\r\n    return this.parseEvents(orderedEvents);\r\n  }\r\n  parseEvents(events) {\r\n    return events.map(e => {\r\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\r\n      if (e.args) {\r\n        const entries = Object.entries(e.args);\r\n        const args = entries.slice(entries.length / 2, entries.length);\r\n        const data = {};\r\n        for (const [key, value] of args) {\r\n          data[key] = value;\r\n        }\r\n        return {\r\n          eventName: e.event || \"\",\r\n          data: data,\r\n          transaction\r\n        };\r\n      }\r\n      return {\r\n        eventName: e.event || \"\",\r\n        data: {},\r\n        transaction\r\n      };\r\n    });\r\n  }\r\n  toContractEvent(event, args, rawLog) {\r\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\r\n    const results = {};\r\n    event.inputs.forEach((param, index) => {\r\n      if (Array.isArray(args[index])) {\r\n        const components = param.components;\r\n        if (components) {\r\n          const arr = args[index];\r\n          if (param.type === \"tuple[]\") {\r\n            // tuple[]\r\n            const objArray = [];\r\n            for (let i = 0; i < arr.length; i++) {\r\n              const tuple = arr[i];\r\n              const obj = {};\r\n              for (let j = 0; j < components.length; j++) {\r\n                const name = components[j].name;\r\n                obj[name] = tuple[j];\r\n              }\r\n              objArray.push(obj);\r\n            }\r\n            results[param.name] = objArray;\r\n          } else {\r\n            // simple tuple\r\n            const obj = {};\r\n            for (let i = 0; i < components.length; i++) {\r\n              const name = components[i].name;\r\n              obj[name] = arr[i];\r\n            }\r\n            results[param.name] = obj;\r\n          }\r\n        }\r\n      } else {\r\n        results[param.name] = args[index];\r\n      }\r\n    });\r\n    return {\r\n      eventName: event.name,\r\n      data: results,\r\n      transaction\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Estimates the gas cost of Contract calls\r\n * @public\r\n */\r\nclass GasCostEstimator {\r\n  constructor(contractWrapper) {\r\n    this.contractWrapper = contractWrapper;\r\n  }\r\n\r\n  /**\r\n   * Estimates the cost of gas in native token of the current chain\r\n   * Pass in the same parameters as the contract's function.\r\n   * @remarks Estimate the cost of gas in native token of the current chain\r\n   * @example\r\n   * ```javascript\r\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\r\n   *   \"0x...\", // receiver\r\n   *   1, // quantity\r\n   *   \"0x...\", // currency\r\n   *   1, // price per token\r\n   *   [], // proofs\r\n   *   1, // proof max quantity per transaction\r\n   * ]);\r\n   * ```\r\n   * @returns The estimated price in native currency (ETH, MATIC, etc) of calling this function\r\n   * @public\r\n   */\r\n  async gasCostOf(\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  fn, args) {\r\n    const [price, gasUnits] = await Promise.all([this.contractWrapper.getProvider().getGasPrice(), this.contractWrapper.estimateGas(fn, args)]);\r\n    return utils.formatEther(gasUnits.mul(price));\r\n  }\r\n\r\n  /**\r\n   * Estimates the gas limit of a transaction\r\n   * Pass in the same parameters as the contract's function.\r\n   * @remarks Estimates the gas limit of a transaction\r\n   * @example\r\n   * ```javascript\r\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\r\n   *   \"0x...\", // receiver\r\n   *   1, // quantity\r\n   *   \"0x...\", // currency\r\n   *   1, // price per token\r\n   *   [], // proofs\r\n   *   1, // proof max quantity per transaction\r\n   * ]);\r\n   * ```\r\n   * @returns The estimated gas limit of the transaction\r\n   * @public\r\n   */\r\n  async gasLimitOf(\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  fn, args) {\r\n    return this.contractWrapper.estimateGas(fn, args);\r\n  }\r\n\r\n  /**\r\n   * Returns the current gas price in gwei\r\n   * @remarks Get the current gas price in gwei\r\n   * @example\r\n   * ```javascript\r\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\r\n   * ```\r\n   * @returns The current gas price in gwei\r\n   * @public\r\n   */\r\n  async currentGasPriceInGwei() {\r\n    const price = await this.contractWrapper.getProvider().getGasPrice();\r\n    return utils.formatUnits(price, \"gwei\");\r\n  }\r\n}\r\n\r\n/**\r\n * Have an official Application URI for this contract.\r\n * @remarks Configure an official Application URI for this contract.\r\n * @example\r\n * ```javascript\r\n * const contract = await sdk.getContract(\"{{contract_address}}\");\r\n * const appURI = await contract.app.get();\r\n * appURI = \"ipfs://some_ipfs_hash\";\r\n *\r\n * await contract.app.set(appURI)\r\n * ```\r\n * @public\r\n */\r\nclass ContractAppURI {\r\n  featureName = FEATURE_APPURI.name;\r\n  constructor(contractWrapper, metadata, storage) {\r\n    this.contractWrapper = contractWrapper;\r\n    this.metadata = metadata;\r\n    this.storage = storage;\r\n  }\r\n\r\n  /**\r\n   * Get App URI\r\n   * @returns The appURI (typically an IPFS hash)\r\n   * @example\r\n   * ```javascript\r\n   * const appURI = await contract.app.get();\r\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\r\n   * ```\r\n   * @twfeature AppURI\r\n   */\r\n  async get() {\r\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\r\n      return await this.contractWrapper.read(\"appURI\", []);\r\n    }\r\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\r\n  }\r\n\r\n  /**\r\n   * Set App URI\r\n   * @param appURI - the uri to set (typically an IPFS hash)\r\n   * @example\r\n   * ```javascript\r\n   * const appURI = \"ipfs://some_ipfs_hash\";\r\n   * await contract.app.set(appURI);\r\n   * ```\r\n   * @twfeature AppURI\r\n   */\r\n  set = /* @__PURE__ */buildTransactionFunction(async appURI => {\r\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\r\n      return Transaction.fromContractWrapper({\r\n        contractWrapper: this.contractWrapper,\r\n        method: \"setAppURI\",\r\n        args: [appURI]\r\n      });\r\n    }\r\n    return await this.metadata.update.prepare({\r\n      app_uri: appURI\r\n    });\r\n  });\r\n}\r\n\r\nexport { ContractMetadata as C, GasCostEstimator as G, ContractEvents as a, ContractAppURI as b, detectContractFeature as d, hasFunction as h };\r\n", "import { constants, Contract, BigNumber, utils } from 'ethers';\r\nimport { aV as NATIVE_TOKEN_ADDRESS, aX as getNativeTokenByChainId } from './index-e7118e8b.browser.esm.js';\r\n\r\n/**\r\n * Encodes and decodes Contract functions\r\n * @contract\r\n * @public\r\n */\r\nclass ContractEncoder {\r\n  constructor(contractWrapper) {\r\n    this.contractWrapper = contractWrapper;\r\n  }\r\n\r\n  /**\r\n   * Encodes the given contract function with argument\r\n   * @returns The encoded data\r\n   */\r\n  encode(fn, args) {\r\n    return this.contractWrapper.readContract.interface.encodeFunctionData(fn, args);\r\n  }\r\n\r\n  /**\r\n   * Decode encoded call data for a given function\r\n   * @param fn - the function to decode\r\n   * @param encodedArgs - the encoded arguments\r\n   */\r\n  decode(fn, encodedArgs) {\r\n    return this.contractWrapper.readContract.interface.decodeFunctionData(fn, encodedArgs);\r\n  }\r\n  decodeResult(fn, encodedArgs) {\r\n    return this.contractWrapper.readContract.interface.decodeFunctionResult(fn, encodedArgs);\r\n  }\r\n}\r\n\r\nfunction isNativeToken(tokenAddress) {\r\n  return tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS || tokenAddress.toLowerCase() === constants.AddressZero;\r\n}\r\n\r\n/**\r\n *\r\n * @param provider - The provider to use\r\n * @param asset - The asset to fetch the metadata for\r\n * @returns\r\n * @internal\r\n */\r\nasync function fetchCurrencyMetadata(provider, asset) {\r\n  if (isNativeToken(asset)) {\r\n    const network = await provider.getNetwork();\r\n    const nativeToken = getNativeTokenByChainId(network.chainId);\r\n    return {\r\n      name: nativeToken.name,\r\n      symbol: nativeToken.symbol,\r\n      decimals: nativeToken.decimals\r\n    };\r\n  } else {\r\n    const ERC20MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json')).default;\r\n    const erc20 = new Contract(asset, ERC20MetadataAbi, provider);\r\n    const [name, symbol, decimals] = await Promise.all([erc20.name(), erc20.symbol(), erc20.decimals()]);\r\n    return {\r\n      name,\r\n      symbol,\r\n      decimals\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param providerOrSigner - The provider or signer to use\r\n * @param asset - The asset to fetch the value for\r\n * @param price - The price to fetch the value for\r\n * @returns\r\n * @internal\r\n */\r\nasync function fetchCurrencyValue(providerOrSigner, asset, price) {\r\n  const metadata = await fetchCurrencyMetadata(providerOrSigner, asset);\r\n  return {\r\n    ...metadata,\r\n    value: BigNumber.from(price),\r\n    displayValue: utils.formatUnits(price, metadata.decimals)\r\n  };\r\n}\r\n\r\nexport { ContractEncoder as C, fetchCurrencyValue as a, fetchCurrencyMetadata as f, isNativeToken as i };\r\n"],
  "mappings": "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",
  "names": []
}
