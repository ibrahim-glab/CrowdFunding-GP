import {
  getValidPublicRPCUrl
} from "./chunk-MZJHFCXF.js";
import {
  _classPrivateMethodGet,
  _classPrivateMethodInitSpec
} from "./chunk-CWQONW34.js";
import {
  walletIds
} from "./chunk-KTVIUD6Q.js";
import {
  SwitchChainError,
  UserRejectedRequestError
} from "./chunk-O5YSCUYX.js";
import {
  WagmiConnector
} from "./chunk-D5DCZF6S.js";
import {
  _classPrivateFieldGet,
  _classPrivateFieldInitSpec,
  _classPrivateFieldSet
} from "./chunk-O3XEUKFA.js";
import {
  _defineProperty
} from "./chunk-NOVSDTX6.js";
import "./chunk-ULMQ5M2J.js";
import "./chunk-DLXTD4FJ.js";
import {
  init_lib7 as init_lib,
  utils_exports
} from "./chunk-BZYH25QF.js";
import {
  lib_exports19 as lib_exports
} from "./chunk-RN5BNASC.js";
import "./chunk-FQ3VPZMN.js";
import "./chunk-S6N5TO4J.js";
import "./chunk-YO67V5O2.js";
import "./chunk-ZNZQX44K.js";
import "./chunk-WZAZHEFN.js";
import "./chunk-3JC5L5ZG.js";
import "./chunk-ZXSTHQ62.js";
import "./chunk-HY2WJTHE.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js
init_lib();
var chainsToRequest = /* @__PURE__ */ new Set([1, 137, 10, 42161, 56]);
var NAMESPACE = "eip155";
var REQUESTED_CHAINS_KEY = "wagmi.requestedChains";
var ADD_ETH_CHAIN_METHOD = "wallet_addEthereumChain";
var LAST_USED_CHAIN_ID = "last-used-chain-id";
var _provider = /* @__PURE__ */ new WeakMap();
var _initProviderPromise = /* @__PURE__ */ new WeakMap();
var _storage = /* @__PURE__ */ new WeakMap();
var _createProvider = /* @__PURE__ */ new WeakSet();
var _isChainsStale = /* @__PURE__ */ new WeakSet();
var _removeListeners = /* @__PURE__ */ new WeakSet();
var _setRequestedChainsIds = /* @__PURE__ */ new WeakSet();
var _getRequestedChainsIds = /* @__PURE__ */ new WeakSet();
var _getNamespaceChainsIds = /* @__PURE__ */ new WeakSet();
var _getNamespaceMethods = /* @__PURE__ */ new WeakSet();
var WalletConnectConnector = class extends WagmiConnector {
  constructor(config) {
    super({
      ...config,
      options: {
        isNewChainsStale: true,
        ...config.options
      }
    });
    _classPrivateMethodInitSpec(this, _getNamespaceMethods);
    _classPrivateMethodInitSpec(this, _getNamespaceChainsIds);
    _classPrivateMethodInitSpec(this, _getRequestedChainsIds);
    _classPrivateMethodInitSpec(this, _setRequestedChainsIds);
    _classPrivateMethodInitSpec(this, _removeListeners);
    _classPrivateMethodInitSpec(this, _isChainsStale);
    _classPrivateMethodInitSpec(this, _createProvider);
    _defineProperty(this, "id", walletIds.walletConnect);
    _defineProperty(this, "name", "WalletConnect");
    _defineProperty(this, "ready", true);
    _classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _initProviderPromise, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _storage, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "onAccountsChanged", (accounts) => {
      if (accounts.length === 0) {
        this.emit("disconnect");
      } else {
        if (accounts[0]) {
          this.emit("change", {
            account: utils_exports.getAddress(accounts[0])
          });
        }
      }
    });
    _defineProperty(this, "onChainChanged", async (chainId) => {
      const id = Number(chainId);
      const unsupported = this.isChainUnsupported(id);
      await _classPrivateFieldGet(this, _storage).setItem(LAST_USED_CHAIN_ID, String(chainId));
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    _defineProperty(this, "onDisconnect", async () => {
      await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, []);
      await _classPrivateFieldGet(this, _storage).removeItem(LAST_USED_CHAIN_ID);
      this.emit("disconnect");
    });
    _defineProperty(this, "onDisplayUri", (uri) => {
      this.emit("message", {
        type: "display_uri",
        data: uri
      });
    });
    _defineProperty(this, "onConnect", () => {
      this.emit("connect", {
        provider: _classPrivateFieldGet(this, _provider)
      });
    });
    _classPrivateFieldSet(this, _storage, config.options.storage);
    _classPrivateMethodGet(this, _createProvider, _createProvider2).call(this);
    this.filteredChains = this.chains.length > 50 ? this.chains.filter((c) => {
      return chainsToRequest.has(c.chainId);
    }) : this.chains;
    this.showWalletConnectModal = this.options.qrcode !== false;
  }
  async connect() {
    var _a;
    let {
      chainId: chainIdP,
      pairingTopic
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    try {
      let targetChainId = chainIdP;
      if (!targetChainId) {
        const lastUsedChainIdStr = await _classPrivateFieldGet(this, _storage).getItem(LAST_USED_CHAIN_ID);
        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : void 0;
        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {
          targetChainId = lastUsedChainId;
        } else {
          targetChainId = (_a = this.filteredChains[0]) == null ? void 0 : _a.chainId;
        }
      }
      if (!targetChainId) {
        throw new Error("No chains found on connector.");
      }
      const provider = await this.getProvider();
      this.setupListeners();
      const isChainsStale = await _classPrivateMethodGet(this, _isChainsStale, _isChainsStale2).call(this);
      if (provider.session && isChainsStale) {
        await provider.disconnect();
      }
      if (!provider.session || isChainsStale) {
        const optionalChains = this.filteredChains.filter((chain) => chain.chainId !== targetChainId).map((optionalChain) => optionalChain.chainId);
        this.emit("message", {
          type: "connecting"
        });
        await provider.connect({
          pairingTopic,
          chains: [targetChainId],
          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]
        });
        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, this.filteredChains.map((_ref) => {
          let {
            chainId
          } = _ref;
          return chainId;
        }));
      }
      const accounts = await provider.enable();
      if (!accounts[0]) {
        throw new Error("No accounts found on provider.");
      }
      const account = utils_exports.getAddress(accounts[0]);
      const id = await this.getChainId();
      const unsupported = this.isChainUnsupported(id);
      return {
        account,
        chain: {
          id,
          unsupported
        },
        provider: new lib_exports.Web3Provider(provider)
      };
    } catch (error) {
      if (/user rejected/i.test(error == null ? void 0 : error.message)) {
        throw new UserRejectedRequestError(error);
      }
      throw error;
    }
  }
  async disconnect() {
    const cleanup = () => {
      if (typeof localStorage === "undefined") {
        return;
      }
      for (const key in localStorage) {
        if (key.startsWith("wc@2")) {
          localStorage.removeItem(key);
        }
      }
    };
    cleanup();
    const provider = await this.getProvider();
    const disconnectProvider = async () => {
      try {
        await provider.disconnect();
      } catch (error) {
        if (!/No matching key/i.test(error.message)) {
          throw error;
        }
      } finally {
        _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);
        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, []);
        cleanup();
      }
    };
    disconnectProvider();
  }
  async getAccount() {
    const {
      accounts
    } = await this.getProvider();
    if (!accounts[0]) {
      throw new Error("No accounts found on provider.");
    }
    return utils_exports.getAddress(accounts[0]);
  }
  async getChainId() {
    const {
      chainId
    } = await this.getProvider();
    return chainId;
  }
  async getProvider() {
    let {
      chainId
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (!_classPrivateFieldGet(this, _provider)) {
      await _classPrivateMethodGet(this, _createProvider, _createProvider2).call(this);
    }
    if (chainId) {
      await this.switchChain(chainId);
    }
    if (!_classPrivateFieldGet(this, _provider)) {
      throw new Error("No provider found.");
    }
    return _classPrivateFieldGet(this, _provider);
  }
  async getSigner() {
    let {
      chainId
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const [provider, account] = await Promise.all([this.getProvider({
      chainId
    }), this.getAccount()]);
    return new lib_exports.Web3Provider(provider, chainId).getSigner(account);
  }
  async isAuthorized() {
    try {
      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);
      const isChainsStale = await _classPrivateMethodGet(this, _isChainsStale, _isChainsStale2).call(this);
      if (!account) {
        return false;
      }
      if (isChainsStale && provider.session) {
        try {
          await provider.disconnect();
        } catch {
        }
        return false;
      }
      return true;
    } catch {
      return false;
    }
  }
  async switchChain(chainId) {
    const chain = this.chains.find((chain_) => chain_.chainId === chainId);
    if (!chain) {
      throw new SwitchChainError(`Chain with ID: ${chainId}, not found on connector.`);
    }
    try {
      const provider = await this.getProvider();
      const namespaceChains = _classPrivateMethodGet(this, _getNamespaceChainsIds, _getNamespaceChainsIds2).call(this);
      const namespaceMethods = _classPrivateMethodGet(this, _getNamespaceMethods, _getNamespaceMethods2).call(this);
      const isChainApproved = namespaceChains.includes(chainId);
      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {
        const firstExplorer = chain.explorers && chain.explorers[0];
        const blockExplorerUrls = firstExplorer ? {
          blockExplorerUrls: [firstExplorer.url]
        } : {};
        await provider.request({
          method: ADD_ETH_CHAIN_METHOD,
          params: [{
            chainId: utils_exports.hexValue(chain.chainId),
            chainName: chain.name,
            nativeCurrency: chain.nativeCurrency,
            rpcUrls: getValidPublicRPCUrl(chain),
            // no clientId on purpose
            ...blockExplorerUrls
          }]
        });
        const requestedChains = await _classPrivateMethodGet(this, _getRequestedChainsIds, _getRequestedChainsIds2).call(this);
        requestedChains.push(chainId);
        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, requestedChains);
      }
      await provider.request({
        method: "wallet_switchEthereumChain",
        params: [{
          chainId: utils_exports.hexValue(chainId)
        }]
      });
      return chain;
    } catch (error) {
      const message = typeof error === "string" ? error : error == null ? void 0 : error.message;
      if (/user rejected request/i.test(message)) {
        throw new UserRejectedRequestError(error);
      }
      throw new SwitchChainError(error);
    }
  }
  async initProvider() {
    const {
      default: EthereumProvider,
      OPTIONAL_EVENTS,
      OPTIONAL_METHODS
    } = await import("./index.es-U45TDWPD.js");
    const [defaultChain, ...optionalChains] = this.filteredChains.map((_ref2) => {
      let {
        chainId
      } = _ref2;
      return chainId;
    });
    if (defaultChain) {
      _classPrivateFieldSet(this, _provider, await EthereumProvider.init({
        showQrModal: this.showWalletConnectModal,
        projectId: this.options.projectId,
        optionalMethods: OPTIONAL_METHODS,
        optionalEvents: OPTIONAL_EVENTS,
        chains: [defaultChain],
        optionalChains,
        metadata: {
          name: this.options.dappMetadata.name,
          description: this.options.dappMetadata.description || "",
          url: this.options.dappMetadata.url,
          icons: [this.options.dappMetadata.logoUrl || ""]
        },
        rpcMap: Object.fromEntries(this.filteredChains.map((chain) => [
          chain.chainId,
          chain.rpc[0] || ""
          // TODO: handle chain.rpc being empty array
        ])),
        qrModalOptions: this.options.qrModalOptions
      }));
    }
  }
  async setupListeners() {
    if (!_classPrivateFieldGet(this, _provider)) {
      return;
    }
    _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);
    _classPrivateFieldGet(this, _provider).on("accountsChanged", this.onAccountsChanged);
    _classPrivateFieldGet(this, _provider).on("chainChanged", this.onChainChanged);
    _classPrivateFieldGet(this, _provider).on("disconnect", this.onDisconnect);
    _classPrivateFieldGet(this, _provider).on("session_delete", this.onDisconnect);
    _classPrivateFieldGet(this, _provider).on("display_uri", this.onDisplayUri);
    _classPrivateFieldGet(this, _provider).on("connect", this.onConnect);
  }
};
async function _createProvider2() {
  if (!_classPrivateFieldGet(this, _initProviderPromise) && true) {
    _classPrivateFieldSet(this, _initProviderPromise, this.initProvider());
  }
  return _classPrivateFieldGet(this, _initProviderPromise);
}
async function _isChainsStale2() {
  const namespaceMethods = _classPrivateMethodGet(this, _getNamespaceMethods, _getNamespaceMethods2).call(this);
  if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {
    return false;
  }
  if (!this.options.isNewChainsStale) {
    return false;
  }
  const requestedChains = await _classPrivateMethodGet(this, _getRequestedChainsIds, _getRequestedChainsIds2).call(this);
  const connectorChains = this.filteredChains.map((_ref3) => {
    let {
      chainId
    } = _ref3;
    return chainId;
  });
  const namespaceChains = _classPrivateMethodGet(this, _getNamespaceChainsIds, _getNamespaceChainsIds2).call(this);
  if (namespaceChains.length && !namespaceChains.some((id) => connectorChains.includes(id))) {
    return false;
  }
  return !connectorChains.every((id) => requestedChains.includes(id));
}
function _removeListeners2() {
  if (!_classPrivateFieldGet(this, _provider)) {
    return;
  }
  _classPrivateFieldGet(this, _provider).removeListener("accountsChanged", this.onAccountsChanged);
  _classPrivateFieldGet(this, _provider).removeListener("chainChanged", this.onChainChanged);
  _classPrivateFieldGet(this, _provider).removeListener("disconnect", this.onDisconnect);
  _classPrivateFieldGet(this, _provider).removeListener("session_delete", this.onDisconnect);
  _classPrivateFieldGet(this, _provider).removeListener("display_uri", this.onDisplayUri);
  _classPrivateFieldGet(this, _provider).removeListener("connect", this.onConnect);
}
async function _setRequestedChainsIds2(chains) {
  await _classPrivateFieldGet(this, _storage).setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));
}
async function _getRequestedChainsIds2() {
  const data = await _classPrivateFieldGet(this, _storage).getItem(REQUESTED_CHAINS_KEY);
  return data ? JSON.parse(data) : [];
}
function _getNamespaceChainsIds2() {
  var _a, _b, _c;
  if (!_classPrivateFieldGet(this, _provider)) {
    return [];
  }
  const chainIds = (_c = (_b = (_a = _classPrivateFieldGet(this, _provider).session) == null ? void 0 : _a.namespaces[NAMESPACE]) == null ? void 0 : _b.chains) == null ? void 0 : _c.map((chain) => parseInt(chain.split(":")[1] || ""));
  return chainIds ?? [];
}
function _getNamespaceMethods2() {
  var _a, _b;
  if (!_classPrivateFieldGet(this, _provider)) {
    return [];
  }
  const methods = (_b = (_a = _classPrivateFieldGet(this, _provider).session) == null ? void 0 : _a.namespaces[NAMESPACE]) == null ? void 0 : _b.methods;
  return methods ?? [];
}
export {
  WalletConnectConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm-YEI4GA4O.js.map
