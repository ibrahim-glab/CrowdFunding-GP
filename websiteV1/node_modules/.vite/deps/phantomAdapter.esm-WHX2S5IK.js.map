{
  "version": 3,
  "sources": ["../../@web3auth/phantom-adapter/src/utils.ts", "../../@web3auth/phantom-adapter/src/phantomAdapter.ts"],
  "sourcesContent": ["import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n", "import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport interface PhantomAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n}\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: PhantomAdapterOptions = {}) {\n    super();\n    this.chainConfig = options.chainConfig || null;\n    this.sessionTime = options.sessionTime || 86400;\n  }\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(options: { sessionTime?: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAEgBA,KAAKC,UAA4CC,UAAkBC,OAAa;AAC9F,SAAO,IAAIC,QAAQ,CAACC,SAASC,WAAU;AACrC,QAAIH,QAAQ,GAAG;AACbI,iBAAW,YAAW;AACpB,cAAMC,OAAO,MAAMP,SAAQ;AAC3B,YAAIO;AAAMH,kBAAQG,IAAD;AACjB,YAAI,CAACA;AACHR,eAAKC,UAAUC,UAAUC,QAAQ,CAA7B,EACDM,KAAMC,SAAO;AACZL,oBAAQK,GAAD;AACP,mBAAOA;WAHX,EAKGC,MAAOC,SAAQN,OAAOM,GAAD,CALxB;SAMDV,QAVO;IAWX,OAAM;AACLG,cAAQ,KAAD;IACR;EACF,CAhBM;AAiBR;IAEYQ,gBCSAC;;;;;;;ADTN,IAAMD,iBAAiB,iBAEc;AAAA,UAAA;AAAA,UAD1CE,UAA+C,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAA;QAAEb,UAAU;QAAMC,OAAO;;AAExE,YAAMa,qBAAqB,OAAOC,WAAW,eAAe,CAAC,GAAA,iBAAEA,OAAeC,YAAf,QAAA,mBAAA,UAAA,eAAuBC;AACtF,UAAIH,oBAAoB;AACtB,eAAQC,OAAeC;MACxB;AACD,YAAME,cAAc,MAAMpB,KAAK,MAAA;AAAA,YAAA;AAAA,gBAAA,kBAAOiB,OAAeC,YAAtB,QAAA,oBAAA,SAAA,SAAO,gBAAuBC;SAAWJ,QAAQb,UAAUa,QAAQZ,KAApE;AAC9B,UAAIiB;AAAa,eAAQH,OAAeC;AACxC,aAAO;IACR;ACDK,IAAOJ,iBAAP,cAA8BO,kBAAuB;MAiBzDC,cAA+C;AAAA,YAAnCP,UAAmC,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAF,CAAA;AAC3C,cAAA;AAD6C,wBAhBvBQ,MAAAA,QAAAA,gBAAgBC,OAgBO;AAAA,wBAdGC,MAAAA,oBAAAA,mBAAmBC,MActB;AAAA,wBAZMC,MAAAA,yBAAAA,iBAAiBD,MAYvB;AAAA,wBAVRE,MAAAA,QAAAA,iBAAiBC,QAUT;AAAA,wBARVC,MAAAA,UAAAA,eAAeC,SAQL;AAAA,wBAAA,MAAA,WANC,IAMD;AAAA,wBAAA,MAAA,mBAJW,IAIX;AAAA,wBAAA,MAAA,cAF1B,KAE0B;AAAA,wBAAA,MAAA,iBA+HvB,MAAK;AAC3B,cAAI,KAAKC,SAAS;AAChB,iBAAKA,QAAQC,IAAI,cAAc,KAAKC,aAApC;AACA,iBAAKC,aAAa;AAElB,iBAAKC,SAAS,KAAKA,WAAWN,eAAeO,YAAYP,eAAeQ,QAAQR,eAAeC;AAC/F,iBAAKQ,KAAKC,eAAeC,YAAzB;UACD;SAtI4C;AAE7C,aAAKC,cAAc3B,QAAQ2B,eAAe;AAC1C,aAAKC,cAAc5B,QAAQ4B,eAAe;MAC3C;MAEoB,IAAjBC,oBAAiB;AAAA,YAAA;AACnB,eAAO,CAAC,GAAOZ,gBAAAA,KAAAA,aAASa,QAAAA,kBAAAA,UAAAA,cAAAA,eAAe,KAAKT,WAAWN,eAAeO;MACvE;MAEW,IAARS,WAAQ;AAAA,YAAA;AACV,iBAAYC,wBAAAA,KAAAA,qBAAiBD,QAAAA,0BAAAA,SAAAA,SAAAA,sBAAAA,aAAY;MAC1C;MAEW,IAARA,SAASE,GAAkC;AAC7C,cAAM,IAAIC,MAAM,iBAAV;MACP;MAEDC,mBAAmBnC,SAAiC;AAClD,YAAI,KAAKqB,WAAWN,eAAeQ;AAAO;AAC1C,YAAIvB,YAAAA,QAAAA,YAAJ,UAAIA,QAAS4B,aAAa;AACxB,eAAKA,cAAc5B,QAAQ4B;QAC5B;MACF;MAES,MAAJQ,KAAKpC,SAA2B;AACpC,cAAMqC,gCAAN;AAEA,YAAI,CAAC,KAAKV,aAAa;AACrB,eAAKA,cAAcW,eAAe1B,iBAAiBD,QAAQ,KAA1B;QAClC;AACD,aAAKM,UAAU,MAAMnB,eAAe;UAAEX,UAAU;UAAKC,OAAO;QAAxB,CAAD;AACnC,YAAI,CAAC,KAAK6B;AAAS,gBAAMsB,0BAA0BC,aAA1B;AACzB,aAAKR,kBAAkB,IAAIS,wBAAwB;UAAEC,QAAQ;YAAEf,aAAa,KAAKA;UAApB;QAAV,CAA5B;AACvB,aAAKN,SAASN,eAAeQ;AAC7B,aAAKC,KAAKC,eAAeF,OAAOf,gBAAgBC,OAAhD;AAEA,YAAI;AACFkC,cAAIC,MAAM,8BAAV;AACA,cAAI5C,QAAQ6C,aAAa;AACvB,iBAAKzB,aAAa;AAClB,kBAAM,KAAK0B,QAAL;UACP;iBACMC,OAAO;AACdJ,cAAII,MAAM,kDAAkDA,KAA5D;AACA,eAAKvB,KAAK,WAAWuB,KAArB;QACD;MACF;MAEY,MAAPD,UAAO;AAAA,YAAA,QAAA;AACX,YAAI;AACF,gBAAME,4BAAN;AACA,eAAK3B,SAASN,eAAekC;AAC7B,eAAKzB,KAAKC,eAAewB,YAAY;YAAEC,SAAS1C,gBAAgBC;WAAhE;AAEA,cAAI,CAAC,KAAKQ;AAAS,kBAAMsB,0BAA0BC,aAA1B;AACzB,cAAI,CAAC,KAAKvB,QAAQa,aAAa;AAC7B,kBAAMqB,mBAAmB,KAAKlC,QAAQmC;AACtC,gBAAI;AACF,oBAAM,IAAI/D,QAAyC,CAACC,SAASC,WAAU;AACrE,sBAAMuD,UAAU,YAAW;AACzB,wBAAM,KAAKO,oBAAoB,KAAKpC,OAA9B;AACN3B,0BAAQ,KAAKyC,QAAN;;AAET,oBAAI,CAAC,KAAKd;AAAS,yBAAO1B,OAAOgD,0BAA0BC,aAA1B,CAAD;AAChC,qBAAKvB,QAAQqC,KAAK,WAAWR,OAA7B;AAEC,qBAAK7B,QAAmCmC,oBAAoB,WAAuB;AAClF7D,yBAAOgD,0BAA0BgB,aAA1B,CAAD;AAD4E,2BAAA,OAAA,UAAA,QAAnBC,OAAmB,IAAA,MAAA,IAAA,GAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAnBA,yBAAmB,IAAA,IAAA,UAAA,IAAA;kBAAA;AAElF,yBAAOL,iBAAiBM,MAAM,MAAKxC,SAASuC,IAArC;;AAGT,qBAAKvC,QAAQ6B,QAAb,EAAuBlD,MAAO8D,YAAmB;AAC/CnE,yBAAOmE,MAAD;iBADR;cAGD,CAhBK;qBAiBCX,OAAgB;AACvB,kBAAIA,iBAAiBY;AAAe,sBAAMZ;AAC1C,oBAAMa,iBAAiBC,gBAAiBd,UAAAA,QAAAA,UAAAA,SAAAA,SAAAA,MAAiBe,OAAnD;YACP,UArBD;AAsBE,mBAAK7C,QAAQmC,oBAAoBD;YAClC;UACF,OAAM;AACL,kBAAM,KAAKE,oBAAoB,KAAKpC,OAA9B;UACP;AAED,cAAI,CAAC,KAAKA,QAAQ8C;AAAW,kBAAMH,iBAAiBC,gBAAjB;AACnC,eAAK5C,QAAQ+C,GAAG,cAAc,KAAK7C,aAAnC;AAEA,iBAAO,KAAKY;iBACLgB,OAAgB;AAEvB,eAAK1B,SAASN,eAAeQ;AAC7B,eAAKH,aAAa;AAClB,eAAKI,KAAKC,eAAewC,SAASlB,KAAlC;AACA,gBAAMA;QACP;MACF;MAEe,MAAVmB,aAA6D;AAAA,YAAlDlE,UAAgC,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAA;UAAEmE,SAAS;;AAC1D,cAAM,MAAMD,WAAN;AACN,YAAI;AAAA,cAAA;AACF,kBAAA,iBAAM,KAAKjD,aAAL,QAAA,mBAAA,SAAA,SAAA,eAAciD,WAAd;AACN,cAAIlE,QAAQmE,SAAS;AACnB,iBAAK9C,SAASN,eAAeC;AAC7B,iBAAKgB,kBAAkB;AACvB,iBAAKf,UAAU;UAChB;AACD,eAAKO,KAAKC,eAAeC,YAAzB;iBACOqB,OAAgB;AACvB,eAAKvB,KAAKC,eAAewC,SAASL,iBAAiBQ,mBAAoBrB,UAAAA,QAAAA,UAArC,SAAA,SAAqCA,MAAiBe,OAAtD,CAAlC;QACD;MACF;MAEgB,MAAXO,cAAW;AACf,YAAI,CAAC,KAAKxC;AAAmB,gBAAM+B,iBAAiBU,kBAAkB,uDAAnC;AACnC,eAAO,CAAA;MACR;MAEgC,MAAnBjB,oBAAoBkB,kBAAwC;AACxE,YAAI,CAAC,KAAKvC;AAAiB,gBAAM4B,iBAAiBC,gBAAgB,qBAAjC;AACjC,cAAM,KAAK7B,gBAAgBwC,cAAcD,gBAAnC;AACN,aAAKlD,SAASN,eAAeO;AAC7B,aAAKE,KAAKC,eAAeH,WAAW;UAAE4B,SAAS1C,gBAAgBC;UAASgE,aAAa,KAAKrD;SAA1F;AACA,eAAO,KAAKW;MACb;IA9IwD;;;",
  "names": ["poll", "callback", "interval", "count", "Promise", "resolve", "reject", "setTimeout", "done", "then", "res", "catch", "err", "detectProvider", "PhantomAdapter", "options", "isPhantomAvailable", "window", "solana", "isPhantom", "isAvailable", "BaseSolanaAdapter", "constructor", "WALLET_ADAPTERS", "PHANTOM", "ADAPTER_NAMESPACES", "SOLANA", "CHAIN_NAMESPACES", "ADAPTER_CATEGORY", "EXTERNAL", "ADAPTER_STATUS", "NOT_READY", "_wallet", "off", "_onDisconnect", "rehydrated", "status", "CONNECTED", "READY", "emit", "ADAPTER_EVENTS", "DISCONNECTED", "chainConfig", "sessionTime", "isWalletConnected", "isConnected", "provider", "phantomProvider", "_", "Error", "setAdapterSettings", "init", "checkInitializationRequirements", "getChainConfig", "WalletInitializationError", "notInstalled", "PhantomInjectedProvider", "config", "log", "debug", "autoConnect", "connect", "error", "checkConnectionRequirements", "CONNECTING", "adapter", "handleDisconnect", "_handleDisconnect", "connectWithProvider", "once", "windowClosed", "args", "apply", "reason", "Web3AuthError", "WalletLoginError", "connectionError", "message", "publicKey", "on", "ERRORED", "disconnect", "cleanup", "disconnectionError", "getUserInfo", "notConnectedError", "injectedProvider", "setupProvider", "reconnected"]
}
