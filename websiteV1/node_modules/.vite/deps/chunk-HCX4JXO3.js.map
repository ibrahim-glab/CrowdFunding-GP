{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/marketplace-ad8d6c18.browser.esm.js"],
  "sourcesContent": ["import { Contract, BigNumber } from 'ethers';\r\nimport invariant from 'tiny-invariant';\r\nimport { I as InterfaceId_IERC721, a as InterfaceId_IERC1155, D as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-c67b6cd4.browser.esm.js';\r\nimport { cq as ContractWrapper, dz as MAX_BPS } from './index-e7118e8b.browser.esm.js';\r\nimport { a as fetchCurrencyValue } from './fetchCurrencyValue-27d660ae.browser.esm.js';\r\n\r\n/**\r\n * This method checks if the given token is approved for the transferrerContractAddress contract.\r\n * This is particularly useful for contracts that need to transfer NFTs on the users' behalf\r\n *\r\n * @internal\r\n * @param provider - The connected provider\r\n * @param transferrerContractAddress - The address of the marketplace contract\r\n * @param assetContract - The address of the asset contract.\r\n * @param tokenId - The token id of the token.\r\n * @param owner - The address of the account that owns the token.\r\n * @returns  True if the transferrerContractAddress is approved on the token, false otherwise.\r\n */\r\nasync function isTokenApprovedForTransfer(provider, transferrerContractAddress, assetContract, tokenId, owner) {\r\n  try {\r\n    const ERC165Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\r\n    const erc165 = new Contract(assetContract, ERC165Abi, provider);\r\n    const [isERC721, isERC1155] = await Promise.all([erc165.supportsInterface(InterfaceId_IERC721), erc165.supportsInterface(InterfaceId_IERC1155)]);\r\n    if (isERC721) {\r\n      const ERC721Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721.json')).default;\r\n      const asset = new Contract(assetContract, ERC721Abi, provider);\r\n      const approved = await asset.isApprovedForAll(owner, transferrerContractAddress);\r\n      if (approved) {\r\n        return true;\r\n      }\r\n\r\n      // Handle reverts in case of non-existent tokens\r\n      let approvedAddress;\r\n      try {\r\n        approvedAddress = await asset.getApproved(tokenId);\r\n      } catch (e) {}\r\n      return approvedAddress?.toLowerCase() === transferrerContractAddress.toLowerCase();\r\n    } else if (isERC1155) {\r\n      const ERC1155Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155.json')).default;\r\n      const asset = new Contract(assetContract, ERC1155Abi, provider);\r\n      return await asset.isApprovedForAll(owner, transferrerContractAddress);\r\n    } else {\r\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\r\n      return false;\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Failed to check if token is approved\", err);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if the marketplace is approved to make transfers on the assetContract\r\n * If not, it tries to set the approval.\r\n * @param contractWrapper - The contract wrapper to use\r\n * @param marketplaceAddress - The address of the marketplace contract\r\n * @param assetContract - The address of the asset contract.\r\n * @param tokenId - The token id of the token.\r\n * @param from - The address of the account that owns the token.\r\n */\r\nasync function handleTokenApproval(contractWrapper, marketplaceAddress, assetContract, tokenId, from) {\r\n  const ERC165Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\r\n  const erc165 = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC165Abi, contractWrapper.options, contractWrapper.storage);\r\n  const [isERC721, isERC1155] = await Promise.all([erc165.read(\"supportsInterface\", [InterfaceId_IERC721]), erc165.read(\"supportsInterface\", [InterfaceId_IERC1155])]);\r\n  // check for token approval\r\n  if (isERC721) {\r\n    const ERC721Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721.json')).default;\r\n    const asset = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC721Abi, contractWrapper.options, contractWrapper.storage);\r\n    const approved = await asset.read(\"isApprovedForAll\", [from, marketplaceAddress]);\r\n    if (!approved) {\r\n      const isTokenApproved = (await asset.read(\"getApproved\", [tokenId])).toLowerCase() === marketplaceAddress.toLowerCase();\r\n      if (!isTokenApproved) {\r\n        await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\r\n      }\r\n    }\r\n  } else if (isERC1155) {\r\n    const ERC1155Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155.json')).default;\r\n    const asset = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC1155Abi, contractWrapper.options, contractWrapper.storage);\r\n    const approved = await asset.read(\"isApprovedForAll\", [from, marketplaceAddress]);\r\n    if (!approved) {\r\n      await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\r\n    }\r\n  } else {\r\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\r\n  }\r\n}\r\n\r\n/**\r\n * Used to verify fields in new listing.\r\n * @internal\r\n */\r\n// TODO this should be done in zod\r\nfunction validateNewListingParam(param) {\r\n  invariant(param.assetContractAddress !== undefined && param.assetContractAddress !== null, \"Asset contract address is required\");\r\n  invariant(param.buyoutPricePerToken !== undefined && param.buyoutPricePerToken !== null, \"Buyout price is required\");\r\n  invariant(param.listingDurationInSeconds !== undefined && param.listingDurationInSeconds !== null, \"Listing duration is required\");\r\n  invariant(param.startTimestamp !== undefined && param.startTimestamp !== null, \"Start time is required\");\r\n  invariant(param.tokenId !== undefined && param.tokenId !== null, \"Token ID is required\");\r\n  invariant(param.quantity !== undefined && param.quantity !== null, \"Quantity is required\");\r\n  switch (param.type) {\r\n    case \"NewAuctionListing\":\r\n      {\r\n        invariant(param.reservePricePerToken !== undefined && param.reservePricePerToken !== null, \"Reserve price is required\");\r\n      }\r\n  }\r\n}\r\n\r\n/**\r\n * Maps a contract offer to the strict interface\r\n *\r\n * @internal\r\n * @param offer - The offer to map\r\n * @returns  An `Offer` object\r\n */\r\nasync function mapOffer(provider, listingId, offer) {\r\n  return {\r\n    quantity: offer.quantityDesired,\r\n    pricePerToken: offer.pricePerToken,\r\n    currencyContractAddress: offer.currency,\r\n    buyerAddress: offer.offeror,\r\n    quantityDesired: offer.quantityWanted,\r\n    currencyValue: await fetchCurrencyValue(provider, offer.currency, offer.quantityWanted.mul(offer.pricePerToken)),\r\n    listingId\r\n  };\r\n}\r\nfunction isWinningBid(winningPrice, newBidPrice, bidBuffer) {\r\n  bidBuffer = BigNumber.from(bidBuffer);\r\n  winningPrice = BigNumber.from(winningPrice);\r\n  newBidPrice = BigNumber.from(newBidPrice);\r\n  if (winningPrice.eq(BigNumber.from(0))) {\r\n    return false;\r\n  }\r\n  const buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\r\n  return buffer.gte(bidBuffer);\r\n}\r\nasync function getAllInBatches(start, end, fn) {\r\n  const batches = [];\r\n  while (end - start > DEFAULT_QUERY_ALL_COUNT) {\r\n    batches.push(fn(start, start + DEFAULT_QUERY_ALL_COUNT - 1));\r\n    start += DEFAULT_QUERY_ALL_COUNT;\r\n  }\r\n  batches.push(fn(start, end - 1));\r\n  return await Promise.all(batches);\r\n}\r\n\r\nexport { isWinningBid as a, getAllInBatches as g, handleTokenApproval as h, isTokenApprovedForTransfer as i, mapOffer as m, validateNewListingParam as v };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAkBA,eAAe,2BAA2B,UAAU,4BAA4B,eAAe,SAAS,OAAO;AAC7G,MAAI;AACF,UAAM,aAAa,MAAM,OAAO,uBAAmD,GAAG;AACtF,UAAM,SAAS,IAAI,SAAS,eAAe,WAAW,QAAQ;AAC9D,UAAM,CAAC,UAAU,SAAS,IAAI,MAAM,QAAQ,IAAI,CAAC,OAAO,kBAAkB,mBAAmB,GAAG,OAAO,kBAAkB,oBAAoB,CAAC,CAAC;AAC/I,QAAI,UAAU;AACZ,YAAM,aAAa,MAAM,OAAO,uBAAmD,GAAG;AACtF,YAAM,QAAQ,IAAI,SAAS,eAAe,WAAW,QAAQ;AAC7D,YAAM,WAAW,MAAM,MAAM,iBAAiB,OAAO,0BAA0B;AAC/E,UAAI,UAAU;AACZ,eAAO;AAAA,MACT;AAGA,UAAI;AACJ,UAAI;AACF,0BAAkB,MAAM,MAAM,YAAY,OAAO;AAAA,MACnD,SAAS,GAAG;AAAA,MAAC;AACb,cAAO,mDAAiB,mBAAkB,2BAA2B,YAAY;AAAA,IACnF,WAAW,WAAW;AACpB,YAAM,cAAc,MAAM,OAAO,wBAAoD,GAAG;AACxF,YAAM,QAAQ,IAAI,SAAS,eAAe,YAAY,QAAQ;AAC9D,aAAO,MAAM,MAAM,iBAAiB,OAAO,0BAA0B;AAAA,IACvE,OAAO;AACL,cAAQ,MAAM,kDAAkD;AAChE,aAAO;AAAA,IACT;AAAA,EACF,SAAS,KAAK;AACZ,YAAQ,MAAM,wCAAwC,GAAG;AACzD,WAAO;AAAA,EACT;AACF;AAWA,eAAe,oBAAoB,iBAAiB,oBAAoB,eAAe,SAAS,MAAM;AACpG,QAAM,aAAa,MAAM,OAAO,uBAAmD,GAAG;AACtF,QAAM,SAAS,IAAI,gBAAgB,gBAAgB,oBAAoB,GAAG,eAAe,WAAW,gBAAgB,SAAS,gBAAgB,OAAO;AACpJ,QAAM,CAAC,UAAU,SAAS,IAAI,MAAM,QAAQ,IAAI,CAAC,OAAO,KAAK,qBAAqB,CAAC,mBAAmB,CAAC,GAAG,OAAO,KAAK,qBAAqB,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAEnK,MAAI,UAAU;AACZ,UAAM,aAAa,MAAM,OAAO,uBAAmD,GAAG;AACtF,UAAM,QAAQ,IAAI,gBAAgB,gBAAgB,oBAAoB,GAAG,eAAe,WAAW,gBAAgB,SAAS,gBAAgB,OAAO;AACnJ,UAAM,WAAW,MAAM,MAAM,KAAK,oBAAoB,CAAC,MAAM,kBAAkB,CAAC;AAChF,QAAI,CAAC,UAAU;AACb,YAAM,mBAAmB,MAAM,MAAM,KAAK,eAAe,CAAC,OAAO,CAAC,GAAG,YAAY,MAAM,mBAAmB,YAAY;AACtH,UAAI,CAAC,iBAAiB;AACpB,cAAM,MAAM,gBAAgB,qBAAqB,CAAC,oBAAoB,IAAI,CAAC;AAAA,MAC7E;AAAA,IACF;AAAA,EACF,WAAW,WAAW;AACpB,UAAM,cAAc,MAAM,OAAO,wBAAoD,GAAG;AACxF,UAAM,QAAQ,IAAI,gBAAgB,gBAAgB,oBAAoB,GAAG,eAAe,YAAY,gBAAgB,SAAS,gBAAgB,OAAO;AACpJ,UAAM,WAAW,MAAM,MAAM,KAAK,oBAAoB,CAAC,MAAM,kBAAkB,CAAC;AAChF,QAAI,CAAC,UAAU;AACb,YAAM,MAAM,gBAAgB,qBAAqB,CAAC,oBAAoB,IAAI,CAAC;AAAA,IAC7E;AAAA,EACF,OAAO;AACL,UAAM,MAAM,8CAA8C;AAAA,EAC5D;AACF;AAOA,SAAS,wBAAwB,OAAO;AACtC,YAAU,MAAM,yBAAyB,UAAa,MAAM,yBAAyB,MAAM,oCAAoC;AAC/H,YAAU,MAAM,wBAAwB,UAAa,MAAM,wBAAwB,MAAM,0BAA0B;AACnH,YAAU,MAAM,6BAA6B,UAAa,MAAM,6BAA6B,MAAM,8BAA8B;AACjI,YAAU,MAAM,mBAAmB,UAAa,MAAM,mBAAmB,MAAM,wBAAwB;AACvG,YAAU,MAAM,YAAY,UAAa,MAAM,YAAY,MAAM,sBAAsB;AACvF,YAAU,MAAM,aAAa,UAAa,MAAM,aAAa,MAAM,sBAAsB;AACzF,UAAQ,MAAM,MAAM;AAAA,IAClB,KAAK,qBACH;AACE,gBAAU,MAAM,yBAAyB,UAAa,MAAM,yBAAyB,MAAM,2BAA2B;AAAA,IACxH;AAAA,EACJ;AACF;AASA,eAAe,SAAS,UAAU,WAAW,OAAO;AAClD,SAAO;AAAA,IACL,UAAU,MAAM;AAAA,IAChB,eAAe,MAAM;AAAA,IACrB,yBAAyB,MAAM;AAAA,IAC/B,cAAc,MAAM;AAAA,IACpB,iBAAiB,MAAM;AAAA,IACvB,eAAe,MAAM,mBAAmB,UAAU,MAAM,UAAU,MAAM,eAAe,IAAI,MAAM,aAAa,CAAC;AAAA,IAC/G;AAAA,EACF;AACF;AACA,SAAS,aAAa,cAAc,aAAa,WAAW;AAC1D,cAAY,UAAU,KAAK,SAAS;AACpC,iBAAe,UAAU,KAAK,YAAY;AAC1C,gBAAc,UAAU,KAAK,WAAW;AACxC,MAAI,aAAa,GAAG,UAAU,KAAK,CAAC,CAAC,GAAG;AACtC,WAAO;AAAA,EACT;AACA,QAAM,SAAS,YAAY,IAAI,YAAY,EAAE,IAAI,OAAO,EAAE,IAAI,YAAY;AAC1E,SAAO,OAAO,IAAI,SAAS;AAC7B;AACA,eAAe,gBAAgB,OAAO,KAAK,IAAI;AAC7C,QAAM,UAAU,CAAC;AACjB,SAAO,MAAM,QAAQ,yBAAyB;AAC5C,YAAQ,KAAK,GAAG,OAAO,QAAQ,0BAA0B,CAAC,CAAC;AAC3D,aAAS;AAAA,EACX;AACA,UAAQ,KAAK,GAAG,OAAO,MAAM,CAAC,CAAC;AAC/B,SAAO,MAAM,QAAQ,IAAI,OAAO;AAClC;",
  "names": []
}
