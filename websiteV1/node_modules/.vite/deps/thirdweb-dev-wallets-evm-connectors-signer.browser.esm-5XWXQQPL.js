import "./chunk-YGRF7CTW.js";
import {
  Connector
} from "./chunk-7ZKPRNKP.js";
import "./chunk-NXVKFCGN.js";
import "./chunk-ZTGC7WRH.js";
import {
  normalizeChainId
} from "./chunk-FG2CDSPQ.js";
import {
  _classPrivateFieldGet,
  _classPrivateFieldInitSpec,
  _classPrivateFieldSet
} from "./chunk-I5FN74TN.js";
import {
  _defineProperty
} from "./chunk-YUOLCEGR.js";
import "./chunk-XZJ3BFHI.js";
import "./chunk-KPZQRWIA.js";
import "./chunk-UKVXXSPA.js";
import "./chunk-TI3A73K2.js";
import "./chunk-QNCFKN2B.js";
import "./chunk-J5LOCPST.js";
import "./chunk-GB2PCLYH.js";
import "./chunk-EYSJPGEF.js";
import "./chunk-LVUYF6WC.js";
import "./chunk-HT4B25DF.js";
import "./chunk-4DRVVL7D.js";
import "./chunk-LZSJYQ2X.js";
import "./chunk-EM4EVOCV.js";
import "./chunk-TQNN2U7J.js";
import "./chunk-GKTF4MIN.js";
import "./chunk-B6R5BCLS.js";
import "./chunk-HSXVVCEX.js";
import "./chunk-TVBEQ3OD.js";
import "./chunk-C52BRAYJ.js";
import "./chunk-5XIQKRKG.js";
import "./chunk-YQAUWGV2.js";
import {
  getChainProvider
} from "./chunk-4UWMVSMF.js";
import "./chunk-7NNND3QZ.js";
import "./chunk-LYEG5PGG.js";
import "./chunk-NI75G64R.js";
import "./chunk-NXQSFSYO.js";
import "./chunk-7JTQECNY.js";
import "./chunk-UHBWZKE6.js";
import "./chunk-IZHG3VIP.js";
import "./chunk-YKWEALR3.js";
import "./chunk-FNDLL6VS.js";
import "./chunk-6D6UEHK3.js";
import "./chunk-YN6UTFQV.js";
import "./chunk-AFD3C642.js";
import "./chunk-U7CFD5RQ.js";
import "./chunk-TVZY4654.js";
import "./chunk-XZ6OD6N5.js";
import "./chunk-WYHBVST3.js";
import "./chunk-SPBWBR4K.js";
import "./chunk-6OCL4JXY.js";
import "./chunk-A6WPANBE.js";
import "./chunk-OP3MHZRI.js";
import "./chunk-TZBESOIF.js";
import "./chunk-7GHALKSO.js";
import "./chunk-JVHSL6P6.js";
import "./chunk-XRYAEC2L.js";
import "./chunk-3JC5L5ZG.js";
import "./chunk-UFR7PFM3.js";
import "./chunk-RPXC7Q6H.js";
import "./chunk-HY2WJTHE.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js
var _provider = /* @__PURE__ */ new WeakMap();
var _signer = /* @__PURE__ */ new WeakMap();
var SignerConnector = class extends Connector {
  constructor(options) {
    super();
    _classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _signer, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    _classPrivateFieldSet(this, _provider, void 0);
    _classPrivateFieldSet(this, _signer, void 0);
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!_classPrivateFieldGet(this, _provider)) {
      _classPrivateFieldSet(this, _provider, getChainProvider(this.options.chain, {
        clientId: this.options.clientId,
        secretKey: this.options.secretKey
      }));
    }
    return _classPrivateFieldGet(this, _provider);
  }
  async getSigner() {
    if (!_classPrivateFieldGet(this, _signer)) {
      const provider = await this.getProvider();
      _classPrivateFieldSet(this, _signer, getUpdatedSigner(this.options.signer, provider));
    }
    return _classPrivateFieldGet(this, _signer);
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    _classPrivateFieldSet(this, _provider, getChainProvider(chain, {
      clientId: this.options.clientId,
      secretKey: this.options.secretKey
    }));
    _classPrivateFieldSet(this, _signer, getUpdatedSigner(this.options.signer, _classPrivateFieldGet(this, _provider)));
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getUpdatedSigner(signer, provider) {
  if (provider) {
    return signer.connect(provider);
  }
  return signer;
}
export {
  SignerConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-signer.browser.esm-5XWXQQPL.js.map
