{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/contract-appuri-3d68505c.browser.esm.js", "../../@thirdweb-dev/sdk/dist/fetchCurrencyValue-27d660ae.browser.esm.js"],
  "sourcesContent": ["import { ai as isExtensionEnabled, c_ as FEATURE_METADATA, K as fetchContractMetadataFromAddress, x as ExtensionNotImplementedError, aZ as EventType, c$ as FEATURE_APPURI } from './index-e7118e8b.browser.esm.js';\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-de84ba20.browser.esm.js';\nimport { utils } from 'ethers';\nimport { replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param featureName - The feature name to check\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  const b = isExtensionEnabled(contractWrapper.abi, featureName, contractWrapper.extensions);\n  return b;\n}\n\n/**\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param functionName - The function name to check\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\n/**\n * @internal\n */\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @contract\n * @public\n */\nclass ContractMetadata {\n  featureName = FEATURE_METADATA.name;\n  constructor(contractWrapper, schema, storage) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parseAsync(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parseAsync(metadata);\n  }\n  /**\n   * Get the metadata of this contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * console.log(metadata);\n   * ```\n   * @public\n   * @returns The metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.read(\"name\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let contractSymbol;\n        try {\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let publishedMetadata;\n        try {\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n        } catch (err) {}\n        data = {\n          name: contractName || publishedMetadata?.name,\n          symbol: contractSymbol,\n          description: publishedMetadata?.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n\n  /**\n   * Set the metadata of this contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @twfeature ContractMetadata\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const uri = await this._parseAndUploadMetadata(metadata);\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setContractURI\",\n        args: [uri],\n        parse: receipt => {\n          return {\n            receipt,\n            data: this.get\n          };\n        }\n      });\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\n    }\n  });\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   description: \"My new contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * @twfeature ContractMetadata\n   * */\n  update = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return await this.set.prepare({\n      ...(await this.get()),\n      ...metadata\n    });\n  });\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = await this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n * Listen to Contract events in real time\n * @contract\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function to un-subscribe from the event\n   */\n  addEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          if (param.type === \"tuple[]\") {\n            // tuple[]\n            const objArray = [];\n            for (let i = 0; i < arr.length; i++) {\n              const tuple = arr[i];\n              const obj = {};\n              for (let j = 0; j < components.length; j++) {\n                const name = components[j].name;\n                obj[name] = tuple[j];\n              }\n              objArray.push(obj);\n            }\n            results[param.name] = objArray;\n          } else {\n            // simple tuple\n            const obj = {};\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns The estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    const [price, gasUnits] = await Promise.all([this.contractWrapper.getProvider().getGasPrice(), this.contractWrapper.estimateGas(fn, args)]);\n    return utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns The estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns The current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.app.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.app.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  featureName = FEATURE_APPURI.name;\n  constructor(contractWrapper, metadata, storage) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n    this.storage = storage;\n  }\n\n  /**\n   * Get App URI\n   * @returns The appURI (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = await contract.app.get();\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\n   * ```\n   * @twfeature AppURI\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.read(\"appURI\", []);\n    }\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\n  }\n\n  /**\n   * Set App URI\n   * @param appURI - the uri to set (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = \"ipfs://some_ipfs_hash\";\n   * await contract.app.set(appURI);\n   * ```\n   * @twfeature AppURI\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async appURI => {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAppURI\",\n        args: [appURI]\n      });\n    }\n    return await this.metadata.update.prepare({\n      app_uri: appURI\n    });\n  });\n}\n\nexport { ContractMetadata as C, GasCostEstimator as G, ContractEvents as a, ContractAppURI as b, detectContractFeature as d, hasFunction as h };\n", "import { constants, Contract, BigNumber, utils } from 'ethers';\nimport { aV as NATIVE_TOKEN_ADDRESS, aX as getNativeTokenByChainId } from './index-e7118e8b.browser.esm.js';\n\n/**\n * Encodes and decodes Contract functions\n * @contract\n * @public\n */\nclass ContractEncoder {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Encodes the given contract function with argument\n   * @returns The encoded data\n   */\n  encode(fn, args) {\n    return this.contractWrapper.readContract.interface.encodeFunctionData(fn, args);\n  }\n\n  /**\n   * Decode encoded call data for a given function\n   * @param fn - the function to decode\n   * @param encodedArgs - the encoded arguments\n   */\n  decode(fn, encodedArgs) {\n    return this.contractWrapper.readContract.interface.decodeFunctionData(fn, encodedArgs);\n  }\n  decodeResult(fn, encodedArgs) {\n    return this.contractWrapper.readContract.interface.decodeFunctionResult(fn, encodedArgs);\n  }\n}\n\nfunction isNativeToken(tokenAddress) {\n  return tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS || tokenAddress.toLowerCase() === constants.AddressZero;\n}\n\n/**\n *\n * @param provider - The provider to use\n * @param asset - The asset to fetch the metadata for\n * @returns\n * @internal\n */\nasync function fetchCurrencyMetadata(provider, asset) {\n  if (isNativeToken(asset)) {\n    const network = await provider.getNetwork();\n    const nativeToken = getNativeTokenByChainId(network.chainId);\n    return {\n      name: nativeToken.name,\n      symbol: nativeToken.symbol,\n      decimals: nativeToken.decimals\n    };\n  } else {\n    const ERC20MetadataAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json')).default;\n    const erc20 = new Contract(asset, ERC20MetadataAbi, provider);\n    const [name, symbol, decimals] = await Promise.all([erc20.name(), erc20.symbol(), erc20.decimals()]);\n    return {\n      name,\n      symbol,\n      decimals\n    };\n  }\n}\n\n/**\n *\n * @param providerOrSigner - The provider or signer to use\n * @param asset - The asset to fetch the value for\n * @param price - The price to fetch the value for\n * @returns\n * @internal\n */\nasync function fetchCurrencyValue(providerOrSigner, asset, price) {\n  const metadata = await fetchCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: BigNumber.from(price),\n    displayValue: utils.formatUnits(price, metadata.decimals)\n  };\n}\n\nexport { ContractEncoder as C, fetchCurrencyValue as a, fetchCurrencyMetadata as f, isNativeToken as i };\n"],
  "mappings": "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",
  "names": []
}
