import {
  require_dist2 as require_dist,
  require_src2 as require_src
} from "./chunk-SLBXM2UD.js";
import "./chunk-EPCHRB64.js";
import {
  require_assert,
  require_dist as require_dist2,
  require_sha3 as require_sha32,
  require_utils as require_utils2
} from "./chunk-HPF2MO5V.js";
import "./chunk-BSVWXM4F.js";
import "./chunk-S3OX4T65.js";
import {
  require_satisfies
} from "./chunk-2MDE6Y5X.js";
import "./chunk-Z62YO6JW.js";
import {
  Connector
} from "./chunk-GCCNDEE6.js";
import {
  _defineProperty
} from "./chunk-NOVSDTX6.js";
import {
  require_utils
} from "./chunk-GGTUGTMY.js";
import "./chunk-ULMQ5M2J.js";
import {
  ethers_exports,
  init_lib as init_lib5,
  init_lib5 as init_lib8,
  init_lib7 as init_lib9,
  lib_exports as lib_exports5,
  lib_exports5 as lib_exports8,
  lib_exports7 as lib_exports9
} from "./chunk-4CCDGKES.js";
import {
  init_lib11 as init_lib4,
  init_lib13 as init_lib6,
  init_lib19 as init_lib7,
  init_lib2 as init_lib,
  init_lib3 as init_lib2,
  init_lib7 as init_lib3,
  lib_exports11 as lib_exports4,
  lib_exports12 as lib_exports6,
  lib_exports18 as lib_exports7,
  lib_exports2 as lib_exports,
  lib_exports3 as lib_exports2,
  lib_exports7 as lib_exports3
} from "./chunk-RN5BNASC.js";
import {
  require_bn
} from "./chunk-FQ3VPZMN.js";
import "./chunk-KLNWW7LS.js";
import {
  require_browser
} from "./chunk-C6ILTZLL.js";
import "./chunk-N7L26NZZ.js";
import "./chunk-FBVATULW.js";
import "./chunk-Y2LWIENH.js";
import "./chunk-FSFHF7RN.js";
import {
  require_buffer
} from "./chunk-MC3ZE6YI.js";
import "./chunk-S6N5TO4J.js";
import "./chunk-YO67V5O2.js";
import {
  require_sha3
} from "./chunk-ZNZQX44K.js";
import "./chunk-WZAZHEFN.js";
import "./chunk-3JC5L5ZG.js";
import "./chunk-ZXSTHQ62.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM
} from "./chunk-HY2WJTHE.js";

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    var kindOf = /* @__PURE__ */ function(cache) {
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    }(/* @__PURE__ */ Object.create(null));
    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (kindOf(val) !== "object") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isFormData(thing) {
      var pattern = "[object FormData]";
      return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
    }
    var isURLSearchParams = kindOfTest("URLSearchParams");
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }
    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};
      destObj = destObj || {};
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    }
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }
    function toArray(thing) {
      if (!thing)
        return null;
      var i = thing.length;
      if (isUndefined(i))
        return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }
    var isTypedArray = /* @__PURE__ */ function(TypedArray) {
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    }(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      isTypedArray,
      isFileList
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/AxiosError.js
var require_AxiosError = __commonJS({
  "node_modules/axios/lib/core/AxiosError.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED"
      // eslint-disable-next-line func-names
    ].forEach(function(code) {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", { value: true });
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    module.exports = AxiosError;
  }
});

// node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/axios/lib/defaults/transitional.js"(exports, module) {
    "use strict";
    module.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/axios/lib/helpers/toFormData.js
var require_toFormData = __commonJS({
  "node_modules/axios/lib/helpers/toFormData.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    function toFormData(obj, formData) {
      formData = formData || new FormData();
      var stack = [];
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error("Circular reference detected in " + parentKey);
          }
          stack.push(data);
          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value))
              return;
            var fullKey = parentKey ? parentKey + "." + key : key;
            var arr;
            if (value && !parentKey && typeof value === "object") {
              if (utils.endsWith(key, "{}")) {
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }
            build(value, fullKey);
          });
          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }
      build(obj);
      return formData;
    }
    module.exports = toFormData;
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var AxiosError = require_AxiosError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      /* @__PURE__ */ function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/axios/lib/cancel/CanceledError.js
var require_CanceledError = __commonJS({
  "node_modules/axios/lib/cancel/CanceledError.js"(exports, module) {
    "use strict";
    var AxiosError = require_AxiosError();
    var utils = require_utils3();
    function CanceledError(message) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    module.exports = CanceledError;
  }
});

// node_modules/axios/lib/helpers/parseProtocol.js
var require_parseProtocol = __commonJS({
  "node_modules/axios/lib/helpers/parseProtocol.js"(exports, module) {
    "use strict";
    module.exports = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    };
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var transitionalDefaults = require_transitional();
    var AxiosError = require_AxiosError();
    var CanceledError = require_CanceledError();
    var parseProtocol = require_parseProtocol();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        var protocol = parseProtocol(fullPath);
        if (protocol && ["http", "https", "file"].indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/helpers/null.js
var require_null = __commonJS({
  "node_modules/axios/lib/helpers/null.js"(exports, module) {
    module.exports = null;
  }
});

// node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults/index.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var normalizeHeaderName = require_normalizeHeaderName();
    var AxiosError = require_AxiosError();
    var transitionalDefaults = require_transitional();
    var toFormData = require_toFormData();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers["Content-Type"];
        var isFileList;
        if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
          var _FormData = this.env && this.env.FormData;
          return toFormData(isFileList ? { "files[]": data } : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: require_null()
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var CanceledError = require_CanceledError();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError();
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.27.2"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION = require_data().version;
    var AxiosError = require_AxiosError();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var buildFullPath = require_buildFullPath();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    module.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var CanceledError = require_CanceledError();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    module.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.CanceledError = require_CanceledError();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.toFormData = require_toFormData();
    axios.AxiosError = require_AxiosError();
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/@safe-global/safe-ethers-adapters/dist/src/service.js
var require_service = __commonJS({
  "node_modules/@safe-global/safe-ethers-adapters/dist/src/service.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SafeService = void 0;
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var axios_1 = __importDefault(require_axios2());
    var SafeService2 = class {
      constructor(serviceUrl, network) {
        this.serviceUrl = serviceUrl;
        this.network = network !== null && network !== void 0 ? network : axios_1.default;
      }
      /**
       * Estimates a Safe transaction
       *
       * @param safe - Address of the Safe for which this transaction should be estimated
       * @param safeTx - Safe transaction that should be estimated for execution
       * @returns A big number representing the safeTxGas for the passed Safe transaction
       */
      async estimateSafeTx(safe, safeTx) {
        const url = `${this.serviceUrl}/api/v1/safes/${safe}/multisig-transactions/estimations/`;
        const resp = await this.network.post(url, safeTx);
        return bignumber_1.BigNumber.from(resp.data.safeTxGas);
      }
      /**
       * Load details for a Safe transaction
       *
       * @param safeTxHash - Hash of the Safe transaction
       * @returns A `SafeTxDetails` object that contains the details of a Safe transaction
       */
      async getSafeTxDetails(safeTxHash) {
        const url = `${this.serviceUrl}/api/v1/multisig-transactions/${safeTxHash}`;
        const resp = await this.network.get(url);
        return resp.data;
      }
      /**
       * Propose a new Safe transaction to the service
       *
       * @param safeAddress - Address of the Safe for which this transaction should be proposed
       * @param safeTxHash - Hash of the Safe transaction
       * @param safeTx - Safe transaction that should be proposed
       * @param signature - Signature of an owner or a delegate of an owner of the specified Safe to authorize the proposal
       * @returns The hash of the Safe transaction that has been proposed
       */
      async proposeTx(safeAddress, safeTxHash, safeTx, signature) {
        const url = `${this.serviceUrl}/api/v1/safes/${safeAddress}/multisig-transactions/`;
        const data = {
          ...safeTx.data,
          contractTransactionHash: safeTxHash,
          sender: signature.signer,
          signature: signature.data
        };
        const resp = await this.network.post(url, data);
        return resp.data;
      }
    };
    exports.SafeService = SafeService2;
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CompatibilityFallbackHandlerContract.js
var require_CompatibilityFallbackHandlerContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CompatibilityFallbackHandlerContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CreateCallContract.js
var require_CreateCallContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CreateCallContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeContract.js
var require_GnosisSafeContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeProxyFactoryContract.js
var require_GnosisSafeProxyFactoryContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeProxyFactoryContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendCallOnlyContract.js
var require_MultiSendCallOnlyContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendCallOnlyContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendContract.js
var require_MultiSendContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SignMessageLibContract.js
var require_SignMessageLibContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SignMessageLibContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/ethereumLibs/EthAdapter.js
var require_EthAdapter = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/ethereumLibs/EthAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/types.js
var require_types = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OperationType = void 0;
    var OperationType;
    (function(OperationType2) {
      OperationType2[OperationType2["Call"] = 0] = "Call";
      OperationType2[OperationType2["DelegateCall"] = 1] = "DelegateCall";
    })(OperationType = exports.OperationType || (exports.OperationType = {}));
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js
var require_src2 = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_CompatibilityFallbackHandlerContract(), exports);
    __exportStar(require_CreateCallContract(), exports);
    __exportStar(require_GnosisSafeContract(), exports);
    __exportStar(require_GnosisSafeProxyFactoryContract(), exports);
    __exportStar(require_MultiSendCallOnlyContract(), exports);
    __exportStar(require_MultiSendContract(), exports);
    __exportStar(require_SignMessageLibContract(), exports);
    __exportStar(require_EthAdapter(), exports);
    __exportStar(require_types(), exports);
  }
});

// node_modules/@safe-global/safe-deployments/dist/types.js
var require_types2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_l2.json
var require_safe_l2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_l2.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
      released: true,
      contractName: "SafeL2",
      version: "1.4.1",
      networkAddresses: {
        "1": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "5": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "10": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "56": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "71": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "97": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "100": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "137": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "1030": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "1101": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "1442": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "4337": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "8192": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "8194": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "8453": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "10243": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "11235": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "13337": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "17000": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "42161": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "42220": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "54211": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "80001": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "84531": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "84532": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "11155111": "0x29fcB43b46531BcA003ddC8FCB67FFE91900C762"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "SafeModuleTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "additionalInfo",
              type: "bytes"
            }
          ],
          name: "SafeMultiSigTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe.json
var require_safe = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x41675C099F32341bf84BFc5382aF534df5C7461a",
      released: true,
      contractName: "Safe",
      version: "1.4.1",
      networkAddresses: {
        "1": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "5": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "10": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "56": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "71": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "97": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "100": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "137": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "1030": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "1101": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "1442": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "4337": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "8192": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "8194": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "8453": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "10243": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "11235": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "13337": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "17000": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "42161": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "42220": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "54211": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "80001": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "84531": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "84532": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "11155111": "0x41675C099F32341bf84BFc5382aF534df5C7461a"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe_l2.json
var require_gnosis_safe_l2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe_l2.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
      released: true,
      contractName: "GnosisSafeL2",
      version: "1.3.0",
      networkAddresses: {
        "1": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "3": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "4": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "5": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "10": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "11": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "12": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "18": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "25": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "28": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "30": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "31": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "39": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "40": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "41": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "42": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "44": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "46": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "50": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "51": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "56": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "57": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "61": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "63": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "69": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "71": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "81": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "82": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "83": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "97": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "100": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "106": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "108": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "109": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "111": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "122": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "123": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "137": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "148": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "155": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "169": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "204": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "246": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "250": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "255": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "280": "0x1727c2c531cf966f902E5927b98490fDFb3b2b70",
        "288": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "291": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "300": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "321": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "322": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "324": "0x1727c2c531cf966f902E5927b98490fDFb3b2b70",
        "336": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "338": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "420": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "424": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "570": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "588": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "592": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "595": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "599": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "686": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "787": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "919": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1001": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1008": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1030": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1088": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1101": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1111": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1112": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1115": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1116": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1230": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1231": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1284": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1285": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1287": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1294": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1442": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1559": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1663": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1807": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1890": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1891": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1984": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1998": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2001": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2002": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2008": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2019": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2020": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2021": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2221": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2222": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2358": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "3737": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "4002": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "4337": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "4460": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "4689": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "4918": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "4919": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "5000": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "5001": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "5003": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "5700": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "6102": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "7001": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "7332": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "7341": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "7700": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "8192": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "8194": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "8217": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "8453": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "9000": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "9001": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "9728": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "10000": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "10001": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "10081": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "10200": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "10243": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "11235": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "11437": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "11891": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "12357": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "13337": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "17000": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "17172": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "18231": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "23294": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "23295": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "34443": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "42161": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "42170": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "42220": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "43113": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "43114": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "43288": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "44787": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "45000": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "47805": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "54211": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "56288": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "57000": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "58008": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "59140": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "59144": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "71401": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "71402": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "73799": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "80001": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "80085": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "84531": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "84532": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "167008": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "200101": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "200202": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "333999": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "421611": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "421613": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "421614": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "534351": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "534352": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "534353": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "622277": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "713715": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "7777777": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "11155111": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "11155420": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "222000222": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "245022926": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "245022934": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "333000333": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "999999999": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1313161554": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1313161555": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1666600000": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1666700000": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "11297108099": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "11297108109": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "SafeModuleTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "additionalInfo",
              type: "bytes"
            }
          ],
          name: "SafeMultiSigTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe.json
var require_gnosis_safe = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
      released: true,
      contractName: "GnosisSafe",
      version: "1.3.0",
      networkAddresses: {
        "1": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "3": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "4": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "5": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "10": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "11": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "12": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "18": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "25": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "28": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "30": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "31": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "39": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "40": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "41": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "42": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "44": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "46": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "50": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "51": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "56": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "57": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "61": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "63": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "69": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "71": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "81": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "82": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "83": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "97": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "100": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "106": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "108": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "109": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "111": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "122": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "123": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "137": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "148": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "155": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "169": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "204": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "246": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "250": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "255": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "280": "0xB00ce5CCcdEf57e539ddcEd01DF43a13855d9910",
        "288": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "291": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "300": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "321": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "322": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "324": "0xB00ce5CCcdEf57e539ddcEd01DF43a13855d9910",
        "336": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "338": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "420": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "424": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "570": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "588": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "592": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "595": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "599": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "686": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "787": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "919": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1001": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1008": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1030": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1088": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1101": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1111": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1112": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1115": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1116": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1230": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1231": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1284": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1285": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1287": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1294": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1442": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1559": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1663": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1807": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1890": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1891": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1984": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1998": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2001": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2002": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2008": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2019": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2020": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2021": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2221": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2222": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2358": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "3737": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "4002": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "4337": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "4460": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "4689": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "4918": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "4919": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "5000": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "5001": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "5003": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "5700": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "6102": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "7001": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "7332": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "7341": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "7700": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "8192": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "8194": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "8217": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "8453": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "9000": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "9001": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "9728": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "10000": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "10001": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "10081": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "10200": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "10243": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "11235": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "11437": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "11891": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "12357": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "13337": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "17000": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "17172": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "18231": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "23294": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "23295": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "34443": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "42161": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "42170": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "42220": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "43113": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "43114": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "43288": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "44787": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "45000": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "47805": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "54211": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "56288": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "57000": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "58008": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "59140": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "59144": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "71401": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "71402": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "73799": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "80001": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "80085": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "84531": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "84532": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "167008": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "200101": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "200202": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "333999": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "421611": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "421613": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "421614": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "534351": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "534352": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "534353": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "622277": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "713715": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "7777777": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "11155111": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "11155420": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "222000222": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "245022926": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "245022934": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "333000333": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "999999999": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1313161554": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1313161555": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1666600000": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1666700000": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "11297108099": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "11297108109": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.2.0/gnosis_safe.json
var require_gnosis_safe2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.2.0/gnosis_safe.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
      released: true,
      contractName: "GnosisSafe",
      version: "1.2.0",
      networkAddresses: {
        "1": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "4": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "5": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "42": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "88": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "100": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "246": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "73799": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185"
      },
      abi: [
        {
          inputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "masterCopy",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          payable: true,
          stateMutability: "payable",
          type: "fallback"
        },
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_masterCopy",
              type: "address"
            }
          ],
          name: "changeMasterCopy",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: true,
          stateMutability: "payable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/gnosis_safe.json
var require_gnosis_safe3 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/gnosis_safe.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
      released: true,
      contractName: "GnosisSafe",
      version: "1.1.1",
      networkAddresses: {
        "1": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "4": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "5": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "42": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "88": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "100": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "246": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "73799": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F"
      },
      abi: [
        {
          inputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "masterCopy",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          payable: true,
          stateMutability: "payable",
          type: "fallback"
        },
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_masterCopy",
              type: "address"
            }
          ],
          name: "changeMasterCopy",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/gnosis_safe.json
var require_gnosis_safe4 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/gnosis_safe.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
      released: true,
      contractName: "GnosisSafe",
      version: "1.0.0",
      networkAddresses: {
        "1": "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
        "4": "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
        "5": "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
        "42": "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
        "100": "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A"
      },
      abi: [
        {
          constant: false,
          inputs: [
            { name: "owner", type: "address" },
            { name: "_threshold", type: "uint256" }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "DOMAIN_SEPARATOR_TYPEHASH",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [{ name: "owner", type: "address" }],
          name: "isOwner",
          outputs: [{ name: "", type: "bool" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "to", type: "address" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "operation", type: "uint8" }
          ],
          name: "execTransactionFromModule",
          outputs: [{ name: "success", type: "bool" }],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [{ name: "", type: "bytes32" }],
          name: "signedMessages",
          outputs: [{ name: "", type: "uint256" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [{ name: "module", type: "address" }],
          name: "enableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [{ name: "_threshold", type: "uint256" }],
          name: "changeThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            { name: "", type: "address" },
            { name: "", type: "bytes32" }
          ],
          name: "approvedHashes",
          outputs: [{ name: "", type: "uint256" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [{ name: "_masterCopy", type: "address" }],
          name: "changeMasterCopy",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SENTINEL_MODULES",
          outputs: [{ name: "", type: "address" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SENTINEL_OWNERS",
          outputs: [{ name: "", type: "address" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getOwners",
          outputs: [{ name: "", type: "address[]" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [{ name: "", type: "string" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "nonce",
          outputs: [{ name: "", type: "uint256" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getModules",
          outputs: [{ name: "", type: "address[]" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SAFE_MSG_TYPEHASH",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SAFE_TX_TYPEHASH",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "prevModule", type: "address" },
            { name: "module", type: "address" }
          ],
          name: "disableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "prevOwner", type: "address" },
            { name: "oldOwner", type: "address" },
            { name: "newOwner", type: "address" }
          ],
          name: "swapOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getThreshold",
          outputs: [{ name: "", type: "uint256" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "domainSeparator",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "prevOwner", type: "address" },
            { name: "owner", type: "address" },
            { name: "_threshold", type: "uint256" }
          ],
          name: "removeOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [{ name: "", type: "string" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        { payable: true, stateMutability: "payable", type: "fallback" },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "txHash", type: "bytes32" }],
          name: "ExecutionFailed",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "owner", type: "address" }],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "owner", type: "address" }],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "threshold", type: "uint256" }],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "module", type: "address" }],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "module", type: "address" }],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            { indexed: false, name: "newContract", type: "address" }
          ],
          name: "ContractCreation",
          type: "event"
        },
        {
          constant: false,
          inputs: [
            { name: "_owners", type: "address[]" },
            { name: "_threshold", type: "uint256" },
            { name: "to", type: "address" },
            { name: "data", type: "bytes" },
            { name: "paymentToken", type: "address" },
            { name: "payment", type: "uint256" },
            { name: "paymentReceiver", type: "address" }
          ],
          name: "setup",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "to", type: "address" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "operation", type: "uint8" },
            { name: "safeTxGas", type: "uint256" },
            { name: "baseGas", type: "uint256" },
            { name: "gasPrice", type: "uint256" },
            { name: "gasToken", type: "address" },
            { name: "refundReceiver", type: "address" },
            { name: "signatures", type: "bytes" }
          ],
          name: "execTransaction",
          outputs: [{ name: "success", type: "bool" }],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "to", type: "address" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "operation", type: "uint8" }
          ],
          name: "requiredTxGas",
          outputs: [{ name: "", type: "uint256" }],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [{ name: "hashToApprove", type: "bytes32" }],
          name: "approveHash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [{ name: "_data", type: "bytes" }],
          name: "signMessage",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "_data", type: "bytes" },
            { name: "_signature", type: "bytes" }
          ],
          name: "isValidSignature",
          outputs: [{ name: "", type: "bytes4" }],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [{ name: "message", type: "bytes" }],
          name: "getMessageHash",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            { name: "to", type: "address" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "operation", type: "uint8" },
            { name: "safeTxGas", type: "uint256" },
            { name: "baseGas", type: "uint256" },
            { name: "gasPrice", type: "uint256" },
            { name: "gasToken", type: "address" },
            { name: "refundReceiver", type: "address" },
            { name: "_nonce", type: "uint256" }
          ],
          name: "encodeTransactionData",
          outputs: [{ name: "", type: "bytes" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            { name: "to", type: "address" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "operation", type: "uint8" },
            { name: "safeTxGas", type: "uint256" },
            { name: "baseGas", type: "uint256" },
            { name: "gasPrice", type: "uint256" },
            { name: "gasToken", type: "address" },
            { name: "refundReceiver", type: "address" },
            { name: "_nonce", type: "uint256" }
          ],
          name: "getTransactionHash",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/utils.js
var require_utils4 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findDeployment = void 0;
    var satisfies_1 = __importDefault(require_satisfies());
    var DEFAULT_FILTER = { released: true };
    var findDeployment = (criteria = DEFAULT_FILTER, deployments) => {
      const criteriaWithDefaults = Object.assign(Object.assign({}, DEFAULT_FILTER), criteria);
      return deployments.find((deployment) => {
        if (typeof criteriaWithDefaults.version !== "undefined" && !(0, satisfies_1.default)(deployment.version, criteriaWithDefaults.version))
          return false;
        if (typeof criteriaWithDefaults.released === "boolean" && deployment.released != criteriaWithDefaults.released)
          return false;
        if (criteriaWithDefaults.network && !deployment.networkAddresses[criteriaWithDefaults.network])
          return false;
        return true;
      });
    };
    exports.findDeployment = findDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/safes.js
var require_safes = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/safes.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSafeL2SingletonDeployment = exports._safeL2Deployments = exports.getSafeSingletonDeployment = exports._safeDeployments = void 0;
    var safe_l2_json_1 = __importDefault(require_safe_l2());
    var safe_json_1 = __importDefault(require_safe());
    var gnosis_safe_l2_json_1 = __importDefault(require_gnosis_safe_l2());
    var gnosis_safe_json_1 = __importDefault(require_gnosis_safe());
    var gnosis_safe_json_2 = __importDefault(require_gnosis_safe2());
    var gnosis_safe_json_3 = __importDefault(require_gnosis_safe3());
    var gnosis_safe_json_4 = __importDefault(require_gnosis_safe4());
    var utils_1 = require_utils4();
    exports._safeDeployments = [
      safe_json_1.default,
      gnosis_safe_json_1.default,
      gnosis_safe_json_2.default,
      gnosis_safe_json_3.default,
      gnosis_safe_json_4.default
    ];
    var getSafeSingletonDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, exports._safeDeployments);
    };
    exports.getSafeSingletonDeployment = getSafeSingletonDeployment;
    exports._safeL2Deployments = [
      safe_l2_json_1.default,
      gnosis_safe_l2_json_1.default
    ];
    var getSafeL2SingletonDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, exports._safeL2Deployments);
    };
    exports.getSafeL2SingletonDeployment = getSafeL2SingletonDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/proxy_factory.json
var require_proxy_factory = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/proxy_factory.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
      released: true,
      contractName: "ProxyFactory",
      version: "1.0.0",
      networkAddresses: {
        "1": "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
        "4": "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
        "5": "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
        "42": "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
        "100": "0x12302fE9c02ff50939BaAaaf415fc226C078613C"
      },
      abi: [
        {
          constant: false,
          inputs: [
            {
              name: "_mastercopy",
              type: "address"
            },
            {
              name: "initializer",
              type: "bytes"
            },
            {
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "masterCopy",
              type: "address"
            },
            {
              name: "data",
              type: "bytes"
            }
          ],
          name: "createProxy",
          outputs: [
            {
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyRuntimeCode",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              name: "proxy",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/proxy_factory.json
var require_proxy_factory2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/proxy_factory.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
      released: true,
      contractName: "ProxyFactory",
      version: "1.1.1",
      networkAddresses: {
        "1": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "4": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "5": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "42": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "88": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "100": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "246": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "73799": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "masterCopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          name: "createProxy",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyRuntimeCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_mastercopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_mastercopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            },
            {
              internalType: "contract IProxyCreationCallback",
              name: "callback",
              type: "address"
            }
          ],
          name: "createProxyWithCallback",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_mastercopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "calculateCreateProxyWithNonceAddress",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/proxy_factory.json
var require_proxy_factory3 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/proxy_factory.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
      released: true,
      contractName: "GnosisSafeProxyFactory",
      version: "1.3.0",
      networkAddresses: {
        "1": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "3": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "4": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "5": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "10": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "11": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "12": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "18": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "25": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "28": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "30": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "31": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "39": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "40": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "41": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "42": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "44": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "46": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "50": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "51": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "56": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "57": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "61": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "63": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "69": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "71": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "81": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "82": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "83": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "97": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "100": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "106": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "108": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "109": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "111": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "122": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "123": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "137": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "148": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "155": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "169": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "204": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "246": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "250": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "255": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "280": "0xDAec33641865E4651fB43181C6DB6f7232Ee91c2",
        "288": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "291": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "300": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "321": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "322": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "324": "0xDAec33641865E4651fB43181C6DB6f7232Ee91c2",
        "336": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "338": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "420": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "424": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "570": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "588": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "592": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "595": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "599": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "686": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "787": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "919": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1001": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1008": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1030": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1088": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1101": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1111": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1112": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1115": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1116": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1230": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1231": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1284": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1285": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1287": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1294": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1442": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1559": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1663": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1807": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1890": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1891": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1984": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1998": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2001": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2002": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2008": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2019": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2020": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2021": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2221": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2222": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2358": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "3737": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "4002": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "4337": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "4460": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "4689": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "4918": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "4919": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "5000": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "5001": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "5003": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "5700": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "6102": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "7001": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "7332": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "7341": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "7700": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "8192": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "8194": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "8217": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "8453": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "9000": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "9001": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "9728": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "10000": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "10001": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "10081": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "10200": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "10243": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "11235": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "11437": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "11891": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "12357": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "13337": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "17000": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "17172": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "18231": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "23294": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "23295": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "34443": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "42161": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "42170": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "42220": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "43113": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "43114": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "43288": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "44787": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "45000": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "47805": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "54211": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "56288": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "57000": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "58008": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "59140": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "59144": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "71401": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "71402": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "73799": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "80001": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "80085": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "84531": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "84532": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "167008": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "200101": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "200202": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "333999": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "421611": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "421613": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "421614": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "534351": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "534352": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "534353": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "622277": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "713715": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "7777777": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "11155111": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "11155420": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "222000222": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "245022926": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "245022934": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "333000333": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "999999999": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1313161554": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1313161555": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1666600000": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1666700000": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "11297108099": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "11297108109": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "calculateCreateProxyWithNonceAddress",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          name: "createProxy",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            },
            {
              internalType: "contract IProxyCreationCallback",
              name: "callback",
              type: "address"
            }
          ],
          name: "createProxyWithCallback",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [],
          name: "proxyRuntimeCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_proxy_factory.json
var require_safe_proxy_factory = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/safe_proxy_factory.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
      contractName: "SafeProxyFactory",
      version: "1.4.1",
      released: true,
      networkAddresses: {
        "1": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "5": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "10": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "56": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "71": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "97": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "100": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "137": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "1030": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "1101": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "1442": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "4337": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "8192": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "8194": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "8453": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "10243": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "11235": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "13337": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "17000": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "42161": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "42220": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "54211": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "80001": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "84531": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "84532": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "11155111": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createChainSpecificProxyWithNonce",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            },
            {
              internalType: "contract IProxyCreationCallback",
              name: "callback",
              type: "address"
            }
          ],
          name: "createProxyWithCallback",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/factories.js
var require_factories = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/factories.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProxyFactoryDeployment = void 0;
    var proxy_factory_json_1 = __importDefault(require_proxy_factory());
    var proxy_factory_json_2 = __importDefault(require_proxy_factory2());
    var proxy_factory_json_3 = __importDefault(require_proxy_factory3());
    var safe_proxy_factory_json_1 = __importDefault(require_safe_proxy_factory());
    var utils_1 = require_utils4();
    var factoryDeployments = [
      safe_proxy_factory_json_1.default,
      proxy_factory_json_3.default,
      proxy_factory_json_2.default,
      proxy_factory_json_1.default
    ];
    var getProxyFactoryDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, factoryDeployments);
    };
    exports.getProxyFactoryDeployment = getProxyFactoryDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/create_call.json
var require_create_call = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/create_call.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
      released: true,
      contractName: "CreateCall",
      version: "1.3.0",
      networkAddresses: {
        "1": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "3": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "4": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "5": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "10": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "11": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "12": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "18": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "25": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "28": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "30": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "31": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "39": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "40": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "41": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "42": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "44": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "46": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "50": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "51": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "56": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "57": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "61": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "63": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "69": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "71": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "81": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "82": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "83": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "97": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "100": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "106": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "108": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "109": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "111": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "122": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "123": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "137": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "148": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "155": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "169": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "204": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "246": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "250": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "255": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "280": "0xcB8e5E438c5c2b45FbE17B02Ca9aF91509a8ad56",
        "288": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "291": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "300": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "321": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "322": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "324": "0xcB8e5E438c5c2b45FbE17B02Ca9aF91509a8ad56",
        "336": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "338": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "420": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "424": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "570": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "588": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "592": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "595": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "599": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "686": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "787": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "919": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1001": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1008": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1030": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1088": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1101": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1111": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1112": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1115": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1116": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1230": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1231": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1284": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1285": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1287": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1294": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1442": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1559": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1663": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1807": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1890": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1891": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1984": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1998": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2001": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2002": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2008": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2019": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2020": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2021": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2221": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2222": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2358": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "3737": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "4002": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "4337": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "4460": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "4689": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "4918": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "4919": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "5000": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "5001": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "5003": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "5700": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "6102": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "7001": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "7332": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "7341": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "7700": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "8192": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "8194": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "8217": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "8453": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "9000": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "9001": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "9728": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "10000": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "10001": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "10081": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "10200": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "10243": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "11235": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "11437": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "11891": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "12357": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "13337": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "17000": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "17172": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "18231": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "23294": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "23295": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "34443": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "42161": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "42170": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "42220": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "43113": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "43114": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "43288": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "44787": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "45000": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "47805": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "54211": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "56288": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "57000": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "58008": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "59140": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "59144": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "71401": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "71402": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "73799": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "80001": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "80085": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "84531": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "84532": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "167008": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "200101": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "200202": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "333999": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "421611": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "421613": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "421614": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "534351": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "534352": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "534353": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "622277": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "713715": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "7777777": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "11155111": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "11155420": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "222000222": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "245022926": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "245022934": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "333000333": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "999999999": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1313161554": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1313161555": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1666600000": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1666700000": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "11297108099": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "11297108109": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          name: "ContractCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            }
          ],
          name: "performCreate",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32"
            }
          ],
          name: "performCreate2",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/create_call.json
var require_create_call2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/create_call.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
      released: true,
      contractName: "CreateCall",
      version: "1.4.1",
      networkAddresses: {
        "1": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "5": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "10": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "56": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "71": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "97": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "100": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "137": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "1030": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "1101": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "1442": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "4337": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "8192": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "8194": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "8453": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "10243": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "11235": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "13337": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "17000": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "42161": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "42220": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "54211": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "80001": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "84531": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "84532": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "11155111": "0x9b35Af71d77eaf8d7e40252370304687390A1A52"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          name: "ContractCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            }
          ],
          name: "performCreate",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32"
            }
          ],
          name: "performCreate2",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/multi_send.json
var require_multi_send = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/multi_send.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
      released: true,
      contractName: "MultiSend",
      version: "1.1.1",
      networkAddresses: {
        "1": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "4": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "5": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "42": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "88": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "100": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "246": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "73799": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD"
      },
      abi: [
        {
          inputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send.json
var require_multi_send2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
      released: true,
      contractName: "MultiSend",
      version: "1.3.0",
      networkAddresses: {
        "1": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "3": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "4": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "5": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "10": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "11": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "12": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "18": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "25": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "28": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "30": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "31": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "39": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "40": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "41": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "42": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "44": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "46": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "50": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "51": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "56": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "57": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "61": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "63": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "69": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "71": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "81": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "82": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "83": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "97": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "100": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "106": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "108": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "109": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "111": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "122": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "123": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "137": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "148": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "155": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "169": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "204": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "246": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "250": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "255": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "280": "0x0dFcccB95225ffB03c6FBB2559B530C2B7C8A912",
        "288": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "291": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "300": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "321": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "322": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "324": "0x0dFcccB95225ffB03c6FBB2559B530C2B7C8A912",
        "336": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "338": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "420": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "424": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "570": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "588": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "592": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "595": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "599": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "686": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "787": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "919": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1001": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1008": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1030": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1088": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1101": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1111": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1112": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1115": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1116": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1230": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1231": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1284": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1285": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1287": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1294": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1442": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1559": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1663": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1807": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1890": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1891": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1984": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1998": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2001": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2002": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2008": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2019": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2020": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2021": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2221": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2222": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2358": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "3737": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "4002": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "4337": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "4460": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "4689": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "4918": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "4919": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "5000": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "5001": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "5003": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "5700": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "6102": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "7001": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "7332": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "7341": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "7700": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "8192": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "8194": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "8217": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "8453": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "9000": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "9001": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "9728": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "10000": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "10001": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "10081": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "10200": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "10243": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "11235": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "11437": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "11891": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "12357": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "13337": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "17000": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "17172": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "18231": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "23294": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "23295": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "34443": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "42161": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "42170": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "42220": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "43113": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "43114": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "43288": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "44787": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "45000": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "47805": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "54211": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "56288": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "57000": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "58008": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "59140": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "59144": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "71401": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "71402": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "73799": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "80001": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "80085": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "84531": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "84532": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "167008": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "200101": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "200202": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "333999": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "421611": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "421613": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "421614": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "534351": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "534352": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "534353": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "622277": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "713715": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "7777777": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "11155111": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "11155420": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "222000222": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "245022926": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "245022934": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "333000333": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "999999999": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1313161554": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1313161555": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1666600000": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1666700000": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "11297108099": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "11297108109": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/multi_send.json
var require_multi_send3 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/multi_send.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
      released: true,
      contractName: "MultiSend",
      version: "1.4.1",
      networkAddresses: {
        "1": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "5": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "10": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "56": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "71": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "97": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "100": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "137": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "1030": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "1101": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "1442": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "4337": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "8192": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "8194": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "8453": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "10243": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "11235": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "13337": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "17000": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "42161": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "42220": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "54211": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "80001": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "84531": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "84532": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "11155111": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send_call_only.json
var require_multi_send_call_only = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send_call_only.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
      released: true,
      contractName: "MultiSendCallOnly",
      version: "1.3.0",
      networkAddresses: {
        "1": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "3": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "4": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "5": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "10": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "11": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "12": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "18": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "25": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "28": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "30": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "31": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "39": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "40": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "41": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "42": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "44": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "46": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "50": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "51": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "56": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "57": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "61": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "63": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "69": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "71": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "81": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "82": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "83": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "97": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "100": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "106": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "108": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "109": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "111": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "122": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "123": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "137": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "148": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "155": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "169": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "204": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "246": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "250": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "255": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "280": "0xf220D3b4DFb23C4ade8C88E526C1353AbAcbC38F",
        "288": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "291": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "300": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "321": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "322": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "324": "0xf220D3b4DFb23C4ade8C88E526C1353AbAcbC38F",
        "336": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "338": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "420": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "424": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "570": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "588": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "592": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "595": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "599": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "686": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "787": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "919": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1001": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1008": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1030": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1088": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1101": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1111": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1112": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1115": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1116": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1230": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1231": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1284": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1285": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1287": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1294": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1442": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1559": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1663": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1807": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1890": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1891": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1984": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1998": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2001": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2002": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2008": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2019": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2020": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2021": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2221": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2222": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2358": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "3737": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "4002": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "4337": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "4460": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "4689": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "4918": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "4919": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "5000": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "5001": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "5003": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "5700": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "6102": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "7001": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "7332": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "7341": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "7700": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "8192": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "8194": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "8217": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "8453": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "9000": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "9001": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "9728": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "10000": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "10001": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "10081": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "10200": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "10243": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "11235": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "11437": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "11891": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "12357": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "13337": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "17000": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "17172": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "18231": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "23294": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "23295": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "34443": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "42161": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "42170": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "42220": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "43113": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "43114": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "43288": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "44787": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "45000": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "47805": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "54211": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "56288": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "57000": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "58008": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "59140": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "59144": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "71401": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "71402": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "73799": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "80001": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "80085": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "84531": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "84532": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "167008": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "200101": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "200202": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "333999": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "421611": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "421613": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "421614": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "534351": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "534352": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "534353": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "622277": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "713715": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "7777777": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "11155111": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "11155420": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "222000222": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "245022926": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "245022934": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "333000333": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "999999999": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1313161554": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1313161555": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1666600000": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1666700000": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "11297108099": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "11297108109": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/multi_send_call_only.json
var require_multi_send_call_only2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/multi_send_call_only.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
      released: true,
      contractName: "MultiSendCallOnly",
      version: "1.4.1",
      networkAddresses: {
        "1": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "5": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "10": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "56": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "71": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "97": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "100": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "137": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "1030": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "1101": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "1442": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "4337": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "8192": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "8194": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "8453": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "10243": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "11235": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "13337": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "17000": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "42161": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "42220": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "54211": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "80001": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "84531": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "84532": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "11155111": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/sign_message_lib.json
var require_sign_message_lib = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/sign_message_lib.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
      contractName: "SignMessageLib",
      version: "1.3.0",
      released: true,
      networkAddresses: {
        "1": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "3": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "4": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "5": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "10": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "11": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "12": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "18": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "25": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "28": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "30": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "31": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "39": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "40": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "41": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "42": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "44": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "46": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "50": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "51": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "56": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "57": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "61": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "63": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "69": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "71": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "81": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "82": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "83": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "97": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "100": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "106": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "108": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "109": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "111": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "122": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "123": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "137": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "148": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "155": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "169": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "204": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "246": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "250": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "255": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "280": "0x357147caf9C0cCa67DfA0CF5369318d8193c8407",
        "288": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "291": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "300": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "321": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "322": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "324": "0x357147caf9C0cCa67DfA0CF5369318d8193c8407",
        "336": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "338": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "420": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "424": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "570": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "588": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "592": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "595": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "599": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "686": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "787": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "919": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1001": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1008": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1030": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1088": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1101": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1111": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1112": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1115": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1116": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1230": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1231": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1284": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1285": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1287": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1294": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1442": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1559": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1663": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1807": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1890": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1891": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1984": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1998": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2001": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2002": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2008": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2019": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2020": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2021": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2221": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2222": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2358": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "3737": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "4002": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "4337": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "4460": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "4689": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "4918": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "4919": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "5000": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "5001": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "5003": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "5700": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "6102": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "7001": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "7332": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "7341": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "7700": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "8192": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "8194": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "8217": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "8453": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "9000": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "9001": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "9728": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "10000": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "10001": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "10081": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "10200": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "10243": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "11235": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "11437": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "11891": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "12357": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "13337": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "17000": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "17172": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "18231": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "23294": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "23295": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "34443": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "42161": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "42170": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "42220": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "43113": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "43114": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "43288": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "44787": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "45000": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "47805": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "54211": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "56288": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "57000": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "58008": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "59140": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "59144": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "71401": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "71402": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "73799": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "80001": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "80085": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "84531": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "84532": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "167008": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "200101": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "200202": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "333999": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "421611": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "421613": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "421614": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "534351": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "534352": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "534353": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "622277": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "713715": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "7777777": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "11155111": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "11155420": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "222000222": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "245022926": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "245022934": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "333000333": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "999999999": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1313161554": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1313161555": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1666600000": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1666700000": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "11297108099": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "11297108109": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/sign_message_lib.json
var require_sign_message_lib2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/sign_message_lib.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
      contractName: "SignMessageLib",
      version: "1.4.1",
      released: true,
      networkAddresses: {
        "1": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "5": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "10": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "56": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "71": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "97": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "100": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "137": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "1030": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "1101": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "1442": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "4337": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "8192": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "8194": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "8453": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "10243": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "11235": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "13337": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "17000": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "42161": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "42220": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "54211": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "80001": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "84531": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "84532": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9",
        "11155111": "0xd53cd0aB83D845Ac265BE939c57F53AD838012c9"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/libs.js
var require_libs = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/libs.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSignMessageLibDeployment = exports.getCreateCallDeployment = exports.getMultiSendCallOnlyDeployment = exports.getMultiSendDeployment = void 0;
    var create_call_json_1 = __importDefault(require_create_call());
    var create_call_json_2 = __importDefault(require_create_call2());
    var multi_send_json_1 = __importDefault(require_multi_send());
    var multi_send_json_2 = __importDefault(require_multi_send2());
    var multi_send_json_3 = __importDefault(require_multi_send3());
    var multi_send_call_only_json_1 = __importDefault(require_multi_send_call_only());
    var multi_send_call_only_json_2 = __importDefault(require_multi_send_call_only2());
    var sign_message_lib_json_1 = __importDefault(require_sign_message_lib());
    var sign_message_lib_json_2 = __importDefault(require_sign_message_lib2());
    var utils_1 = require_utils4();
    var multiSendDeployments = [
      multi_send_json_3.default,
      multi_send_json_2.default,
      multi_send_json_1.default
    ];
    var getMultiSendDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, multiSendDeployments);
    };
    exports.getMultiSendDeployment = getMultiSendDeployment;
    var multiSendCallOnlyDeployments = [
      multi_send_call_only_json_2.default,
      multi_send_call_only_json_1.default
    ];
    var getMultiSendCallOnlyDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, multiSendCallOnlyDeployments);
    };
    exports.getMultiSendCallOnlyDeployment = getMultiSendCallOnlyDeployment;
    var createCallDeployments = [
      create_call_json_2.default,
      create_call_json_1.default
    ];
    var getCreateCallDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, createCallDeployments);
    };
    exports.getCreateCallDeployment = getCreateCallDeployment;
    var signMessageLibDeployments = [
      sign_message_lib_json_2.default,
      sign_message_lib_json_1.default
    ];
    var getSignMessageLibDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, signMessageLibDeployments);
    };
    exports.getSignMessageLibDeployment = getSignMessageLibDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/default_callback_handler.json
var require_default_callback_handler = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/default_callback_handler.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
      released: true,
      contractName: "DefaultCallbackHandler",
      version: "1.1.1",
      networkAddresses: {
        "1": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "4": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "5": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "42": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "88": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "100": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "246": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "73799": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44"
      },
      abi: [
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/compatibility_fallback_handler.json
var require_compatibility_fallback_handler = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/compatibility_fallback_handler.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
      released: true,
      contractName: "CompatibilityFallbackHandler",
      version: "1.3.0",
      networkAddresses: {
        "1": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "3": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "4": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "5": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "10": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "11": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "12": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "18": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "25": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "28": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "30": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "31": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "39": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "40": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "41": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "42": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "44": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "46": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "50": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "51": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "56": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "57": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "61": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "63": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "69": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "71": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "81": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "82": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "83": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "97": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "100": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "106": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "108": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "109": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "111": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "122": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "123": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "137": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "148": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "155": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "169": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "204": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "246": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "250": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "255": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "280": "0x2f870a80647BbC554F3a0EBD093f11B4d2a7492A",
        "288": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "291": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "300": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "321": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "322": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "324": "0x2f870a80647BbC554F3a0EBD093f11B4d2a7492A",
        "336": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "338": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "420": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "424": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "570": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "588": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "592": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "595": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "599": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "686": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "787": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "919": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1001": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1008": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1030": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1088": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1101": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1111": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1112": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1115": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1116": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1230": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1231": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1284": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1285": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1287": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1294": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1442": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1559": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1663": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1807": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1890": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1891": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1984": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1998": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2001": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2002": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2008": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2019": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2020": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2021": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2221": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2222": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2358": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "3737": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "4002": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "4337": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "4460": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "4689": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "4918": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "4919": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "5000": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "5001": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "5003": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "5700": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "6102": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "7001": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "7332": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "7341": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "7700": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "8192": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "8194": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "8217": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "8453": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "9000": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "9001": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "9728": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "10000": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "10001": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "10081": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "10200": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "10243": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "11235": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "11437": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "11891": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "12357": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "13337": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "17000": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "17172": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "18231": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "23294": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "23295": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "34443": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "42161": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "42170": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "42220": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "43113": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "43114": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "43288": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "44787": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "45000": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "47805": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "54211": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "56288": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "57000": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "58008": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "59140": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "59144": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "71401": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "71402": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "73799": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "80001": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "80085": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "84531": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "84532": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "167008": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "200101": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "200202": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "333999": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "421611": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "421613": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "421614": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "534351": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "534352": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "534353": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "622277": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "713715": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "7777777": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "11155111": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "11155420": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "222000222": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "245022926": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "245022934": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "333000333": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "999999999": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1313161554": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1313161555": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1666600000": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1666700000": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "11297108099": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "11297108109": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4"
      },
      abi: [
        {
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract GnosisSafe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHashForSafe",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "bytes",
              name: "response",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/compatibility_fallback_handler.json
var require_compatibility_fallback_handler2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/compatibility_fallback_handler.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
      released: true,
      contractName: "CompatibilityFallbackHandler",
      version: "1.4.1",
      networkAddresses: {
        "1": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "5": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "10": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "56": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "71": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "97": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "100": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "137": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "1030": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "1101": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "1442": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "4337": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "8192": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "8194": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "8453": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "10243": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "11235": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "13337": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "17000": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "42161": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "42220": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "54211": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "80001": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "84531": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "84532": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99",
        "11155111": "0xfd0732Dc9E303f09fCEf3a7388Ad10A83459Ec99"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "contract Safe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "encodeMessageDataForSafe",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract Safe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHashForSafe",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "bytes",
              name: "response",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/handler.js
var require_handler = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/handler.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFallbackHandlerDeployment = exports.getCompatibilityFallbackHandlerDeployment = exports.getDefaultCallbackHandlerDeployment = void 0;
    var default_callback_handler_json_1 = __importDefault(require_default_callback_handler());
    var compatibility_fallback_handler_json_1 = __importDefault(require_compatibility_fallback_handler());
    var compatibility_fallback_handler_json_2 = __importDefault(require_compatibility_fallback_handler2());
    var utils_1 = require_utils4();
    var defaultCallbackHandlerDeployments = [
      default_callback_handler_json_1.default
    ];
    var getDefaultCallbackHandlerDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, defaultCallbackHandlerDeployments);
    };
    exports.getDefaultCallbackHandlerDeployment = getDefaultCallbackHandlerDeployment;
    var compatFallbackHandlerDeployments = [
      compatibility_fallback_handler_json_2.default,
      compatibility_fallback_handler_json_1.default
    ];
    var getCompatibilityFallbackHandlerDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, compatFallbackHandlerDeployments);
    };
    exports.getCompatibilityFallbackHandlerDeployment = getCompatibilityFallbackHandlerDeployment;
    var fallbackHandlerDeployments = [
      compatibility_fallback_handler_json_2.default,
      compatibility_fallback_handler_json_1.default,
      default_callback_handler_json_1.default
    ];
    var getFallbackHandlerDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, fallbackHandlerDeployments);
    };
    exports.getFallbackHandlerDeployment = getFallbackHandlerDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/simulate_tx_accessor.json
var require_simulate_tx_accessor = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/simulate_tx_accessor.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
      released: true,
      contractName: "SimulateTxAccessor",
      version: "1.3.0",
      networkAddresses: {
        "1": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "3": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "4": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "5": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "10": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "11": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "12": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "18": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "25": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "28": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "30": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "31": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "39": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "40": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "41": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "42": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "44": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "46": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "50": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "51": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "56": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "57": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "61": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "63": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "69": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "71": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "81": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "82": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "83": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "97": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "100": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "106": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "108": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "109": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "111": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "122": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "123": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "137": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "148": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "155": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "169": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "204": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "246": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "250": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "255": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "280": "0x4191E2e12E8BC5002424CE0c51f9947b02675a44",
        "288": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "291": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "300": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "321": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "322": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "324": "0x4191E2e12E8BC5002424CE0c51f9947b02675a44",
        "336": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "338": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "420": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "424": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "570": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "588": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "592": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "595": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "599": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "686": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "787": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "919": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1001": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1008": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1030": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1088": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1101": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1111": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1112": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1115": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1116": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1230": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1231": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1284": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1285": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1287": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1294": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1442": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1559": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1663": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1807": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1890": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1891": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1984": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1998": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2001": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2002": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2008": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2019": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2020": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2021": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2221": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2222": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2358": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "3737": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "4002": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "4337": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "4460": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "4689": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "4918": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "4919": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "5000": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "5001": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "5003": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "5700": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "6102": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "7001": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "7332": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "7341": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "7700": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "8192": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "8194": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "8217": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "8453": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "9000": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "9001": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "9728": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "10000": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "10001": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "10081": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "10200": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "10243": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "11235": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "11437": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "11891": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "12357": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "13337": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "17000": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "17172": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "18231": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "23294": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "23295": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "34443": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "42161": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "42170": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "42220": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "43113": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "43114": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "43288": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "44787": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "45000": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "47805": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "54211": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "56288": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "57000": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "58008": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "59140": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "59144": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "71401": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "71402": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "73799": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "80001": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "80085": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "84531": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "84532": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "167008": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "200101": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "200202": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "333999": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "421611": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "421613": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "421614": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "534351": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "534352": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "534353": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "622277": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "713715": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "7777777": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "11155111": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "11155420": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "222000222": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "245022926": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "245022934": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "333000333": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "999999999": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1313161554": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1313161555": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1666600000": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1666700000": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "11297108099": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "11297108109": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "uint256",
              name: "estimate",
              type: "uint256"
            },
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/simulate_tx_accessor.json
var require_simulate_tx_accessor2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.1/simulate_tx_accessor.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
      released: true,
      contractName: "SimulateTxAccessor",
      version: "1.4.1",
      networkAddresses: {
        "1": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "5": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "10": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "56": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "71": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "97": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "100": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "137": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "1030": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "1101": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "1442": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "4337": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "8192": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "8194": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "8453": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "10243": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "11235": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "13337": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "17000": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "42161": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "42220": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "54211": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "80001": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "84531": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "84532": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "11155111": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "uint256",
              name: "estimate",
              type: "uint256"
            },
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/accessors.js
var require_accessors = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/accessors.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSimulateTxAccessorDeployment = void 0;
    var simulate_tx_accessor_json_1 = __importDefault(require_simulate_tx_accessor());
    var simulate_tx_accessor_json_2 = __importDefault(require_simulate_tx_accessor2());
    var utils_1 = require_utils4();
    var accessorDeployments = [
      simulate_tx_accessor_json_2.default,
      simulate_tx_accessor_json_1.default
    ];
    var getSimulateTxAccessorDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, accessorDeployments);
    };
    exports.getSimulateTxAccessorDeployment = getSimulateTxAccessorDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_types2(), exports);
    __exportStar(require_safes(), exports);
    __exportStar(require_factories(), exports);
    __exportStar(require_libs(), exports);
    __exportStar(require_handler(), exports);
    __exportStar(require_accessors(), exports);
  }
});

// node_modules/@safe-global/safe-ethers-adapters/dist/src/utils.js
var require_utils5 = __commonJS({
  "node_modules/@safe-global/safe-ethers-adapters/dist/src/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapReceipt = exports.createLibInterface = exports.createLibAddress = exports.createLibDeployment = void 0;
    var abi_1 = (init_lib5(), __toCommonJS(lib_exports5));
    var address_1 = (init_lib3(), __toCommonJS(lib_exports3));
    var safe_deployments_1 = require_dist3();
    exports.createLibDeployment = (0, safe_deployments_1.getCreateCallDeployment)();
    exports.createLibAddress = exports.createLibDeployment.defaultAddress;
    exports.createLibInterface = new abi_1.Interface(exports.createLibDeployment.abi);
    var mapStatus = (receipt) => {
      const success = receipt.logs.find((log) => log.topics[0] === "0x442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e");
      return !!success ? 1 : 0;
    };
    var mapContractAddress = (receipt, safeTx) => {
      if (safeTx.to.toLowerCase() === exports.createLibAddress.toLowerCase()) {
        const creationLog = receipt.logs.find((log) => log.topics[0] === "0x4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b511");
        if (creationLog)
          return (0, address_1.getAddress)("0x" + creationLog.data.slice(creationLog.data.length - 40));
      }
      return receipt.contractAddress;
    };
    var mapReceipt = (receipt, safeTx) => {
      receipt.status = mapStatus(receipt);
      receipt.contractAddress = mapContractAddress(receipt, safeTx);
      return receipt;
    };
    exports.mapReceipt = mapReceipt;
  }
});

// node_modules/@safe-global/safe-ethers-adapters/dist/src/signer.js
var require_signer = __commonJS({
  "node_modules/@safe-global/safe-ethers-adapters/dist/src/signer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SafeEthersSigner = void 0;
    var abstract_signer_1 = (init_lib6(), __toCommonJS(lib_exports6));
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_types_1 = require_src2();
    var utils_1 = require_utils5();
    var sleep = (duration) => new Promise((resolve) => setTimeout(resolve, duration));
    var SafeEthersSigner2 = class extends abstract_signer_1.VoidSigner {
      /**
       * Creates an instance of the SafeEthersSigner.
       * @param safe - Safe that should be used
       * @param service - Services to which the transactions should be proposed to
       * @param provider - (Optional) Provider that should be used for blockchain interactions. By default the provider from the signer is used.
       * @param options - (Optional) Additional options (e.g. polling delay when waiting for a transaction to be mined)
       * @returns The SafeEthersSigner instance
       */
      constructor(safe, service, provider, options) {
        super(safe.getAddress(), provider);
        this.service = service;
        this.safe = safe;
        this.options = options;
      }
      async buildTransactionResponse(safeTxHash, safeTx) {
        const connectedSafe = await this.safe;
        const connectedService = this.service;
        return {
          to: safeTx.to,
          value: bignumber_1.BigNumber.from(safeTx.value),
          data: safeTx.data,
          operation: safeTx.operation,
          gasLimit: bignumber_1.BigNumber.from(safeTx.safeTxGas),
          gasPrice: bignumber_1.BigNumber.from(0),
          nonce: safeTx.nonce,
          chainId: await connectedSafe.getChainId(),
          hash: safeTxHash,
          from: this.address,
          confirmations: 0,
          wait: async (confirmations) => {
            var _a, _b;
            while (true) {
              try {
                const txDetails = await connectedService.getSafeTxDetails(safeTxHash);
                if (txDetails.transactionHash) {
                  this._checkProvider("sendTransaction");
                  const receipt = await this.provider.waitForTransaction(txDetails.transactionHash, confirmations);
                  return (0, utils_1.mapReceipt)(receipt, safeTx);
                }
              } catch (e) {
              }
              await sleep((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.pollingDelay) !== null && _b !== void 0 ? _b : 5e3);
            }
          }
        };
      }
      /**
       * Populates all fields in a transaction, signs it and sends it to the Safe transaction service
       *
       * @param transaction - The transaction what should be send
       * @returns A promise that resolves to a SafeTransactionReponse, that contains all the information of the transaction.
       */
      async sendTransaction(transaction) {
        var _a, _b, _c;
        const tx = await transaction;
        let operation = safe_core_sdk_types_1.OperationType.Call;
        let to = await tx.to;
        let data = (_b = (_a = await tx.data) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "0x";
        let value = bignumber_1.BigNumber.from((_c = await tx.value) !== null && _c !== void 0 ? _c : 0);
        if (!to) {
          to = utils_1.createLibAddress;
          data = utils_1.createLibInterface.encodeFunctionData("performCreate", [value, data]);
          value = bignumber_1.BigNumber.from(0);
          operation = safe_core_sdk_types_1.OperationType.DelegateCall;
        }
        const baseTx = {
          to,
          data,
          value: value.toString(),
          operation
        };
        const safeTxGas = await this.service.estimateSafeTx(this.address, baseTx);
        const connectedSafe = await this.safe;
        const safeTransactionData = {
          ...baseTx,
          safeTxGas: safeTxGas.toNumber()
        };
        const safeTx = await connectedSafe.createTransaction({ safeTransactionData });
        const safeTxHash = await connectedSafe.getTransactionHash(safeTx);
        const signature = await connectedSafe.signTransactionHash(safeTxHash);
        await this.service.proposeTx(this.address, safeTxHash, safeTx, signature);
        return this.buildTransactionResponse(safeTxHash, safeTx.data);
      }
    };
    exports.SafeEthersSigner = SafeEthersSigner2;
  }
});

// node_modules/@safe-global/safe-ethers-adapters/dist/src/index.js
var require_src3 = __commonJS({
  "node_modules/@safe-global/safe-ethers-adapters/dist/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_service(), exports);
    __exportStar(require_signer(), exports);
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/contracts/config.js
var require_config = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/contracts/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.safeDeploymentsL1ChainIds = exports.safeDeploymentsVersions = exports.SAFE_BASE_VERSION = exports.DEFAULT_SAFE_VERSION = void 0;
    exports.DEFAULT_SAFE_VERSION = "1.3.0";
    exports.SAFE_BASE_VERSION = "1.0.0";
    exports.safeDeploymentsVersions = {
      "1.4.1": {
        safeMasterCopyVersion: "1.4.1",
        safeMasterCopyL2Version: "1.4.1",
        safeProxyFactoryVersion: "1.4.1",
        compatibilityFallbackHandler: "1.4.1",
        multiSendVersion: "1.4.1",
        multiSendCallOnlyVersion: "1.4.1",
        signMessageLibVersion: "1.4.1",
        createCallVersion: "1.4.1"
      },
      "1.3.0": {
        safeMasterCopyVersion: "1.3.0",
        safeMasterCopyL2Version: "1.3.0",
        safeProxyFactoryVersion: "1.3.0",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.3.0",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      },
      "1.2.0": {
        safeMasterCopyVersion: "1.2.0",
        safeMasterCopyL2Version: void 0,
        safeProxyFactoryVersion: "1.1.1",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.1.1",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      },
      "1.1.1": {
        safeMasterCopyVersion: "1.1.1",
        safeMasterCopyL2Version: void 0,
        safeProxyFactoryVersion: "1.1.1",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.1.1",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      },
      "1.0.0": {
        safeMasterCopyVersion: "1.0.0",
        safeMasterCopyL2Version: void 0,
        safeProxyFactoryVersion: "1.0.0",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.1.1",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      }
    };
    exports.safeDeploymentsL1ChainIds = [
      1
      // Ethereum Mainnet
    ];
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/constants.js
var require_constants = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENTINEL_ADDRESS = exports.EMPTY_DATA = exports.ZERO_ADDRESS = void 0;
    exports.ZERO_ADDRESS = `0x${"0".repeat(40)}`;
    exports.EMPTY_DATA = "0x";
    exports.SENTINEL_ADDRESS = "0x0000000000000000000000000000000000000001";
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/memoized.js
var require_memoized = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/memoized.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMemoizedFunction = void 0;
    function createMemoizedFunction(callback, cache = {}) {
      return (...args) => {
        const key = JSON.stringify(args);
        cache[key] = cache[key] || callback(...args);
        return cache[key];
      };
    }
    exports.createMemoizedFunction = createMemoizedFunction;
  }
});

// node_modules/zksync-web3/build/src/types.js
var require_types3 = __commonJS({
  "node_modules/zksync-web3/build/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AccountNonceOrdering = exports.AccountAbstractionVersion = exports.TransactionStatus = exports.PriorityOpTree = exports.PriorityQueueType = exports.Network = void 0;
    var Network;
    (function(Network2) {
      Network2[Network2["Mainnet"] = 1] = "Mainnet";
      Network2[Network2["Ropsten"] = 3] = "Ropsten";
      Network2[Network2["Rinkeby"] = 4] = "Rinkeby";
      Network2[Network2["Goerli"] = 5] = "Goerli";
      Network2[Network2["Localhost"] = 9] = "Localhost";
    })(Network = exports.Network || (exports.Network = {}));
    var PriorityQueueType;
    (function(PriorityQueueType2) {
      PriorityQueueType2[PriorityQueueType2["Deque"] = 0] = "Deque";
      PriorityQueueType2[PriorityQueueType2["HeapBuffer"] = 1] = "HeapBuffer";
      PriorityQueueType2[PriorityQueueType2["Heap"] = 2] = "Heap";
    })(PriorityQueueType = exports.PriorityQueueType || (exports.PriorityQueueType = {}));
    var PriorityOpTree;
    (function(PriorityOpTree2) {
      PriorityOpTree2[PriorityOpTree2["Full"] = 0] = "Full";
      PriorityOpTree2[PriorityOpTree2["Rollup"] = 1] = "Rollup";
    })(PriorityOpTree = exports.PriorityOpTree || (exports.PriorityOpTree = {}));
    var TransactionStatus;
    (function(TransactionStatus2) {
      TransactionStatus2["NotFound"] = "not-found";
      TransactionStatus2["Processing"] = "processing";
      TransactionStatus2["Committed"] = "committed";
      TransactionStatus2["Finalized"] = "finalized";
    })(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
    var AccountAbstractionVersion;
    (function(AccountAbstractionVersion2) {
      AccountAbstractionVersion2[AccountAbstractionVersion2["None"] = 0] = "None";
      AccountAbstractionVersion2[AccountAbstractionVersion2["Version1"] = 1] = "Version1";
    })(AccountAbstractionVersion = exports.AccountAbstractionVersion || (exports.AccountAbstractionVersion = {}));
    var AccountNonceOrdering;
    (function(AccountNonceOrdering2) {
      AccountNonceOrdering2[AccountNonceOrdering2["Sequential"] = 0] = "Sequential";
      AccountNonceOrdering2[AccountNonceOrdering2["Arbitrary"] = 1] = "Arbitrary";
    })(AccountNonceOrdering = exports.AccountNonceOrdering || (exports.AccountNonceOrdering = {}));
  }
});

// node_modules/zksync-web3/build/typechain/IZkSyncFactory.js
var require_IZkSyncFactory = __commonJS({
  "node_modules/zksync-web3/build/typechain/IZkSyncFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IZkSyncFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IZkSyncFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IZkSyncFactory = IZkSyncFactory;
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "commitment",
            type: "bytes32"
          }
        ],
        name: "BlockCommit",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "commitment",
            type: "bytes32"
          }
        ],
        name: "BlockExecution",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "totalBlocksCommitted",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "totalBlocksVerified",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "totalBlocksExecuted",
            type: "uint256"
          }
        ],
        name: "BlocksRevert",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "previousLastVerifiedBlock",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "uint256",
            name: "currentLastVerifiedBlock",
            type: "uint256"
          }
        ],
        name: "BlocksVerification",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "proposalId",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "proposalHash",
            type: "bytes32"
          }
        ],
        name: "CancelUpgradeProposal",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "EthWithdrawalFinalized",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "proposalId",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "proposalHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "bytes32",
            name: "proposalSalt",
            type: "bytes32"
          }
        ],
        name: "ExecuteUpgrade",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [],
        name: "Freeze",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bool",
            name: "isPorterAvailable",
            type: "bool"
          }
        ],
        name: "IsPorterAvailableStatusUpdate",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "oldGovernor",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newGovernor",
            type: "address"
          }
        ],
        name: "NewGovernor",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "previousBytecodeHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "newBytecodeHash",
            type: "bytes32"
          }
        ],
        name: "NewL2BootloaderBytecodeHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "previousBytecodeHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "newBytecodeHash",
            type: "bytes32"
          }
        ],
        name: "NewL2DefaultAccountBytecodeHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "oldPendingGovernor",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newPendingGovernor",
            type: "address"
          }
        ],
        name: "NewPendingGovernor",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "txId",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint64",
            name: "expirationTimestamp",
            type: "uint64"
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "txType",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "from",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "to",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "gasLimit",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "gasPerPubdataByteLimit",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "maxFeePerGas",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "maxPriorityFeePerGas",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "paymaster",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256"
              },
              {
                internalType: "uint256[4]",
                name: "reserved",
                type: "uint256[4]"
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes"
              },
              {
                internalType: "bytes",
                name: "signature",
                type: "bytes"
              },
              {
                internalType: "uint256[]",
                name: "factoryDeps",
                type: "uint256[]"
              },
              {
                internalType: "bytes",
                name: "paymasterInput",
                type: "bytes"
              },
              {
                internalType: "bytes",
                name: "reservedDynamic",
                type: "bytes"
              }
            ],
            indexed: false,
            internalType: "struct IMailbox.L2CanonicalTransaction",
            name: "transaction",
            type: "tuple"
          },
          {
            indexed: false,
            internalType: "bytes[]",
            name: "factoryDeps",
            type: "bytes[]"
          }
        ],
        name: "NewPriorityRequest",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "oldPriorityTxMaxGasLimit",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "newPriorityTxMaxGasLimit",
            type: "uint256"
          }
        ],
        name: "NewPriorityTxMaxGasLimit",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "oldVerifier",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newVerifier",
            type: "address"
          }
        ],
        name: "NewVerifier",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "recursionNodeLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionLeafLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionCircuitsSetVksHash",
                type: "bytes32"
              }
            ],
            indexed: false,
            internalType: "struct VerifierParams",
            name: "oldVerifierParams",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "recursionNodeLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionLeafLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionCircuitsSetVksHash",
                type: "bytes32"
              }
            ],
            indexed: false,
            internalType: "struct VerifierParams",
            name: "newVerifierParams",
            type: "tuple"
          }
        ],
        name: "NewVerifierParams",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "proposalId",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "proposalHash",
            type: "bytes32"
          }
        ],
        name: "ProposeShadowUpgrade",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "facet",
                    type: "address"
                  },
                  {
                    internalType: "enum Diamond.Action",
                    name: "action",
                    type: "uint8"
                  },
                  {
                    internalType: "bool",
                    name: "isFreezable",
                    type: "bool"
                  },
                  {
                    internalType: "bytes4[]",
                    name: "selectors",
                    type: "bytes4[]"
                  }
                ],
                internalType: "struct Diamond.FacetCut[]",
                name: "facetCuts",
                type: "tuple[]"
              },
              {
                internalType: "address",
                name: "initAddress",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "initCalldata",
                type: "bytes"
              }
            ],
            indexed: false,
            internalType: "struct Diamond.DiamondCutData",
            name: "diamondCut",
            type: "tuple"
          },
          {
            indexed: true,
            internalType: "uint256",
            name: "proposalId",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "bytes32",
            name: "proposalSalt",
            type: "bytes32"
          }
        ],
        name: "ProposeTransparentUpgrade",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "uint256",
            name: "proposalId",
            type: "uint256"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "proposalHash",
            type: "bytes32"
          }
        ],
        name: "SecurityCouncilUpgradeApprove",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [],
        name: "Unfreeze",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "validatorAddress",
            type: "address"
          },
          {
            indexed: false,
            internalType: "bool",
            name: "isActive",
            type: "bool"
          }
        ],
        name: "ValidatorStatusUpdate",
        type: "event"
      },
      {
        inputs: [],
        name: "acceptGovernor",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_proposedUpgradeHash",
            type: "bytes32"
          }
        ],
        name: "cancelUpgradeProposal",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64"
              },
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "indexRepeatedStorageChanges",
                type: "uint64"
              },
              {
                internalType: "uint256",
                name: "numberOfLayer1Txs",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "priorityOperationsHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "l2LogsTreeRoot",
                type: "bytes32"
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "commitment",
                type: "bytes32"
              }
            ],
            internalType: "struct IExecutor.StoredBlockInfo",
            name: "_lastCommittedBlockData",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64"
              },
              {
                internalType: "uint64",
                name: "timestamp",
                type: "uint64"
              },
              {
                internalType: "uint64",
                name: "indexRepeatedStorageChanges",
                type: "uint64"
              },
              {
                internalType: "bytes32",
                name: "newStateRoot",
                type: "bytes32"
              },
              {
                internalType: "uint256",
                name: "numberOfLayer1Txs",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "l2LogsTreeRoot",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "priorityOperationsHash",
                type: "bytes32"
              },
              {
                internalType: "bytes",
                name: "initialStorageChanges",
                type: "bytes"
              },
              {
                internalType: "bytes",
                name: "repeatedStorageChanges",
                type: "bytes"
              },
              {
                internalType: "bytes",
                name: "l2Logs",
                type: "bytes"
              },
              {
                internalType: "bytes[]",
                name: "l2ArbitraryLengthMessages",
                type: "bytes[]"
              },
              {
                internalType: "bytes[]",
                name: "factoryDeps",
                type: "bytes[]"
              }
            ],
            internalType: "struct IExecutor.CommitBlockInfo[]",
            name: "_newBlocksData",
            type: "tuple[]"
          }
        ],
        name: "commitBlocks",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64"
              },
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "indexRepeatedStorageChanges",
                type: "uint64"
              },
              {
                internalType: "uint256",
                name: "numberOfLayer1Txs",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "priorityOperationsHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "l2LogsTreeRoot",
                type: "bytes32"
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "commitment",
                type: "bytes32"
              }
            ],
            internalType: "struct IExecutor.StoredBlockInfo[]",
            name: "_blocksData",
            type: "tuple[]"
          }
        ],
        name: "executeBlocks",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "facet",
                    type: "address"
                  },
                  {
                    internalType: "enum Diamond.Action",
                    name: "action",
                    type: "uint8"
                  },
                  {
                    internalType: "bool",
                    name: "isFreezable",
                    type: "bool"
                  },
                  {
                    internalType: "bytes4[]",
                    name: "selectors",
                    type: "bytes4[]"
                  }
                ],
                internalType: "struct Diamond.FacetCut[]",
                name: "facetCuts",
                type: "tuple[]"
              },
              {
                internalType: "address",
                name: "initAddress",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "initCalldata",
                type: "bytes"
              }
            ],
            internalType: "struct Diamond.DiamondCutData",
            name: "_diamondCut",
            type: "tuple"
          },
          {
            internalType: "bytes32",
            name: "_proposalSalt",
            type: "bytes32"
          }
        ],
        name: "executeUpgrade",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes4",
            name: "_selector",
            type: "bytes4"
          }
        ],
        name: "facetAddress",
        outputs: [
          {
            internalType: "address",
            name: "facet",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "facetAddresses",
        outputs: [
          {
            internalType: "address[]",
            name: "facets",
            type: "address[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_facet",
            type: "address"
          }
        ],
        name: "facetFunctionSelectors",
        outputs: [
          {
            internalType: "bytes4[]",
            name: "",
            type: "bytes4[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "facets",
        outputs: [
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address"
              },
              {
                internalType: "bytes4[]",
                name: "selectors",
                type: "bytes4[]"
              }
            ],
            internalType: "struct IGetters.Facet[]",
            name: "",
            type: "tuple[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          },
          {
            internalType: "uint16",
            name: "_l2TxNumberInBlock",
            type: "uint16"
          },
          {
            internalType: "bytes",
            name: "_message",
            type: "bytes"
          },
          {
            internalType: "bytes32[]",
            name: "_merkleProof",
            type: "bytes32[]"
          }
        ],
        name: "finalizeEthWithdrawal",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "freezeDiamond",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "getCurrentProposalId",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getFirstUnprocessedPriorityTx",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getGovernor",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getL2BootloaderBytecodeHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getL2DefaultAccountBytecodeHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getPendingGovernor",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getPriorityQueueSize",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getProposedUpgradeHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getProposedUpgradeTimestamp",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getSecurityCouncil",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getTotalBlocksCommitted",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getTotalBlocksExecuted",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getTotalBlocksVerified",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getTotalPriorityTxs",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getUpgradeProposalState",
        outputs: [
          {
            internalType: "enum UpgradeState",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getVerifier",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getVerifierParams",
        outputs: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "recursionNodeLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionLeafLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionCircuitsSetVksHash",
                type: "bytes32"
              }
            ],
            internalType: "struct VerifierParams",
            name: "",
            type: "tuple"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getpriorityTxMaxGasLimit",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isApprovedBySecurityCouncil",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "isDiamondStorageFrozen",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          }
        ],
        name: "isEthWithdrawalFinalized",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_facet",
            type: "address"
          }
        ],
        name: "isFacetFreezable",
        outputs: [
          {
            internalType: "bool",
            name: "isFreezable",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes4",
            name: "_selector",
            type: "bytes4"
          }
        ],
        name: "isFunctionFreezable",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_address",
            type: "address"
          }
        ],
        name: "isValidator",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_blockNumber",
            type: "uint256"
          }
        ],
        name: "l2LogsRootHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_gasPrice",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2GasLimit",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2GasPerPubdataByteLimit",
            type: "uint256"
          }
        ],
        name: "l2TransactionBaseCost",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "priorityQueueFrontOperation",
        outputs: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "canonicalTxHash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "expirationTimestamp",
                type: "uint64"
              },
              {
                internalType: "uint192",
                name: "layer2Tip",
                type: "uint192"
              }
            ],
            internalType: "struct PriorityOperation",
            name: "",
            type: "tuple"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_proposalHash",
            type: "bytes32"
          },
          {
            internalType: "uint40",
            name: "_proposalId",
            type: "uint40"
          }
        ],
        name: "proposeShadowUpgrade",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "facet",
                    type: "address"
                  },
                  {
                    internalType: "enum Diamond.Action",
                    name: "action",
                    type: "uint8"
                  },
                  {
                    internalType: "bool",
                    name: "isFreezable",
                    type: "bool"
                  },
                  {
                    internalType: "bytes4[]",
                    name: "selectors",
                    type: "bytes4[]"
                  }
                ],
                internalType: "struct Diamond.FacetCut[]",
                name: "facetCuts",
                type: "tuple[]"
              },
              {
                internalType: "address",
                name: "initAddress",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "initCalldata",
                type: "bytes"
              }
            ],
            internalType: "struct Diamond.DiamondCutData",
            name: "_diamondCut",
            type: "tuple"
          },
          {
            internalType: "uint40",
            name: "_proposalId",
            type: "uint40"
          }
        ],
        name: "proposeTransparentUpgrade",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64"
              },
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "indexRepeatedStorageChanges",
                type: "uint64"
              },
              {
                internalType: "uint256",
                name: "numberOfLayer1Txs",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "priorityOperationsHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "l2LogsTreeRoot",
                type: "bytes32"
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "commitment",
                type: "bytes32"
              }
            ],
            internalType: "struct IExecutor.StoredBlockInfo",
            name: "_prevBlock",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64"
              },
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "indexRepeatedStorageChanges",
                type: "uint64"
              },
              {
                internalType: "uint256",
                name: "numberOfLayer1Txs",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "priorityOperationsHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "l2LogsTreeRoot",
                type: "bytes32"
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256"
              },
              {
                internalType: "bytes32",
                name: "commitment",
                type: "bytes32"
              }
            ],
            internalType: "struct IExecutor.StoredBlockInfo[]",
            name: "_committedBlocks",
            type: "tuple[]"
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "recursiveAggregationInput",
                type: "uint256[]"
              },
              {
                internalType: "uint256[]",
                name: "serializedProof",
                type: "uint256[]"
              }
            ],
            internalType: "struct IExecutor.ProofInput",
            name: "_proof",
            type: "tuple"
          }
        ],
        name: "proveBlocks",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_l2TxHash",
            type: "bytes32"
          },
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          },
          {
            internalType: "uint16",
            name: "_l2TxNumberInBlock",
            type: "uint16"
          },
          {
            internalType: "bytes32[]",
            name: "_merkleProof",
            type: "bytes32[]"
          },
          {
            internalType: "enum TxStatus",
            name: "_status",
            type: "uint8"
          }
        ],
        name: "proveL1ToL2TransactionStatus",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_blockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_index",
            type: "uint256"
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "l2ShardId",
                type: "uint8"
              },
              {
                internalType: "bool",
                name: "isService",
                type: "bool"
              },
              {
                internalType: "uint16",
                name: "txNumberInBlock",
                type: "uint16"
              },
              {
                internalType: "address",
                name: "sender",
                type: "address"
              },
              {
                internalType: "bytes32",
                name: "key",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "value",
                type: "bytes32"
              }
            ],
            internalType: "struct L2Log",
            name: "_log",
            type: "tuple"
          },
          {
            internalType: "bytes32[]",
            name: "_proof",
            type: "bytes32[]"
          }
        ],
        name: "proveL2LogInclusion",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_blockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_index",
            type: "uint256"
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "txNumberInBlock",
                type: "uint16"
              },
              {
                internalType: "address",
                name: "sender",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes"
              }
            ],
            internalType: "struct L2Message",
            name: "_message",
            type: "tuple"
          },
          {
            internalType: "bytes32[]",
            name: "_proof",
            type: "bytes32[]"
          }
        ],
        name: "proveL2MessageInclusion",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_contractL2",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_l2Value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "_calldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "_l2GasLimit",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2GasPerPubdataByteLimit",
            type: "uint256"
          },
          {
            internalType: "bytes[]",
            name: "_factoryDeps",
            type: "bytes[]"
          },
          {
            internalType: "address",
            name: "_refundRecipient",
            type: "address"
          }
        ],
        name: "requestL2Transaction",
        outputs: [
          {
            internalType: "bytes32",
            name: "canonicalTxHash",
            type: "bytes32"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_newLastBlock",
            type: "uint256"
          }
        ],
        name: "revertBlocks",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_upgradeProposalHash",
            type: "bytes32"
          }
        ],
        name: "securityCouncilUpgradeApprove",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_l2BootloaderBytecodeHash",
            type: "bytes32"
          }
        ],
        name: "setL2BootloaderBytecodeHash",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_l2DefaultAccountBytecodeHash",
            type: "bytes32"
          }
        ],
        name: "setL2DefaultAccountBytecodeHash",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_newPendingGovernor",
            type: "address"
          }
        ],
        name: "setPendingGovernor",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bool",
            name: "_zkPorterIsAvailable",
            type: "bool"
          }
        ],
        name: "setPorterAvailability",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_newPriorityTxMaxGasLimit",
            type: "uint256"
          }
        ],
        name: "setPriorityTxMaxGasLimit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_validator",
            type: "address"
          },
          {
            internalType: "bool",
            name: "_active",
            type: "bool"
          }
        ],
        name: "setValidator",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "contract Verifier",
            name: "_newVerifier",
            type: "address"
          }
        ],
        name: "setVerifier",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "recursionNodeLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionLeafLevelVkHash",
                type: "bytes32"
              },
              {
                internalType: "bytes32",
                name: "recursionCircuitsSetVksHash",
                type: "bytes32"
              }
            ],
            internalType: "struct VerifierParams",
            name: "_newVerifierParams",
            type: "tuple"
          }
        ],
        name: "setVerifierParams",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_blockNumber",
            type: "uint256"
          }
        ],
        name: "storedBlockHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "unfreezeDiamond",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "facet",
                    type: "address"
                  },
                  {
                    internalType: "enum Diamond.Action",
                    name: "action",
                    type: "uint8"
                  },
                  {
                    internalType: "bool",
                    name: "isFreezable",
                    type: "bool"
                  },
                  {
                    internalType: "bytes4[]",
                    name: "selectors",
                    type: "bytes4[]"
                  }
                ],
                internalType: "struct Diamond.FacetCut[]",
                name: "facetCuts",
                type: "tuple[]"
              },
              {
                internalType: "address",
                name: "initAddress",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "initCalldata",
                type: "bytes"
              }
            ],
            internalType: "struct Diamond.DiamondCutData",
            name: "_diamondCut",
            type: "tuple"
          },
          {
            internalType: "uint256",
            name: "_proposalId",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "_salt",
            type: "bytes32"
          }
        ],
        name: "upgradeProposalHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "pure",
        type: "function"
      }
    ];
  }
});

// node_modules/zksync-web3/build/typechain/IERC20MetadataFactory.js
var require_IERC20MetadataFactory = __commonJS({
  "node_modules/zksync-web3/build/typechain/IERC20MetadataFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC20MetadataFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IERC20MetadataFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IERC20MetadataFactory = IERC20MetadataFactory;
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Approval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "spender",
            type: "address"
          }
        ],
        name: "allowance",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "approve",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "decimals",
        outputs: [
          {
            internalType: "uint8",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "symbol",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transfer",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transferFrom",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// node_modules/zksync-web3/build/typechain/IL1BridgeFactory.js
var require_IL1BridgeFactory = __commonJS({
  "node_modules/zksync-web3/build/typechain/IL1BridgeFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IL1BridgeFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IL1BridgeFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IL1BridgeFactory = IL1BridgeFactory;
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "l1Token",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "ClaimedFailedDeposit",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "l1Token",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "DepositInitiated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "l1Token",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "WithdrawalFinalized",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_depositSender",
            type: "address"
          },
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "_l2TxHash",
            type: "bytes32"
          },
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          },
          {
            internalType: "uint16",
            name: "_l2TxNumberInBlock",
            type: "uint16"
          },
          {
            internalType: "bytes32[]",
            name: "_merkleProof",
            type: "bytes32[]"
          }
        ],
        name: "claimFailedDeposit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l2Receiver",
            type: "address"
          },
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2TxGasLimit",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2TxGasPerPubdataByte",
            type: "uint256"
          }
        ],
        name: "deposit",
        outputs: [
          {
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          },
          {
            internalType: "uint16",
            name: "_l2TxNumberInBlock",
            type: "uint16"
          },
          {
            internalType: "bytes",
            name: "_message",
            type: "bytes"
          },
          {
            internalType: "bytes32[]",
            name: "_merkleProof",
            type: "bytes32[]"
          }
        ],
        name: "finalizeWithdrawal",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_l2BlockNumber",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "_l2MessageIndex",
            type: "uint256"
          }
        ],
        name: "isWithdrawalFinalized",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          }
        ],
        name: "l2TokenAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// node_modules/zksync-web3/build/typechain/IL2BridgeFactory.js
var require_IL2BridgeFactory = __commonJS({
  "node_modules/zksync-web3/build/typechain/IL2BridgeFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IL2BridgeFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IL2BridgeFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IL2BridgeFactory = IL2BridgeFactory;
    var _abi = [
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Sender",
            type: "address"
          },
          {
            internalType: "address",
            name: "_l2Receiver",
            type: "address"
          },
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "finalizeDeposit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Bridge",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "_l2TokenProxyBytecodeHash",
            type: "bytes32"
          },
          {
            internalType: "address",
            name: "_governor",
            type: "address"
          }
        ],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "l1Bridge",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l2Token",
            type: "address"
          }
        ],
        name: "l1TokenAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          }
        ],
        name: "l2TokenAddress",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Receiver",
            type: "address"
          },
          {
            internalType: "address",
            name: "_l2Token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "withdraw",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// node_modules/zksync-web3/build/typechain/IAllowListFactory.js
var require_IAllowListFactory = __commonJS({
  "node_modules/zksync-web3/build/typechain/IAllowListFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IAllowListFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IAllowListFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IAllowListFactory = IAllowListFactory;
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            indexed: false,
            internalType: "enum IAllowList.AccessMode",
            name: "previousMode",
            type: "uint8"
          },
          {
            indexed: false,
            internalType: "enum IAllowList.AccessMode",
            name: "newMode",
            type: "uint8"
          }
        ],
        name: "UpdateAccessMode",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "caller",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            indexed: true,
            internalType: "bytes4",
            name: "functionSig",
            type: "bytes4"
          },
          {
            indexed: false,
            internalType: "bool",
            name: "status",
            type: "bool"
          }
        ],
        name: "UpdateCallPermission",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_caller",
            type: "address"
          },
          {
            internalType: "address",
            name: "_target",
            type: "address"
          },
          {
            internalType: "bytes4",
            name: "_functionSig",
            type: "bytes4"
          }
        ],
        name: "canCall",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_target",
            type: "address"
          }
        ],
        name: "getAccessMode",
        outputs: [
          {
            internalType: "enum IAllowList.AccessMode",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          }
        ],
        name: "getTokenDepositLimitData",
        outputs: [
          {
            components: [
              {
                internalType: "bool",
                name: "depositLimitation",
                type: "bool"
              },
              {
                internalType: "uint256",
                name: "depositCap",
                type: "uint256"
              }
            ],
            internalType: "struct IAllowList.Deposit",
            name: "",
            type: "tuple"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_caller",
            type: "address"
          },
          {
            internalType: "address",
            name: "_target",
            type: "address"
          },
          {
            internalType: "bytes4",
            name: "_functionSig",
            type: "bytes4"
          }
        ],
        name: "hasSpecialAccessToCall",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_target",
            type: "address"
          },
          {
            internalType: "enum IAllowList.AccessMode",
            name: "_accessMode",
            type: "uint8"
          }
        ],
        name: "setAccessMode",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address[]",
            name: "_targets",
            type: "address[]"
          },
          {
            internalType: "enum IAllowList.AccessMode[]",
            name: "_accessMode",
            type: "uint8[]"
          }
        ],
        name: "setBatchAccessMode",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address[]",
            name: "_callers",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "_targets",
            type: "address[]"
          },
          {
            internalType: "bytes4[]",
            name: "_functionSigs",
            type: "bytes4[]"
          },
          {
            internalType: "bool[]",
            name: "_enables",
            type: "bool[]"
          }
        ],
        name: "setBatchPermissionToCall",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Token",
            type: "address"
          },
          {
            internalType: "bool",
            name: "_depositLimitation",
            type: "bool"
          },
          {
            internalType: "uint256",
            name: "_depositCap",
            type: "uint256"
          }
        ],
        name: "setDepositLimit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_caller",
            type: "address"
          },
          {
            internalType: "address",
            name: "_target",
            type: "address"
          },
          {
            internalType: "bytes4",
            name: "_functionSig",
            type: "bytes4"
          },
          {
            internalType: "bool",
            name: "_enable",
            type: "bool"
          }
        ],
        name: "setPermissionToCall",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// node_modules/zksync-web3/build/typechain/IEthTokenFactory.js
var require_IEthTokenFactory = __commonJS({
  "node_modules/zksync-web3/build/typechain/IEthTokenFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IEthTokenFactory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var IEthTokenFactory = class {
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.IEthTokenFactory = IEthTokenFactory;
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "account",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "Mint",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "_l1Receiver",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "Withdrawal",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "decimals",
        outputs: [
          {
            internalType: "uint8",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_account",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "mint",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [],
        name: "symbol",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_from",
            type: "address"
          },
          {
            internalType: "address",
            name: "_to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256"
          }
        ],
        name: "transferFromTo",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_l1Receiver",
            type: "address"
          }
        ],
        name: "withdraw",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      }
    ];
  }
});

// node_modules/zksync-web3/build/typechain/index.js
var require_typechain = __commonJS({
  "node_modules/zksync-web3/build/typechain/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IEthTokenFactory = exports.IAllowListFactory = exports.IL2BridgeFactory = exports.IL1BridgeFactory = exports.IERC20MetadataFactory = exports.IZkSyncFactory = void 0;
    var IZkSyncFactory_1 = require_IZkSyncFactory();
    Object.defineProperty(exports, "IZkSyncFactory", { enumerable: true, get: function() {
      return IZkSyncFactory_1.IZkSyncFactory;
    } });
    var IERC20MetadataFactory_1 = require_IERC20MetadataFactory();
    Object.defineProperty(exports, "IERC20MetadataFactory", { enumerable: true, get: function() {
      return IERC20MetadataFactory_1.IERC20MetadataFactory;
    } });
    var IL1BridgeFactory_1 = require_IL1BridgeFactory();
    Object.defineProperty(exports, "IL1BridgeFactory", { enumerable: true, get: function() {
      return IL1BridgeFactory_1.IL1BridgeFactory;
    } });
    var IL2BridgeFactory_1 = require_IL2BridgeFactory();
    Object.defineProperty(exports, "IL2BridgeFactory", { enumerable: true, get: function() {
      return IL2BridgeFactory_1.IL2BridgeFactory;
    } });
    var IAllowListFactory_1 = require_IAllowListFactory();
    Object.defineProperty(exports, "IAllowListFactory", { enumerable: true, get: function() {
      return IAllowListFactory_1.IAllowListFactory;
    } });
    var IEthTokenFactory_1 = require_IEthTokenFactory();
    Object.defineProperty(exports, "IEthTokenFactory", { enumerable: true, get: function() {
      return IEthTokenFactory_1.IEthTokenFactory;
    } });
  }
});

// node_modules/zksync-web3/build/src/adapters.js
var require_adapters = __commonJS({
  "node_modules/zksync-web3/build/src/adapters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdapterL2 = exports.AdapterL1 = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var typechain_1 = require_typechain();
    var utils_1 = require_utils6();
    function AdapterL1(Base) {
      return class Adapter extends Base {
        _providerL2() {
          throw new Error("Must be implemented by the derived class!");
        }
        _providerL1() {
          throw new Error("Must be implemented by the derived class!");
        }
        _signerL1() {
          throw new Error("Must be implemented by the derived class!");
        }
        async getMainContract() {
          const address = await this._providerL2().getMainContractAddress();
          return typechain_1.IZkSyncFactory.connect(address, this._signerL1());
        }
        async getL1BridgeContracts() {
          const addresses = await this._providerL2().getDefaultBridgeAddresses();
          return {
            erc20: typechain_1.IL1BridgeFactory.connect(addresses.erc20L1, this._signerL1())
          };
        }
        async getBalanceL1(token, blockTag) {
          token !== null && token !== void 0 ? token : token = utils_1.ETH_ADDRESS;
          if ((0, utils_1.isETH)(token)) {
            return await this._providerL1().getBalance(await this.getAddress(), blockTag);
          } else {
            const erc20contract = typechain_1.IERC20MetadataFactory.connect(token, this._providerL1());
            return await erc20contract.balanceOf(await this.getAddress());
          }
        }
        async l2TokenAddress(token) {
          if (token == utils_1.ETH_ADDRESS) {
            return utils_1.ETH_ADDRESS;
          } else {
            const erc20Bridge = (await this.getL1BridgeContracts()).erc20;
            return await erc20Bridge.l2TokenAddress(token);
          }
        }
        async approveERC20(token, amount, overrides) {
          if ((0, utils_1.isETH)(token)) {
            throw new Error("ETH token can't be approved. The address of the token does not exist on L1.");
          }
          let bridgeAddress = overrides === null || overrides === void 0 ? void 0 : overrides.bridgeAddress;
          const erc20contract = typechain_1.IERC20MetadataFactory.connect(token, this._signerL1());
          if (bridgeAddress == null) {
            bridgeAddress = (await this._providerL2().getDefaultBridgeAddresses()).erc20L1;
          } else {
            delete overrides.bridgeAddress;
          }
          return await erc20contract.approve(bridgeAddress, amount, overrides);
        }
        async getBaseCost(params) {
          var _a, _b;
          const zksyncContract = await this.getMainContract();
          const parameters = { ...(0, utils_1.layer1TxDefaults)(), ...params };
          (_a = parameters.gasPrice) !== null && _a !== void 0 ? _a : parameters.gasPrice = await this._providerL1().getGasPrice();
          (_b = parameters.gasPerPubdataByte) !== null && _b !== void 0 ? _b : parameters.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT;
          return ethers_1.BigNumber.from(await zksyncContract.l2TransactionBaseCost(parameters.gasPrice, parameters.gasLimit, parameters.gasPerPubdataByte));
        }
        async deposit(transaction) {
          var _a;
          const depositTx = await this.getDepositTx(transaction);
          if (transaction.token == utils_1.ETH_ADDRESS) {
            return this.requestExecute(depositTx);
          } else {
            const bridgeContracts = await this.getL1BridgeContracts();
            if (transaction.approveERC20) {
              const approveTx = await this.approveERC20(transaction.token, transaction.amount, {
                bridgeAddress: (_a = transaction.bridgeAddress) !== null && _a !== void 0 ? _a : bridgeContracts.erc20.address,
                ...transaction.approveOverrides
              });
              await approveTx.wait();
            }
            return await this._providerL2().getPriorityOpResponse(await this._signerL1().sendTransaction(depositTx));
          }
        }
        async estimateGasDeposit(transaction) {
          const depositTx = await this.getDepositTx(transaction);
          if (transaction.token == utils_1.ETH_ADDRESS) {
            return await this.estimateGasRequestExecute(depositTx);
          } else {
            return await this._providerL1().estimateGas(depositTx);
          }
        }
        async getDepositTx(transaction) {
          var _a, _b, _c, _d, _e, _f, _g;
          const bridgeContracts = await this.getL1BridgeContracts();
          if (transaction.bridgeAddress) {
            bridgeContracts.erc20.attach(transaction.bridgeAddress);
          }
          const { ...tx } = transaction;
          (_a = tx.to) !== null && _a !== void 0 ? _a : tx.to = await this.getAddress();
          (_b = tx.operatorTip) !== null && _b !== void 0 ? _b : tx.operatorTip = ethers_1.BigNumber.from(0);
          (_c = tx.overrides) !== null && _c !== void 0 ? _c : tx.overrides = {};
          (_d = tx.gasPerPubdataByte) !== null && _d !== void 0 ? _d : tx.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT;
          (_e = tx.l2GasLimit) !== null && _e !== void 0 ? _e : tx.l2GasLimit = await (0, utils_1.estimateDefaultBridgeDepositL2Gas)(this._providerL1(), this._providerL2(), tx.token, tx.amount, tx.to, await this.getAddress(), tx.gasPerPubdataByte);
          const { to, token, amount, operatorTip, overrides } = tx;
          await insertGasPrice(this._providerL1(), overrides);
          const gasPriceForEstimation = overrides.maxFeePerGas || overrides.gasPrice;
          const zksyncContract = await this.getMainContract();
          const baseCost = await zksyncContract.l2TransactionBaseCost(await gasPriceForEstimation, tx.l2GasLimit, tx.gasPerPubdataByte);
          if (token == utils_1.ETH_ADDRESS) {
            (_f = overrides.value) !== null && _f !== void 0 ? _f : overrides.value = baseCost.add(operatorTip).add(amount);
            return {
              contractAddress: to,
              calldata: "0x",
              l2Value: amount,
              // For some reason typescript can not deduce that we've already set the
              // tx.l2GasLimit
              l2GasLimit: tx.l2GasLimit,
              ...tx
            };
          } else {
            const args = [
              to,
              token,
              amount,
              tx.l2GasLimit,
              tx.gasPerPubdataByte
            ];
            (_g = overrides.value) !== null && _g !== void 0 ? _g : overrides.value = baseCost.add(operatorTip);
            await (0, utils_1.checkBaseCost)(baseCost, overrides.value);
            return await bridgeContracts.erc20.populateTransaction.deposit(...args, overrides);
          }
        }
        async _getWithdrawalLog(withdrawalHash, index = 0) {
          const hash = ethers_1.ethers.utils.hexlify(withdrawalHash);
          const receipt = await this._providerL2().getTransactionReceipt(hash);
          const log = receipt.logs.filter((log2) => log2.address == utils_1.L1_MESSENGER_ADDRESS && log2.topics[0] == ethers_1.ethers.utils.id("L1MessageSent(address,bytes32,bytes)"))[index];
          return {
            log,
            l1BatchTxId: receipt.l1BatchTxIndex
          };
        }
        async _getWithdrawalL2ToL1Log(withdrawalHash, index = 0) {
          const hash = ethers_1.ethers.utils.hexlify(withdrawalHash);
          const receipt = await this._providerL2().getTransactionReceipt(hash);
          const messages = Array.from(receipt.l2ToL1Logs.entries()).filter(([_, log]) => log.sender == utils_1.L1_MESSENGER_ADDRESS);
          const [l2ToL1LogIndex, l2ToL1Log] = messages[index];
          return {
            l2ToL1LogIndex,
            l2ToL1Log
          };
        }
        async finalizeWithdrawalParams(withdrawalHash, index = 0) {
          const { log, l1BatchTxId } = await this._getWithdrawalLog(withdrawalHash, index);
          const { l2ToL1LogIndex } = await this._getWithdrawalL2ToL1Log(withdrawalHash, index);
          const sender = ethers_1.ethers.utils.hexDataSlice(log.topics[1], 12);
          const proof = await this._providerL2().getLogProof(withdrawalHash, l2ToL1LogIndex);
          const message = ethers_1.ethers.utils.defaultAbiCoder.decode(["bytes"], log.data)[0];
          return {
            l1BatchNumber: log.l1BatchNumber,
            l2MessageIndex: proof.id,
            l2TxNumberInBlock: l1BatchTxId,
            message,
            sender,
            proof: proof.proof
          };
        }
        async finalizeWithdrawal(withdrawalHash, index = 0, overrides) {
          const { l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, sender, proof } = await this.finalizeWithdrawalParams(withdrawalHash, index);
          if ((0, utils_1.isETH)(sender)) {
            const contractAddress = await this._providerL2().getMainContractAddress();
            const zksync = typechain_1.IZkSyncFactory.connect(contractAddress, this._signerL1());
            return await zksync.finalizeEthWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});
          }
          const l2Bridge = typechain_1.IL2BridgeFactory.connect(sender, this._providerL2());
          const l1Bridge = typechain_1.IL1BridgeFactory.connect(await l2Bridge.l1Bridge(), this._signerL1());
          return await l1Bridge.finalizeWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});
        }
        async isWithdrawalFinalized(withdrawalHash, index = 0) {
          const { log } = await this._getWithdrawalLog(withdrawalHash, index);
          const { l2ToL1LogIndex } = await this._getWithdrawalL2ToL1Log(withdrawalHash, index);
          const sender = ethers_1.ethers.utils.hexDataSlice(log.topics[1], 12);
          const proof = await this._providerL2().getLogProof(withdrawalHash, l2ToL1LogIndex);
          if ((0, utils_1.isETH)(sender)) {
            const contractAddress = await this._providerL2().getMainContractAddress();
            const zksync = typechain_1.IZkSyncFactory.connect(contractAddress, this._signerL1());
            return await zksync.isEthWithdrawalFinalized(log.l1BatchNumber, proof.id);
          }
          const l2Bridge = typechain_1.IL2BridgeFactory.connect(sender, this._providerL2());
          const l1Bridge = typechain_1.IL1BridgeFactory.connect(await l2Bridge.l1Bridge(), this._providerL1());
          return await l1Bridge.isWithdrawalFinalized(log.l1BatchNumber, proof.id);
        }
        async claimFailedDeposit(depositHash, overrides) {
          const receipt = await this._providerL2().getTransactionReceipt(ethers_1.ethers.utils.hexlify(depositHash));
          const successL2ToL1LogIndex = receipt.l2ToL1Logs.findIndex((l2ToL1log) => l2ToL1log.sender == utils_1.BOOTLOADER_FORMAL_ADDRESS && l2ToL1log.key == depositHash);
          const successL2ToL1Log = receipt.l2ToL1Logs[successL2ToL1LogIndex];
          if (successL2ToL1Log.value != ethers_1.ethers.constants.HashZero) {
            throw new Error("Cannot claim successful deposit");
          }
          const tx = await this._providerL2().getTransaction(ethers_1.ethers.utils.hexlify(depositHash));
          const l1BridgeAddress = (0, utils_1.undoL1ToL2Alias)(receipt.from);
          const l2BridgeAddress = receipt.to;
          const l1Bridge = typechain_1.IL1BridgeFactory.connect(l1BridgeAddress, this._signerL1());
          const l2Bridge = typechain_1.IL2BridgeFactory.connect(l2BridgeAddress, this._providerL2());
          const calldata = l2Bridge.interface.decodeFunctionData("finalizeDeposit", tx.data);
          const proof = await this._providerL2().getLogProof(depositHash, successL2ToL1LogIndex);
          return await l1Bridge.claimFailedDeposit(calldata["_l1Sender"], calldata["_l1Token"], depositHash, receipt.l1BatchNumber, proof.id, receipt.l1BatchTxIndex, proof.proof, overrides !== null && overrides !== void 0 ? overrides : {});
        }
        async requestExecute(transaction) {
          const requestExecuteTx = await this.getRequestExecuteTx(transaction);
          return this._providerL2().getPriorityOpResponse(await this._signerL1().sendTransaction(requestExecuteTx));
        }
        async estimateGasRequestExecute(transaction) {
          const requestExecuteTx = await this.getRequestExecuteTx(transaction);
          return this._providerL1().estimateGas(requestExecuteTx);
        }
        async getRequestExecuteTx(transaction) {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          const zksyncContract = await this.getMainContract();
          const { ...tx } = transaction;
          (_a = tx.l2Value) !== null && _a !== void 0 ? _a : tx.l2Value = ethers_1.BigNumber.from(0);
          (_b = tx.operatorTip) !== null && _b !== void 0 ? _b : tx.operatorTip = ethers_1.BigNumber.from(0);
          (_c = tx.factoryDeps) !== null && _c !== void 0 ? _c : tx.factoryDeps = [];
          (_d = tx.overrides) !== null && _d !== void 0 ? _d : tx.overrides = {};
          (_e = tx.gasPerPubdataByte) !== null && _e !== void 0 ? _e : tx.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT;
          (_f = tx.refundRecipient) !== null && _f !== void 0 ? _f : tx.refundRecipient = await this.getAddress();
          (_g = tx.l2GasLimit) !== null && _g !== void 0 ? _g : tx.l2GasLimit = await this._providerL2().estimateL1ToL2Execute(transaction);
          const { contractAddress, l2Value, calldata, l2GasLimit, factoryDeps, operatorTip, overrides, gasPerPubdataByte, refundRecipient } = tx;
          await insertGasPrice(this._providerL1(), overrides);
          const gasPriceForEstimation = overrides.maxFeePerGas || overrides.gasPrice;
          const baseCost = await this.getBaseCost({
            gasPrice: await gasPriceForEstimation,
            gasPerPubdataByte,
            gasLimit: l2GasLimit
          });
          (_h = overrides.value) !== null && _h !== void 0 ? _h : overrides.value = baseCost.add(operatorTip).add(l2Value);
          await (0, utils_1.checkBaseCost)(baseCost, overrides.value);
          return await zksyncContract.populateTransaction.requestL2Transaction(contractAddress, l2Value, calldata, l2GasLimit, utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT, factoryDeps, refundRecipient, overrides);
        }
      };
    }
    exports.AdapterL1 = AdapterL1;
    function AdapterL2(Base) {
      return class Adapter extends Base {
        _providerL2() {
          throw new Error("Must be implemented by the derived class!");
        }
        _signerL2() {
          throw new Error("Must be implemented by the derived class!");
        }
        async getBalance(token, blockTag = "committed") {
          return await this._providerL2().getBalance(await this.getAddress(), blockTag, token);
        }
        async getAllBalances() {
          return await this._providerL2().getAllAccountBalances(await this.getAddress());
        }
        async getL2BridgeContracts() {
          const addresses = await this._providerL2().getDefaultBridgeAddresses();
          return {
            erc20: typechain_1.IL2BridgeFactory.connect(addresses.erc20L2, this._signerL2())
          };
        }
        _fillCustomData(data) {
          var _a, _b;
          const customData = { ...data };
          (_a = customData.gasPerPubdata) !== null && _a !== void 0 ? _a : customData.gasPerPubdata = utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT;
          (_b = customData.factoryDeps) !== null && _b !== void 0 ? _b : customData.factoryDeps = [];
          return customData;
        }
        async withdraw(transaction) {
          const withdrawTx = await this._providerL2().getWithdrawTx({
            from: await this.getAddress(),
            ...transaction
          });
          const txResponse = await this.sendTransaction(withdrawTx);
          return this._providerL2()._wrapTransaction(txResponse);
        }
        async transfer(transaction) {
          const transferTx = await this._providerL2().getTransferTx({
            from: await this.getAddress(),
            ...transaction
          });
          const txResponse = await this.sendTransaction(transferTx);
          return this._providerL2()._wrapTransaction(txResponse);
        }
      };
    }
    exports.AdapterL2 = AdapterL2;
    async function insertGasPrice(l1Provider, overrides) {
      if (!overrides.gasPrice && !overrides.maxFeePerGas) {
        const l1FeeData = await l1Provider.getFeeData();
        const baseFee = l1FeeData.lastBaseFeePerGas || l1FeeData.gasPrice;
        const maxFeePerGas = baseFee.mul(3).div(2).add(l1FeeData.maxPriorityFeePerGas);
        overrides.maxFeePerGas = maxFeePerGas;
        overrides.maxPriorityFeePerGas = l1FeeData.maxPriorityFeePerGas;
      }
    }
  }
});

// node_modules/zksync-web3/build/src/signer.js
var require_signer2 = __commonJS({
  "node_modules/zksync-web3/build/src/signer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.L1Signer = exports.Signer = exports.EIP712Signer = exports.eip712Types = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var utils_1 = require_utils6();
    var hash_1 = (init_lib4(), __toCommonJS(lib_exports4));
    var adapters_1 = require_adapters();
    exports.eip712Types = {
      Transaction: [
        { name: "txType", type: "uint256" },
        { name: "from", type: "uint256" },
        { name: "to", type: "uint256" },
        { name: "gasLimit", type: "uint256" },
        { name: "gasPerPubdataByteLimit", type: "uint256" },
        { name: "maxFeePerGas", type: "uint256" },
        { name: "maxPriorityFeePerGas", type: "uint256" },
        { name: "paymaster", type: "uint256" },
        { name: "nonce", type: "uint256" },
        { name: "value", type: "uint256" },
        { name: "data", type: "bytes" },
        { name: "factoryDeps", type: "bytes32[]" },
        { name: "paymasterInput", type: "bytes" }
      ]
    };
    var EIP712Signer = class _EIP712Signer {
      constructor(ethSigner, chainId) {
        this.ethSigner = ethSigner;
        this.eip712Domain = Promise.resolve(chainId).then((chainId2) => ({
          name: "zkSync",
          version: "2",
          chainId: chainId2
        }));
      }
      static getSignInput(transaction) {
        var _a, _b, _c, _d, _e, _f, _g;
        const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice;
        const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;
        const gasPerPubdataByteLimit = ((_a = transaction.customData) === null || _a === void 0 ? void 0 : _a.gasPerPubdata) || utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT;
        const signInput = {
          txType: transaction.type,
          from: transaction.from,
          to: transaction.to,
          gasLimit: transaction.gasLimit,
          gasPerPubdataByteLimit,
          maxFeePerGas,
          maxPriorityFeePerGas,
          paymaster: ((_c = (_b = transaction.customData) === null || _b === void 0 ? void 0 : _b.paymasterParams) === null || _c === void 0 ? void 0 : _c.paymaster) || ethers_1.ethers.constants.AddressZero,
          nonce: transaction.nonce,
          value: transaction.value,
          data: transaction.data,
          factoryDeps: ((_e = (_d = transaction.customData) === null || _d === void 0 ? void 0 : _d.factoryDeps) === null || _e === void 0 ? void 0 : _e.map((dep) => (0, utils_1.hashBytecode)(dep))) || [],
          paymasterInput: ((_g = (_f = transaction.customData) === null || _f === void 0 ? void 0 : _f.paymasterParams) === null || _g === void 0 ? void 0 : _g.paymasterInput) || "0x"
        };
        return signInput;
      }
      async sign(transaction) {
        return await this.ethSigner._signTypedData(await this.eip712Domain, exports.eip712Types, _EIP712Signer.getSignInput(transaction));
      }
      static getSignedDigest(transaction) {
        if (!transaction.chainId) {
          throw Error("Transaction chainId isn't set");
        }
        const domain = {
          name: "zkSync",
          version: "2",
          chainId: transaction.chainId
        };
        return hash_1._TypedDataEncoder.hash(domain, exports.eip712Types, _EIP712Signer.getSignInput(transaction));
      }
    };
    exports.EIP712Signer = EIP712Signer;
    var Signer = class _Signer extends (0, adapters_1.AdapterL2)(ethers_1.ethers.providers.JsonRpcSigner) {
      _signerL2() {
        return this;
      }
      _providerL2() {
        return this.provider;
      }
      static from(signer) {
        const newSigner = Object.setPrototypeOf(signer, _Signer.prototype);
        newSigner.eip712 = new EIP712Signer(newSigner, newSigner.getChainId());
        return newSigner;
      }
      // an alias with a better name
      async getNonce(blockTag) {
        return await this.getTransactionCount(blockTag);
      }
      async sendTransaction(transaction) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (transaction.customData == null && transaction.type == null) {
          transaction.type = 0;
        }
        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {
          return await super.sendTransaction(transaction);
        } else {
          const address = await this.getAddress();
          (_a = transaction.from) !== null && _a !== void 0 ? _a : transaction.from = address;
          if (transaction.from.toLowerCase() != address.toLowerCase()) {
            throw new Error("Transaction `from` address mismatch");
          }
          transaction.type = utils_1.EIP712_TX_TYPE;
          (_b = transaction.value) !== null && _b !== void 0 ? _b : transaction.value = 0;
          (_c = transaction.data) !== null && _c !== void 0 ? _c : transaction.data = "0x";
          (_d = transaction.nonce) !== null && _d !== void 0 ? _d : transaction.nonce = await this.getNonce();
          transaction.customData = this._fillCustomData(transaction.customData);
          (_e = transaction.gasPrice) !== null && _e !== void 0 ? _e : transaction.gasPrice = await this.provider.getGasPrice();
          (_f = transaction.gasLimit) !== null && _f !== void 0 ? _f : transaction.gasLimit = await this.provider.estimateGas(transaction);
          (_g = transaction.chainId) !== null && _g !== void 0 ? _g : transaction.chainId = (await this.provider.getNetwork()).chainId;
          transaction.customData.customSignature = await this.eip712.sign(transaction);
          const txBytes = (0, utils_1.serialize)(transaction);
          return await this.provider.sendTransaction(txBytes);
        }
      }
    };
    exports.Signer = Signer;
    var L1Signer = class _L1Signer extends (0, adapters_1.AdapterL1)(ethers_1.ethers.providers.JsonRpcSigner) {
      _providerL2() {
        return this.providerL2;
      }
      _providerL1() {
        return this.provider;
      }
      _signerL1() {
        return this;
      }
      static from(signer, zksyncProvider) {
        const newSigner = Object.setPrototypeOf(signer, _L1Signer.prototype);
        newSigner.providerL2 = zksyncProvider;
        return newSigner;
      }
      connectToL2(provider) {
        this.providerL2 = provider;
        return this;
      }
    };
    exports.L1Signer = L1Signer;
  }
});

// node_modules/zksync-web3/abi/IPaymasterFlow.json
var require_IPaymasterFlow = __commonJS({
  "node_modules/zksync-web3/abi/IPaymasterFlow.json"(exports, module) {
    module.exports = {
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_minAllowance",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "_innerInput",
              type: "bytes"
            }
          ],
          name: "approvalBased",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "input",
              type: "bytes"
            }
          ],
          name: "general",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/zksync-web3/build/src/paymaster-utils.js
var require_paymaster_utils = __commonJS({
  "node_modules/zksync-web3/build/src/paymaster-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPaymasterParams = exports.getGeneralPaymasterInput = exports.getApprovalBasedPaymasterInput = exports.IPaymasterFlow = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    exports.IPaymasterFlow = new ethers_1.ethers.utils.Interface(require_IPaymasterFlow().abi);
    function getApprovalBasedPaymasterInput(paymasterInput) {
      return exports.IPaymasterFlow.encodeFunctionData("approvalBased", [
        paymasterInput.token,
        paymasterInput.minimalAllowance,
        paymasterInput.innerInput
      ]);
    }
    exports.getApprovalBasedPaymasterInput = getApprovalBasedPaymasterInput;
    function getGeneralPaymasterInput(paymasterInput) {
      return exports.IPaymasterFlow.encodeFunctionData("general", [paymasterInput.innerInput]);
    }
    exports.getGeneralPaymasterInput = getGeneralPaymasterInput;
    function getPaymasterParams(paymasterAddress, paymasterInput) {
      if (paymasterInput.type == "General") {
        return {
          paymaster: paymasterAddress,
          paymasterInput: getGeneralPaymasterInput(paymasterInput)
        };
      } else {
        return {
          paymaster: paymasterAddress,
          paymasterInput: getApprovalBasedPaymasterInput(paymasterInput)
        };
      }
    }
    exports.getPaymasterParams = getPaymasterParams;
  }
});

// node_modules/zksync-web3/abi/IZkSync.json
var require_IZkSync = __commonJS({
  "node_modules/zksync-web3/abi/IZkSync.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "blockNumber",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "blockHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "commitment",
              type: "bytes32"
            }
          ],
          name: "BlockCommit",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "blockNumber",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "blockHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "commitment",
              type: "bytes32"
            }
          ],
          name: "BlockExecution",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "totalBlocksCommitted",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "totalBlocksVerified",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "totalBlocksExecuted",
              type: "uint256"
            }
          ],
          name: "BlocksRevert",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "previousLastVerifiedBlock",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "currentLastVerifiedBlock",
              type: "uint256"
            }
          ],
          name: "BlocksVerification",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "proposalId",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "proposalHash",
              type: "bytes32"
            }
          ],
          name: "CancelUpgradeProposal",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "EthWithdrawalFinalized",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "proposalId",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "proposalHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "proposalSalt",
              type: "bytes32"
            }
          ],
          name: "ExecuteUpgrade",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [],
          name: "Freeze",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bool",
              name: "isPorterAvailable",
              type: "bool"
            }
          ],
          name: "IsPorterAvailableStatusUpdate",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "oldGovernor",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "newGovernor",
              type: "address"
            }
          ],
          name: "NewGovernor",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "previousBytecodeHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "newBytecodeHash",
              type: "bytes32"
            }
          ],
          name: "NewL2BootloaderBytecodeHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "previousBytecodeHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "newBytecodeHash",
              type: "bytes32"
            }
          ],
          name: "NewL2DefaultAccountBytecodeHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "oldPendingGovernor",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "newPendingGovernor",
              type: "address"
            }
          ],
          name: "NewPendingGovernor",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "txId",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint64",
              name: "expirationTimestamp",
              type: "uint64"
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "txType",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "from",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "to",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "gasLimit",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "gasPerPubdataByteLimit",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "maxFeePerGas",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "maxPriorityFeePerGas",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "paymaster",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "value",
                  type: "uint256"
                },
                {
                  internalType: "uint256[4]",
                  name: "reserved",
                  type: "uint256[4]"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes"
                },
                {
                  internalType: "uint256[]",
                  name: "factoryDeps",
                  type: "uint256[]"
                },
                {
                  internalType: "bytes",
                  name: "paymasterInput",
                  type: "bytes"
                },
                {
                  internalType: "bytes",
                  name: "reservedDynamic",
                  type: "bytes"
                }
              ],
              indexed: false,
              internalType: "struct IMailbox.L2CanonicalTransaction",
              name: "transaction",
              type: "tuple"
            },
            {
              indexed: false,
              internalType: "bytes[]",
              name: "factoryDeps",
              type: "bytes[]"
            }
          ],
          name: "NewPriorityRequest",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "oldPriorityTxMaxGasLimit",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "newPriorityTxMaxGasLimit",
              type: "uint256"
            }
          ],
          name: "NewPriorityTxMaxGasLimit",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "oldVerifier",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "newVerifier",
              type: "address"
            }
          ],
          name: "NewVerifier",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "recursionNodeLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionLeafLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionCircuitsSetVksHash",
                  type: "bytes32"
                }
              ],
              indexed: false,
              internalType: "struct VerifierParams",
              name: "oldVerifierParams",
              type: "tuple"
            },
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "recursionNodeLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionLeafLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionCircuitsSetVksHash",
                  type: "bytes32"
                }
              ],
              indexed: false,
              internalType: "struct VerifierParams",
              name: "newVerifierParams",
              type: "tuple"
            }
          ],
          name: "NewVerifierParams",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "proposalId",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "proposalHash",
              type: "bytes32"
            }
          ],
          name: "ProposeShadowUpgrade",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "address",
                      name: "facet",
                      type: "address"
                    },
                    {
                      internalType: "enum Diamond.Action",
                      name: "action",
                      type: "uint8"
                    },
                    {
                      internalType: "bool",
                      name: "isFreezable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes4[]",
                      name: "selectors",
                      type: "bytes4[]"
                    }
                  ],
                  internalType: "struct Diamond.FacetCut[]",
                  name: "facetCuts",
                  type: "tuple[]"
                },
                {
                  internalType: "address",
                  name: "initAddress",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "initCalldata",
                  type: "bytes"
                }
              ],
              indexed: false,
              internalType: "struct Diamond.DiamondCutData",
              name: "diamondCut",
              type: "tuple"
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "proposalId",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "proposalSalt",
              type: "bytes32"
            }
          ],
          name: "ProposeTransparentUpgrade",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "proposalId",
              type: "uint256"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "proposalHash",
              type: "bytes32"
            }
          ],
          name: "SecurityCouncilUpgradeApprove",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [],
          name: "Unfreeze",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "validatorAddress",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bool",
              name: "isActive",
              type: "bool"
            }
          ],
          name: "ValidatorStatusUpdate",
          type: "event"
        },
        {
          inputs: [],
          name: "acceptGovernor",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_proposedUpgradeHash",
              type: "bytes32"
            }
          ],
          name: "cancelUpgradeProposal",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint64",
                  name: "blockNumber",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "blockHash",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "indexRepeatedStorageChanges",
                  type: "uint64"
                },
                {
                  internalType: "uint256",
                  name: "numberOfLayer1Txs",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "priorityOperationsHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "l2LogsTreeRoot",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "commitment",
                  type: "bytes32"
                }
              ],
              internalType: "struct IExecutor.StoredBlockInfo",
              name: "_lastCommittedBlockData",
              type: "tuple"
            },
            {
              components: [
                {
                  internalType: "uint64",
                  name: "blockNumber",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "timestamp",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "indexRepeatedStorageChanges",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "newStateRoot",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "numberOfLayer1Txs",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "l2LogsTreeRoot",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "priorityOperationsHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes",
                  name: "initialStorageChanges",
                  type: "bytes"
                },
                {
                  internalType: "bytes",
                  name: "repeatedStorageChanges",
                  type: "bytes"
                },
                {
                  internalType: "bytes",
                  name: "l2Logs",
                  type: "bytes"
                },
                {
                  internalType: "bytes[]",
                  name: "l2ArbitraryLengthMessages",
                  type: "bytes[]"
                },
                {
                  internalType: "bytes[]",
                  name: "factoryDeps",
                  type: "bytes[]"
                }
              ],
              internalType: "struct IExecutor.CommitBlockInfo[]",
              name: "_newBlocksData",
              type: "tuple[]"
            }
          ],
          name: "commitBlocks",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint64",
                  name: "blockNumber",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "blockHash",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "indexRepeatedStorageChanges",
                  type: "uint64"
                },
                {
                  internalType: "uint256",
                  name: "numberOfLayer1Txs",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "priorityOperationsHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "l2LogsTreeRoot",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "commitment",
                  type: "bytes32"
                }
              ],
              internalType: "struct IExecutor.StoredBlockInfo[]",
              name: "_blocksData",
              type: "tuple[]"
            }
          ],
          name: "executeBlocks",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "address",
                      name: "facet",
                      type: "address"
                    },
                    {
                      internalType: "enum Diamond.Action",
                      name: "action",
                      type: "uint8"
                    },
                    {
                      internalType: "bool",
                      name: "isFreezable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes4[]",
                      name: "selectors",
                      type: "bytes4[]"
                    }
                  ],
                  internalType: "struct Diamond.FacetCut[]",
                  name: "facetCuts",
                  type: "tuple[]"
                },
                {
                  internalType: "address",
                  name: "initAddress",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "initCalldata",
                  type: "bytes"
                }
              ],
              internalType: "struct Diamond.DiamondCutData",
              name: "_diamondCut",
              type: "tuple"
            },
            {
              internalType: "bytes32",
              name: "_proposalSalt",
              type: "bytes32"
            }
          ],
          name: "executeUpgrade",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_selector",
              type: "bytes4"
            }
          ],
          name: "facetAddress",
          outputs: [
            {
              internalType: "address",
              name: "facet",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "facetAddresses",
          outputs: [
            {
              internalType: "address[]",
              name: "facets",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_facet",
              type: "address"
            }
          ],
          name: "facetFunctionSelectors",
          outputs: [
            {
              internalType: "bytes4[]",
              name: "",
              type: "bytes4[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "facets",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "addr",
                  type: "address"
                },
                {
                  internalType: "bytes4[]",
                  name: "selectors",
                  type: "bytes4[]"
                }
              ],
              internalType: "struct IGetters.Facet[]",
              name: "",
              type: "tuple[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            },
            {
              internalType: "uint16",
              name: "_l2TxNumberInBlock",
              type: "uint16"
            },
            {
              internalType: "bytes",
              name: "_message",
              type: "bytes"
            },
            {
              internalType: "bytes32[]",
              name: "_merkleProof",
              type: "bytes32[]"
            }
          ],
          name: "finalizeEthWithdrawal",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "freezeDiamond",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getCurrentProposalId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getFirstUnprocessedPriorityTx",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getGovernor",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getL2BootloaderBytecodeHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getL2DefaultAccountBytecodeHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getPendingGovernor",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getPriorityQueueSize",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getProposedUpgradeHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getProposedUpgradeTimestamp",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getSecurityCouncil",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getTotalBlocksCommitted",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getTotalBlocksExecuted",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getTotalBlocksVerified",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getTotalPriorityTxs",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getUpgradeProposalState",
          outputs: [
            {
              internalType: "enum UpgradeState",
              name: "",
              type: "uint8"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getVerifier",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getVerifierParams",
          outputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "recursionNodeLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionLeafLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionCircuitsSetVksHash",
                  type: "bytes32"
                }
              ],
              internalType: "struct VerifierParams",
              name: "",
              type: "tuple"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getpriorityTxMaxGasLimit",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "isApprovedBySecurityCouncil",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "isDiamondStorageFrozen",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            }
          ],
          name: "isEthWithdrawalFinalized",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_facet",
              type: "address"
            }
          ],
          name: "isFacetFreezable",
          outputs: [
            {
              internalType: "bool",
              name: "isFreezable",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "_selector",
              type: "bytes4"
            }
          ],
          name: "isFunctionFreezable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_address",
              type: "address"
            }
          ],
          name: "isValidator",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_blockNumber",
              type: "uint256"
            }
          ],
          name: "l2LogsRootHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "hash",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_gasPrice",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2GasLimit",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2GasPerPubdataByteLimit",
              type: "uint256"
            }
          ],
          name: "l2TransactionBaseCost",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "priorityQueueFrontOperation",
          outputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "canonicalTxHash",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "expirationTimestamp",
                  type: "uint64"
                },
                {
                  internalType: "uint192",
                  name: "layer2Tip",
                  type: "uint192"
                }
              ],
              internalType: "struct PriorityOperation",
              name: "",
              type: "tuple"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_proposalHash",
              type: "bytes32"
            },
            {
              internalType: "uint40",
              name: "_proposalId",
              type: "uint40"
            }
          ],
          name: "proposeShadowUpgrade",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "address",
                      name: "facet",
                      type: "address"
                    },
                    {
                      internalType: "enum Diamond.Action",
                      name: "action",
                      type: "uint8"
                    },
                    {
                      internalType: "bool",
                      name: "isFreezable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes4[]",
                      name: "selectors",
                      type: "bytes4[]"
                    }
                  ],
                  internalType: "struct Diamond.FacetCut[]",
                  name: "facetCuts",
                  type: "tuple[]"
                },
                {
                  internalType: "address",
                  name: "initAddress",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "initCalldata",
                  type: "bytes"
                }
              ],
              internalType: "struct Diamond.DiamondCutData",
              name: "_diamondCut",
              type: "tuple"
            },
            {
              internalType: "uint40",
              name: "_proposalId",
              type: "uint40"
            }
          ],
          name: "proposeTransparentUpgrade",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint64",
                  name: "blockNumber",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "blockHash",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "indexRepeatedStorageChanges",
                  type: "uint64"
                },
                {
                  internalType: "uint256",
                  name: "numberOfLayer1Txs",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "priorityOperationsHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "l2LogsTreeRoot",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "commitment",
                  type: "bytes32"
                }
              ],
              internalType: "struct IExecutor.StoredBlockInfo",
              name: "_prevBlock",
              type: "tuple"
            },
            {
              components: [
                {
                  internalType: "uint64",
                  name: "blockNumber",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "blockHash",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "indexRepeatedStorageChanges",
                  type: "uint64"
                },
                {
                  internalType: "uint256",
                  name: "numberOfLayer1Txs",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "priorityOperationsHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "l2LogsTreeRoot",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256"
                },
                {
                  internalType: "bytes32",
                  name: "commitment",
                  type: "bytes32"
                }
              ],
              internalType: "struct IExecutor.StoredBlockInfo[]",
              name: "_committedBlocks",
              type: "tuple[]"
            },
            {
              components: [
                {
                  internalType: "uint256[]",
                  name: "recursiveAggregationInput",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "serializedProof",
                  type: "uint256[]"
                }
              ],
              internalType: "struct IExecutor.ProofInput",
              name: "_proof",
              type: "tuple"
            }
          ],
          name: "proveBlocks",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_l2TxHash",
              type: "bytes32"
            },
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            },
            {
              internalType: "uint16",
              name: "_l2TxNumberInBlock",
              type: "uint16"
            },
            {
              internalType: "bytes32[]",
              name: "_merkleProof",
              type: "bytes32[]"
            },
            {
              internalType: "enum TxStatus",
              name: "_status",
              type: "uint8"
            }
          ],
          name: "proveL1ToL2TransactionStatus",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_blockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_index",
              type: "uint256"
            },
            {
              components: [
                {
                  internalType: "uint8",
                  name: "l2ShardId",
                  type: "uint8"
                },
                {
                  internalType: "bool",
                  name: "isService",
                  type: "bool"
                },
                {
                  internalType: "uint16",
                  name: "txNumberInBlock",
                  type: "uint16"
                },
                {
                  internalType: "address",
                  name: "sender",
                  type: "address"
                },
                {
                  internalType: "bytes32",
                  name: "key",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "value",
                  type: "bytes32"
                }
              ],
              internalType: "struct L2Log",
              name: "_log",
              type: "tuple"
            },
            {
              internalType: "bytes32[]",
              name: "_proof",
              type: "bytes32[]"
            }
          ],
          name: "proveL2LogInclusion",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_blockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_index",
              type: "uint256"
            },
            {
              components: [
                {
                  internalType: "uint16",
                  name: "txNumberInBlock",
                  type: "uint16"
                },
                {
                  internalType: "address",
                  name: "sender",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ],
              internalType: "struct L2Message",
              name: "_message",
              type: "tuple"
            },
            {
              internalType: "bytes32[]",
              name: "_proof",
              type: "bytes32[]"
            }
          ],
          name: "proveL2MessageInclusion",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_contractL2",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_l2Value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "_calldata",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "_l2GasLimit",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2GasPerPubdataByteLimit",
              type: "uint256"
            },
            {
              internalType: "bytes[]",
              name: "_factoryDeps",
              type: "bytes[]"
            },
            {
              internalType: "address",
              name: "_refundRecipient",
              type: "address"
            }
          ],
          name: "requestL2Transaction",
          outputs: [
            {
              internalType: "bytes32",
              name: "canonicalTxHash",
              type: "bytes32"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_newLastBlock",
              type: "uint256"
            }
          ],
          name: "revertBlocks",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_upgradeProposalHash",
              type: "bytes32"
            }
          ],
          name: "securityCouncilUpgradeApprove",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_l2BootloaderBytecodeHash",
              type: "bytes32"
            }
          ],
          name: "setL2BootloaderBytecodeHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_l2DefaultAccountBytecodeHash",
              type: "bytes32"
            }
          ],
          name: "setL2DefaultAccountBytecodeHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_newPendingGovernor",
              type: "address"
            }
          ],
          name: "setPendingGovernor",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bool",
              name: "_zkPorterIsAvailable",
              type: "bool"
            }
          ],
          name: "setPorterAvailability",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_newPriorityTxMaxGasLimit",
              type: "uint256"
            }
          ],
          name: "setPriorityTxMaxGasLimit",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_validator",
              type: "address"
            },
            {
              internalType: "bool",
              name: "_active",
              type: "bool"
            }
          ],
          name: "setValidator",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract Verifier",
              name: "_newVerifier",
              type: "address"
            }
          ],
          name: "setVerifier",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "recursionNodeLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionLeafLevelVkHash",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "recursionCircuitsSetVksHash",
                  type: "bytes32"
                }
              ],
              internalType: "struct VerifierParams",
              name: "_newVerifierParams",
              type: "tuple"
            }
          ],
          name: "setVerifierParams",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_blockNumber",
              type: "uint256"
            }
          ],
          name: "storedBlockHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "unfreezeDiamond",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  components: [
                    {
                      internalType: "address",
                      name: "facet",
                      type: "address"
                    },
                    {
                      internalType: "enum Diamond.Action",
                      name: "action",
                      type: "uint8"
                    },
                    {
                      internalType: "bool",
                      name: "isFreezable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes4[]",
                      name: "selectors",
                      type: "bytes4[]"
                    }
                  ],
                  internalType: "struct Diamond.FacetCut[]",
                  name: "facetCuts",
                  type: "tuple[]"
                },
                {
                  internalType: "address",
                  name: "initAddress",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "initCalldata",
                  type: "bytes"
                }
              ],
              internalType: "struct Diamond.DiamondCutData",
              name: "_diamondCut",
              type: "tuple"
            },
            {
              internalType: "uint256",
              name: "_proposalId",
              type: "uint256"
            },
            {
              internalType: "bytes32",
              name: "_salt",
              type: "bytes32"
            }
          ],
          name: "upgradeProposalHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/zksync-web3/abi/ContractDeployer.json
var require_ContractDeployer = __commonJS({
  "node_modules/zksync-web3/abi/ContractDeployer.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "accountAddress",
              type: "address"
            },
            {
              indexed: false,
              internalType: "enum IContractDeployer.AccountNonceOrdering",
              name: "nonceOrdering",
              type: "uint8"
            }
          ],
          name: "AccountNonceOrderingUpdated",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "accountAddress",
              type: "address"
            },
            {
              indexed: false,
              internalType: "enum IContractDeployer.AccountAbstractionVersion",
              name: "aaVersion",
              type: "uint8"
            }
          ],
          name: "AccountVersionUpdated",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "deployerAddress",
              type: "address"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "bytecodeHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "contractAddress",
              type: "address"
            }
          ],
          name: "ContractDeployed",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_salt",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_bytecodeHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_input",
              type: "bytes"
            }
          ],
          name: "create",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_salt",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_bytecodeHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_input",
              type: "bytes"
            }
          ],
          name: "create2",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_salt",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_bytecodeHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_input",
              type: "bytes"
            },
            {
              internalType: "enum IContractDeployer.AccountAbstractionVersion",
              name: "_aaVersion",
              type: "uint8"
            }
          ],
          name: "create2Account",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_bytecodeHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_input",
              type: "bytes"
            },
            {
              internalType: "enum IContractDeployer.AccountAbstractionVersion",
              name: "_aaVersion",
              type: "uint8"
            }
          ],
          name: "createAccount",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_address",
              type: "address"
            }
          ],
          name: "extendedAccountVersion",
          outputs: [
            {
              internalType: "enum IContractDeployer.AccountAbstractionVersion",
              name: "",
              type: "uint8"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "bytecodeHash",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "newAddress",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "callConstructor",
                  type: "bool"
                },
                {
                  internalType: "uint256",
                  name: "value",
                  type: "uint256"
                },
                {
                  internalType: "bytes",
                  name: "input",
                  type: "bytes"
                }
              ],
              internalType: "struct ContractDeployer.ForceDeployment",
              name: "_deployment",
              type: "tuple"
            },
            {
              internalType: "address",
              name: "_sender",
              type: "address"
            }
          ],
          name: "forceDeployOnAddress",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "bytecodeHash",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "newAddress",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "callConstructor",
                  type: "bool"
                },
                {
                  internalType: "uint256",
                  name: "value",
                  type: "uint256"
                },
                {
                  internalType: "bytes",
                  name: "input",
                  type: "bytes"
                }
              ],
              internalType: "struct ContractDeployer.ForceDeployment[]",
              name: "_deployments",
              type: "tuple[]"
            }
          ],
          name: "forceDeployOnAddresses",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_address",
              type: "address"
            }
          ],
          name: "getAccountInfo",
          outputs: [
            {
              components: [
                {
                  internalType: "enum IContractDeployer.AccountAbstractionVersion",
                  name: "supportedAAVersion",
                  type: "uint8"
                },
                {
                  internalType: "enum IContractDeployer.AccountNonceOrdering",
                  name: "nonceOrdering",
                  type: "uint8"
                }
              ],
              internalType: "struct IContractDeployer.AccountInfo",
              name: "info",
              type: "tuple"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_sender",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_senderNonce",
              type: "uint256"
            }
          ],
          name: "getNewAddressCreate",
          outputs: [
            {
              internalType: "address",
              name: "newAddress",
              type: "address"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_sender",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "_bytecodeHash",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_salt",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_input",
              type: "bytes"
            }
          ],
          name: "getNewAddressCreate2",
          outputs: [
            {
              internalType: "address",
              name: "newAddress",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "enum IContractDeployer.AccountAbstractionVersion",
              name: "_version",
              type: "uint8"
            }
          ],
          name: "updateAccountVersion",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "enum IContractDeployer.AccountNonceOrdering",
              name: "_nonceOrdering",
              type: "uint8"
            }
          ],
          name: "updateNonceOrdering",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/zksync-web3/abi/IL1Messenger.json
var require_IL1Messenger = __commonJS({
  "node_modules/zksync-web3/abi/IL1Messenger.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "_sender",
              type: "address"
            },
            {
              indexed: true,
              internalType: "bytes32",
              name: "_hash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "_message",
              type: "bytes"
            }
          ],
          name: "L1MessageSent",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_message",
              type: "bytes"
            }
          ],
          name: "sendToL1",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/zksync-web3/abi/IERC20.json
var require_IERC20 = __commonJS({
  "node_modules/zksync-web3/abi/IERC20.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "spender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "Approval",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "Transfer",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "address",
              name: "spender",
              type: "address"
            }
          ],
          name: "allowance",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "approve",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address"
            }
          ],
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "decimals",
          outputs: [
            {
              internalType: "uint8",
              name: "",
              type: "uint8"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "name",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "symbol",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "totalSupply",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "transfer",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "transferFrom",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/zksync-web3/abi/IERC1271.json
var require_IERC1271 = __commonJS({
  "node_modules/zksync-web3/abi/IERC1271.json"(exports, module) {
    module.exports = {
      abi: [
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "magicValue",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/zksync-web3/abi/IL1Bridge.json
var require_IL1Bridge = __commonJS({
  "node_modules/zksync-web3/abi/IL1Bridge.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l1Token",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "ClaimedFailedDeposit",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l1Token",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "DepositInitiated",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l1Token",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "WithdrawalFinalized",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_depositSender",
              type: "address"
            },
            {
              internalType: "address",
              name: "_l1Token",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "_l2TxHash",
              type: "bytes32"
            },
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            },
            {
              internalType: "uint16",
              name: "_l2TxNumberInBlock",
              type: "uint16"
            },
            {
              internalType: "bytes32[]",
              name: "_merkleProof",
              type: "bytes32[]"
            }
          ],
          name: "claimFailedDeposit",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l2Receiver",
              type: "address"
            },
            {
              internalType: "address",
              name: "_l1Token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_amount",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2TxGasLimit",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2TxGasPerPubdataByte",
              type: "uint256"
            }
          ],
          name: "deposit",
          outputs: [
            {
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            },
            {
              internalType: "uint16",
              name: "_l2TxNumberInBlock",
              type: "uint16"
            },
            {
              internalType: "bytes",
              name: "_message",
              type: "bytes"
            },
            {
              internalType: "bytes32[]",
              name: "_merkleProof",
              type: "bytes32[]"
            }
          ],
          name: "finalizeWithdrawal",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_l2BlockNumber",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "_l2MessageIndex",
              type: "uint256"
            }
          ],
          name: "isWithdrawalFinalized",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l1Token",
              type: "address"
            }
          ],
          name: "l2TokenAddress",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/zksync-web3/abi/IL2Bridge.json
var require_IL2Bridge = __commonJS({
  "node_modules/zksync-web3/abi/IL2Bridge.json"(exports, module) {
    module.exports = {
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "l1Sender",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l2Receiver",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l2Token",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "FinalizeDeposit",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "l2Sender",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l1Receiver",
              type: "address"
            },
            {
              indexed: true,
              internalType: "address",
              name: "l2Token",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          name: "WithdrawalInitiated",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l1Sender",
              type: "address"
            },
            {
              internalType: "address",
              name: "_l2Receiver",
              type: "address"
            },
            {
              internalType: "address",
              name: "_l1Token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_amount",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "finalizeDeposit",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "l1Bridge",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l2Token",
              type: "address"
            }
          ],
          name: "l1TokenAddress",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l1Token",
              type: "address"
            }
          ],
          name: "l2TokenAddress",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_l1Receiver",
              type: "address"
            },
            {
              internalType: "address",
              name: "_l2Token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_amount",
              type: "uint256"
            }
          ],
          name: "withdraw",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/zksync-web3/build/src/utils.js
var require_utils6 = __commonJS({
  "node_modules/zksync-web3/build/src/utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.estimateDefaultBridgeDepositL2Gas = exports.isTypedDataSignatureCorrect = exports.isMessageSignatureCorrect = exports.getERC20BridgeCalldata = exports.undoL1ToL2Alias = exports.applyL1ToL2Alias = exports.getL2HashFromPriorityOp = exports.parseTransaction = exports.hashBytecode = exports.serialize = exports.checkBaseCost = exports.createAddress = exports.create2Address = exports.getDeployedContracts = exports.getHashedL2ToL1Msg = exports.layer1TxDefaults = exports.sleep = exports.isETH = exports.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT = exports.DEFAULT_GAS_PER_PUBDATA_LIMIT = exports.MAX_BYTECODE_LEN_BYTES = exports.PRIORITY_OPERATION_L2_TX_TYPE = exports.EIP712_TX_TYPE = exports.EIP1271_MAGIC_VALUE = exports.L1_TO_L2_ALIAS_OFFSET = exports.L2_ETH_TOKEN_ADDRESS = exports.L1_MESSENGER_ADDRESS = exports.CONTRACT_DEPLOYER_ADDRESS = exports.BOOTLOADER_FORMAL_ADDRESS = exports.L2_BRIDGE_ABI = exports.L1_BRIDGE_ABI = exports.IERC1271 = exports.IERC20 = exports.L1_MESSENGER = exports.CONTRACT_DEPLOYER = exports.ZKSYNC_MAIN_ABI = exports.ETH_ADDRESS = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var types_1 = require_types3();
    var signer_1 = require_signer2();
    var typechain_1 = require_typechain();
    var utils_1 = require_utils();
    __exportStar(require_paymaster_utils(), exports);
    exports.ETH_ADDRESS = "0x0000000000000000000000000000000000000000";
    exports.ZKSYNC_MAIN_ABI = new ethers_1.utils.Interface(require_IZkSync().abi);
    exports.CONTRACT_DEPLOYER = new ethers_1.utils.Interface(require_ContractDeployer().abi);
    exports.L1_MESSENGER = new ethers_1.utils.Interface(require_IL1Messenger().abi);
    exports.IERC20 = new ethers_1.utils.Interface(require_IERC20().abi);
    exports.IERC1271 = new ethers_1.utils.Interface(require_IERC1271().abi);
    exports.L1_BRIDGE_ABI = new ethers_1.utils.Interface(require_IL1Bridge().abi);
    exports.L2_BRIDGE_ABI = new ethers_1.utils.Interface(require_IL2Bridge().abi);
    exports.BOOTLOADER_FORMAL_ADDRESS = "0x0000000000000000000000000000000000008001";
    exports.CONTRACT_DEPLOYER_ADDRESS = "0x0000000000000000000000000000000000008006";
    exports.L1_MESSENGER_ADDRESS = "0x0000000000000000000000000000000000008008";
    exports.L2_ETH_TOKEN_ADDRESS = "0x000000000000000000000000000000000000800a";
    exports.L1_TO_L2_ALIAS_OFFSET = "0x1111000000000000000000000000000000001111";
    exports.EIP1271_MAGIC_VALUE = "0x1626ba7e";
    exports.EIP712_TX_TYPE = 113;
    exports.PRIORITY_OPERATION_L2_TX_TYPE = 255;
    exports.MAX_BYTECODE_LEN_BYTES = ((1 << 16) - 1) * 32;
    exports.DEFAULT_GAS_PER_PUBDATA_LIMIT = 5e4;
    exports.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT = 800;
    function isETH(token) {
      return token.toLowerCase() == exports.ETH_ADDRESS || token.toLowerCase() == exports.L2_ETH_TOKEN_ADDRESS;
    }
    exports.isETH = isETH;
    function sleep(millis) {
      return new Promise((resolve) => setTimeout(resolve, millis));
    }
    exports.sleep = sleep;
    function layer1TxDefaults() {
      return {
        queueType: types_1.PriorityQueueType.Deque,
        opTree: types_1.PriorityOpTree.Full
      };
    }
    exports.layer1TxDefaults = layer1TxDefaults;
    function getHashedL2ToL1Msg(sender, msg, txNumberInBlock) {
      const encodedMsg = new Uint8Array([
        0,
        1,
        ...ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.hexlify(txNumberInBlock), 2),
        ...ethers_1.ethers.utils.arrayify(exports.L1_MESSENGER_ADDRESS),
        ...ethers_1.ethers.utils.zeroPad(sender, 32),
        ...ethers_1.ethers.utils.arrayify(ethers_1.ethers.utils.keccak256(msg))
      ]);
      return ethers_1.ethers.utils.keccak256(encodedMsg);
    }
    exports.getHashedL2ToL1Msg = getHashedL2ToL1Msg;
    function getDeployedContracts(receipt) {
      const addressBytesLen = 40;
      const deployedContracts = receipt.logs.filter((log) => log.topics[0] == ethers_1.utils.id("ContractDeployed(address,bytes32,address)") && log.address == exports.CONTRACT_DEPLOYER_ADDRESS).map((log) => {
        const sender = `0x${log.topics[1].slice(log.topics[1].length - addressBytesLen)}`;
        const bytesCodehash = log.topics[2];
        const address = `0x${log.topics[3].slice(log.topics[3].length - addressBytesLen)}`;
        return {
          sender: ethers_1.utils.getAddress(sender),
          bytecodeHash: bytesCodehash,
          deployedAddress: ethers_1.utils.getAddress(address)
        };
      });
      return deployedContracts;
    }
    exports.getDeployedContracts = getDeployedContracts;
    function create2Address(sender, bytecodeHash, salt, input) {
      const prefix = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes("zksyncCreate2"));
      const inputHash = ethers_1.ethers.utils.keccak256(input);
      const addressBytes = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.concat([prefix, ethers_1.ethers.utils.zeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26);
      return ethers_1.ethers.utils.getAddress(addressBytes);
    }
    exports.create2Address = create2Address;
    function createAddress(sender, senderNonce) {
      const prefix = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes("zksyncCreate"));
      const addressBytes = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.concat([
        prefix,
        ethers_1.ethers.utils.zeroPad(sender, 32),
        ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.hexlify(senderNonce), 32)
      ])).slice(26);
      return ethers_1.ethers.utils.getAddress(addressBytes);
    }
    exports.createAddress = createAddress;
    async function checkBaseCost(baseCost, value) {
      if (baseCost.gt(await value)) {
        throw new Error(`The base cost of performing the priority operation is higher than the provided value parameter for the transaction: baseCost: ${baseCost}, provided value: ${value}`);
      }
    }
    exports.checkBaseCost = checkBaseCost;
    function serialize(transaction, signature) {
      var _a;
      if (transaction.customData == null && transaction.type != exports.EIP712_TX_TYPE) {
        return ethers_1.utils.serializeTransaction(transaction, signature);
      }
      if (!transaction.chainId) {
        throw Error("Transaction chainId isn't set");
      }
      function formatNumber(value, name) {
        const result = ethers_1.utils.stripZeros(ethers_1.BigNumber.from(value).toHexString());
        if (result.length > 32) {
          throw new Error("invalid length for " + name);
        }
        return result;
      }
      if (!transaction.from) {
        throw new Error("Explicitly providing `from` field is reqiured for EIP712 transactions");
      }
      const from = transaction.from;
      const meta = transaction.customData;
      let maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice || 0;
      let maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;
      const fields = [
        formatNumber(transaction.nonce || 0, "nonce"),
        formatNumber(maxPriorityFeePerGas, "maxPriorityFeePerGas"),
        formatNumber(maxFeePerGas, "maxFeePerGas"),
        formatNumber(transaction.gasLimit || 0, "gasLimit"),
        transaction.to != null ? ethers_1.utils.getAddress(transaction.to) : "0x",
        formatNumber(transaction.value || 0, "value"),
        transaction.data || "0x"
      ];
      if (signature) {
        const sig = ethers_1.utils.splitSignature(signature);
        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
        fields.push(ethers_1.utils.stripZeros(sig.r));
        fields.push(ethers_1.utils.stripZeros(sig.s));
      } else {
        fields.push(formatNumber(transaction.chainId, "chainId"));
        fields.push("0x");
        fields.push("0x");
      }
      fields.push(formatNumber(transaction.chainId, "chainId"));
      fields.push(ethers_1.utils.getAddress(from));
      fields.push(formatNumber(meta.gasPerPubdata || exports.DEFAULT_GAS_PER_PUBDATA_LIMIT, "gasPerPubdata"));
      fields.push(((_a = meta.factoryDeps) !== null && _a !== void 0 ? _a : []).map((dep) => ethers_1.utils.hexlify(dep)));
      if (meta.customSignature && ethers_1.ethers.utils.arrayify(meta.customSignature).length == 0) {
        throw new Error("Empty signatures are not supported");
      }
      fields.push(meta.customSignature || "0x");
      if (meta.paymasterParams) {
        fields.push([meta.paymasterParams.paymaster, ethers_1.ethers.utils.hexlify(meta.paymasterParams.paymasterInput)]);
      } else {
        fields.push([]);
      }
      return ethers_1.utils.hexConcat([[exports.EIP712_TX_TYPE], ethers_1.utils.RLP.encode(fields)]);
    }
    exports.serialize = serialize;
    function hashBytecode(bytecode) {
      const bytecodeAsArray = ethers_1.ethers.utils.arrayify(bytecode);
      if (bytecodeAsArray.length % 32 != 0) {
        throw new Error("The bytecode length in bytes must be divisible by 32");
      }
      if (bytecodeAsArray.length > exports.MAX_BYTECODE_LEN_BYTES) {
        throw new Error(`Bytecode can not be longer than ${exports.MAX_BYTECODE_LEN_BYTES} bytes`);
      }
      const hashStr = ethers_1.ethers.utils.sha256(bytecodeAsArray);
      const hash = ethers_1.ethers.utils.arrayify(hashStr);
      const bytecodeLengthInWords = bytecodeAsArray.length / 32;
      if (bytecodeLengthInWords % 2 == 0) {
        throw new Error("Bytecode length in 32-byte words must be odd");
      }
      const bytecodeLength = ethers_1.ethers.utils.arrayify(bytecodeLengthInWords);
      const bytecodeLengthPadded = ethers_1.ethers.utils.zeroPad(bytecodeLength, 2);
      const codeHashVersion = new Uint8Array([1, 0]);
      hash.set(codeHashVersion, 0);
      hash.set(bytecodeLengthPadded, 2);
      return hash;
    }
    exports.hashBytecode = hashBytecode;
    function parseTransaction(payload) {
      function handleAddress(value) {
        if (value === "0x") {
          return null;
        }
        return ethers_1.utils.getAddress(value);
      }
      function handleNumber(value) {
        if (value === "0x") {
          return ethers_1.BigNumber.from(0);
        }
        return ethers_1.BigNumber.from(value);
      }
      function arrayToPaymasterParams(arr) {
        if (arr.length == 0) {
          return void 0;
        }
        if (arr.length != 2) {
          throw new Error(`Invalid paymaster parameters, expected to have length of 2, found ${arr.length}`);
        }
        return {
          paymaster: ethers_1.utils.getAddress(arr[0]),
          paymasterInput: ethers_1.utils.arrayify(arr[1])
        };
      }
      const bytes = ethers_1.utils.arrayify(payload);
      if (bytes[0] != exports.EIP712_TX_TYPE) {
        return ethers_1.utils.parseTransaction(bytes);
      }
      const raw = ethers_1.utils.RLP.decode(bytes.slice(1));
      const transaction = {
        type: exports.EIP712_TX_TYPE,
        nonce: handleNumber(raw[0]).toNumber(),
        maxPriorityFeePerGas: handleNumber(raw[1]),
        maxFeePerGas: handleNumber(raw[2]),
        gasLimit: handleNumber(raw[3]),
        to: handleAddress(raw[4]),
        value: handleNumber(raw[5]),
        data: raw[6],
        chainId: handleNumber(raw[10]),
        from: handleAddress(raw[11]),
        customData: {
          gasPerPubdata: handleNumber(raw[12]),
          factoryDeps: raw[13],
          customSignature: raw[14],
          paymasterParams: arrayToPaymasterParams(raw[15])
        }
      };
      const ethSignature = {
        v: handleNumber(raw[7]).toNumber(),
        r: raw[8],
        s: raw[9]
      };
      if ((ethers_1.utils.hexlify(ethSignature.r) == "0x" || ethers_1.utils.hexlify(ethSignature.s) == "0x") && !transaction.customData.customSignature) {
        return transaction;
      }
      if (ethSignature.v !== 0 && ethSignature.v !== 1 && !transaction.customData.customSignature) {
        throw new Error("Failed to parse signature");
      }
      if (!transaction.customData.customSignature) {
        transaction.v = ethSignature.v;
        transaction.s = ethSignature.s;
        transaction.r = ethSignature.r;
      }
      transaction.hash = eip712TxHash(transaction, ethSignature);
      return transaction;
    }
    exports.parseTransaction = parseTransaction;
    function getSignature(transaction, ethSignature) {
      var _a;
      if (((_a = transaction === null || transaction === void 0 ? void 0 : transaction.customData) === null || _a === void 0 ? void 0 : _a.customSignature) && transaction.customData.customSignature.length) {
        return ethers_1.ethers.utils.arrayify(transaction.customData.customSignature);
      }
      if (!ethSignature) {
        throw new Error("No signature provided");
      }
      const r = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(ethSignature.r), 32);
      const s = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(ethSignature.s), 32);
      const v = ethSignature.v;
      return new Uint8Array([...r, ...s, v]);
    }
    function eip712TxHash(transaction, ethSignature) {
      const signedDigest = signer_1.EIP712Signer.getSignedDigest(transaction);
      const hashedSignature = ethers_1.ethers.utils.keccak256(getSignature(transaction, ethSignature));
      return ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.hexConcat([signedDigest, hashedSignature]));
    }
    function getL2HashFromPriorityOp(txReceipt, zkSyncAddress) {
      let txHash = null;
      for (const log of txReceipt.logs) {
        if (log.address.toLowerCase() != zkSyncAddress.toLowerCase()) {
          continue;
        }
        try {
          const priorityQueueLog = exports.ZKSYNC_MAIN_ABI.parseLog(log);
          if (priorityQueueLog && priorityQueueLog.args.txHash != null) {
            txHash = priorityQueueLog.args.txHash;
          }
        } catch {
        }
      }
      if (!txHash) {
        throw new Error("Failed to parse tx logs");
      }
      return txHash;
    }
    exports.getL2HashFromPriorityOp = getL2HashFromPriorityOp;
    var ADDRESS_MODULO = ethers_1.BigNumber.from(2).pow(160);
    function applyL1ToL2Alias(address) {
      return ethers_1.ethers.utils.hexlify(ethers_1.ethers.BigNumber.from(address).add(exports.L1_TO_L2_ALIAS_OFFSET).mod(ADDRESS_MODULO));
    }
    exports.applyL1ToL2Alias = applyL1ToL2Alias;
    function undoL1ToL2Alias(address) {
      let result = ethers_1.ethers.BigNumber.from(address).sub(exports.L1_TO_L2_ALIAS_OFFSET);
      if (result.lt(ethers_1.BigNumber.from(0))) {
        result = result.add(ADDRESS_MODULO);
      }
      return ethers_1.ethers.utils.hexlify(result);
    }
    exports.undoL1ToL2Alias = undoL1ToL2Alias;
    async function getERC20GettersData(l1TokenAddress, provider) {
      const token = typechain_1.IERC20MetadataFactory.connect(l1TokenAddress, provider);
      const name = await token.name();
      const symbol = await token.symbol();
      const decimals = await token.decimals();
      const coder = new utils_1.AbiCoder();
      const nameBytes = coder.encode(["string"], [name]);
      const symbolBytes = coder.encode(["string"], [symbol]);
      const decimalsBytes = coder.encode(["uint256"], [decimals]);
      return coder.encode(["bytes", "bytes", "bytes"], [nameBytes, symbolBytes, decimalsBytes]);
    }
    async function getERC20BridgeCalldata(l1TokenAddress, l1Sender, l2Receiver, amount, provider) {
      const gettersData = await getERC20GettersData(l1TokenAddress, provider);
      return exports.L2_BRIDGE_ABI.encodeFunctionData("finalizeDeposit", [
        l1Sender,
        l2Receiver,
        l1TokenAddress,
        amount,
        gettersData
      ]);
    }
    exports.getERC20BridgeCalldata = getERC20BridgeCalldata;
    function isECDSASignatureCorrect(address, msgHash, signature) {
      try {
        return address == ethers_1.ethers.utils.recoverAddress(msgHash, signature);
      } catch {
        return false;
      }
    }
    async function isEIP1271SignatureCorrect(provider, address, msgHash, signature) {
      const accountContract = new ethers_1.ethers.Contract(address, exports.IERC1271, provider);
      const result = await accountContract.isValidSignature(msgHash, signature);
      return result == exports.EIP1271_MAGIC_VALUE;
    }
    async function isSignatureCorrect(provider, address, msgHash, signature) {
      let isContractAccount = false;
      const code = await provider.getCode(address);
      isContractAccount = ethers_1.ethers.utils.arrayify(code).length != 0;
      if (!isContractAccount) {
        return isECDSASignatureCorrect(address, msgHash, signature);
      } else {
        return await isEIP1271SignatureCorrect(provider, address, msgHash, signature);
      }
    }
    async function isMessageSignatureCorrect(provider, address, message, signature) {
      const msgHash = ethers_1.ethers.utils.hashMessage(message);
      return await isSignatureCorrect(provider, address, msgHash, signature);
    }
    exports.isMessageSignatureCorrect = isMessageSignatureCorrect;
    async function isTypedDataSignatureCorrect(provider, address, domain, types, value, signature) {
      const msgHash = ethers_1.ethers.utils._TypedDataEncoder.hash(domain, types, value);
      return await isSignatureCorrect(provider, address, msgHash, signature);
    }
    exports.isTypedDataSignatureCorrect = isTypedDataSignatureCorrect;
    async function estimateDefaultBridgeDepositL2Gas(providerL1, providerL2, token, amount, to, from, gasPerPubdataByte) {
      from !== null && from !== void 0 ? from : from = ethers_1.ethers.Wallet.createRandom().address;
      if (token == exports.ETH_ADDRESS) {
        return await providerL2.estimateL1ToL2Execute({
          contractAddress: to,
          gasPerPubdataByte,
          caller: from,
          calldata: "0x",
          l2Value: amount
        });
      } else {
        const l1ERC20BridgeAddresses = (await providerL2.getDefaultBridgeAddresses()).erc20L1;
        const erc20BridgeAddress = (await providerL2.getDefaultBridgeAddresses()).erc20L2;
        const calldata = await getERC20BridgeCalldata(token, from, to, amount, providerL1);
        return await providerL2.estimateL1ToL2Execute({
          caller: applyL1ToL2Alias(l1ERC20BridgeAddresses),
          contractAddress: erc20BridgeAddress,
          gasPerPubdataByte,
          calldata
        });
      }
    }
    exports.estimateDefaultBridgeDepositL2Gas = estimateDefaultBridgeDepositL2Gas;
  }
});

// node_modules/zksync-web3/build/src/wallet.js
var require_wallet = __commonJS({
  "node_modules/zksync-web3/build/src/wallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wallet = void 0;
    var signer_1 = require_signer2();
    var utils_1 = require_utils6();
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var adapters_1 = require_adapters();
    var Wallet = class _Wallet extends (0, adapters_1.AdapterL2)((0, adapters_1.AdapterL1)(ethers_1.ethers.Wallet)) {
      _providerL1() {
        if (this.providerL1 == null) {
          throw new Error("L1 provider missing: use `connectToL1` to specify");
        }
        return this.providerL1;
      }
      _providerL2() {
        return this.provider;
      }
      _signerL1() {
        return this.ethWallet();
      }
      _signerL2() {
        return this;
      }
      ethWallet() {
        return new ethers_1.ethers.Wallet(this._signingKey(), this._providerL1());
      }
      // an alias with a better name
      async getNonce(blockTag) {
        return await this.getTransactionCount(blockTag);
      }
      connect(provider) {
        return new _Wallet(this._signingKey(), provider, this.providerL1);
      }
      connectToL1(provider) {
        return new _Wallet(this._signingKey(), this.provider, provider);
      }
      static fromMnemonic(mnemonic, path, wordlist) {
        const wallet = super.fromMnemonic(mnemonic, path, wordlist);
        return new _Wallet(wallet._signingKey());
      }
      static async fromEncryptedJson(json, password, callback) {
        const wallet = await super.fromEncryptedJson(json, password, callback);
        return new _Wallet(wallet._signingKey());
      }
      static fromEncryptedJsonSync(json, password) {
        const wallet = super.fromEncryptedJsonSync(json, password);
        return new _Wallet(wallet._signingKey());
      }
      static createRandom(options) {
        const wallet = super.createRandom(options);
        return new _Wallet(wallet._signingKey());
      }
      constructor(privateKey, providerL2, providerL1) {
        super(privateKey, providerL2);
        if (this.provider != null) {
          const chainId = this.getChainId();
          this.eip712 = new signer_1.EIP712Signer(this, chainId);
        }
        this.providerL1 = providerL1;
      }
      async populateTransaction(transaction) {
        var _a, _b;
        if (transaction.type == null && transaction.customData == null) {
          transaction.type = 0;
        }
        transaction = await super.populateTransaction(transaction);
        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {
          return transaction;
        }
        transaction.type = utils_1.EIP712_TX_TYPE;
        (_a = transaction.value) !== null && _a !== void 0 ? _a : transaction.value = 0;
        (_b = transaction.data) !== null && _b !== void 0 ? _b : transaction.data = "0x";
        transaction.customData = this._fillCustomData(transaction.customData);
        transaction.gasPrice = await this.provider.getGasPrice();
        return transaction;
      }
      async signTransaction(transaction) {
        var _a;
        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {
          if (transaction.type == 2 && transaction.maxFeePerGas == null) {
            transaction.maxFeePerGas = await this.provider.getGasPrice();
          }
          return await super.signTransaction(transaction);
        } else {
          (_a = transaction.from) !== null && _a !== void 0 ? _a : transaction.from = this.address;
          if (transaction.from.toLowerCase() != this.address.toLowerCase()) {
            throw new Error("Transaction `from` address mismatch");
          }
          transaction.customData.customSignature = await this.eip712.sign(transaction);
          return (0, utils_1.serialize)(transaction);
        }
      }
      async sendTransaction(transaction) {
        return await super.sendTransaction(transaction);
      }
    };
    exports.Wallet = Wallet;
  }
});

// node_modules/zksync-web3/build/src/provider.js
var require_provider = __commonJS({
  "node_modules/zksync-web3/build/src/provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Web3Provider = exports.Provider = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var Formatter = ethers_1.providers.Formatter;
    var web_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var typechain_1 = require_typechain();
    var types_1 = require_types3();
    var utils_1 = require_utils6();
    var signer_1 = require_signer2();
    var defaultFormatter = null;
    var Provider = class _Provider extends ethers_1.ethers.providers.JsonRpcProvider {
      async getTransactionReceipt(transactionHash) {
        await this.getNetwork();
        transactionHash = await transactionHash;
        const params = { transactionHash: this.formatter.hash(transactionHash, true) };
        return (0, web_1.poll)(async () => {
          const result = await this.perform("getTransactionReceipt", params);
          if (result == null) {
            if (this._emitted["t:" + transactionHash] == null) {
              return null;
            }
            return void 0;
          }
          if (result.blockNumber == null && result.status != null && ethers_1.BigNumber.from(result.status).isZero()) {
            return {
              ...this.formatter.receipt({
                ...result,
                confirmations: 1,
                blockNumber: 0,
                blockHash: ethers_1.ethers.constants.HashZero
              }),
              blockNumber: null,
              blockHash: null,
              l1BatchNumber: null,
              l1BatchTxIndex: null
            };
          }
          if (result.blockHash == null) {
            return void 0;
          } else {
            const receipt = this.formatter.receipt(result);
            if (receipt.blockNumber == null) {
              receipt.confirmations = 0;
            } else if (receipt.confirmations == null) {
              const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              let confirmations = blockNumber - receipt.blockNumber + 1;
              if (confirmations <= 0) {
                confirmations = 1;
              }
              receipt.confirmations = confirmations;
            }
            return receipt;
          }
        }, { oncePoll: this });
      }
      async getBlock(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, false);
      }
      async getBlockWithTransactions(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, true);
      }
      static getFormatter() {
        if (defaultFormatter == null) {
          defaultFormatter = new Formatter();
          const number = defaultFormatter.number.bind(defaultFormatter);
          const boolean = defaultFormatter.boolean.bind(defaultFormatter);
          const hash = defaultFormatter.hash.bind(defaultFormatter);
          const address = defaultFormatter.address.bind(defaultFormatter);
          defaultFormatter.formats.receiptLog.l1BatchNumber = Formatter.allowNull(number);
          defaultFormatter.formats.l2Tol1Log = {
            blockNumber: number,
            blockHash: hash,
            l1BatchNumber: Formatter.allowNull(number),
            transactionIndex: number,
            shardId: number,
            isService: boolean,
            sender: address,
            key: hash,
            value: hash,
            transactionHash: hash,
            logIndex: number
          };
          defaultFormatter.formats.receipt.l1BatchNumber = Formatter.allowNull(number);
          defaultFormatter.formats.receipt.l1BatchTxIndex = Formatter.allowNull(number);
          defaultFormatter.formats.receipt.l2ToL1Logs = Formatter.arrayOf((value) => Formatter.check(defaultFormatter.formats.l2Tol1Log, value));
          defaultFormatter.formats.block.l1BatchNumber = Formatter.allowNull(number);
          defaultFormatter.formats.block.l1BatchTimestamp = Formatter.allowNull(number);
          defaultFormatter.formats.blockWithTransactions.l1BatchNumber = Formatter.allowNull(number);
          defaultFormatter.formats.blockWithTransactions.l1BatchTimestamp = Formatter.allowNull(number);
          defaultFormatter.formats.transaction.l1BatchNumber = Formatter.allowNull(number);
          defaultFormatter.formats.transaction.l1BatchTxIndex = Formatter.allowNull(number);
          defaultFormatter.formats.filterLog.l1BatchNumber = Formatter.allowNull(number);
        }
        return defaultFormatter;
      }
      async getBalance(address, blockTag, tokenAddress) {
        const tag = this.formatter.blockTag(blockTag);
        if (tokenAddress == null || (0, utils_1.isETH)(tokenAddress)) {
          return await super.getBalance(address, tag);
        } else {
          try {
            let token = typechain_1.IERC20MetadataFactory.connect(tokenAddress, this);
            return await token.balanceOf(address, { blockTag: tag });
          } catch {
            return ethers_1.BigNumber.from(0);
          }
        }
      }
      async l2TokenAddress(token) {
        if (token == utils_1.ETH_ADDRESS) {
          return utils_1.ETH_ADDRESS;
        } else {
          const erc20BridgeAddress = (await this.getDefaultBridgeAddresses()).erc20L2;
          const erc20Bridge = typechain_1.IL2BridgeFactory.connect(erc20BridgeAddress, this);
          return await erc20Bridge.l2TokenAddress(token);
        }
      }
      async l1TokenAddress(token) {
        if (token == utils_1.ETH_ADDRESS) {
          return utils_1.ETH_ADDRESS;
        } else {
          const erc20BridgeAddress = (await this.getDefaultBridgeAddresses()).erc20L2;
          const erc20Bridge = typechain_1.IL2BridgeFactory.connect(erc20BridgeAddress, this);
          return await erc20Bridge.l1TokenAddress(token);
        }
      }
      // This function is used when formatting requests for
      // eth_call and eth_estimateGas. We override it here
      // because we have extra stuff to serialize (customData).
      // This function is for internal use only.
      static hexlifyTransaction(transaction, allowExtra) {
        var _a;
        const result = ethers_1.ethers.providers.JsonRpcProvider.hexlifyTransaction(transaction, {
          ...allowExtra,
          customData: true,
          from: true
        });
        if (transaction.customData == null) {
          return result;
        }
        result.eip712Meta = {
          gasPerPubdata: ethers_1.utils.hexValue((_a = transaction.customData.gasPerPubdata) !== null && _a !== void 0 ? _a : 0)
        };
        transaction.type = utils_1.EIP712_TX_TYPE;
        if (transaction.customData.factoryDeps) {
          result.eip712Meta.factoryDeps = transaction.customData.factoryDeps.map((dep) => (
            // TODO (SMA-1605): we arraify instead of hexlifying because server expects Vec<u8>.
            //  We should change deserialization there.
            Array.from(ethers_1.utils.arrayify(dep))
          ));
        }
        if (transaction.customData.paymasterParams) {
          result.eip712Meta.paymasterParams = {
            paymaster: ethers_1.utils.hexlify(transaction.customData.paymasterParams.paymaster),
            paymasterInput: Array.from(ethers_1.utils.arrayify(transaction.customData.paymasterParams.paymasterInput))
          };
        }
        return result;
      }
      async estimateGas(transaction) {
        await this.getNetwork();
        const params = await ethers_1.utils.resolveProperties({
          transaction: this._getTransactionRequest(transaction)
        });
        if (transaction.customData != null) {
          params.transaction.customData = transaction.customData;
        }
        const result = await this.perform("estimateGas", params);
        try {
          return ethers_1.BigNumber.from(result);
        } catch (error) {
          throw new Error(`bad result from backend (estimateGas): ${result}`);
        }
      }
      async estimateGasL1(transaction) {
        await this.getNetwork();
        const params = await ethers_1.utils.resolveProperties({
          transaction: this._getTransactionRequest(transaction)
        });
        if (transaction.customData != null) {
          params.transaction.customData = transaction.customData;
        }
        const result = await this.send("zks_estimateGasL1ToL2", [
          _Provider.hexlifyTransaction(params.transaction, { from: true })
        ]);
        try {
          return ethers_1.BigNumber.from(result);
        } catch (error) {
          throw new Error(`bad result from backend (zks_estimateGasL1ToL2): ${result}`);
        }
      }
      async getGasPrice(token) {
        const params = token ? [token] : [];
        const price = await this.send("eth_gasPrice", params);
        return ethers_1.BigNumber.from(price);
      }
      constructor(url, network) {
        super(url, network);
        this.pollingInterval = 500;
        const blockTag = this.formatter.blockTag.bind(this.formatter);
        this.formatter.blockTag = (tag) => {
          if (tag == "committed" || tag == "finalized") {
            return tag;
          }
          return blockTag(tag);
        };
        this.contractAddresses = {};
        this.formatter.transaction = utils_1.parseTransaction;
      }
      async getMessageProof(blockNumber, sender, messageHash, logIndex) {
        return await this.send("zks_getL2ToL1MsgProof", [
          ethers_1.BigNumber.from(blockNumber).toNumber(),
          sender,
          ethers_1.ethers.utils.hexlify(messageHash),
          logIndex
        ]);
      }
      async getLogProof(txHash, index) {
        return await this.send("zks_getL2ToL1LogProof", [ethers_1.ethers.utils.hexlify(txHash), index]);
      }
      async getL1BatchBlockRange(l1BatchNumber) {
        const range = await this.send("zks_getL1BatchBlockRange", [l1BatchNumber]);
        if (range == null) {
          return null;
        }
        return [parseInt(range[0], 16), parseInt(range[1], 16)];
      }
      async getMainContractAddress() {
        if (!this.contractAddresses.mainContract) {
          this.contractAddresses.mainContract = await this.send("zks_getMainContract", []);
        }
        return this.contractAddresses.mainContract;
      }
      async getTestnetPaymasterAddress() {
        return await this.send("zks_getTestnetPaymaster", []);
      }
      async getDefaultBridgeAddresses() {
        if (!this.contractAddresses.erc20BridgeL1) {
          let addresses = await this.send("zks_getBridgeContracts", []);
          this.contractAddresses.erc20BridgeL1 = addresses.l1Erc20DefaultBridge;
          this.contractAddresses.erc20BridgeL2 = addresses.l2Erc20DefaultBridge;
        }
        return {
          erc20L1: this.contractAddresses.erc20BridgeL1,
          erc20L2: this.contractAddresses.erc20BridgeL2
        };
      }
      async getConfirmedTokens(start = 0, limit = 255) {
        const tokens = await this.send("zks_getConfirmedTokens", [start, limit]);
        return tokens.map((token) => ({ address: token.l2Address, ...token }));
      }
      async getTokenPrice(token) {
        return await this.send("zks_getTokenPrice", [token]);
      }
      async getAllAccountBalances(address) {
        let balances = await this.send("zks_getAllAccountBalances", [address]);
        for (let token in balances) {
          balances[token] = ethers_1.BigNumber.from(balances[token]);
        }
        return balances;
      }
      async l1ChainId() {
        const res = await this.send("zks_L1ChainId", []);
        return ethers_1.BigNumber.from(res).toNumber();
      }
      async getL1BatchNumber() {
        const number = await this.send("zks_L1BatchNumber", []);
        return ethers_1.BigNumber.from(number).toNumber();
      }
      async getL1BatchDetails(number) {
        return await this.send("zks_getL1BatchDetails", [number]);
      }
      async getBlockDetails(number) {
        return await this.send("zks_getBlockDetails", [number]);
      }
      async getTransactionDetails(txHash) {
        return await this.send("zks_getTransactionDetails", [txHash]);
      }
      async getWithdrawTx(transaction) {
        var _a, _b, _c;
        var _d;
        const { ...tx } = transaction;
        if (tx.to == null && tx.from == null) {
          throw new Error("withdrawal target address is undefined");
        }
        (_a = tx.to) !== null && _a !== void 0 ? _a : tx.to = tx.from;
        (_b = tx.overrides) !== null && _b !== void 0 ? _b : tx.overrides = {};
        (_c = (_d = tx.overrides).from) !== null && _c !== void 0 ? _c : _d.from = tx.from;
        if ((0, utils_1.isETH)(tx.token)) {
          if (!tx.overrides.value) {
            tx.overrides.value = tx.amount;
          }
          const passedValue = ethers_1.BigNumber.from(tx.overrides.value);
          if (!passedValue.eq(tx.amount)) {
            throw new Error("The tx.value is not equal to the value withdrawn");
          }
          const ethL2Token = typechain_1.IEthTokenFactory.connect(utils_1.L2_ETH_TOKEN_ADDRESS, this);
          return ethL2Token.populateTransaction.withdraw(tx.to, tx.overrides);
        }
        if (tx.bridgeAddress == null) {
          const bridges = await this.getDefaultBridgeAddresses();
          tx.bridgeAddress = bridges.erc20L2;
        }
        const bridge = typechain_1.IL2BridgeFactory.connect(tx.bridgeAddress, this);
        return bridge.populateTransaction.withdraw(tx.to, tx.token, tx.amount, tx.overrides);
      }
      async estimateGasWithdraw(transaction) {
        const withdrawTx = await this.getWithdrawTx(transaction);
        return await this.estimateGas(withdrawTx);
      }
      async getTransferTx(transaction) {
        var _a, _b;
        var _c;
        const { ...tx } = transaction;
        (_a = tx.overrides) !== null && _a !== void 0 ? _a : tx.overrides = {};
        (_b = (_c = tx.overrides).from) !== null && _b !== void 0 ? _b : _c.from = tx.from;
        if (tx.token == null || tx.token == utils_1.ETH_ADDRESS) {
          return {
            ...await ethers_1.ethers.utils.resolveProperties(tx.overrides),
            to: tx.to,
            value: tx.amount
          };
        } else {
          const token = typechain_1.IERC20MetadataFactory.connect(tx.token, this);
          return await token.populateTransaction.transfer(tx.to, tx.amount, tx.overrides);
        }
      }
      async estimateGasTransfer(transaction) {
        const transferTx = await this.getTransferTx(transaction);
        return await this.estimateGas(transferTx);
      }
      static getDefaultProvider() {
        return new _Provider(process.env.ZKSYNC_WEB3_API_URL || "http://localhost:3050");
      }
      async newFilter(filter) {
        filter = await filter;
        const id = await this.send("eth_newFilter", [this._prepareFilter(filter)]);
        return ethers_1.BigNumber.from(id);
      }
      async newBlockFilter() {
        const id = await this.send("eth_newBlockFilter", []);
        return ethers_1.BigNumber.from(id);
      }
      async newPendingTransactionsFilter() {
        const id = await this.send("eth_newPendingTransactionFilter", []);
        return ethers_1.BigNumber.from(id);
      }
      async getFilterChanges(idx) {
        const logs = await this.send("eth_getFilterChanges", [idx.toHexString()]);
        return typeof logs[0] === "string" ? logs : this._parseLogs(logs);
      }
      async getLogs(filter = {}) {
        filter = await filter;
        const logs = await this.send("eth_getLogs", [this._prepareFilter(filter)]);
        return this._parseLogs(logs);
      }
      _parseLogs(logs) {
        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
      }
      _prepareFilter(filter) {
        return {
          ...filter,
          fromBlock: filter.fromBlock == null ? null : this.formatter.blockTag(filter.fromBlock),
          toBlock: filter.fromBlock == null ? null : this.formatter.blockTag(filter.toBlock)
        };
      }
      _wrapTransaction(tx, hash) {
        const response = super._wrapTransaction(tx, hash);
        response.waitFinalize = async () => {
          const receipt = await response.wait();
          while (true) {
            const block = await this.getBlock("finalized");
            if (receipt.blockNumber <= block.number) {
              return await this.getTransactionReceipt(receipt.transactionHash);
            } else {
              await (0, utils_1.sleep)(this.pollingInterval);
            }
          }
        };
        return response;
      }
      // This is inefficient. Status should probably be indicated in the transaction receipt.
      async getTransactionStatus(txHash) {
        const tx = await this.getTransaction(txHash);
        if (tx == null) {
          return types_1.TransactionStatus.NotFound;
        }
        if (tx.blockNumber == null) {
          return types_1.TransactionStatus.Processing;
        }
        const verifiedBlock = await this.getBlock("finalized");
        if (tx.blockNumber <= verifiedBlock.number) {
          return types_1.TransactionStatus.Finalized;
        }
        return types_1.TransactionStatus.Committed;
      }
      async getTransaction(hash) {
        hash = await hash;
        const tx = await super.getTransaction(hash);
        return tx ? this._wrapTransaction(tx, hash) : null;
      }
      async sendTransaction(transaction) {
        return await super.sendTransaction(transaction);
      }
      async getL2TransactionFromPriorityOp(l1TxResponse) {
        const receipt = await l1TxResponse.wait();
        const l2Hash = (0, utils_1.getL2HashFromPriorityOp)(receipt, await this.getMainContractAddress());
        let status = null;
        do {
          status = await this.getTransactionStatus(l2Hash);
          await (0, utils_1.sleep)(this.pollingInterval);
        } while (status == types_1.TransactionStatus.NotFound);
        return await this.getTransaction(l2Hash);
      }
      async getPriorityOpResponse(l1TxResponse) {
        const l2Response = { ...l1TxResponse };
        l2Response.waitL1Commit = l2Response.wait;
        l2Response.wait = async () => {
          const l2Tx = await this.getL2TransactionFromPriorityOp(l1TxResponse);
          return await l2Tx.wait();
        };
        l2Response.waitFinalize = async () => {
          const l2Tx = await this.getL2TransactionFromPriorityOp(l1TxResponse);
          return await l2Tx.waitFinalize();
        };
        return l2Response;
      }
      async getContractAccountInfo(address) {
        const deployerContract = new ethers_1.Contract(utils_1.CONTRACT_DEPLOYER_ADDRESS, utils_1.CONTRACT_DEPLOYER, this);
        const data = await deployerContract.getAccountInfo(address);
        return {
          supportedAAVersion: data.supportedAAVersion,
          nonceOrdering: data.nonceOrdering
        };
      }
      // TODO (EVM-3): support refundRecipient for fee estimation
      async estimateL1ToL2Execute(transaction) {
        var _a, _b;
        (_a = transaction.gasPerPubdataByte) !== null && _a !== void 0 ? _a : transaction.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT;
        (_b = transaction.caller) !== null && _b !== void 0 ? _b : transaction.caller = ethers_1.ethers.Wallet.createRandom().address;
        const customData = {
          gasPerPubdataByte: transaction.gasPerPubdataByte
        };
        if (transaction.factoryDeps) {
          Object.assign(customData, { factoryDeps: transaction.factoryDeps });
        }
        const fee = await this.estimateGasL1({
          from: transaction.caller,
          data: transaction.calldata,
          to: transaction.contractAddress,
          value: transaction.l2Value,
          customData
        });
        return fee;
      }
    };
    exports.Provider = Provider;
    var Web3Provider = class extends Provider {
      constructor(provider, network) {
        if (provider == null) {
          throw new Error("missing provider");
        }
        if (!provider.request) {
          throw new Error("provider must implement eip-1193");
        }
        let path = provider.host || provider.path || (provider.isMetaMask ? "metamask" : "eip-1193:");
        super(path, network);
        this.provider = provider;
      }
      async send(method, params) {
        params !== null && params !== void 0 ? params : params = [];
        if (method == "eth_sign" && (this.provider.isMetaMask || this.provider.isStatus)) {
          method = "personal_sign";
          params = [params[1], params[0]];
        }
        return await this.provider.request({ method, params });
      }
      getSigner(addressOrIndex) {
        return signer_1.Signer.from(super.getSigner(addressOrIndex));
      }
      async estimateGas(transaction) {
        const gas = await super.estimateGas(transaction);
        const metamaskMinimum = ethers_1.BigNumber.from(21e3);
        const isEIP712 = transaction.customData != null || transaction.type == utils_1.EIP712_TX_TYPE;
        return gas.gt(metamaskMinimum) || isEIP712 ? gas : metamaskMinimum;
      }
    };
    exports.Web3Provider = Web3Provider;
  }
});

// node_modules/zksync-web3/build/src/contract.js
var require_contract = __commonJS({
  "node_modules/zksync-web3/build/src/contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContractFactory = exports.Contract = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var utils_1 = require_utils6();
    var types_1 = require_types3();
    var ethers_2 = (init_lib9(), __toCommonJS(lib_exports9));
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return ethers_2.Contract;
    } });
    var ContractFactory = class extends ethers_1.ethers.ContractFactory {
      constructor(abi, bytecode, signer, deploymentType) {
        super(abi, bytecode, signer);
        this.deploymentType = deploymentType || "create";
      }
      encodeCalldata(salt, bytecodeHash, constructorCalldata) {
        if (this.deploymentType == "create") {
          return utils_1.CONTRACT_DEPLOYER.encodeFunctionData("create", [salt, bytecodeHash, constructorCalldata]);
        } else if (this.deploymentType == "createAccount") {
          return utils_1.CONTRACT_DEPLOYER.encodeFunctionData("createAccount", [
            salt,
            bytecodeHash,
            constructorCalldata,
            types_1.AccountAbstractionVersion.Version1
          ]);
        } else {
          throw new Error(`Unsupported deployment type ${this.deploymentType}`);
        }
      }
      getDeployTransaction(...args) {
        var _a, _b, _c;
        var _d, _e;
        let salt = "0x0000000000000000000000000000000000000000000000000000000000000000";
        const txRequest = super.getDeployTransaction(...args);
        if (this.interface.deploy.inputs.length + 1 == args.length) {
          args.pop();
        }
        const bytecodeHash = (0, utils_1.hashBytecode)(this.bytecode);
        const constructorCalldata = ethers_1.utils.arrayify(this.interface.encodeDeploy(args));
        const deployCalldata = this.encodeCalldata(salt, bytecodeHash, constructorCalldata);
        txRequest.type = utils_1.EIP712_TX_TYPE;
        txRequest.to = utils_1.CONTRACT_DEPLOYER_ADDRESS;
        txRequest.data = deployCalldata;
        (_a = txRequest.customData) !== null && _a !== void 0 ? _a : txRequest.customData = {};
        (_b = (_d = txRequest.customData).factoryDeps) !== null && _b !== void 0 ? _b : _d.factoryDeps = [];
        (_c = (_e = txRequest.customData).gasPerPubdata) !== null && _c !== void 0 ? _c : _e.gasPerPubdata = utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT;
        if (!txRequest.customData.factoryDeps.includes(this.bytecode)) {
          txRequest.customData.factoryDeps.push(this.bytecode);
        }
        return txRequest;
      }
      async deploy(...args) {
        const contract = await super.deploy(...args);
        const deployTxReceipt = await contract.deployTransaction.wait();
        const deployedAddresses = (0, utils_1.getDeployedContracts)(deployTxReceipt).map((info) => info.deployedAddress);
        const contractWithCorrectAddress = new ethers_1.ethers.Contract(deployedAddresses[deployedAddresses.length - 1], contract.interface, contract.signer);
        ethers_1.utils.defineReadOnly(contractWithCorrectAddress, "deployTransaction", contract.deployTransaction);
        return contractWithCorrectAddress;
      }
    };
    exports.ContractFactory = ContractFactory;
  }
});

// node_modules/zksync-web3/build/src/index.js
var require_src4 = __commonJS({
  "node_modules/zksync-web3/build/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = exports.ContractFactory = exports.Provider = exports.Web3Provider = exports.Wallet = exports.L1Signer = exports.Signer = exports.EIP712Signer = exports.types = exports.utils = void 0;
    exports.utils = __importStar(require_utils6());
    exports.types = __importStar(require_types3());
    var signer_1 = require_signer2();
    Object.defineProperty(exports, "EIP712Signer", { enumerable: true, get: function() {
      return signer_1.EIP712Signer;
    } });
    Object.defineProperty(exports, "Signer", { enumerable: true, get: function() {
      return signer_1.Signer;
    } });
    Object.defineProperty(exports, "L1Signer", { enumerable: true, get: function() {
      return signer_1.L1Signer;
    } });
    var wallet_1 = require_wallet();
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return wallet_1.Wallet;
    } });
    var provider_1 = require_provider();
    Object.defineProperty(exports, "Web3Provider", { enumerable: true, get: function() {
      return provider_1.Web3Provider;
    } });
    Object.defineProperty(exports, "Provider", { enumerable: true, get: function() {
      return provider_1.Provider;
    } });
    var contract_1 = require_contract();
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function() {
      return contract_1.ContractFactory;
    } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return contract_1.Contract;
    } });
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/contracts/safeDeploymentContracts.js
var require_safeDeploymentContracts = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/contracts/safeDeploymentContracts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSimulateTxAccessorContract = exports.getCreateCallContract = exports.getSignMessageLibContract = exports.getMultiSendCallOnlyContract = exports.getMultiSendContract = exports.getCompatibilityFallbackHandlerContract = exports.getProxyFactoryContract = exports.getSafeContract = exports.getSimulateTxAccessorContractDeployment = exports.getCreateCallContractDeployment = exports.getSignMessageLibContractDeployment = exports.getSafeProxyFactoryContractDeployment = exports.getMultiSendContractDeployment = exports.getMultiSendCallOnlyContractDeployment = exports.getCompatibilityFallbackHandlerContractDeployment = exports.getSafeContractDeployment = void 0;
    var safe_deployments_1 = require_dist3();
    var config_1 = require_config();
    function getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy = false) {
      const version = config_1.safeDeploymentsVersions[safeVersion].safeMasterCopyVersion;
      const filters = { version, network: chainId.toString(), released: true };
      if (config_1.safeDeploymentsL1ChainIds.includes(chainId) || isL1SafeMasterCopy) {
        return (0, safe_deployments_1.getSafeSingletonDeployment)(filters);
      }
      return (0, safe_deployments_1.getSafeL2SingletonDeployment)(filters);
    }
    exports.getSafeContractDeployment = getSafeContractDeployment;
    function getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].compatibilityFallbackHandler;
      return (0, safe_deployments_1.getCompatibilityFallbackHandlerDeployment)({
        version,
        network: chainId.toString(),
        released: true
      });
    }
    exports.getCompatibilityFallbackHandlerContractDeployment = getCompatibilityFallbackHandlerContractDeployment;
    function getMultiSendCallOnlyContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].multiSendCallOnlyVersion;
      return (0, safe_deployments_1.getMultiSendCallOnlyDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getMultiSendCallOnlyContractDeployment = getMultiSendCallOnlyContractDeployment;
    function getMultiSendContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].multiSendVersion;
      return (0, safe_deployments_1.getMultiSendDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getMultiSendContractDeployment = getMultiSendContractDeployment;
    function getSafeProxyFactoryContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].safeProxyFactoryVersion;
      return (0, safe_deployments_1.getProxyFactoryDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getSafeProxyFactoryContractDeployment = getSafeProxyFactoryContractDeployment;
    function getSignMessageLibContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].signMessageLibVersion;
      return (0, safe_deployments_1.getSignMessageLibDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getSignMessageLibContractDeployment = getSignMessageLibContractDeployment;
    function getCreateCallContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].createCallVersion;
      return (0, safe_deployments_1.getCreateCallDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getCreateCallContractDeployment = getCreateCallContractDeployment;
    function getSimulateTxAccessorContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].createCallVersion;
      return (0, safe_deployments_1.getSimulateTxAccessorDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getSimulateTxAccessorContractDeployment = getSimulateTxAccessorContractDeployment;
    async function getSafeContract({ ethAdapter, safeVersion, customSafeAddress, isL1SafeMasterCopy, customContracts }) {
      const chainId = await ethAdapter.getChainId();
      const singletonDeployment = getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy);
      const safeContract = await ethAdapter.getSafeContract({
        safeVersion,
        singletonDeployment,
        customContractAddress: customSafeAddress ?? (customContracts == null ? void 0 : customContracts.safeMasterCopyAddress),
        customContractAbi: customContracts == null ? void 0 : customContracts.safeMasterCopyAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(safeContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("SafeProxy contract is not deployed on the current network");
      }
      return safeContract;
    }
    exports.getSafeContract = getSafeContract;
    async function getProxyFactoryContract({ ethAdapter, safeVersion, customContracts }) {
      const chainId = await ethAdapter.getChainId();
      const proxyFactoryDeployment = getSafeProxyFactoryContractDeployment(safeVersion, chainId);
      const safeProxyFactoryContract = await ethAdapter.getSafeProxyFactoryContract({
        safeVersion,
        singletonDeployment: proxyFactoryDeployment,
        customContractAddress: customContracts == null ? void 0 : customContracts.safeProxyFactoryAddress,
        customContractAbi: customContracts == null ? void 0 : customContracts.safeProxyFactoryAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(safeProxyFactoryContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("SafeProxyFactory contract is not deployed on the current network");
      }
      return safeProxyFactoryContract;
    }
    exports.getProxyFactoryContract = getProxyFactoryContract;
    async function getCompatibilityFallbackHandlerContract({ ethAdapter, safeVersion, customContracts }) {
      const chainId = await ethAdapter.getChainId();
      const fallbackHandlerDeployment = getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId);
      const fallbackHandlerContract = await ethAdapter.getCompatibilityFallbackHandlerContract({
        safeVersion,
        singletonDeployment: fallbackHandlerDeployment,
        customContractAddress: customContracts == null ? void 0 : customContracts.fallbackHandlerAddress,
        customContractAbi: customContracts == null ? void 0 : customContracts.fallbackHandlerAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(fallbackHandlerContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("CompatibilityFallbackHandler contract is not deployed on the current network");
      }
      return fallbackHandlerContract;
    }
    exports.getCompatibilityFallbackHandlerContract = getCompatibilityFallbackHandlerContract;
    async function getMultiSendContract({ ethAdapter, safeVersion, customContracts }) {
      const chainId = await ethAdapter.getChainId();
      const multiSendDeployment = getMultiSendContractDeployment(safeVersion, chainId);
      const multiSendContract = await ethAdapter.getMultiSendContract({
        safeVersion,
        singletonDeployment: multiSendDeployment,
        customContractAddress: customContracts == null ? void 0 : customContracts.multiSendAddress,
        customContractAbi: customContracts == null ? void 0 : customContracts.multiSendAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(multiSendContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("MultiSend contract is not deployed on the current network");
      }
      return multiSendContract;
    }
    exports.getMultiSendContract = getMultiSendContract;
    async function getMultiSendCallOnlyContract({ ethAdapter, safeVersion, customContracts }) {
      const chainId = await ethAdapter.getChainId();
      const multiSendCallOnlyDeployment = getMultiSendCallOnlyContractDeployment(safeVersion, chainId);
      const multiSendCallOnlyContract = await ethAdapter.getMultiSendCallOnlyContract({
        safeVersion,
        singletonDeployment: multiSendCallOnlyDeployment,
        customContractAddress: customContracts == null ? void 0 : customContracts.multiSendCallOnlyAddress,
        customContractAbi: customContracts == null ? void 0 : customContracts.multiSendCallOnlyAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(multiSendCallOnlyContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("MultiSendCallOnly contract is not deployed on the current network");
      }
      return multiSendCallOnlyContract;
    }
    exports.getMultiSendCallOnlyContract = getMultiSendCallOnlyContract;
    async function getSignMessageLibContract({ ethAdapter, safeVersion, customContracts }) {
      const chainId = await ethAdapter.getChainId();
      const signMessageLibDeployment = getSignMessageLibContractDeployment(safeVersion, chainId);
      const signMessageLibContract = await ethAdapter.getSignMessageLibContract({
        safeVersion,
        singletonDeployment: signMessageLibDeployment,
        customContractAddress: customContracts == null ? void 0 : customContracts.signMessageLibAddress,
        customContractAbi: customContracts == null ? void 0 : customContracts.signMessageLibAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(signMessageLibContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("SignMessageLib contract is not deployed on the current network");
      }
      return signMessageLibContract;
    }
    exports.getSignMessageLibContract = getSignMessageLibContract;
    async function getCreateCallContract({ ethAdapter, safeVersion, customContracts }) {
      const chainId = await ethAdapter.getChainId();
      const createCallDeployment = getCreateCallContractDeployment(safeVersion, chainId);
      const createCallContract = await ethAdapter.getCreateCallContract({
        safeVersion,
        singletonDeployment: createCallDeployment,
        customContractAddress: customContracts == null ? void 0 : customContracts.createCallAddress,
        customContractAbi: customContracts == null ? void 0 : customContracts.createCallAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(createCallContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("CreateCall contract is not deployed on the current network");
      }
      return createCallContract;
    }
    exports.getCreateCallContract = getCreateCallContract;
    async function getSimulateTxAccessorContract({ ethAdapter, safeVersion, customContracts }) {
      const chainId = await ethAdapter.getChainId();
      const simulateTxAccessorDeployment = getSimulateTxAccessorContractDeployment(safeVersion, chainId);
      const simulateTxAccessorContract = await ethAdapter.getSimulateTxAccessorContract({
        safeVersion,
        singletonDeployment: simulateTxAccessorDeployment,
        customContractAddress: customContracts == null ? void 0 : customContracts.simulateTxAccessorAddress,
        customContractAbi: customContracts == null ? void 0 : customContracts.simulateTxAccessorAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(simulateTxAccessorContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("SimulateTxAccessor contract is not deployed on the current network");
      }
      return simulateTxAccessorContract;
    }
    exports.getSimulateTxAccessorContract = getSimulateTxAccessorContract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/contracts/utils.js
var require_utils7 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/contracts/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSafeDeploymentConfig = exports.validateSafeAccountConfig = exports.predictSafeAddress = exports.encodeSetupCallData = exports.encodeCreateProxyWithNonce = exports.PREDETERMINED_SALT_NONCE = void 0;
    var address_1 = (init_lib3(), __toCommonJS(lib_exports3));
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var config_1 = require_config();
    var constants_1 = require_constants();
    var memoized_1 = require_memoized();
    var ethereumjs_util_1 = require_dist();
    var satisfies_1 = __importDefault(require_satisfies());
    var zksync_web3_1 = require_src4();
    var safeDeploymentContracts_1 = require_safeDeploymentContracts();
    exports.PREDETERMINED_SALT_NONCE = "0xb1073742015cbcf5a3a4d9d1ae33ecf619439710b89475f92e2abd2117e90f90";
    var ZKSYNC_MAINNET = 324;
    var ZKSYNC_TESTNET = 280;
    var ZKSYNC_SAFE_PROXY_DEPLOYED_BYTECODE = {
      "1.3.0": {
        deployedBytecodeHash: "0x0100004124426fb9ebb25e27d670c068e52f9ba631bd383279a188be47e3f86d"
      }
    };
    function encodeCreateProxyWithNonce(safeProxyFactoryContract, safeSingletonAddress, initializer) {
      return safeProxyFactoryContract.encode("createProxyWithNonce", [
        safeSingletonAddress,
        initializer,
        exports.PREDETERMINED_SALT_NONCE
      ]);
    }
    exports.encodeCreateProxyWithNonce = encodeCreateProxyWithNonce;
    var memoizedGetCompatibilityFallbackHandlerContract = (0, memoized_1.createMemoizedFunction)(safeDeploymentContracts_1.getCompatibilityFallbackHandlerContract);
    async function encodeSetupCallData({ ethAdapter, safeAccountConfig, safeContract, customContracts, customSafeVersion }) {
      const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = safeAccountConfig;
      const safeVersion = customSafeVersion || await safeContract.getVersion();
      if ((0, satisfies_1.default)(safeVersion, "<=1.0.0")) {
        return safeContract.encode("setup", [
          owners,
          threshold,
          to,
          data,
          paymentToken,
          payment,
          paymentReceiver
        ]);
      }
      let fallbackHandlerAddress = fallbackHandler;
      const isValidAddress = fallbackHandlerAddress !== void 0 && (0, address_1.isAddress)(fallbackHandlerAddress);
      if (!isValidAddress) {
        const fallbackHandlerContract = await memoizedGetCompatibilityFallbackHandlerContract({
          ethAdapter,
          safeVersion,
          customContracts
        });
        fallbackHandlerAddress = fallbackHandlerContract.getAddress();
      }
      return safeContract.encode("setup", [
        owners,
        threshold,
        to,
        data,
        fallbackHandlerAddress,
        paymentToken,
        payment,
        paymentReceiver
      ]);
    }
    exports.encodeSetupCallData = encodeSetupCallData;
    var memoizedGetProxyFactoryContract = (0, memoized_1.createMemoizedFunction)(safeDeploymentContracts_1.getProxyFactoryContract);
    var memoizedGetSafeContract = (0, memoized_1.createMemoizedFunction)(safeDeploymentContracts_1.getSafeContract);
    var memoizedGetProxyCreationCode = (0, memoized_1.createMemoizedFunction)(async ({ ethAdapter, safeVersion, customContracts }) => {
      const safeProxyFactoryContract = await memoizedGetProxyFactoryContract({
        ethAdapter,
        safeVersion,
        customContracts
      });
      return safeProxyFactoryContract.proxyCreationCode();
    });
    async function predictSafeAddress({ ethAdapter, safeAccountConfig, safeDeploymentConfig = {}, isL1SafeMasterCopy = false, customContracts }) {
      (0, exports.validateSafeAccountConfig)(safeAccountConfig);
      (0, exports.validateSafeDeploymentConfig)(safeDeploymentConfig);
      const { safeVersion = config_1.DEFAULT_SAFE_VERSION, saltNonce = exports.PREDETERMINED_SALT_NONCE } = safeDeploymentConfig;
      const safeProxyFactoryContract = await memoizedGetProxyFactoryContract({
        ethAdapter,
        safeVersion,
        customContracts
      });
      const proxyCreationCode = await memoizedGetProxyCreationCode({
        ethAdapter,
        safeVersion,
        customContracts
      });
      const safeContract = await memoizedGetSafeContract({
        ethAdapter,
        safeVersion,
        isL1SafeMasterCopy,
        customContracts
      });
      const initializer = await encodeSetupCallData({
        ethAdapter,
        safeAccountConfig,
        safeContract,
        customContracts,
        customSafeVersion: safeVersion
        // it is more efficient if we provide the safeVersion manually
      });
      const encodedNonce = (0, ethereumjs_util_1.toBuffer)(ethAdapter.encodeParameters(["uint256"], [saltNonce])).toString("hex");
      const salt = (0, ethereumjs_util_1.keccak256)((0, ethereumjs_util_1.toBuffer)("0x" + (0, ethereumjs_util_1.keccak256)((0, ethereumjs_util_1.toBuffer)(initializer)).toString("hex") + encodedNonce));
      const input = ethAdapter.encodeParameters(["address"], [safeContract.getAddress()]);
      const chainId = await ethAdapter.getChainId();
      if ([ZKSYNC_MAINNET, ZKSYNC_TESTNET].includes(chainId)) {
        const bytecodeHash = ZKSYNC_SAFE_PROXY_DEPLOYED_BYTECODE[safeVersion].deployedBytecodeHash;
        return zksync_web3_1.utils.create2Address(safeProxyFactoryContract.getAddress(), bytecodeHash, salt, input);
      }
      const constructorData = (0, ethereumjs_util_1.toBuffer)(input).toString("hex");
      const initCode = proxyCreationCode + constructorData;
      const proxyAddress = "0x" + (0, ethereumjs_util_1.generateAddress2)((0, ethereumjs_util_1.toBuffer)(safeProxyFactoryContract.getAddress()), (0, ethereumjs_util_1.toBuffer)(salt), (0, ethereumjs_util_1.toBuffer)(initCode)).toString("hex");
      return ethAdapter.getChecksummedAddress(proxyAddress);
    }
    exports.predictSafeAddress = predictSafeAddress;
    var validateSafeAccountConfig = ({ owners, threshold }) => {
      if (owners.length <= 0)
        throw new Error("Owner list must have at least one owner");
      if (threshold <= 0)
        throw new Error("Threshold must be greater than or equal to 1");
      if (threshold > owners.length)
        throw new Error("Threshold must be lower than or equal to owners length");
    };
    exports.validateSafeAccountConfig = validateSafeAccountConfig;
    var validateSafeDeploymentConfig = ({ saltNonce }) => {
      if (saltNonce && bignumber_1.BigNumber.from(saltNonce).lt(0))
        throw new Error("saltNonce must be greater than or equal to 0");
    };
    exports.validateSafeDeploymentConfig = validateSafeDeploymentConfig;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/types.js
var require_types4 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSafeConfigWithPredictedSafe = void 0;
    function isSafeConfigWithPredictedSafe(config) {
      return config.predictedSafe !== void 0;
    }
    exports.isSafeConfigWithPredictedSafe = isSafeConfigWithPredictedSafe;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/managers/contractManager.js
var require_contractManager = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/managers/contractManager.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _ContractManager_contractNetworks;
    var _ContractManager_isL1SafeMasterCopy;
    var _ContractManager_safeContract;
    var _ContractManager_multiSendContract;
    var _ContractManager_multiSendCallOnlyContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var config_1 = require_config();
    var safeDeploymentContracts_1 = require_safeDeploymentContracts();
    var types_1 = require_types4();
    var ContractManager = class _ContractManager {
      constructor() {
        _ContractManager_contractNetworks.set(this, void 0);
        _ContractManager_isL1SafeMasterCopy.set(this, void 0);
        _ContractManager_safeContract.set(this, void 0);
        _ContractManager_multiSendContract.set(this, void 0);
        _ContractManager_multiSendCallOnlyContract.set(this, void 0);
      }
      static async create(config) {
        const contractManager = new _ContractManager();
        await contractManager.init(config);
        return contractManager;
      }
      async init(config) {
        var _a;
        const { ethAdapter, isL1SafeMasterCopy, contractNetworks, predictedSafe, safeAddress } = config;
        const chainId = await ethAdapter.getChainId();
        const customContracts = contractNetworks == null ? void 0 : contractNetworks[chainId];
        __classPrivateFieldSet(this, _ContractManager_contractNetworks, contractNetworks, "f");
        __classPrivateFieldSet(this, _ContractManager_isL1SafeMasterCopy, isL1SafeMasterCopy, "f");
        let safeVersion;
        if ((0, types_1.isSafeConfigWithPredictedSafe)(config)) {
          safeVersion = ((_a = predictedSafe == null ? void 0 : predictedSafe.safeDeploymentConfig) == null ? void 0 : _a.safeVersion) ?? config_1.DEFAULT_SAFE_VERSION;
        } else {
          const defaultSafeContractInstance = await (0, safeDeploymentContracts_1.getSafeContract)({
            ethAdapter,
            safeVersion: config_1.DEFAULT_SAFE_VERSION,
            isL1SafeMasterCopy,
            customSafeAddress: safeAddress,
            customContracts
          });
          safeVersion = await defaultSafeContractInstance.getVersion();
          const isTheDefaultSafeVersion = safeVersion === config_1.DEFAULT_SAFE_VERSION;
          __classPrivateFieldSet(this, _ContractManager_safeContract, isTheDefaultSafeVersion ? defaultSafeContractInstance : await (0, safeDeploymentContracts_1.getSafeContract)({
            ethAdapter,
            safeVersion,
            isL1SafeMasterCopy,
            customSafeAddress: safeAddress,
            customContracts
          }), "f");
        }
        __classPrivateFieldSet(this, _ContractManager_multiSendContract, await (0, safeDeploymentContracts_1.getMultiSendContract)({
          ethAdapter,
          safeVersion,
          customContracts
        }), "f");
        __classPrivateFieldSet(this, _ContractManager_multiSendCallOnlyContract, await (0, safeDeploymentContracts_1.getMultiSendCallOnlyContract)({
          ethAdapter,
          safeVersion,
          customContracts
        }), "f");
      }
      get contractNetworks() {
        return __classPrivateFieldGet(this, _ContractManager_contractNetworks, "f");
      }
      get isL1SafeMasterCopy() {
        return __classPrivateFieldGet(this, _ContractManager_isL1SafeMasterCopy, "f");
      }
      get safeContract() {
        return __classPrivateFieldGet(this, _ContractManager_safeContract, "f");
      }
      get multiSendContract() {
        return __classPrivateFieldGet(this, _ContractManager_multiSendContract, "f");
      }
      get multiSendCallOnlyContract() {
        return __classPrivateFieldGet(this, _ContractManager_multiSendCallOnlyContract, "f");
      }
    };
    _ContractManager_contractNetworks = /* @__PURE__ */ new WeakMap(), _ContractManager_isL1SafeMasterCopy = /* @__PURE__ */ new WeakMap(), _ContractManager_safeContract = /* @__PURE__ */ new WeakMap(), _ContractManager_multiSendContract = /* @__PURE__ */ new WeakMap(), _ContractManager_multiSendCallOnlyContract = /* @__PURE__ */ new WeakMap();
    exports.default = ContractManager;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/address.js
var require_address = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRestrictedAddress = exports.isZeroAddress = exports.sameString = void 0;
    var constants_1 = require_constants();
    function sameString(str1, str2) {
      return str1.toLowerCase() === str2.toLowerCase();
    }
    exports.sameString = sameString;
    function isZeroAddress(address) {
      return sameString(address, constants_1.ZERO_ADDRESS);
    }
    exports.isZeroAddress = isZeroAddress;
    function isSentinelAddress(address) {
      return sameString(address, constants_1.SENTINEL_ADDRESS);
    }
    function isRestrictedAddress(address) {
      return isZeroAddress(address) || isSentinelAddress(address);
    }
    exports.isRestrictedAddress = isRestrictedAddress;
  }
});

// node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        Buffer2 = require_buffer().Buffer;
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this.strip();
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 10;
          } else {
            r |= c & 15;
          }
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/number-to-bn/node_modules/bn.js/lib/bn.js
var require_bn3 = __commonJS({
  "node_modules/number-to-bn/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        Buffer2 = require_buffer().Buffer;
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this.strip();
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 10;
          } else {
            r |= c & 15;
          }
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/number-to-bn/src/index.js
var require_src5 = __commonJS({
  "node_modules/number-to-bn/src/index.js"(exports, module) {
    var BN = require_bn3();
    var stripHexPrefix = require_src();
    module.exports = function numberToBN(arg) {
      if (typeof arg === "string" || typeof arg === "number") {
        var multiplier = new BN(1);
        var formattedString = String(arg).toLowerCase().trim();
        var isHexPrefixed = formattedString.substr(0, 2) === "0x" || formattedString.substr(0, 3) === "-0x";
        var stringArg = stripHexPrefix(formattedString);
        if (stringArg.substr(0, 1) === "-") {
          stringArg = stripHexPrefix(stringArg.slice(1));
          multiplier = new BN(-1, 10);
        }
        stringArg = stringArg === "" ? "0" : stringArg;
        if (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/) || stringArg.match(/^[a-fA-F]+$/) || isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/)) {
          return new BN(stringArg, 16).mul(multiplier);
        }
        if ((stringArg.match(/^-?[0-9]+$/) || stringArg === "") && isHexPrefixed === false) {
          return new BN(stringArg, 10).mul(multiplier);
        }
      } else if (typeof arg === "object" && arg.toString && (!arg.pop && !arg.push)) {
        if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
          return new BN(arg.toString(10), 10);
        }
      }
      throw new Error("[number-to-bn] while converting number " + JSON.stringify(arg) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
    };
  }
});

// node_modules/ethjs-unit/lib/index.js
var require_lib = __commonJS({
  "node_modules/ethjs-unit/lib/index.js"(exports, module) {
    "use strict";
    var BN = require_bn2();
    var numberToBN = require_src5();
    var zero = new BN(0);
    var negative1 = new BN(-1);
    var unitMap = {
      "noether": "0",
      // eslint-disable-line
      "wei": "1",
      // eslint-disable-line
      "kwei": "1000",
      // eslint-disable-line
      "Kwei": "1000",
      // eslint-disable-line
      "babbage": "1000",
      // eslint-disable-line
      "femtoether": "1000",
      // eslint-disable-line
      "mwei": "1000000",
      // eslint-disable-line
      "Mwei": "1000000",
      // eslint-disable-line
      "lovelace": "1000000",
      // eslint-disable-line
      "picoether": "1000000",
      // eslint-disable-line
      "gwei": "1000000000",
      // eslint-disable-line
      "Gwei": "1000000000",
      // eslint-disable-line
      "shannon": "1000000000",
      // eslint-disable-line
      "nanoether": "1000000000",
      // eslint-disable-line
      "nano": "1000000000",
      // eslint-disable-line
      "szabo": "1000000000000",
      // eslint-disable-line
      "microether": "1000000000000",
      // eslint-disable-line
      "micro": "1000000000000",
      // eslint-disable-line
      "finney": "1000000000000000",
      // eslint-disable-line
      "milliether": "1000000000000000",
      // eslint-disable-line
      "milli": "1000000000000000",
      // eslint-disable-line
      "ether": "1000000000000000000",
      // eslint-disable-line
      "kether": "1000000000000000000000",
      // eslint-disable-line
      "grand": "1000000000000000000000",
      // eslint-disable-line
      "mether": "1000000000000000000000000",
      // eslint-disable-line
      "gether": "1000000000000000000000000000",
      // eslint-disable-line
      "tether": "1000000000000000000000000000000"
    };
    function getValueOfUnit(unitInput) {
      var unit = unitInput ? unitInput.toLowerCase() : "ether";
      var unitValue = unitMap[unit];
      if (typeof unitValue !== "string") {
        throw new Error("[ethjs-unit] the unit provided " + unitInput + " doesn't exists, please use the one of the following units " + JSON.stringify(unitMap, null, 2));
      }
      return new BN(unitValue, 10);
    }
    function numberToString(arg) {
      if (typeof arg === "string") {
        if (!arg.match(/^-?[0-9.]+$/)) {
          throw new Error("while converting number to string, invalid number value '" + arg + "', should be a number matching (^-?[0-9.]+).");
        }
        return arg;
      } else if (typeof arg === "number") {
        return String(arg);
      } else if (typeof arg === "object" && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
        if (arg.toPrecision) {
          return String(arg.toPrecision());
        } else {
          return arg.toString(10);
        }
      }
      throw new Error("while converting number to string, invalid number value '" + arg + "' type " + typeof arg + ".");
    }
    function fromWei(weiInput, unit, optionsInput) {
      var wei = numberToBN(weiInput);
      var negative = wei.lt(zero);
      var base = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var options = optionsInput || {};
      if (negative) {
        wei = wei.mul(negative1);
      }
      var fraction = wei.mod(base).toString(10);
      while (fraction.length < baseLength) {
        fraction = "0" + fraction;
      }
      if (!options.pad) {
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
      }
      var whole = wei.div(base).toString(10);
      if (options.commify) {
        whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      }
      var value = "" + whole + (fraction == "0" ? "" : "." + fraction);
      if (negative) {
        value = "-" + value;
      }
      return value;
    }
    function toWei(etherInput, unit) {
      var ether = numberToString(etherInput);
      var base = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var negative = ether.substring(0, 1) === "-";
      if (negative) {
        ether = ether.substring(1);
      }
      if (ether === ".") {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, invalid value");
      }
      var comps = ether.split(".");
      if (comps.length > 2) {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei,  too many decimal points");
      }
      var whole = comps[0], fraction = comps[1];
      if (!whole) {
        whole = "0";
      }
      if (!fraction) {
        fraction = "0";
      }
      if (fraction.length > baseLength) {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, too many decimal places");
      }
      while (fraction.length < baseLength) {
        fraction += "0";
      }
      whole = new BN(whole);
      fraction = new BN(fraction);
      var wei = whole.mul(base).add(fraction);
      if (negative) {
        wei = wei.mul(negative1);
      }
      return new BN(wei.toString(10), 10);
    }
    module.exports = {
      unitMap,
      numberToString,
      getValueOfUnit,
      fromWei,
      toWei
    };
  }
});

// node_modules/utf8/utf8.js
var require_utf8 = __commonJS({
  "node_modules/utf8/utf8.js"(exports) {
    (function(root) {
      var stringFromCharCode = String.fromCharCode;
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        var value;
        var extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        var length = array.length;
        var index = -1;
        var value;
        var output = "";
        while (++index < length) {
          value = array[index];
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
        }
        return output;
      }
      function checkScalarValue(codePoint) {
        if (codePoint >= 55296 && codePoint <= 57343) {
          throw Error(
            "Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value"
          );
        }
      }
      function createByte(codePoint, shift) {
        return stringFromCharCode(codePoint >> shift & 63 | 128);
      }
      function encodeCodePoint(codePoint) {
        if ((codePoint & 4294967168) == 0) {
          return stringFromCharCode(codePoint);
        }
        var symbol = "";
        if ((codePoint & 4294965248) == 0) {
          symbol = stringFromCharCode(codePoint >> 6 & 31 | 192);
        } else if ((codePoint & 4294901760) == 0) {
          checkScalarValue(codePoint);
          symbol = stringFromCharCode(codePoint >> 12 & 15 | 224);
          symbol += createByte(codePoint, 6);
        } else if ((codePoint & 4292870144) == 0) {
          symbol = stringFromCharCode(codePoint >> 18 & 7 | 240);
          symbol += createByte(codePoint, 12);
          symbol += createByte(codePoint, 6);
        }
        symbol += stringFromCharCode(codePoint & 63 | 128);
        return symbol;
      }
      function utf8encode(string) {
        var codePoints = ucs2decode(string);
        var length = codePoints.length;
        var index = -1;
        var codePoint;
        var byteString = "";
        while (++index < length) {
          codePoint = codePoints[index];
          byteString += encodeCodePoint(codePoint);
        }
        return byteString;
      }
      function readContinuationByte() {
        if (byteIndex >= byteCount) {
          throw Error("Invalid byte index");
        }
        var continuationByte = byteArray[byteIndex] & 255;
        byteIndex++;
        if ((continuationByte & 192) == 128) {
          return continuationByte & 63;
        }
        throw Error("Invalid continuation byte");
      }
      function decodeSymbol() {
        var byte1;
        var byte2;
        var byte3;
        var byte4;
        var codePoint;
        if (byteIndex > byteCount) {
          throw Error("Invalid byte index");
        }
        if (byteIndex == byteCount) {
          return false;
        }
        byte1 = byteArray[byteIndex] & 255;
        byteIndex++;
        if ((byte1 & 128) == 0) {
          return byte1;
        }
        if ((byte1 & 224) == 192) {
          byte2 = readContinuationByte();
          codePoint = (byte1 & 31) << 6 | byte2;
          if (codePoint >= 128) {
            return codePoint;
          } else {
            throw Error("Invalid continuation byte");
          }
        }
        if ((byte1 & 240) == 224) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          codePoint = (byte1 & 15) << 12 | byte2 << 6 | byte3;
          if (codePoint >= 2048) {
            checkScalarValue(codePoint);
            return codePoint;
          } else {
            throw Error("Invalid continuation byte");
          }
        }
        if ((byte1 & 248) == 240) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          byte4 = readContinuationByte();
          codePoint = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
          if (codePoint >= 65536 && codePoint <= 1114111) {
            return codePoint;
          }
        }
        throw Error("Invalid UTF-8 detected");
      }
      var byteArray;
      var byteCount;
      var byteIndex;
      function utf8decode(byteString) {
        byteArray = ucs2decode(byteString);
        byteCount = byteArray.length;
        byteIndex = 0;
        var codePoints = [];
        var tmp;
        while ((tmp = decodeSymbol()) !== false) {
          codePoints.push(tmp);
        }
        return ucs2encode(codePoints);
      }
      root.version = "3.0.0";
      root.encode = utf8encode;
      root.decode = utf8decode;
    })(typeof exports === "undefined" ? exports.utf8 = {} : exports);
  }
});

// node_modules/ethereum-bloom-filters/dist/utils.js
var require_utils8 = __commonJS({
  "node_modules/ethereum-bloom-filters/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sha3 = require_sha3();
    function keccak256(data) {
      return "0x" + sha3.keccak_256(toByteArray(data));
    }
    exports.keccak256 = keccak256;
    exports.padLeft = (value, chars) => {
      const hasPrefix = /^0x/i.test(value) || typeof value === "number";
      value = value.toString().replace(/^0x/i, "");
      const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + new Array(padding).join("0") + value;
    };
    function bytesToHex(bytes) {
      const hex = [];
      for (let i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 15).toString(16));
      }
      return `0x${hex.join("").replace(/^0+/, "")}`;
    }
    exports.bytesToHex = bytesToHex;
    function toByteArray(value) {
      if (value == null) {
        throw new Error("cannot convert null value to array");
      }
      if (typeof value === "string") {
        const match = value.match(/^(0x)?[0-9a-fA-F]*$/);
        if (!match) {
          throw new Error("invalid hexidecimal string");
        }
        if (match[1] !== "0x") {
          throw new Error("hex string must have 0x prefix");
        }
        value = value.substring(2);
        if (value.length % 2) {
          value = "0" + value;
        }
        const result = [];
        for (let i = 0; i < value.length; i += 2) {
          result.push(parseInt(value.substr(i, 2), 16));
        }
        return addSlice(new Uint8Array(result));
      }
      if (isByteArray(value)) {
        return addSlice(new Uint8Array(value));
      }
      throw new Error("invalid arrayify value");
    }
    exports.toByteArray = toByteArray;
    function isByteArray(value) {
      if (!value || // tslint:disable-next-line: radix
      parseInt(String(value.length)) != value.length || typeof value === "string") {
        return false;
      }
      for (let i = 0; i < value.length; i++) {
        const v = value[i];
        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
          return false;
        }
      }
      return true;
    }
    function addSlice(array) {
      if (array.slice !== void 0) {
        return array;
      }
      array.slice = () => {
        const args = Array.prototype.slice.call(arguments);
        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
      };
      return array;
    }
  }
});

// node_modules/ethereum-bloom-filters/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/ethereum-bloom-filters/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils8();
    function isBloom(bloom) {
      if (typeof bloom !== "string") {
        return false;
      }
      if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
        return false;
      }
      if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
        return true;
      }
      return false;
    }
    exports.isBloom = isBloom;
    function isInBloom(bloom, value) {
      if (typeof value === "object" && value.constructor === Uint8Array) {
        value = utils_1.bytesToHex(value);
      }
      const hash = utils_1.keccak256(value).replace("0x", "");
      for (let i = 0; i < 12; i += 4) {
        const bitpos = (parseInt(hash.substr(i, 2), 16) << 8) + parseInt(hash.substr(i + 2, 2), 16) & 2047;
        const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
        const offset = 1 << bitpos % 4;
        if ((code & offset) !== offset) {
          return false;
        }
      }
      return true;
    }
    exports.isInBloom = isInBloom;
    function codePointToInt(codePoint) {
      if (codePoint >= 48 && codePoint <= 57) {
        return codePoint - 48;
      }
      if (codePoint >= 65 && codePoint <= 70) {
        return codePoint - 55;
      }
      if (codePoint >= 97 && codePoint <= 102) {
        return codePoint - 87;
      }
      throw new Error("invalid bloom");
    }
    function isUserEthereumAddressInBloom(bloom, ethereumAddress) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isAddress(ethereumAddress)) {
        throw new Error(`Invalid ethereum address given: "${ethereumAddress}"`);
      }
      const address = utils_1.padLeft(ethereumAddress, 64);
      return isInBloom(bloom, address);
    }
    exports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;
    function isContractAddressInBloom(bloom, contractAddress) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isAddress(contractAddress)) {
        throw new Error(`Invalid contract address given: "${contractAddress}"`);
      }
      return isInBloom(bloom, contractAddress);
    }
    exports.isContractAddressInBloom = isContractAddressInBloom;
    function isTopicInBloom(bloom, topic) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isTopic(topic)) {
        throw new Error("Invalid topic");
      }
      return isInBloom(bloom, topic);
    }
    exports.isTopicInBloom = isTopicInBloom;
    function isTopic(topic) {
      if (typeof topic !== "string") {
        return false;
      }
      if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
        return false;
      } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
        return true;
      }
      return false;
    }
    exports.isTopic = isTopic;
    function isAddress(address) {
      if (typeof address !== "string") {
        return false;
      }
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        return true;
      }
      if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        return true;
      }
      return false;
    }
    exports.isAddress = isAddress;
  }
});

// node_modules/web3-utils/node_modules/ethereum-cryptography/utils.js
var require_utils9 = __commonJS({
  "node_modules/web3-utils/node_modules/ethereum-cryptography/utils.js"(exports, module) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = exports.wrapHash = exports.equalsBytes = exports.hexToBytes = exports.bytesToUtf8 = exports.utf8ToBytes = exports.createView = exports.concatBytes = exports.toHex = exports.bytesToHex = exports.assertBytes = exports.assertBool = void 0;
    var _assert_1 = __importDefault(require_assert());
    var utils_1 = require_utils2();
    var assertBool = _assert_1.default.bool;
    exports.assertBool = assertBool;
    var assertBytes = _assert_1.default.bytes;
    exports.assertBytes = assertBytes;
    var utils_2 = require_utils2();
    Object.defineProperty(exports, "bytesToHex", { enumerable: true, get: function() {
      return utils_2.bytesToHex;
    } });
    Object.defineProperty(exports, "toHex", { enumerable: true, get: function() {
      return utils_2.bytesToHex;
    } });
    Object.defineProperty(exports, "concatBytes", { enumerable: true, get: function() {
      return utils_2.concatBytes;
    } });
    Object.defineProperty(exports, "createView", { enumerable: true, get: function() {
      return utils_2.createView;
    } });
    Object.defineProperty(exports, "utf8ToBytes", { enumerable: true, get: function() {
      return utils_2.utf8ToBytes;
    } });
    function bytesToUtf8(data) {
      if (!(data instanceof Uint8Array)) {
        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
      }
      return new TextDecoder().decode(data);
    }
    exports.bytesToUtf8 = bytesToUtf8;
    function hexToBytes(data) {
      const sliced = data.startsWith("0x") ? data.substring(2) : data;
      return (0, utils_1.hexToBytes)(sliced);
    }
    exports.hexToBytes = hexToBytes;
    function equalsBytes(a, b) {
      if (a.length !== b.length) {
        return false;
      }
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    }
    exports.equalsBytes = equalsBytes;
    function wrapHash(hash) {
      return (msg) => {
        _assert_1.default.bytes(msg);
        return hash(msg);
      };
    }
    exports.wrapHash = wrapHash;
    exports.crypto = (() => {
      const webCrypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
      const nodeRequire = typeof module !== "undefined" && typeof module.require === "function" && module.require.bind(module);
      return {
        node: nodeRequire && !webCrypto ? nodeRequire("crypto") : void 0,
        web: webCrypto
      };
    })();
  }
});

// node_modules/web3-utils/node_modules/ethereum-cryptography/keccak.js
var require_keccak = __commonJS({
  "node_modules/web3-utils/node_modules/ethereum-cryptography/keccak.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keccak512 = exports.keccak384 = exports.keccak256 = exports.keccak224 = void 0;
    var sha3_1 = require_sha32();
    var utils_js_1 = require_utils9();
    exports.keccak224 = (0, utils_js_1.wrapHash)(sha3_1.keccak_224);
    exports.keccak256 = (() => {
      const k = (0, utils_js_1.wrapHash)(sha3_1.keccak_256);
      k.create = sha3_1.keccak_256.create;
      return k;
    })();
    exports.keccak384 = (0, utils_js_1.wrapHash)(sha3_1.keccak_384);
    exports.keccak512 = (0, utils_js_1.wrapHash)(sha3_1.keccak_512);
  }
});

// node_modules/web3-utils/lib/utils.js
var require_utils10 = __commonJS({
  "node_modules/web3-utils/lib/utils.js"(exports, module) {
    var BN = require_bn();
    var numberToBN = require_src5();
    var utf8 = require_utf8();
    var ethereumjsUtil = require_dist2();
    var ethereumBloomFilters = require_dist4();
    var { keccak256 } = require_keccak();
    var isBN = function(object) {
      return BN.isBN(object);
    };
    var isBigNumber = function(object) {
      return object && object.constructor && object.constructor.name === "BigNumber";
    };
    var toBN = function(number) {
      try {
        return numberToBN.apply(null, arguments);
      } catch (e) {
        throw new Error(e + ' Given value: "' + number + '"');
      }
    };
    var toTwosComplement = function(number) {
      return "0x" + toBN(number).toTwos(256).toString(16, 64);
    };
    var isAddress = function(address) {
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        return false;
      } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
        return true;
      } else {
        return checkAddressChecksum(address);
      }
    };
    var checkAddressChecksum = function(address) {
      address = address.replace(/^0x/i, "");
      var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, "");
      for (var i = 0; i < 40; i++) {
        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {
          return false;
        }
      }
      return true;
    };
    var leftPad = function(string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === "number";
      string = string.toString(16).replace(/^0x/i, "");
      var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + new Array(padding).join(sign ? sign : "0") + string;
    };
    var rightPad = function(string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === "number";
      string = string.toString(16).replace(/^0x/i, "");
      var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + string + new Array(padding).join(sign ? sign : "0");
    };
    var utf8ToHex = function(str) {
      str = utf8.encode(str);
      var hex = "";
      str = str.replace(/^(?:\u0000)*/, "");
      str = str.split("").reverse().join("");
      str = str.replace(/^(?:\u0000)*/, "");
      str = str.split("").reverse().join("");
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
      }
      return "0x" + hex;
    };
    var hexToUtf8 = function(hex) {
      if (!isHexStrict(hex))
        throw new Error('The parameter "' + hex + '" must be a valid HEX string.');
      var str = "";
      var code = 0;
      hex = hex.replace(/^0x/i, "");
      hex = hex.replace(/^(?:00)*/, "");
      hex = hex.split("").reverse().join("");
      hex = hex.replace(/^(?:00)*/, "");
      hex = hex.split("").reverse().join("");
      var l = hex.length;
      for (var i = 0; i < l; i += 2) {
        code = parseInt(hex.slice(i, i + 2), 16);
        str += String.fromCharCode(code);
      }
      return utf8.decode(str);
    };
    var hexToNumber = function(value, bigIntOnOverflow = false) {
      if (!value) {
        return value;
      }
      if (typeof value === "string" && !isHexStrict(value)) {
        throw new Error('Given value "' + value + '" is not a valid hex string.');
      }
      const n = toBN(value);
      if (bigIntOnOverflow && (n > Number.MAX_SAFE_INTEGER || n < Number.MIN_SAFE_INTEGER)) {
        return BigInt(n);
      }
      return n.toNumber();
    };
    var hexToNumberString = function(value) {
      if (!value)
        return value;
      if (typeof value === "string" && !isHexStrict(value)) {
        throw new Error('Given value "' + value + '" is not a valid hex string.');
      }
      return toBN(value).toString(10);
    };
    var numberToHex = function(value) {
      if (value === null || value === void 0) {
        return value;
      }
      if (!isFinite(value) && !isHexStrict(value)) {
        throw new Error('Given input "' + value + '" is not a number.');
      }
      var number = toBN(value);
      var result = number.toString(16);
      return number.lt(new BN(0)) ? "-0x" + result.slice(1) : "0x" + result;
    };
    var bytesToHex = function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 15).toString(16));
      }
      return "0x" + hex.join("");
    };
    var hexToBytes = function(hex) {
      hex = hex.toString(16);
      if (!isHexStrict(hex)) {
        throw new Error('Given value "' + hex + '" is not a valid hex string.');
      }
      hex = hex.replace(/^0x/i, "");
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.slice(c, c + 2), 16));
      return bytes;
    };
    var toHex = function(value, returnType) {
      if (isAddress(value)) {
        return returnType ? "address" : "0x" + value.toLowerCase().replace(/^0x/i, "");
      }
      if (typeof value === "boolean") {
        return returnType ? "bool" : value ? "0x01" : "0x00";
      }
      if (Buffer.isBuffer(value)) {
        return "0x" + value.toString("hex");
      }
      if (typeof value === "object" && !!value && !isBigNumber(value) && !isBN(value)) {
        return returnType ? "string" : utf8ToHex(JSON.stringify(value));
      }
      if (typeof value === "string") {
        if (value.indexOf("-0x") === 0 || value.indexOf("-0X") === 0) {
          return returnType ? "int256" : numberToHex(value);
        } else if (value.indexOf("0x") === 0 || value.indexOf("0X") === 0) {
          return returnType ? "bytes" : value;
        } else if (!isFinite(value)) {
          return returnType ? "string" : utf8ToHex(value);
        }
      }
      return returnType ? value < 0 ? "int256" : "uint256" : numberToHex(value);
    };
    var isHexStrict = function(hex) {
      return (typeof hex === "string" || typeof hex === "number") && /^(-)?0x[0-9a-f]*$/i.test(hex);
    };
    var isHex = function(hex) {
      return (typeof hex === "string" || typeof hex === "number") && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);
    };
    var stripHexPrefix = function(str) {
      if (str !== 0 && isHex(str))
        return str.replace(/^(-)?0x/i, "$1");
      return str;
    };
    var isBloom = function(bloom) {
      return ethereumBloomFilters.isBloom(bloom);
    };
    var isUserEthereumAddressInBloom = function(bloom, ethereumAddress) {
      return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);
    };
    var isContractAddressInBloom = function(bloom, contractAddress) {
      return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);
    };
    var isTopic = function(topic) {
      return ethereumBloomFilters.isTopic(topic);
    };
    var isTopicInBloom = function(bloom, topic) {
      return ethereumBloomFilters.isTopicInBloom(bloom, topic);
    };
    var isInBloom = function(bloom, topic) {
      return ethereumBloomFilters.isInBloom(bloom, topic);
    };
    var SHA3_NULL_S = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    var sha3 = function(value) {
      if (isBN(value)) {
        value = value.toString();
      }
      if (isHexStrict(value) && /^0x/i.test(value.toString())) {
        value = ethereumjsUtil.toBuffer(value);
      } else if (typeof value === "string") {
        value = Buffer.from(value, "utf-8");
      }
      var returnValue = ethereumjsUtil.bufferToHex(keccak256(value));
      if (returnValue === SHA3_NULL_S) {
        return null;
      } else {
        return returnValue;
      }
    };
    sha3._Hash = keccak256;
    var sha3Raw = function(value) {
      value = sha3(value);
      if (value === null) {
        return SHA3_NULL_S;
      }
      return value;
    };
    var toNumber = function(value, bigIntOnOverflow = false) {
      return typeof value === "number" ? value : hexToNumber(toHex(value), bigIntOnOverflow);
    };
    var BNwrapped = function(value) {
      if (typeof value == "string" && value.includes("0x")) {
        const [negative, hexValue] = value.toLocaleLowerCase().startsWith("-") ? ["-", value.slice(3)] : ["", value.slice(2)];
        return new BN(negative + hexValue, 16);
      } else {
        return new BN(value);
      }
    };
    Object.setPrototypeOf(BNwrapped, BN);
    Object.setPrototypeOf(BNwrapped.prototype, BN.prototype);
    module.exports = {
      BN: BNwrapped,
      isBN,
      isBigNumber,
      toBN,
      isAddress,
      isBloom,
      isUserEthereumAddressInBloom,
      isContractAddressInBloom,
      isTopic,
      isTopicInBloom,
      isInBloom,
      checkAddressChecksum,
      utf8ToHex,
      hexToUtf8,
      hexToNumber,
      hexToNumberString,
      numberToHex,
      toHex,
      hexToBytes,
      bytesToHex,
      isHex,
      isHexStrict,
      stripHexPrefix,
      leftPad,
      rightPad,
      toTwosComplement,
      sha3,
      sha3Raw,
      toNumber
    };
  }
});

// node_modules/web3-utils/lib/soliditySha3.js
var require_soliditySha3 = __commonJS({
  "node_modules/web3-utils/lib/soliditySha3.js"(exports, module) {
    var BN = require_bn();
    var utils = require_utils10();
    var _elementaryName = function(name) {
      if (name.startsWith("int[")) {
        return "int256" + name.slice(3);
      } else if (name === "int") {
        return "int256";
      } else if (name.startsWith("uint[")) {
        return "uint256" + name.slice(4);
      } else if (name === "uint") {
        return "uint256";
      } else if (name.startsWith("fixed[")) {
        return "fixed128x128" + name.slice(5);
      } else if (name === "fixed") {
        return "fixed128x128";
      } else if (name.startsWith("ufixed[")) {
        return "ufixed128x128" + name.slice(6);
      } else if (name === "ufixed") {
        return "ufixed128x128";
      }
      return name;
    };
    var _parseTypeN = function(type) {
      var typesize = /^\D+(\d+).*$/.exec(type);
      return typesize ? parseInt(typesize[1], 10) : null;
    };
    var _parseTypeNArray = function(type) {
      var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
      return arraySize ? parseInt(arraySize[1], 10) : null;
    };
    var _parseNumber = function(arg) {
      var type = typeof arg;
      if (type === "string") {
        if (utils.isHexStrict(arg)) {
          return new BN(arg.replace(/0x/i, ""), 16);
        } else {
          return new BN(arg, 10);
        }
      } else if (type === "number") {
        return new BN(arg);
      } else if (utils.isBigNumber(arg)) {
        return new BN(arg.toString(10));
      } else if (utils.isBN(arg)) {
        return arg;
      } else {
        throw new Error(arg + " is not a number");
      }
    };
    var _solidityPack = function(type, value, arraySize) {
      var size, num;
      type = _elementaryName(type);
      if (type === "bytes") {
        if (value.replace(/^0x/i, "").length % 2 !== 0) {
          throw new Error("Invalid bytes characters " + value.length);
        }
        return value;
      } else if (type === "string") {
        return utils.utf8ToHex(value);
      } else if (type === "bool") {
        return value ? "01" : "00";
      } else if (type.startsWith("address")) {
        if (arraySize) {
          size = 64;
        } else {
          size = 40;
        }
        if (!utils.isAddress(value)) {
          throw new Error(value + " is not a valid address, or the checksum is invalid.");
        }
        return utils.leftPad(value.toLowerCase(), size);
      }
      size = _parseTypeN(type);
      if (type.startsWith("bytes")) {
        if (!size) {
          throw new Error("bytes[] not yet supported in solidity");
        }
        if (arraySize) {
          size = 32;
        }
        if (size < 1 || size > 32 || size < value.replace(/^0x/i, "").length / 2) {
          throw new Error("Invalid bytes" + size + " for " + value);
        }
        return utils.rightPad(value, size * 2);
      } else if (type.startsWith("uint")) {
        if (size % 8 || size < 8 || size > 256) {
          throw new Error("Invalid uint" + size + " size");
        }
        num = _parseNumber(value);
        if (num.bitLength() > size) {
          throw new Error("Supplied uint exceeds width: " + size + " vs " + num.bitLength());
        }
        if (num.lt(new BN(0))) {
          throw new Error("Supplied uint " + num.toString() + " is negative");
        }
        return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
      } else if (type.startsWith("int")) {
        if (size % 8 || size < 8 || size > 256) {
          throw new Error("Invalid int" + size + " size");
        }
        num = _parseNumber(value);
        if (num.bitLength() > size) {
          throw new Error("Supplied int exceeds width: " + size + " vs " + num.bitLength());
        }
        if (num.lt(new BN(0))) {
          return num.toTwos(size).toString("hex");
        } else {
          return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
        }
      } else {
        throw new Error("Unsupported or invalid type: " + type);
      }
    };
    var _processSolidityEncodePackedArgs = function(arg) {
      if (Array.isArray(arg)) {
        throw new Error("Autodetection of array types is not supported.");
      }
      var type, value = "";
      var hexArg, arraySize;
      if (!!arg && typeof arg === "object" && (arg.hasOwnProperty("v") || arg.hasOwnProperty("t") || arg.hasOwnProperty("value") || arg.hasOwnProperty("type"))) {
        type = arg.hasOwnProperty("t") ? arg.t : arg.type;
        value = arg.hasOwnProperty("v") ? arg.v : arg.value;
      } else {
        type = utils.toHex(arg, true);
        value = utils.toHex(arg);
        if (!type.startsWith("int") && !type.startsWith("uint")) {
          type = "bytes";
        }
      }
      if ((type.startsWith("int") || type.startsWith("uint")) && typeof value === "string" && !/^(-)?0x/i.test(value)) {
        value = new BN(value);
      }
      if (Array.isArray(value)) {
        arraySize = _parseTypeNArray(type);
        if (arraySize && value.length !== arraySize) {
          throw new Error(type + " is not matching the given array " + JSON.stringify(value));
        } else {
          arraySize = value.length;
        }
      }
      if (Array.isArray(value)) {
        hexArg = value.map(function(val) {
          return _solidityPack(type, val, arraySize).toString("hex").replace("0x", "");
        });
        return hexArg.join("");
      } else {
        hexArg = _solidityPack(type, value, arraySize);
        return hexArg.toString("hex").replace("0x", "");
      }
    };
    var soliditySha3 = function() {
      var args = Array.prototype.slice.call(arguments);
      var hexArgs = args.map(_processSolidityEncodePackedArgs);
      return utils.sha3("0x" + hexArgs.join(""));
    };
    var soliditySha3Raw = function() {
      return utils.sha3Raw("0x" + Array.prototype.slice.call(arguments).map(_processSolidityEncodePackedArgs).join(""));
    };
    var encodePacked = function() {
      var args = Array.prototype.slice.call(arguments);
      var hexArgs = args.map(_processSolidityEncodePackedArgs);
      return "0x" + hexArgs.join("").toLowerCase();
    };
    module.exports = {
      soliditySha3,
      soliditySha3Raw,
      encodePacked
    };
  }
});

// node_modules/web3-utils/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/web3-utils/lib/index.js"(exports, module) {
    var ethjsUnit = require_lib();
    var utils = require_utils10();
    var soliditySha3 = require_soliditySha3();
    var randombytes = require_browser();
    var BN = require_bn();
    var _fireError = function(error, emitter, reject, callback, optionalData) {
      if (!!error && typeof error === "object" && !(error instanceof Error) && error.data) {
        if (!!error.data && typeof error.data === "object" || Array.isArray(error.data)) {
          error.data = JSON.stringify(error.data, null, 2);
        }
        error = error.message + "\n" + error.data;
      }
      if (typeof error === "string") {
        error = new Error(error);
      }
      if (typeof callback === "function") {
        callback(error, optionalData);
      }
      if (typeof reject === "function") {
        if (emitter && (typeof emitter.listeners === "function" && emitter.listeners("error").length) || typeof callback === "function") {
          emitter.catch(function() {
          });
        }
        setTimeout(function() {
          reject(error);
        }, 1);
      }
      if (emitter && typeof emitter.emit === "function") {
        setTimeout(function() {
          emitter.emit("error", error, optionalData);
          emitter.removeAllListeners();
        }, 1);
      }
      return emitter;
    };
    var _jsonInterfaceMethodToString = function(json) {
      if (!!json && typeof json === "object" && json.name && json.name.indexOf("(") !== -1) {
        return json.name;
      }
      return json.name + "(" + _flattenTypes(false, json.inputs).join(",") + ")";
    };
    var _flattenTypes = function(includeTuple, puts) {
      var types = [];
      puts.forEach(function(param) {
        if (typeof param.components === "object") {
          if (param.type.substring(0, 5) !== "tuple") {
            throw new Error("components found but type is not tuple; report on GitHub");
          }
          var suffix = "";
          var arrayBracket = param.type.indexOf("[");
          if (arrayBracket >= 0) {
            suffix = param.type.substring(arrayBracket);
          }
          var result = _flattenTypes(includeTuple, param.components);
          if (Array.isArray(result) && includeTuple) {
            types.push("tuple(" + result.join(",") + ")" + suffix);
          } else if (!includeTuple) {
            types.push("(" + result.join(",") + ")" + suffix);
          } else {
            types.push("(" + result + ")");
          }
        } else {
          types.push(param.type);
        }
      });
      return types;
    };
    var randomHex = function(size) {
      return "0x" + randombytes(size).toString("hex");
    };
    var hexToAscii = function(hex) {
      if (!utils.isHexStrict(hex))
        throw new Error("The parameter must be a valid HEX string.");
      var str = "";
      var i = 0, l = hex.length;
      if (hex.substring(0, 2) === "0x") {
        i = 2;
      }
      for (; i < l; i += 2) {
        var code = parseInt(hex.slice(i, i + 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    };
    var asciiToHex = function(str) {
      if (!str)
        return "0x00";
      var hex = "";
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
      }
      return "0x" + hex;
    };
    var getUnitValue = function(unit) {
      unit = unit ? unit.toLowerCase() : "ether";
      if (!ethjsUnit.unitMap[unit]) {
        throw new Error('This unit "' + unit + `" doesn't exist, please use the one of the following units` + JSON.stringify(ethjsUnit.unitMap, null, 2));
      }
      return unit;
    };
    var fromWei = function(number, unit) {
      unit = getUnitValue(unit);
      if (!utils.isBN(number) && !(typeof number === "string")) {
        throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
      }
      return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);
    };
    var toWei = function(number, unit) {
      unit = getUnitValue(unit);
      if (!utils.isBN(number) && !(typeof number === "string")) {
        throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
      }
      return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);
    };
    var toChecksumAddress = function(address) {
      if (typeof address === "undefined")
        return "";
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address))
        throw new Error('Given address "' + address + '" is not a valid Ethereum address.');
      address = address.toLowerCase().replace(/^0x/i, "");
      var addressHash = utils.sha3(address).replace(/^0x/i, "");
      var checksumAddress = "0x";
      for (var i = 0; i < address.length; i++) {
        if (parseInt(addressHash[i], 16) > 7) {
          checksumAddress += address[i].toUpperCase();
        } else {
          checksumAddress += address[i];
        }
      }
      return checksumAddress;
    };
    var compareBlockNumbers = function(a, b) {
      if (a === b) {
        return 0;
      } else if (("genesis" === a || "earliest" === a || 0 === a) && ("genesis" === b || "earliest" === b || 0 === b)) {
        return 0;
      } else if ("genesis" === a || "earliest" === a || a === 0) {
        return -1;
      } else if ("genesis" === b || "earliest" === b || b === 0) {
        return 1;
      } else if (a === "latest" || a === "finalized") {
        if (b === "pending") {
          return -1;
        } else {
          return 1;
        }
      } else if (b === "latest" || b === "finalized") {
        if (a === "pending") {
          return 1;
        } else {
          return -1;
        }
      } else if (a === "pending") {
        return 1;
      } else if (b === "pending") {
        return -1;
      } else if (a === "safe" || b === "safe") {
        return void 0;
      } else {
        let bnA = new BN(a);
        let bnB = new BN(b);
        if (bnA.lt(bnB)) {
          return -1;
        } else if (bnA.eq(bnB)) {
          return 0;
        } else {
          return 1;
        }
      }
    };
    module.exports = {
      _fireError,
      _jsonInterfaceMethodToString,
      _flattenTypes,
      // extractDisplayName: extractDisplayName,
      // extractTypeName: extractTypeName,
      randomHex,
      BN: utils.BN,
      isBN: utils.isBN,
      isBigNumber: utils.isBigNumber,
      isHex: utils.isHex,
      isHexStrict: utils.isHexStrict,
      sha3: utils.sha3,
      sha3Raw: utils.sha3Raw,
      keccak256: utils.sha3,
      soliditySha3: soliditySha3.soliditySha3,
      soliditySha3Raw: soliditySha3.soliditySha3Raw,
      encodePacked: soliditySha3.encodePacked,
      isAddress: utils.isAddress,
      checkAddressChecksum: utils.checkAddressChecksum,
      toChecksumAddress,
      toHex: utils.toHex,
      toBN: utils.toBN,
      bytesToHex: utils.bytesToHex,
      hexToBytes: utils.hexToBytes,
      hexToNumberString: utils.hexToNumberString,
      hexToNumber: utils.hexToNumber,
      toDecimal: utils.hexToNumber,
      numberToHex: utils.numberToHex,
      fromDecimal: utils.numberToHex,
      hexToUtf8: utils.hexToUtf8,
      hexToString: utils.hexToUtf8,
      toUtf8: utils.hexToUtf8,
      stripHexPrefix: utils.stripHexPrefix,
      utf8ToHex: utils.utf8ToHex,
      stringToHex: utils.utf8ToHex,
      fromUtf8: utils.utf8ToHex,
      hexToAscii,
      toAscii: hexToAscii,
      asciiToHex,
      fromAscii: asciiToHex,
      unitMap: ethjsUnit.unitMap,
      toWei,
      fromWei,
      padLeft: utils.leftPad,
      leftPad: utils.leftPad,
      padRight: utils.rightPad,
      rightPad: utils.rightPad,
      toTwosComplement: utils.toTwosComplement,
      isBloom: utils.isBloom,
      isUserEthereumAddressInBloom: utils.isUserEthereumAddressInBloom,
      isContractAddressInBloom: utils.isContractAddressInBloom,
      isTopic: utils.isTopic,
      isTopicInBloom: utils.isTopicInBloom,
      isInBloom: utils.isInBloom,
      compareBlockNumbers,
      toNumber: utils.toNumber
    };
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/config.js
var require_config2 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.networks = void 0;
    exports.networks = [
      { chainId: 1, shortName: "eth" },
      { chainId: 3, shortName: "rop" },
      { chainId: 4, shortName: "rin" },
      { chainId: 5, shortName: "gor" },
      { chainId: 10, shortName: "oeth" },
      { chainId: 11, shortName: "meta" },
      { chainId: 12, shortName: "kal" },
      { chainId: 18, shortName: "tst" },
      { chainId: 25, shortName: "cro" },
      { chainId: 28, shortName: "bobarinkeby" },
      { chainId: 39, shortName: "u2u" },
      { chainId: 40, shortName: "telosevm" },
      { chainId: 41, shortName: "telosevmtestnet" },
      { chainId: 42, shortName: "kov" },
      { chainId: 44, shortName: "crab" },
      { chainId: 46, shortName: "darwinia" },
      { chainId: 50, shortName: "xdc" },
      { chainId: 51, shortName: "txdc" },
      { chainId: 56, shortName: "bnb" },
      { chainId: 57, shortName: "sys" },
      { chainId: 61, shortName: "etc" },
      { chainId: 63, shortName: "metc" },
      { chainId: 69, shortName: "okov" },
      { chainId: 82, shortName: "meter" },
      { chainId: 83, shortName: "meter-test" },
      { chainId: 97, shortName: "bnbt" },
      { chainId: 100, shortName: "gno" },
      { chainId: 106, shortName: "vlx" },
      { chainId: 108, shortName: "tt" },
      { chainId: 111, shortName: "etl" },
      { chainId: 122, shortName: "fuse" },
      { chainId: 123, shortName: "spark" },
      { chainId: 137, shortName: "matic" },
      { chainId: 155, shortName: "tenet-testnet" },
      { chainId: 246, shortName: "ewt" },
      { chainId: 250, shortName: "ftm" },
      { chainId: 280, shortName: "zksync-goerli" },
      { chainId: 288, shortName: "boba" },
      { chainId: 300, shortName: "ogn" },
      { chainId: 321, shortName: "kcs" },
      { chainId: 322, shortName: "kcst" },
      { chainId: 324, shortName: "zksync" },
      { chainId: 336, shortName: "sdn" },
      { chainId: 338, shortName: "tcro" },
      { chainId: 420, shortName: "ogor" },
      { chainId: 570, shortName: "sys-rollux" },
      { chainId: 588, shortName: "metis-stardust" },
      { chainId: 592, shortName: "astr" },
      { chainId: 595, shortName: "maca" },
      { chainId: 599, shortName: "metis-goerli" },
      { chainId: 686, shortName: "kar" },
      { chainId: 787, shortName: "aca" },
      { chainId: 1001, shortName: "baobab" },
      { chainId: 1008, shortName: "eun" },
      { chainId: 1088, shortName: "metis-andromeda" },
      { chainId: 1101, shortName: "zkevm" },
      { chainId: 1111, shortName: "wemix" },
      { chainId: 1112, shortName: "twemix" },
      { chainId: 1115, shortName: "tcore" },
      { chainId: 1116, shortName: "core" },
      { chainId: 1284, shortName: "mbeam" },
      { chainId: 1285, shortName: "mriver" },
      { chainId: 1287, shortName: "mbase" },
      { chainId: 1294, shortName: "bobabeam" },
      { chainId: 1559, shortName: "tenet" },
      { chainId: 1807, shortName: "rana" },
      { chainId: 1984, shortName: "euntest" },
      { chainId: 2001, shortName: "milkada" },
      { chainId: 2002, shortName: "milkalgo" },
      { chainId: 2008, shortName: "cloudwalk_testnet" },
      { chainId: 2019, shortName: "pmint_test" },
      { chainId: 2020, shortName: "pmint" },
      { chainId: 2221, shortName: "tkava" },
      { chainId: 2222, shortName: "kava" },
      { chainId: 3737, shortName: "csb" },
      { chainId: 4002, shortName: "tftm" },
      { chainId: 4689, shortName: "iotex-mainnet" },
      { chainId: 4918, shortName: "txvm" },
      { chainId: 4919, shortName: "xvm" },
      { chainId: 5e3, shortName: "mantle" },
      { chainId: 5001, shortName: "mantle-testnet" },
      { chainId: 5700, shortName: "tsys" },
      { chainId: 7341, shortName: "shyft" },
      { chainId: 7700, shortName: "canto" },
      { chainId: 8217, shortName: "cypress" },
      { chainId: 8453, shortName: "base" },
      { chainId: 9e3, shortName: "evmos-testnet" },
      { chainId: 9001, shortName: "evmos" },
      { chainId: 9728, shortName: "boba-testnet" },
      { chainId: 1e4, shortName: "smartbch" },
      { chainId: 10001, shortName: "smartbchtest" },
      { chainId: 10200, shortName: "chi" },
      { chainId: 11235, shortName: "islm" },
      { chainId: 11437, shortName: "shyftt" },
      { chainId: 12357, shortName: "rei-testnet" },
      { chainId: 23294, shortName: "sapphire" },
      { chainId: 23295, shortName: "sapphire-testnet" },
      { chainId: 42161, shortName: "arb1" },
      { chainId: 42170, shortName: "arb-nova" },
      { chainId: 42220, shortName: "celo" },
      { chainId: 43113, shortName: "fuji" },
      { chainId: 43114, shortName: "avax" },
      { chainId: 43288, shortName: "boba-avax" },
      { chainId: 44787, shortName: "alfa" },
      { chainId: 45e3, shortName: "autobahnnetwork" },
      { chainId: 47805, shortName: "rei" },
      { chainId: 54211, shortName: "islmt" },
      { chainId: 56288, shortName: "boba-bnb" },
      { chainId: 57e3, shortName: "tsys-rollux" },
      { chainId: 59140, shortName: "linea-testnet" },
      { chainId: 71401, shortName: "gw-testnet-v1" },
      { chainId: 71402, shortName: "gw-mainnet-v1" },
      { chainId: 73799, shortName: "vt" },
      { chainId: 80001, shortName: "maticmum" },
      { chainId: 84531, shortName: "base-gor" },
      { chainId: 200101, shortName: "milktada" },
      { chainId: 200202, shortName: "milktalgo" },
      { chainId: 333999, shortName: "olympus" },
      { chainId: 421611, shortName: "arb-rinkeby" },
      { chainId: 421613, shortName: "arb-goerli" },
      { chainId: 534353, shortName: "scr-alpha" },
      { chainId: 7777777, shortName: "zora" },
      { chainId: 11155111, shortName: "sep" },
      { chainId: 245022926, shortName: "neonevm-devnet" },
      { chainId: 1313161554, shortName: "aurora" },
      { chainId: 1313161555, shortName: "aurora-testnet" },
      { chainId: 16666e5, shortName: "hmy-s0" },
      { chainId: 16667e5, shortName: "hmy-b-s0" },
      { chainId: 11297108099, shortName: "tpalm" },
      { chainId: 11297108109, shortName: "palm" }
    ];
    if (process.env.TEST_NETWORK === "hardhat") {
      exports.networks.push({ shortName: "local", chainId: 31337 });
    } else if (process.env.TEST_NETWORK === "ganache") {
      exports.networks.push({ shortName: "local", chainId: 1337 });
    }
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/index.js
var require_eip_3770 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateEip3770Address = exports.validateEthereumAddress = exports.validateEip3770NetworkPrefix = exports.isValidEip3770NetworkPrefix = exports.getEip3770NetworkPrefixFromChainId = exports.parseEip3770Address = void 0;
    var web3_utils_1 = require_lib2();
    var config_1 = require_config2();
    function parseEip3770Address(fullAddress) {
      const parts = fullAddress.split(":");
      const address = parts.length > 1 ? parts[1] : parts[0];
      const prefix = parts.length > 1 ? parts[0] : "";
      return { prefix, address };
    }
    exports.parseEip3770Address = parseEip3770Address;
    function getEip3770NetworkPrefixFromChainId(chainId) {
      const network = config_1.networks.find((network2) => chainId === network2.chainId);
      if (!network) {
        throw new Error("No network prefix supported for the current chainId");
      }
      return network.shortName;
    }
    exports.getEip3770NetworkPrefixFromChainId = getEip3770NetworkPrefixFromChainId;
    function isValidEip3770NetworkPrefix(prefix) {
      return config_1.networks.some(({ shortName }) => shortName === prefix);
    }
    exports.isValidEip3770NetworkPrefix = isValidEip3770NetworkPrefix;
    function validateEip3770NetworkPrefix(prefix, currentChainId) {
      const isCurrentNetworkPrefix = prefix === getEip3770NetworkPrefixFromChainId(currentChainId);
      if (!isValidEip3770NetworkPrefix(prefix) || !isCurrentNetworkPrefix) {
        throw new Error("The network prefix must match the current network");
      }
    }
    exports.validateEip3770NetworkPrefix = validateEip3770NetworkPrefix;
    function validateEthereumAddress(address) {
      const isValidAddress = (0, web3_utils_1.isHexStrict)(address) && (0, web3_utils_1.isAddress)(address);
      if (!isValidAddress) {
        throw new Error(`Invalid Ethereum address ${address}`);
      }
    }
    exports.validateEthereumAddress = validateEthereumAddress;
    function validateEip3770Address(fullAddress, currentChainId) {
      const { address, prefix } = parseEip3770Address(fullAddress);
      validateEthereumAddress(address);
      if (prefix) {
        validateEip3770NetworkPrefix(prefix, currentChainId);
      }
      return { address, prefix };
    }
    exports.validateEip3770Address = validateEip3770Address;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/eip-712/index.js
var require_eip_712 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/eip-712/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateTypedData = exports.getEip712MessageTypes = exports.EIP712_DOMAIN = exports.EIP712_DOMAIN_BEFORE_V130 = void 0;
    var satisfies_1 = __importDefault(require_satisfies());
    var EQ_OR_GT_1_3_0 = ">=1.3.0";
    exports.EIP712_DOMAIN_BEFORE_V130 = [
      {
        type: "address",
        name: "verifyingContract"
      }
    ];
    exports.EIP712_DOMAIN = [
      {
        type: "uint256",
        name: "chainId"
      },
      {
        type: "address",
        name: "verifyingContract"
      }
    ];
    function getEip712MessageTypes(safeVersion) {
      const eip712WithChainId = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_3_0);
      return {
        EIP712Domain: eip712WithChainId ? exports.EIP712_DOMAIN : exports.EIP712_DOMAIN_BEFORE_V130,
        SafeTx: [
          { type: "address", name: "to" },
          { type: "uint256", name: "value" },
          { type: "bytes", name: "data" },
          { type: "uint8", name: "operation" },
          { type: "uint256", name: "safeTxGas" },
          { type: "uint256", name: "baseGas" },
          { type: "uint256", name: "gasPrice" },
          { type: "address", name: "gasToken" },
          { type: "address", name: "refundReceiver" },
          { type: "uint256", name: "nonce" }
        ]
      };
    }
    exports.getEip712MessageTypes = getEip712MessageTypes;
    function generateTypedData({ safeAddress, safeVersion, chainId, safeTransactionData }) {
      const eip712WithChainId = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_3_0);
      const typedData = {
        types: getEip712MessageTypes(safeVersion),
        domain: {
          verifyingContract: safeAddress
        },
        primaryType: "SafeTx",
        message: {
          ...safeTransactionData,
          value: safeTransactionData.value,
          safeTxGas: safeTransactionData.safeTxGas,
          baseGas: safeTransactionData.baseGas,
          gasPrice: safeTransactionData.gasPrice,
          nonce: safeTransactionData.nonce
        }
      };
      if (eip712WithChainId) {
        typedData.domain.chainId = chainId;
      }
      return typedData;
    }
    exports.generateTypedData = generateTypedData;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/safeVersions.js
var require_safeVersions = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/safeVersions.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasSafeFeature = exports.SAFE_FEATURES = void 0;
    var satisfies_1 = __importDefault(require_satisfies());
    var SAFE_FEATURES;
    (function(SAFE_FEATURES2) {
      SAFE_FEATURES2["SAFE_TX_GAS_OPTIONAL"] = "SAFE_TX_GAS_OPTIONAL";
      SAFE_FEATURES2["SAFE_TX_GUARDS"] = "SAFE_TX_GUARDS";
      SAFE_FEATURES2["SAFE_FALLBACK_HANDLER"] = "SAFE_FALLBACK_HANDLER";
      SAFE_FEATURES2["ETH_SIGN"] = "ETH_SIGN";
      SAFE_FEATURES2["ACCOUNT_ABSTRACTION"] = "ACCOUNT_ABSTRACTION";
    })(SAFE_FEATURES = exports.SAFE_FEATURES || (exports.SAFE_FEATURES = {}));
    var SAFE_FEATURES_BY_VERSION = {
      [SAFE_FEATURES.SAFE_TX_GAS_OPTIONAL]: ">=1.3.0",
      [SAFE_FEATURES.SAFE_TX_GUARDS]: ">=1.3.0",
      [SAFE_FEATURES.SAFE_FALLBACK_HANDLER]: ">=1.1.1",
      [SAFE_FEATURES.ETH_SIGN]: ">=1.1.0",
      [SAFE_FEATURES.ACCOUNT_ABSTRACTION]: ">=1.3.0"
    };
    var hasSafeFeature = (feature, version) => {
      if (!(feature in SAFE_FEATURES_BY_VERSION)) {
        return false;
      }
      return (0, satisfies_1.default)(version, SAFE_FEATURES_BY_VERSION[feature]);
    };
    exports.hasSafeFeature = hasSafeFeature;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/signatures/SafeSignature.js
var require_SafeSignature = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/signatures/SafeSignature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EthSafeSignature = void 0;
    var EthSafeSignature = class {
      /**
       * Creates an instance of a Safe signature.
       *
       * @param signer - Ethers signer
       * @param signature - The Safe signature
       * @returns The Safe signature instance
       */
      constructor(signer, signature) {
        this.signer = signer;
        this.data = signature;
      }
      /**
       * Returns the static part of the Safe signature.
       *
       * @returns The static part of the Safe signature
       */
      staticPart() {
        return this.data;
      }
      /**
       * Returns the dynamic part of the Safe signature.
       *
       * @returns The dynamic part of the Safe signature
       */
      dynamicPart() {
        return "";
      }
    };
    exports.EthSafeSignature = EthSafeSignature;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/signatures/utils.js
var require_utils11 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/signatures/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateEIP712Signature = exports.generateSignature = exports.adjustVInSignature = exports.isTxHashSignedWithPrefix = exports.generatePreValidatedSignature = void 0;
    var ethereumjs_util_1 = require_dist();
    var address_1 = require_address();
    var SafeSignature_1 = require_SafeSignature();
    function generatePreValidatedSignature(ownerAddress) {
      const signature = "0x000000000000000000000000" + ownerAddress.slice(2) + "000000000000000000000000000000000000000000000000000000000000000001";
      return new SafeSignature_1.EthSafeSignature(ownerAddress, signature);
    }
    exports.generatePreValidatedSignature = generatePreValidatedSignature;
    function isTxHashSignedWithPrefix(txHash, signature, ownerAddress) {
      let hasPrefix;
      try {
        const rsvSig = {
          r: Buffer.from(signature.slice(2, 66), "hex"),
          s: Buffer.from(signature.slice(66, 130), "hex"),
          v: parseInt(signature.slice(130, 132), 16)
        };
        const recoveredData = (0, ethereumjs_util_1.ecrecover)(Buffer.from(txHash.slice(2), "hex"), rsvSig.v, rsvSig.r, rsvSig.s);
        const recoveredAddress = (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.pubToAddress)(recoveredData));
        hasPrefix = !(0, address_1.sameString)(recoveredAddress, ownerAddress);
      } catch (e) {
        hasPrefix = true;
      }
      return hasPrefix;
    }
    exports.isTxHashSignedWithPrefix = isTxHashSignedWithPrefix;
    var adjustVInSignature = (signingMethod, signature, safeTxHash, signerAddress) => {
      const ETHEREUM_V_VALUES = [0, 1, 27, 28];
      const MIN_VALID_V_VALUE_FOR_SAFE_ECDSA = 27;
      let signatureV = parseInt(signature.slice(-2), 16);
      if (!ETHEREUM_V_VALUES.includes(signatureV)) {
        throw new Error("Invalid signature");
      }
      if (signingMethod === "eth_sign") {
        if (signatureV < MIN_VALID_V_VALUE_FOR_SAFE_ECDSA) {
          signatureV += MIN_VALID_V_VALUE_FOR_SAFE_ECDSA;
        }
        const adjustedSignature = signature.slice(0, -2) + signatureV.toString(16);
        const signatureHasPrefix = isTxHashSignedWithPrefix(safeTxHash, adjustedSignature, signerAddress);
        if (signatureHasPrefix) {
          signatureV += 4;
        }
      }
      if (signingMethod === "eth_signTypedData") {
        if (signatureV < MIN_VALID_V_VALUE_FOR_SAFE_ECDSA) {
          signatureV += MIN_VALID_V_VALUE_FOR_SAFE_ECDSA;
        }
      }
      signature = signature.slice(0, -2) + signatureV.toString(16);
      return signature;
    };
    exports.adjustVInSignature = adjustVInSignature;
    async function generateSignature(ethAdapter, hash) {
      const signerAddress = await ethAdapter.getSignerAddress();
      if (!signerAddress) {
        throw new Error("EthAdapter must be initialized with a signer to use this method");
      }
      let signature = await ethAdapter.signMessage(hash);
      signature = (0, exports.adjustVInSignature)("eth_sign", signature, hash, signerAddress);
      return new SafeSignature_1.EthSafeSignature(signerAddress, signature);
    }
    exports.generateSignature = generateSignature;
    async function generateEIP712Signature(ethAdapter, safeTransactionEIP712Args, methodVersion) {
      const signerAddress = await ethAdapter.getSignerAddress();
      if (!signerAddress) {
        throw new Error("EthAdapter must be initialized with a signer to use this method");
      }
      let signature = await ethAdapter.signTypedData(safeTransactionEIP712Args, methodVersion);
      signature = (0, exports.adjustVInSignature)("eth_signTypedData", signature);
      return new SafeSignature_1.EthSafeSignature(signerAddress, signature);
    }
    exports.generateEIP712Signature = generateEIP712Signature;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/signatures/index.js
var require_signatures = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/signatures/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_SafeSignature(), exports);
    __exportStar(require_utils11(), exports);
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/transactions/gas.js
var require_gas = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/transactions/gas.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.estimateSafeDeploymentGas = exports.estimateSafeTxGas = exports.estimateTxBaseGas = exports.estimateTxGas = exports.estimateGas = void 0;
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_types_1 = require_src2();
    var satisfies_1 = __importDefault(require_satisfies());
    var constants_1 = require_constants();
    var safeDeploymentContracts_1 = require_safeDeploymentContracts();
    var CALL_DATA_ZERO_BYTE_GAS_COST = 4;
    var CALL_DATA_BYTE_GAS_COST = 16;
    var INITIZATION_GAS_COST = 2e4;
    var INCREMENT_NONCE_GAS_COST = 5e3;
    var HASH_GENERATION_GAS_COST = 1500;
    var ECRECOVER_GAS_COST = 6e3;
    var TRANSAFER_GAS_COST = 32e3;
    var GAS_COST_PER_SIGNATURE = 1 * CALL_DATA_BYTE_GAS_COST + 2 * 32 * CALL_DATA_BYTE_GAS_COST + ECRECOVER_GAS_COST;
    function estimateDataGasCosts(data) {
      const bytes = data.match(/.{2}/g);
      return bytes.reduce((gasCost, currentByte) => {
        if (currentByte === "0x") {
          return gasCost + 0;
        }
        if (currentByte === "00") {
          return gasCost + CALL_DATA_ZERO_BYTE_GAS_COST;
        }
        return gasCost + CALL_DATA_BYTE_GAS_COST;
      }, 0);
    }
    async function estimateGas(safeVersion, safeContract, ethAdapter, to, valueInWei, data, operation, customContracts) {
      const chainId = await ethAdapter.getChainId();
      const simulateTxAccessorContract = await (0, safeDeploymentContracts_1.getSimulateTxAccessorContract)({
        ethAdapter,
        safeVersion,
        customContracts: customContracts == null ? void 0 : customContracts[chainId]
      });
      const transactionDataToEstimate = simulateTxAccessorContract.encode("simulate", [
        to,
        valueInWei,
        data,
        operation
      ]);
      const safeFunctionToEstimate = safeContract.encode("simulateAndRevert", [
        await simulateTxAccessorContract.getAddress(),
        transactionDataToEstimate
      ]);
      const safeAddress = safeContract.getAddress();
      const transactionToEstimateGas = {
        to: safeAddress,
        value: "0",
        data: safeFunctionToEstimate,
        from: safeAddress
      };
      try {
        const encodedResponse = await ethAdapter.call(transactionToEstimateGas);
        return Number("0x" + encodedResponse.slice(184).slice(0, 10)).toString();
      } catch (error) {
        return parseSafeTxGasErrorResponse(error);
      }
    }
    exports.estimateGas = estimateGas;
    async function estimateTxGas(safeContract, ethAdapter, to, valueInWei, data, operation) {
      let txGasEstimation = bignumber_1.BigNumber.from(0);
      const safeAddress = safeContract.getAddress();
      const estimateData = safeContract.encode("requiredTxGas", [
        to,
        valueInWei,
        data,
        operation
      ]);
      try {
        const estimateResponse = await ethAdapter.estimateGas({
          to: safeAddress,
          from: safeAddress,
          data: estimateData
        });
        txGasEstimation = bignumber_1.BigNumber.from("0x" + estimateResponse.substring(138)).add(1e4);
      } catch (error) {
      }
      if (txGasEstimation.gt(0)) {
        const dataGasEstimation = estimateDataGasCosts(estimateData);
        let additionalGas = 1e4;
        for (let i = 0; i < 10; i++) {
          try {
            const estimateResponse = await ethAdapter.call({
              to: safeAddress,
              from: safeAddress,
              data: estimateData,
              gasPrice: "0",
              gasLimit: txGasEstimation.add(dataGasEstimation).add(additionalGas).toString()
            });
            if (estimateResponse !== "0x") {
              break;
            }
          } catch (error) {
          }
          txGasEstimation = txGasEstimation.add(additionalGas);
          additionalGas *= 2;
        }
        return txGasEstimation.add(additionalGas).toString();
      }
      try {
        const estimateGas2 = await ethAdapter.estimateGas({
          to,
          from: safeAddress,
          value: valueInWei,
          data
        });
        return estimateGas2;
      } catch (error) {
        if (operation === safe_core_sdk_types_1.OperationType.DelegateCall) {
          return "0";
        }
        return Promise.reject(error);
      }
    }
    exports.estimateTxGas = estimateTxGas;
    async function estimateTxBaseGas(safe, safeTransaction) {
      var _a;
      const safeTransactionData = safeTransaction.data;
      const { to, value, data, operation, safeTxGas, gasToken, refundReceiver } = safeTransactionData;
      const safeThreshold = await safe.getThreshold();
      const safeNonce = await safe.getNonce();
      const signaturesGasCost = safeThreshold * GAS_COST_PER_SIGNATURE;
      const encodeSafeTxGas = safeTxGas || 0;
      const encodeBaseGas = 0;
      const gasPrice = 1;
      const encodeGasToken = gasToken || constants_1.ZERO_ADDRESS;
      const encodeRefundReceiver = refundReceiver || constants_1.ZERO_ADDRESS;
      const signatures = "0x";
      const safeVersion = await safe.getContractVersion();
      const ethAdapter = safe.getEthAdapter();
      const isL1SafeMasterCopy = safe.getContractManager().isL1SafeMasterCopy;
      const chainId = await safe.getChainId();
      const customContracts = (_a = safe.getContractManager().contractNetworks) == null ? void 0 : _a[chainId];
      const safeSingletonContract = await (0, safeDeploymentContracts_1.getSafeContract)({
        ethAdapter,
        safeVersion,
        isL1SafeMasterCopy,
        customContracts
      });
      const execTransactionData = safeSingletonContract.encode("execTransaction", [
        to,
        value,
        data,
        operation,
        encodeSafeTxGas,
        encodeBaseGas,
        gasPrice,
        encodeGasToken,
        encodeRefundReceiver,
        signatures
      ]);
      const isSafeInitialized = safeNonce !== 0;
      const incrementNonceGasCost = isSafeInitialized ? INCREMENT_NONCE_GAS_COST : INITIZATION_GAS_COST;
      let baseGas = signaturesGasCost + estimateDataGasCosts(execTransactionData) + incrementNonceGasCost + HASH_GENERATION_GAS_COST;
      baseGas > 65536 ? baseGas += 64 : baseGas += 128;
      baseGas += TRANSAFER_GAS_COST;
      return baseGas.toString();
    }
    exports.estimateTxBaseGas = estimateTxBaseGas;
    async function estimateSafeTxGas(safe, safeTransaction) {
      const safeVersion = await safe.getContractVersion();
      if ((0, satisfies_1.default)(safeVersion, ">=1.3.0")) {
        const safeTxGas2 = await estimateSafeTxGasWithSimulate(safe, safeTransaction);
        return addExtraGasForSafety(safeTxGas2);
      }
      const safeTxGas = await estimateSafeTxGasWithRequiredTxGas(safe, safeTransaction);
      return addExtraGasForSafety(safeTxGas);
    }
    exports.estimateSafeTxGas = estimateSafeTxGas;
    function addExtraGasForSafety(safeTxGas) {
      const INCREASE_GAS_FACTOR = 1.05;
      return Math.round(Number(safeTxGas) * INCREASE_GAS_FACTOR).toString();
    }
    async function estimateSafeTxGasWithRequiredTxGas(safe, safeTransaction) {
      var _a;
      const isSafeDeployed = await safe.isSafeDeployed();
      const safeAddress = await safe.getAddress();
      const safeVersion = await safe.getContractVersion();
      const ethAdapter = safe.getEthAdapter();
      const isL1SafeMasterCopy = safe.getContractManager().isL1SafeMasterCopy;
      const chainId = await safe.getChainId();
      const customContracts = (_a = safe.getContractManager().contractNetworks) == null ? void 0 : _a[chainId];
      const safeSingletonContract = await (0, safeDeploymentContracts_1.getSafeContract)({
        ethAdapter,
        safeVersion,
        isL1SafeMasterCopy,
        customContracts
      });
      const transactionDataToEstimate = safeSingletonContract.encode("requiredTxGas", [
        safeTransaction.data.to,
        safeTransaction.data.value,
        safeTransaction.data.data,
        safeTransaction.data.operation
      ]);
      const to = isSafeDeployed ? safeAddress : safeSingletonContract.getAddress();
      const transactionToEstimateGas = {
        to,
        value: "0",
        data: transactionDataToEstimate,
        from: safeAddress
      };
      try {
        const encodedResponse = await ethAdapter.call(transactionToEstimateGas);
        const safeTxGas = "0x" + encodedResponse.slice(-32);
        return safeTxGas;
      } catch (error) {
        try {
          const revertData = JSON.parse(error.error.body).error.data;
          if (revertData && revertData.startsWith("Reverted ")) {
            const [, safeTxGas] = revertData.split("Reverted ");
            return Number(safeTxGas).toString();
          }
        } catch {
          return "0";
        }
      }
      return "0";
    }
    function decodeSafeTxGas(encodedSafeTxGas) {
      return Number("0x" + encodedSafeTxGas.slice(184).slice(0, 10)).toString();
    }
    function parseSafeTxGasErrorResponse(error) {
      var _a;
      if ((_a = error == null ? void 0 : error.error) == null ? void 0 : _a.body) {
        const revertData = JSON.parse(error.error.body).error.data;
        if (revertData && revertData.startsWith("Reverted ")) {
          const [, encodedResponse2] = revertData.split("Reverted ");
          const safeTxGas2 = decodeSafeTxGas(encodedResponse2);
          return safeTxGas2;
        }
      }
      const [, encodedResponse] = error.message.split("return data: ");
      const safeTxGas = decodeSafeTxGas(encodedResponse);
      return safeTxGas;
    }
    async function estimateSafeTxGasWithSimulate(safe, safeTransaction) {
      var _a;
      const isSafeDeployed = await safe.isSafeDeployed();
      const safeAddress = await safe.getAddress();
      const safeVersion = await safe.getContractVersion();
      const ethAdapter = safe.getEthAdapter();
      const chainId = await safe.getChainId();
      const customContracts = (_a = safe.getContractManager().contractNetworks) == null ? void 0 : _a[chainId];
      const isL1SafeMasterCopy = safe.getContractManager().isL1SafeMasterCopy;
      const safeSingletonContract = await (0, safeDeploymentContracts_1.getSafeContract)({
        ethAdapter,
        safeVersion,
        isL1SafeMasterCopy,
        customContracts
      });
      const simulateTxAccessorContract = await (0, safeDeploymentContracts_1.getSimulateTxAccessorContract)({
        ethAdapter,
        safeVersion,
        customContracts
      });
      const transactionDataToEstimate = simulateTxAccessorContract.encode("simulate", [
        safeTransaction.data.to,
        safeTransaction.data.value,
        safeTransaction.data.data,
        safeTransaction.data.operation
      ]);
      const to = isSafeDeployed ? safeAddress : safeSingletonContract.getAddress();
      const safeFunctionToEstimate = safeSingletonContract.encode("simulateAndRevert", [
        await simulateTxAccessorContract.getAddress(),
        transactionDataToEstimate
      ]);
      const transactionToEstimateGas = {
        to,
        value: "0",
        data: safeFunctionToEstimate,
        from: safeAddress
      };
      try {
        const encodedResponse = await ethAdapter.call(transactionToEstimateGas);
        const safeTxGas = decodeSafeTxGas(encodedResponse);
        return safeTxGas;
      } catch (error) {
        return parseSafeTxGasErrorResponse(error);
      }
      return "0";
    }
    async function estimateSafeDeploymentGas(safe) {
      const isSafeDeployed = await safe.isSafeDeployed();
      if (isSafeDeployed) {
        return "0";
      }
      const ethAdapter = safe.getEthAdapter();
      const safeDeploymentTransaction = await safe.createSafeDeploymentTransaction();
      const estimation = await ethAdapter.estimateGas({
        ...safeDeploymentTransaction,
        from: constants_1.ZERO_ADDRESS
        // if we use the Safe address the estimation always fails due to CREATE2
      });
      return estimation;
    }
    exports.estimateSafeDeploymentGas = estimateSafeDeploymentGas;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/transactions/SafeTransaction.js
var require_SafeTransaction = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/transactions/SafeTransaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EthSafeTransaction = class {
      constructor(data) {
        this.signatures = /* @__PURE__ */ new Map();
        this.data = data;
      }
      addSignature(signature) {
        this.signatures.set(signature.signer.toLowerCase(), signature);
      }
      encodedSignatures() {
        const signers = Array.from(this.signatures.keys()).sort();
        const baseOffset = signers.length * 65;
        let staticParts = "";
        let dynamicParts = "";
        signers.forEach((signerAddress) => {
          const signature = this.signatures.get(signerAddress);
          staticParts += signature == null ? void 0 : signature.staticPart().slice(2);
          dynamicParts += signature == null ? void 0 : signature.dynamicPart();
        });
        return "0x" + staticParts + dynamicParts;
      }
    };
    exports.default = EthSafeTransaction;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/transactions/types.js
var require_types5 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/transactions/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/transactions/utils.js
var require_utils12 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/transactions/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSafeMultisigTransactionResponse = exports.isMetaTransactionArray = exports.decodeMultiSendData = exports.encodeMultiSendData = exports.standardizeSafeTransactionData = exports.standardizeMetaTransactionData = void 0;
    var abi_1 = (init_lib5(), __toCommonJS(lib_exports5));
    var bytes_1 = (init_lib(), __toCommonJS(lib_exports));
    var solidity_1 = (init_lib8(), __toCommonJS(lib_exports8));
    var config_1 = require_config();
    var utils_1 = require_utils13();
    var constants_1 = require_constants();
    var safe_core_sdk_types_1 = require_src2();
    var satisfies_1 = __importDefault(require_satisfies());
    var web3_utils_1 = require_lib2();
    var gas_1 = require_gas();
    function standardizeMetaTransactionData(tx) {
      const standardizedTxs = {
        ...tx,
        operation: tx.operation ?? safe_core_sdk_types_1.OperationType.Call
      };
      return standardizedTxs;
    }
    exports.standardizeMetaTransactionData = standardizeMetaTransactionData;
    async function standardizeSafeTransactionData({ safeContract, predictedSafe, ethAdapter, tx, contractNetworks }) {
      var _a;
      const standardizedTxs = {
        to: tx.to,
        value: tx.value,
        data: tx.data,
        operation: tx.operation ?? safe_core_sdk_types_1.OperationType.Call,
        baseGas: tx.baseGas ?? "0",
        gasPrice: tx.gasPrice ?? "0",
        gasToken: tx.gasToken || constants_1.ZERO_ADDRESS,
        refundReceiver: tx.refundReceiver || constants_1.ZERO_ADDRESS,
        nonce: tx.nonce ?? (safeContract ? await safeContract.getNonce() : 0)
      };
      if (typeof tx.safeTxGas !== "undefined") {
        return {
          ...standardizedTxs,
          safeTxGas: tx.safeTxGas
        };
      }
      let safeVersion;
      if (predictedSafe) {
        safeVersion = ((_a = predictedSafe == null ? void 0 : predictedSafe.safeDeploymentConfig) == null ? void 0 : _a.safeVersion) || config_1.DEFAULT_SAFE_VERSION;
      } else {
        if (!safeContract) {
          throw new Error("Safe is not deployed");
        }
        safeVersion = await safeContract.getVersion();
      }
      const hasSafeTxGasOptional = (0, utils_1.hasSafeFeature)(utils_1.SAFE_FEATURES.SAFE_TX_GAS_OPTIONAL, safeVersion);
      if (hasSafeTxGasOptional && standardizedTxs.gasPrice === "0" || hasSafeTxGasOptional && predictedSafe) {
        return {
          ...standardizedTxs,
          safeTxGas: "0"
        };
      }
      if (!safeContract) {
        throw new Error("Safe is not deployed");
      }
      let safeTxGas;
      if ((0, satisfies_1.default)(safeVersion, ">=1.3.0")) {
        safeTxGas = await (0, gas_1.estimateGas)(safeVersion, safeContract, ethAdapter, standardizedTxs.to, standardizedTxs.value, standardizedTxs.data, standardizedTxs.operation, contractNetworks);
      } else {
        safeTxGas = await (0, gas_1.estimateTxGas)(safeContract, ethAdapter, standardizedTxs.to, standardizedTxs.value, standardizedTxs.data, standardizedTxs.operation);
      }
      return {
        ...standardizedTxs,
        safeTxGas
      };
    }
    exports.standardizeSafeTransactionData = standardizeSafeTransactionData;
    function encodeMetaTransaction(tx) {
      const data = (0, bytes_1.arrayify)(tx.data);
      const encoded = (0, solidity_1.pack)(["uint8", "address", "uint256", "uint256", "bytes"], [tx.operation, tx.to, tx.value, data.length, data]);
      return encoded.slice(2);
    }
    function encodeMultiSendData(txs) {
      return "0x" + txs.map((tx) => encodeMetaTransaction(tx)).join("");
    }
    exports.encodeMultiSendData = encodeMultiSendData;
    function decodeMultiSendData(encodedData) {
      const multiSendInterface = new abi_1.Interface([
        "function multiSend(bytes memory transactions) public payable"
      ]);
      const [decodedData] = multiSendInterface.decodeFunctionData("multiSend", encodedData);
      const txs = [];
      let index = 2;
      while (index < decodedData.length) {
        const operation = `0x${decodedData.slice(index, index += 2)}`;
        const to = `0x${decodedData.slice(index, index += 40)}`;
        const value = `0x${decodedData.slice(index, index += 64)}`;
        const dataLength = parseInt(decodedData.slice(index, index += 64), 16) * 2;
        const data = `0x${decodedData.slice(index, index += dataLength)}`;
        txs.push({
          operation: (0, web3_utils_1.hexToNumber)(operation),
          to: (0, web3_utils_1.toChecksumAddress)(to),
          value: (0, web3_utils_1.hexToNumberString)(value),
          data
        });
      }
      return txs;
    }
    exports.decodeMultiSendData = decodeMultiSendData;
    function isMetaTransactionArray(safeTransactions) {
      return (safeTransactions == null ? void 0 : safeTransactions.length) !== void 0;
    }
    exports.isMetaTransactionArray = isMetaTransactionArray;
    function isSafeMultisigTransactionResponse(safeTransaction) {
      return safeTransaction.isExecuted !== void 0;
    }
    exports.isSafeMultisigTransactionResponse = isSafeMultisigTransactionResponse;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/transactions/index.js
var require_transactions = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/transactions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_gas(), exports);
    __exportStar(require_SafeTransaction(), exports);
    __exportStar(require_types5(), exports);
    __exportStar(require_utils12(), exports);
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/index.js
var require_utils13 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_address(), exports);
    __exportStar(require_eip_3770(), exports);
    __exportStar(require_eip_712(), exports);
    __exportStar(require_safeVersions(), exports);
    __exportStar(require_signatures(), exports);
    __exportStar(require_transactions(), exports);
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/managers/fallbackHandlerManager.js
var require_fallbackHandlerManager = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/managers/fallbackHandlerManager.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _FallbackHandlerManager_ethAdapter;
    var _FallbackHandlerManager_safeContract;
    var _FallbackHandlerManager_slot;
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils13();
    var constants_1 = require_constants();
    var FallbackHandlerManager = class {
      constructor(ethAdapter, safeContract) {
        _FallbackHandlerManager_ethAdapter.set(this, void 0);
        _FallbackHandlerManager_safeContract.set(this, void 0);
        _FallbackHandlerManager_slot.set(this, "0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5");
        __classPrivateFieldSet(this, _FallbackHandlerManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _FallbackHandlerManager_safeContract, safeContract, "f");
      }
      validateFallbackHandlerAddress(fallbackHandlerAddress) {
        const isValidAddress = __classPrivateFieldGet(this, _FallbackHandlerManager_ethAdapter, "f").isAddress(fallbackHandlerAddress);
        if (!isValidAddress || (0, utils_1.isZeroAddress)(fallbackHandlerAddress)) {
          throw new Error("Invalid fallback handler address provided");
        }
      }
      validateFallbackHandlerIsNotEnabled(currentFallbackHandler, newFallbackHandlerAddress) {
        if ((0, utils_1.sameString)(currentFallbackHandler, newFallbackHandlerAddress)) {
          throw new Error("Fallback handler provided is already enabled");
        }
      }
      validateFallbackHandlerIsEnabled(fallbackHandlerAddress) {
        if ((0, utils_1.isZeroAddress)(fallbackHandlerAddress)) {
          throw new Error("There is no fallback handler enabled yet");
        }
      }
      async getFallbackHandler() {
        if (!__classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        const safeVersion = await __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").getVersion();
        if ((0, utils_1.hasSafeFeature)(utils_1.SAFE_FEATURES.SAFE_FALLBACK_HANDLER, safeVersion)) {
          return __classPrivateFieldGet(this, _FallbackHandlerManager_ethAdapter, "f").getStorageAt(__classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").getAddress(), __classPrivateFieldGet(this, _FallbackHandlerManager_slot, "f"));
        } else {
          throw new Error("Current version of the Safe does not support the fallback handler functionality");
        }
      }
      async encodeEnableFallbackHandlerData(fallbackHandlerAddress) {
        if (!__classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        this.validateFallbackHandlerAddress(fallbackHandlerAddress);
        const currentFallbackHandler = await this.getFallbackHandler();
        this.validateFallbackHandlerIsNotEnabled(currentFallbackHandler, fallbackHandlerAddress);
        return __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").encode("setFallbackHandler", [fallbackHandlerAddress]);
      }
      async encodeDisableFallbackHandlerData() {
        if (!__classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        const currentFallbackHandler = await this.getFallbackHandler();
        this.validateFallbackHandlerIsEnabled(currentFallbackHandler);
        return __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").encode("setFallbackHandler", [constants_1.ZERO_ADDRESS]);
      }
    };
    _FallbackHandlerManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _FallbackHandlerManager_safeContract = /* @__PURE__ */ new WeakMap(), _FallbackHandlerManager_slot = /* @__PURE__ */ new WeakMap();
    exports.default = FallbackHandlerManager;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/managers/guardManager.js
var require_guardManager = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/managers/guardManager.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _GuardManager_ethAdapter;
    var _GuardManager_safeContract;
    var _GuardManager_slot;
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils13();
    var constants_1 = require_constants();
    var GuardManager = class {
      constructor(ethAdapter, safeContract) {
        _GuardManager_ethAdapter.set(this, void 0);
        _GuardManager_safeContract.set(this, void 0);
        _GuardManager_slot.set(this, "0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8");
        __classPrivateFieldSet(this, _GuardManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _GuardManager_safeContract, safeContract, "f");
      }
      validateGuardAddress(guardAddress) {
        const isValidAddress = __classPrivateFieldGet(this, _GuardManager_ethAdapter, "f").isAddress(guardAddress);
        if (!isValidAddress || (0, utils_1.isZeroAddress)(guardAddress)) {
          throw new Error("Invalid guard address provided");
        }
      }
      validateGuardIsNotEnabled(currentGuard, newGuardAddress) {
        if ((0, utils_1.sameString)(currentGuard, newGuardAddress)) {
          throw new Error("Guard provided is already enabled");
        }
      }
      validateGuardIsEnabled(guardAddress) {
        if ((0, utils_1.isZeroAddress)(guardAddress)) {
          throw new Error("There is no guard enabled yet");
        }
      }
      async getGuard() {
        if (!__classPrivateFieldGet(this, _GuardManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        const safeVersion = await __classPrivateFieldGet(this, _GuardManager_safeContract, "f").getVersion();
        if ((0, utils_1.hasSafeFeature)(utils_1.SAFE_FEATURES.SAFE_TX_GUARDS, safeVersion)) {
          return __classPrivateFieldGet(this, _GuardManager_ethAdapter, "f").getStorageAt(__classPrivateFieldGet(this, _GuardManager_safeContract, "f").getAddress(), __classPrivateFieldGet(this, _GuardManager_slot, "f"));
        } else {
          throw new Error("Current version of the Safe does not support Safe transaction guards functionality");
        }
      }
      async encodeEnableGuardData(guardAddress) {
        if (!__classPrivateFieldGet(this, _GuardManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        this.validateGuardAddress(guardAddress);
        const currentGuard = await this.getGuard();
        this.validateGuardIsNotEnabled(currentGuard, guardAddress);
        return __classPrivateFieldGet(this, _GuardManager_safeContract, "f").encode("setGuard", [guardAddress]);
      }
      async encodeDisableGuardData() {
        if (!__classPrivateFieldGet(this, _GuardManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        const currentGuard = await this.getGuard();
        this.validateGuardIsEnabled(currentGuard);
        return __classPrivateFieldGet(this, _GuardManager_safeContract, "f").encode("setGuard", [constants_1.ZERO_ADDRESS]);
      }
    };
    _GuardManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _GuardManager_safeContract = /* @__PURE__ */ new WeakMap(), _GuardManager_slot = /* @__PURE__ */ new WeakMap();
    exports.default = GuardManager;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/managers/moduleManager.js
var require_moduleManager = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/managers/moduleManager.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _ModuleManager_ethAdapter;
    var _ModuleManager_safeContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var address_1 = require_address();
    var constants_1 = require_constants();
    var ModuleManager = class {
      constructor(ethAdapter, safeContract) {
        _ModuleManager_ethAdapter.set(this, void 0);
        _ModuleManager_safeContract.set(this, void 0);
        __classPrivateFieldSet(this, _ModuleManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _ModuleManager_safeContract, safeContract, "f");
      }
      validateModuleAddress(moduleAddress) {
        const isValidAddress = __classPrivateFieldGet(this, _ModuleManager_ethAdapter, "f").isAddress(moduleAddress);
        if (!isValidAddress || (0, address_1.isRestrictedAddress)(moduleAddress)) {
          throw new Error("Invalid module address provided");
        }
      }
      validateModuleIsNotEnabled(moduleAddress, modules) {
        const moduleIndex = modules.findIndex((module2) => (0, address_1.sameString)(module2, moduleAddress));
        const isEnabled = moduleIndex >= 0;
        if (isEnabled) {
          throw new Error("Module provided is already enabled");
        }
      }
      validateModuleIsEnabled(moduleAddress, modules) {
        const moduleIndex = modules.findIndex((module2) => (0, address_1.sameString)(module2, moduleAddress));
        const isEnabled = moduleIndex >= 0;
        if (!isEnabled) {
          throw new Error("Module provided is not enabled yet");
        }
        return moduleIndex;
      }
      async getModules() {
        if (!__classPrivateFieldGet(this, _ModuleManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").getModules();
      }
      async isModuleEnabled(moduleAddress) {
        if (!__classPrivateFieldGet(this, _ModuleManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").isModuleEnabled(moduleAddress);
      }
      async encodeEnableModuleData(moduleAddress) {
        if (!__classPrivateFieldGet(this, _ModuleManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        this.validateModuleAddress(moduleAddress);
        const modules = await this.getModules();
        this.validateModuleIsNotEnabled(moduleAddress, modules);
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").encode("enableModule", [moduleAddress]);
      }
      async encodeDisableModuleData(moduleAddress) {
        if (!__classPrivateFieldGet(this, _ModuleManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        this.validateModuleAddress(moduleAddress);
        const modules = await this.getModules();
        const moduleIndex = this.validateModuleIsEnabled(moduleAddress, modules);
        const prevModuleAddress = moduleIndex === 0 ? constants_1.SENTINEL_ADDRESS : modules[moduleIndex - 1];
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").encode("disableModule", [prevModuleAddress, moduleAddress]);
      }
    };
    _ModuleManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _ModuleManager_safeContract = /* @__PURE__ */ new WeakMap();
    exports.default = ModuleManager;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/managers/ownerManager.js
var require_ownerManager = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/managers/ownerManager.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _OwnerManager_ethAdapter;
    var _OwnerManager_safeContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var address_1 = require_address();
    var constants_1 = require_constants();
    var OwnerManager = class {
      constructor(ethAdapter, safeContract) {
        _OwnerManager_ethAdapter.set(this, void 0);
        _OwnerManager_safeContract.set(this, void 0);
        __classPrivateFieldSet(this, _OwnerManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _OwnerManager_safeContract, safeContract, "f");
      }
      validateOwnerAddress(ownerAddress, errorMessage) {
        const isValidAddress = __classPrivateFieldGet(this, _OwnerManager_ethAdapter, "f").isAddress(ownerAddress);
        if (!isValidAddress || (0, address_1.isRestrictedAddress)(ownerAddress)) {
          throw new Error(errorMessage || "Invalid owner address provided");
        }
      }
      validateThreshold(threshold, numOwners) {
        if (threshold <= 0) {
          throw new Error("Threshold needs to be greater than 0");
        }
        if (threshold > numOwners) {
          throw new Error("Threshold cannot exceed owner count");
        }
      }
      validateAddressIsNotOwner(ownerAddress, owners, errorMessage) {
        const ownerIndex = owners.findIndex((owner) => (0, address_1.sameString)(owner, ownerAddress));
        const isOwner = ownerIndex >= 0;
        if (isOwner) {
          throw new Error(errorMessage || "Address provided is already an owner");
        }
      }
      validateAddressIsOwner(ownerAddress, owners, errorMessage) {
        const ownerIndex = owners.findIndex((owner) => (0, address_1.sameString)(owner, ownerAddress));
        const isOwner = ownerIndex >= 0;
        if (!isOwner) {
          throw new Error(errorMessage || "Address provided is not an owner");
        }
        return ownerIndex;
      }
      async getOwners() {
        if (!__classPrivateFieldGet(this, _OwnerManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        const owners = await __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").getOwners();
        return [...owners];
      }
      async getThreshold() {
        if (!__classPrivateFieldGet(this, _OwnerManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").getThreshold();
      }
      async isOwner(ownerAddress) {
        if (!__classPrivateFieldGet(this, _OwnerManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").isOwner(ownerAddress);
      }
      async encodeAddOwnerWithThresholdData(ownerAddress, threshold) {
        if (!__classPrivateFieldGet(this, _OwnerManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        this.validateOwnerAddress(ownerAddress);
        const owners = await this.getOwners();
        this.validateAddressIsNotOwner(ownerAddress, owners);
        const newThreshold = threshold ?? await this.getThreshold();
        this.validateThreshold(newThreshold, owners.length + 1);
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("addOwnerWithThreshold", [ownerAddress, newThreshold]);
      }
      async encodeRemoveOwnerData(ownerAddress, threshold) {
        if (!__classPrivateFieldGet(this, _OwnerManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        this.validateOwnerAddress(ownerAddress);
        const owners = await this.getOwners();
        const ownerIndex = this.validateAddressIsOwner(ownerAddress, owners);
        const newThreshold = threshold ?? await this.getThreshold() - 1;
        this.validateThreshold(newThreshold, owners.length - 1);
        const prevOwnerAddress = ownerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[ownerIndex - 1];
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("removeOwner", [prevOwnerAddress, ownerAddress, newThreshold]);
      }
      async encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress) {
        if (!__classPrivateFieldGet(this, _OwnerManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        this.validateOwnerAddress(newOwnerAddress, "Invalid new owner address provided");
        this.validateOwnerAddress(oldOwnerAddress, "Invalid old owner address provided");
        const owners = await this.getOwners();
        this.validateAddressIsNotOwner(newOwnerAddress, owners, "New address provided is already an owner");
        const oldOwnerIndex = this.validateAddressIsOwner(oldOwnerAddress, owners, "Old address provided is not an owner");
        const prevOwnerAddress = oldOwnerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[oldOwnerIndex - 1];
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("swapOwner", [
          prevOwnerAddress,
          oldOwnerAddress,
          newOwnerAddress
        ]);
      }
      async encodeChangeThresholdData(threshold) {
        if (!__classPrivateFieldGet(this, _OwnerManager_safeContract, "f")) {
          throw new Error("Safe is not deployed");
        }
        const owners = await this.getOwners();
        this.validateThreshold(threshold, owners.length);
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("changeThreshold", [threshold]);
      }
    };
    _OwnerManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _OwnerManager_safeContract = /* @__PURE__ */ new WeakMap();
    exports.default = OwnerManager;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/Safe.js
var require_Safe = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/Safe.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _Safe_predictedSafe;
    var _Safe_ethAdapter;
    var _Safe_contractManager;
    var _Safe_ownerManager;
    var _Safe_moduleManager;
    var _Safe_guardManager;
    var _Safe_fallbackHandlerManager;
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_types_1 = require_src2();
    var utils_1 = require_utils7();
    var config_1 = require_config();
    var contractManager_1 = __importDefault(require_contractManager());
    var fallbackHandlerManager_1 = __importDefault(require_fallbackHandlerManager());
    var guardManager_1 = __importDefault(require_guardManager());
    var moduleManager_1 = __importDefault(require_moduleManager());
    var ownerManager_1 = __importDefault(require_ownerManager());
    var utils_2 = require_utils13();
    var utils_3 = require_utils11();
    var SafeTransaction_1 = __importDefault(require_SafeTransaction());
    var utils_4 = require_utils12();
    var types_1 = require_types4();
    var safeDeploymentContracts_1 = require_safeDeploymentContracts();
    var Safe = class _Safe {
      constructor() {
        _Safe_predictedSafe.set(this, void 0);
        _Safe_ethAdapter.set(this, void 0);
        _Safe_contractManager.set(this, void 0);
        _Safe_ownerManager.set(this, void 0);
        _Safe_moduleManager.set(this, void 0);
        _Safe_guardManager.set(this, void 0);
        _Safe_fallbackHandlerManager.set(this, void 0);
      }
      /**
       * Creates an instance of the Safe Core SDK.
       * @param config - Ethers Safe configuration
       * @returns The Safe Core SDK instance
       * @throws "The SDK must be initialized with a safeAddress or a predictedSafe"
       * @throws "SafeProxy contract is not deployed on the current network"
       * @throws "MultiSend contract is not deployed on the current network"
       * @throws "MultiSendCallOnly contract is not deployed on the current network"
       */
      static async create(config) {
        const safeSdk = new _Safe();
        await safeSdk.init(config);
        return safeSdk;
      }
      /**
       * Initializes the Safe Core SDK instance.
       * @param config - Safe configuration
       * @throws "Signer must be connected to a provider"
       * @throws "SafeProxy contract is not deployed on the current network"
       * @throws "MultiSend contract is not deployed on the current network"
       * @throws "MultiSendCallOnly contract is not deployed on the current network"
       */
      async init(config) {
        const { ethAdapter, isL1SafeMasterCopy, contractNetworks } = config;
        __classPrivateFieldSet(this, _Safe_ethAdapter, ethAdapter, "f");
        if ((0, types_1.isSafeConfigWithPredictedSafe)(config)) {
          __classPrivateFieldSet(this, _Safe_predictedSafe, config.predictedSafe, "f");
          __classPrivateFieldSet(this, _Safe_contractManager, await contractManager_1.default.create({
            ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
            predictedSafe: __classPrivateFieldGet(this, _Safe_predictedSafe, "f"),
            isL1SafeMasterCopy,
            contractNetworks
          }), "f");
        } else {
          __classPrivateFieldSet(this, _Safe_contractManager, await contractManager_1.default.create({
            ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
            safeAddress: config.safeAddress,
            isL1SafeMasterCopy,
            contractNetworks
          }), "f");
        }
        __classPrivateFieldSet(this, _Safe_ownerManager, new ownerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
        __classPrivateFieldSet(this, _Safe_moduleManager, new moduleManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
        __classPrivateFieldSet(this, _Safe_guardManager, new guardManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
        __classPrivateFieldSet(this, _Safe_fallbackHandlerManager, new fallbackHandlerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
      }
      /**
       * Returns a new instance of the Safe Core SDK.
       * @param config - Connect Safe configuration
       * @throws "A safeAddress and a predictedSafe cannot be connected at the same time"
       * @throws "SafeProxy contract is not deployed on the current network"
       * @throws "MultiSend contract is not deployed on the current network"
       * @throws "MultiSendCallOnly contract is not deployed on the current network"
       */
      async connect(config) {
        const { ethAdapter, safeAddress, predictedSafe, isL1SafeMasterCopy, contractNetworks } = config;
        const configProps = {
          ethAdapter: ethAdapter || __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
          isL1SafeMasterCopy: isL1SafeMasterCopy || __classPrivateFieldGet(this, _Safe_contractManager, "f").isL1SafeMasterCopy,
          contractNetworks: contractNetworks || __classPrivateFieldGet(this, _Safe_contractManager, "f").contractNetworks
        };
        if (safeAddress) {
          return await _Safe.create({
            safeAddress,
            ...configProps
          });
        }
        if (predictedSafe) {
          return await _Safe.create({
            predictedSafe,
            ...configProps
          });
        }
        if (__classPrivateFieldGet(this, _Safe_predictedSafe, "f")) {
          return await _Safe.create({
            predictedSafe: __classPrivateFieldGet(this, _Safe_predictedSafe, "f"),
            ...configProps
          });
        }
        return await _Safe.create({
          safeAddress: await this.getAddress(),
          ...configProps
        });
      }
      /**
       * Returns the address of the current SafeProxy contract.
       *
       * @returns The address of the SafeProxy contract
       */
      async getAddress() {
        var _a;
        if (__classPrivateFieldGet(this, _Safe_predictedSafe, "f")) {
          const safeVersion = await this.getContractVersion();
          if (!(0, utils_2.hasSafeFeature)(utils_2.SAFE_FEATURES.ACCOUNT_ABSTRACTION, safeVersion)) {
            throw new Error("Account Abstraction functionality is not available for Safes with version lower than v1.3.0");
          }
          const chainId = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getChainId();
          return (0, utils_1.predictSafeAddress)({
            ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
            customContracts: (_a = __classPrivateFieldGet(this, _Safe_contractManager, "f").contractNetworks) == null ? void 0 : _a[chainId],
            ...__classPrivateFieldGet(this, _Safe_predictedSafe, "f")
          });
        }
        if (!__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract) {
          throw new Error("Safe is not deployed");
        }
        return Promise.resolve(__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getAddress());
      }
      /**
       * Returns the ContractManager
       *
       * @returns The current ContractManager
       * */
      getContractManager() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f");
      }
      /**
       * Returns the current EthAdapter.
       *
       * @returns The current EthAdapter
       */
      getEthAdapter() {
        return __classPrivateFieldGet(this, _Safe_ethAdapter, "f");
      }
      /**
       * Returns the address of the MultiSend contract.
       *
       * @returns The address of the MultiSend contract
       */
      getMultiSendAddress() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendContract.getAddress();
      }
      /**
       * Returns the address of the MultiSendCallOnly contract.
       *
       * @returns The address of the MultiSendCallOnly contract
       */
      getMultiSendCallOnlyAddress() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendCallOnlyContract.getAddress();
      }
      /**
       * Checks if the current Safe is deployed.
       *
       * @returns TRUE if the Safe contract is deployed
       */
      async isSafeDeployed() {
        const safeAddress = await this.getAddress();
        const isSafeDeployed = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").isContractDeployed(safeAddress);
        return isSafeDeployed;
      }
      /**
       * Returns the Safe Master Copy contract version.
       *
       * @returns The Safe Master Copy contract version
       */
      async getContractVersion() {
        var _a, _b;
        if (__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract) {
          return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getVersion();
        }
        if ((_b = (_a = __classPrivateFieldGet(this, _Safe_predictedSafe, "f")) == null ? void 0 : _a.safeDeploymentConfig) == null ? void 0 : _b.safeVersion) {
          return Promise.resolve(__classPrivateFieldGet(this, _Safe_predictedSafe, "f").safeDeploymentConfig.safeVersion);
        }
        return Promise.resolve(config_1.DEFAULT_SAFE_VERSION);
      }
      /**
       * Returns the list of Safe owner accounts.
       *
       * @returns The list of owners
       */
      async getOwners() {
        var _a;
        if ((_a = __classPrivateFieldGet(this, _Safe_predictedSafe, "f")) == null ? void 0 : _a.safeAccountConfig.owners) {
          return Promise.resolve(__classPrivateFieldGet(this, _Safe_predictedSafe, "f").safeAccountConfig.owners);
        }
        return __classPrivateFieldGet(this, _Safe_ownerManager, "f").getOwners();
      }
      /**
       * Returns the Safe nonce.
       *
       * @returns The Safe nonce
       */
      async getNonce() {
        if (!__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract) {
          return Promise.resolve(0);
        }
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getNonce();
      }
      /**
       * Returns the Safe threshold.
       *
       * @returns The Safe threshold
       */
      async getThreshold() {
        var _a;
        if ((_a = __classPrivateFieldGet(this, _Safe_predictedSafe, "f")) == null ? void 0 : _a.safeAccountConfig.threshold) {
          return Promise.resolve(__classPrivateFieldGet(this, _Safe_predictedSafe, "f").safeAccountConfig.threshold);
        }
        return __classPrivateFieldGet(this, _Safe_ownerManager, "f").getThreshold();
      }
      /**
       * Returns the chainId of the connected network.
       *
       * @returns The chainId of the connected network
       */
      async getChainId() {
        return __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getChainId();
      }
      /**
       * Returns the ETH balance of the Safe.
       *
       * @returns The ETH balance of the Safe
       */
      async getBalance() {
        return __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getBalance(await this.getAddress());
      }
      /**
       * Returns the address of the FallbackHandler contract.
       *
       * @returns The address of the FallbackHandler contract
       */
      getFallbackHandler() {
        return __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, "f").getFallbackHandler();
      }
      /**
       * Returns the enabled Safe guard or 0x address if no guards are enabled.
       *
       * @returns The address of the enabled Safe guard
       * @throws "Current version of the Safe does not support Safe transaction guards functionality"
       */
      async getGuard() {
        return __classPrivateFieldGet(this, _Safe_guardManager, "f").getGuard();
      }
      /**
       * Returns the list of addresses of all the enabled Safe modules.
       *
       * @returns The list of addresses of all the enabled Safe modules
       */
      async getModules() {
        return __classPrivateFieldGet(this, _Safe_moduleManager, "f").getModules();
      }
      /**
       * Checks if a specific Safe module is enabled for the current Safe.
       *
       * @param moduleAddress - The desired module address
       * @returns TRUE if the module is enabled
       */
      async isModuleEnabled(moduleAddress) {
        return __classPrivateFieldGet(this, _Safe_moduleManager, "f").isModuleEnabled(moduleAddress);
      }
      /**
       * Checks if a specific address is an owner of the current Safe.
       *
       * @param ownerAddress - The account address
       * @returns TRUE if the account is an owner
       */
      async isOwner(ownerAddress) {
        var _a, _b;
        if ((_a = __classPrivateFieldGet(this, _Safe_predictedSafe, "f")) == null ? void 0 : _a.safeAccountConfig.owners) {
          return Promise.resolve((_b = __classPrivateFieldGet(this, _Safe_predictedSafe, "f")) == null ? void 0 : _b.safeAccountConfig.owners.some((owner) => (0, utils_2.sameString)(owner, ownerAddress)));
        }
        return __classPrivateFieldGet(this, _Safe_ownerManager, "f").isOwner(ownerAddress);
      }
      /**
       * Returns a Safe transaction ready to be signed by the owners.
       *
       * @param createTransactionProps - The createTransaction props
       * @returns The Safe transaction
       * @throws "Invalid empty array of transactions"
       */
      async createTransaction({ safeTransactionData, onlyCalls = false, options }) {
        const safeVersion = await this.getContractVersion();
        if (__classPrivateFieldGet(this, _Safe_predictedSafe, "f") && !(0, utils_2.hasSafeFeature)(utils_2.SAFE_FEATURES.ACCOUNT_ABSTRACTION, safeVersion)) {
          throw new Error("Account Abstraction functionality is not available for Safes with version lower than v1.3.0");
        }
        if ((0, utils_2.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length === 0) {
          throw new Error("Invalid empty array of transactions");
        }
        let newTransaction;
        if ((0, utils_2.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length > 1) {
          const multiSendContract = onlyCalls ? __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendCallOnlyContract : __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendContract;
          const multiSendData = (0, utils_4.encodeMultiSendData)(safeTransactionData.map(utils_4.standardizeMetaTransactionData));
          const multiSendTransaction = {
            ...options,
            to: multiSendContract.getAddress(),
            value: "0",
            data: multiSendContract.encode("multiSend", [multiSendData]),
            operation: safe_core_sdk_types_1.OperationType.DelegateCall
          };
          newTransaction = multiSendTransaction;
        } else {
          newTransaction = (0, utils_2.isMetaTransactionArray)(safeTransactionData) ? { ...options, ...safeTransactionData[0] } : safeTransactionData;
        }
        if (__classPrivateFieldGet(this, _Safe_predictedSafe, "f")) {
          return new SafeTransaction_1.default(await (0, utils_4.standardizeSafeTransactionData)({
            predictedSafe: __classPrivateFieldGet(this, _Safe_predictedSafe, "f"),
            ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
            tx: newTransaction,
            contractNetworks: __classPrivateFieldGet(this, _Safe_contractManager, "f").contractNetworks
          }));
        }
        if (!__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract) {
          throw new Error("Safe is not deployed");
        }
        return new SafeTransaction_1.default(await (0, utils_4.standardizeSafeTransactionData)({
          safeContract: __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract,
          ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
          tx: newTransaction,
          contractNetworks: __classPrivateFieldGet(this, _Safe_contractManager, "f").contractNetworks
        }));
      }
      /**
       * Returns a Safe transaction ready to be signed by the owners that invalidates the pending Safe transaction/s with a specific nonce.
       *
       * @param nonce - The nonce of the transaction/s that are going to be rejected
       * @returns The Safe transaction that invalidates the pending Safe transaction/s
       */
      async createRejectionTransaction(nonce) {
        const safeTransactionData = {
          to: await this.getAddress(),
          nonce,
          value: "0",
          data: "0x",
          safeTxGas: "0"
        };
        return this.createTransaction({ safeTransactionData });
      }
      /**
       * Copies a Safe transaction
       *
       * @param safeTransaction - The Safe transaction
       * @returns The new Safe transaction
       */
      async copyTransaction(safeTransaction) {
        const signedSafeTransaction = await this.createTransaction({
          safeTransactionData: safeTransaction.data
        });
        safeTransaction.signatures.forEach((signature) => {
          signedSafeTransaction.addSignature(signature);
        });
        return signedSafeTransaction;
      }
      /**
       * Returns the transaction hash of a Safe transaction.
       *
       * @param safeTransaction - The Safe transaction
       * @returns The transaction hash of the Safe transaction
       */
      async getTransactionHash(safeTransaction) {
        if (!__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract) {
          throw new Error("Safe is not deployed");
        }
        const safeTransactionData = safeTransaction.data;
        const txHash = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getTransactionHash(safeTransactionData);
        return txHash;
      }
      /**
       * Signs a hash using the current signer account.
       *
       * @param hash - The hash to sign
       * @returns The Safe signature
       */
      async signTransactionHash(hash) {
        return (0, utils_3.generateSignature)(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), hash);
      }
      /**
       * Signs a transaction according to the EIP-712 using the current signer account.
       *
       * @param safeTransaction - The Safe transaction to be signed
       * @param methodVersion - EIP-712 version. Optional
       * @returns The Safe signature
       */
      async signTypedData(safeTransaction, methodVersion) {
        const safeTransactionEIP712Args = {
          safeAddress: await this.getAddress(),
          safeVersion: await this.getContractVersion(),
          chainId: await this.getEthAdapter().getChainId(),
          safeTransactionData: safeTransaction.data
        };
        return (0, utils_3.generateEIP712Signature)(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), safeTransactionEIP712Args, methodVersion);
      }
      /**
       * Adds the signature of the current signer to the Safe transaction object.
       *
       * @param safeTransaction - The Safe transaction to be signed
       * @param signingMethod - Method followed to sign a transaction. Optional. Default value is "eth_sign"
       * @returns The signed Safe transaction
       * @throws "Transactions can only be signed by Safe owners"
       */
      async signTransaction(safeTransaction, signingMethod = "eth_signTypedData_v4") {
        const transaction = (0, utils_2.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const addressIsOwner = owners.some((owner) => signerAddress && (0, utils_2.sameString)(owner, signerAddress));
        if (!addressIsOwner) {
          throw new Error("Transactions can only be signed by Safe owners");
        }
        let signature;
        if (signingMethod === "eth_signTypedData_v4") {
          signature = await this.signTypedData(transaction, "v4");
        } else if (signingMethod === "eth_signTypedData_v3") {
          signature = await this.signTypedData(transaction, "v3");
        } else if (signingMethod === "eth_signTypedData") {
          signature = await this.signTypedData(transaction);
        } else {
          const safeVersion = await this.getContractVersion();
          if (!(0, utils_2.hasSafeFeature)(utils_2.SAFE_FEATURES.ETH_SIGN, safeVersion)) {
            throw new Error("eth_sign is only supported by Safes >= v1.1.0");
          }
          const txHash = await this.getTransactionHash(transaction);
          signature = await this.signTransactionHash(txHash);
        }
        const signedSafeTransaction = await this.createTransaction({
          safeTransactionData: transaction.data
        });
        transaction.signatures.forEach((signature2) => {
          signedSafeTransaction.addSignature(signature2);
        });
        signedSafeTransaction.addSignature(signature);
        return signedSafeTransaction;
      }
      /**
       * Approves on-chain a hash using the current signer account.
       *
       * @param hash - The hash to approve
       * @param options - The Safe transaction execution options. Optional
       * @returns The Safe transaction response
       * @throws "Transaction hashes can only be approved by Safe owners"
       * @throws "Cannot specify gas and gasLimit together in transaction options"
       */
      async approveTransactionHash(hash, options) {
        if (!__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract) {
          throw new Error("Safe is not deployed");
        }
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const addressIsOwner = owners.some((owner) => signerAddress && (0, utils_2.sameString)(owner, signerAddress));
        if (!addressIsOwner) {
          throw new Error("Transaction hashes can only be approved by Safe owners");
        }
        if ((options == null ? void 0 : options.gas) && (options == null ? void 0 : options.gasLimit)) {
          throw new Error("Cannot specify gas and gasLimit together in transaction options");
        }
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.approveHash(hash, {
          from: signerAddress,
          ...options
        });
      }
      /**
       * Returns a list of owners who have approved a specific Safe transaction.
       *
       * @param txHash - The Safe transaction hash
       * @returns The list of owners
       */
      async getOwnersWhoApprovedTx(txHash) {
        if (!__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract) {
          throw new Error("Safe is not deployed");
        }
        const owners = await this.getOwners();
        const ownersWhoApproved = [];
        for (const owner of owners) {
          const approved = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.approvedHashes(owner, txHash);
          if (approved.gt(0)) {
            ownersWhoApproved.push(owner);
          }
        }
        return ownersWhoApproved;
      }
      /**
       * Returns the Safe transaction to enable the fallback handler.
       *
       * @param address - The new fallback handler address
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid fallback handler address provided"
       * @throws "Fallback handler provided is already enabled"
       * @throws "Current version of the Safe does not support the fallback handler functionality"
       */
      async createEnableFallbackHandlerTx(fallbackHandlerAddress, options) {
        const safeTransactionData = {
          to: await this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, "f").encodeEnableFallbackHandlerData(fallbackHandlerAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to disable the fallback handler.
       *
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "There is no fallback handler enabled yet"
       * @throws "Current version of the Safe does not support the fallback handler functionality"
       */
      async createDisableFallbackHandlerTx(options) {
        const safeTransactionData = {
          to: await this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, "f").encodeDisableFallbackHandlerData(),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to enable a Safe guard.
       *
       * @param guardAddress - The desired guard address
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid guard address provided"
       * @throws "Guard provided is already enabled"
       * @throws "Current version of the Safe does not support Safe transaction guards functionality"
       */
      async createEnableGuardTx(guardAddress, options) {
        const safeTransactionData = {
          to: await this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_guardManager, "f").encodeEnableGuardData(guardAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to disable a Safe guard.
       *
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "There is no guard enabled yet"
       * @throws "Current version of the Safe does not support Safe transaction guards functionality"
       */
      async createDisableGuardTx(options) {
        const safeTransactionData = {
          to: await this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_guardManager, "f").encodeDisableGuardData(),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to enable a Safe module.
       *
       * @param moduleAddress - The desired module address
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid module address provided"
       * @throws "Module provided is already enabled"
       */
      async createEnableModuleTx(moduleAddress, options) {
        const safeTransactionData = {
          to: await this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_moduleManager, "f").encodeEnableModuleData(moduleAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to disable a Safe module.
       *
       * @param moduleAddress - The desired module address
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid module address provided"
       * @throws "Module provided is not enabled already"
       */
      async createDisableModuleTx(moduleAddress, options) {
        const safeTransactionData = {
          to: await this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_moduleManager, "f").encodeDisableModuleData(moduleAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to add an owner and optionally change the threshold.
       *
       * @param params - The transaction params
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid owner address provided"
       * @throws "Address provided is already an owner"
       * @throws "Threshold needs to be greater than 0"
       * @throws "Threshold cannot exceed owner count"
       */
      async createAddOwnerTx({ ownerAddress, threshold }, options) {
        const safeTransactionData = {
          to: await this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeAddOwnerWithThresholdData(ownerAddress, threshold),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to remove an owner and optionally change the threshold.
       *
       * @param params - The transaction params
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid owner address provided"
       * @throws "Address provided is not an owner"
       * @throws "Threshold needs to be greater than 0"
       * @throws "Threshold cannot exceed owner count"
       */
      async createRemoveOwnerTx({ ownerAddress, threshold }, options) {
        const safeTransactionData = {
          to: await this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeRemoveOwnerData(ownerAddress, threshold),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to replace an owner of the Safe with a new one.
       *
       * @param params - The transaction params
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Invalid new owner address provided"
       * @throws "Invalid old owner address provided"
       * @throws "New address provided is already an owner"
       * @throws "Old address provided is not an owner"
       */
      async createSwapOwnerTx({ oldOwnerAddress, newOwnerAddress }, options) {
        const safeTransactionData = {
          to: await this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Returns the Safe transaction to change the threshold.
       *
       * @param threshold - The new threshold
       * @param options - The transaction optional properties
       * @returns The Safe transaction ready to be signed
       * @throws "Threshold needs to be greater than 0"
       * @throws "Threshold cannot exceed owner count"
       */
      async createChangeThresholdTx(threshold, options) {
        const safeTransactionData = {
          to: await this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeChangeThresholdData(threshold),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      /**
       * Converts a transaction from type SafeMultisigTransactionResponse to type SafeTransaction
       *
       * @param serviceTransactionResponse - The transaction to convert
       * @returns The converted transaction with type SafeTransaction
       */
      async toSafeTransactionType(serviceTransactionResponse) {
        var _a;
        const safeTransactionData = {
          to: serviceTransactionResponse.to,
          value: serviceTransactionResponse.value,
          data: serviceTransactionResponse.data || "0x",
          operation: serviceTransactionResponse.operation,
          safeTxGas: serviceTransactionResponse.safeTxGas.toString(),
          baseGas: serviceTransactionResponse.baseGas.toString(),
          gasPrice: serviceTransactionResponse.gasPrice,
          gasToken: serviceTransactionResponse.gasToken,
          refundReceiver: serviceTransactionResponse.refundReceiver,
          nonce: serviceTransactionResponse.nonce
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        (_a = serviceTransactionResponse.confirmations) == null ? void 0 : _a.map((confirmation) => {
          const signature = new utils_2.EthSafeSignature(confirmation.owner, confirmation.signature);
          safeTransaction.addSignature(signature);
        });
        return safeTransaction;
      }
      /**
       * Checks if a Safe transaction can be executed successfully with no errors.
       *
       * @param safeTransaction - The Safe transaction to check
       * @param options - The Safe transaction execution options. Optional
       * @returns TRUE if the Safe transaction can be executed successfully with no errors
       */
      async isValidTransaction(safeTransaction, options) {
        if (!__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract) {
          throw new Error("Safe is not deployed");
        }
        const transaction = (0, utils_2.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;
        const signedSafeTransaction = await this.copyTransaction(transaction);
        const txHash = await this.getTransactionHash(signedSafeTransaction);
        const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);
        for (const owner of ownersWhoApprovedTx) {
          signedSafeTransaction.addSignature((0, utils_3.generatePreValidatedSignature)(owner));
        }
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        if (owners.includes(signerAddress)) {
          signedSafeTransaction.addSignature((0, utils_3.generatePreValidatedSignature)(signerAddress));
        }
        const isTxValid = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.isValidTransaction(signedSafeTransaction, {
          from: signerAddress,
          ...options
        });
        return isTxValid;
      }
      /**
       * Executes a Safe transaction.
       *
       * @param safeTransaction - The Safe transaction to execute
       * @param options - The Safe transaction execution options. Optional
       * @returns The Safe transaction response
       * @throws "No signer provided"
       * @throws "There are X signatures missing"
       * @throws "Cannot specify gas and gasLimit together in transaction options"
       */
      async executeTransaction(safeTransaction, options) {
        if (!__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract) {
          throw new Error("Safe is not deployed");
        }
        const transaction = (0, utils_2.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;
        const signedSafeTransaction = await this.copyTransaction(transaction);
        const txHash = await this.getTransactionHash(signedSafeTransaction);
        const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);
        for (const owner of ownersWhoApprovedTx) {
          signedSafeTransaction.addSignature((0, utils_3.generatePreValidatedSignature)(owner));
        }
        const owners = await this.getOwners();
        const threshold = await this.getThreshold();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (threshold > signedSafeTransaction.signatures.size && signerAddress && owners.includes(signerAddress)) {
          signedSafeTransaction.addSignature((0, utils_3.generatePreValidatedSignature)(signerAddress));
        }
        if (threshold > signedSafeTransaction.signatures.size) {
          const signaturesMissing = threshold - signedSafeTransaction.signatures.size;
          throw new Error(`There ${signaturesMissing > 1 ? "are" : "is"} ${signaturesMissing} signature${signaturesMissing > 1 ? "s" : ""} missing`);
        }
        const value = bignumber_1.BigNumber.from(signedSafeTransaction.data.value);
        if (!value.isZero()) {
          const balance = await this.getBalance();
          if (value.gt(bignumber_1.BigNumber.from(balance))) {
            throw new Error("Not enough Ether funds");
          }
        }
        if ((options == null ? void 0 : options.gas) && (options == null ? void 0 : options.gasLimit)) {
          throw new Error("Cannot specify gas and gasLimit together in transaction options");
        }
        const txResponse = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.execTransaction(signedSafeTransaction, {
          from: signerAddress,
          ...options
        });
        return txResponse;
      }
      /**
       * Returns the Safe Transaction encoded
       *
       * @async
       * @param {SafeTransaction} safeTransaction - The Safe transaction to be encoded.
       * @returns {Promise<string>} The encoded transaction
       *
       */
      async getEncodedTransaction(safeTransaction) {
        var _a;
        const safeVersion = await this.getContractVersion();
        const chainId = await this.getChainId();
        const customContracts = (_a = __classPrivateFieldGet(this, _Safe_contractManager, "f").contractNetworks) == null ? void 0 : _a[chainId];
        const isL1SafeMasterCopy = __classPrivateFieldGet(this, _Safe_contractManager, "f").isL1SafeMasterCopy;
        const safeSingletonContract = await (0, safeDeploymentContracts_1.getSafeContract)({
          ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
          safeVersion,
          isL1SafeMasterCopy,
          customContracts
        });
        const encodedTransaction = safeSingletonContract.encode("execTransaction", [
          safeTransaction.data.to,
          safeTransaction.data.value,
          safeTransaction.data.data,
          safeTransaction.data.operation,
          safeTransaction.data.safeTxGas,
          safeTransaction.data.baseGas,
          safeTransaction.data.gasPrice,
          safeTransaction.data.gasToken,
          safeTransaction.data.refundReceiver,
          safeTransaction.encodedSignatures()
        ]);
        return encodedTransaction;
      }
      /**
       * Wraps a Safe transaction into a Safe deployment batch.
       *
       * This function creates a transaction batch of 2 transactions, which includes the
       * deployment of the Safe and the provided Safe transaction.
       *
       * @async
       * @param {SafeTransaction} safeTransaction - The Safe transaction to be wrapped into the deployment batch.
       * @param {TransactionOptions} [transactionOptions] - Optional. Options for the transaction, such as from, gas price, gas limit, etc.
       * @param {string} [customSaltNonce] - Optional. a Custom salt nonce to be used for the deployment of the Safe. If not provided, a default value is used.
       * @returns {Promise<Transaction>} A promise that resolves to a Transaction object representing the prepared batch of transactions.
       * @throws Will throw an error if the safe is already deployed.
       *
       */
      async wrapSafeTransactionIntoDeploymentBatch(safeTransaction, transactionOptions, customSaltNonce) {
        const isSafeDeployed = await this.isSafeDeployed();
        if (isSafeDeployed) {
          throw new Error("Safe already deployed");
        }
        const safeDeploymentTransaction = await this.createSafeDeploymentTransaction(customSaltNonce);
        const safeDeploymentBatchTransaction = {
          to: safeDeploymentTransaction.to,
          value: safeDeploymentTransaction.value,
          data: safeDeploymentTransaction.data,
          operation: safe_core_sdk_types_1.OperationType.Call
        };
        const safeBatchTransaction = {
          to: await this.getAddress(),
          value: "0",
          data: await this.getEncodedTransaction(safeTransaction),
          operation: safe_core_sdk_types_1.OperationType.Call
        };
        const transactions = [safeDeploymentBatchTransaction, safeBatchTransaction];
        const safeDeploymentBatch = await this.createTransactionBatch(transactions, transactionOptions);
        return safeDeploymentBatch;
      }
      /**
       * Creates a Safe deployment transaction.
       *
       * This function prepares a transaction for the deployment of a Safe.
       * Both the saltNonce and options parameters are optional, and if not
       * provided, default values will be used.
       *
       * @async
       * @param {string} [customSaltNonce] - Optional. a Custom salt nonce to be used for the deployment of the Safe. If not provided, a default value is used.
       * @param {TransactionOptions} [options] - Optional. Options for the transaction, such as gas price, gas limit, etc.
       * @returns {Promise<Transaction>} A promise that resolves to a Transaction object representing the prepared Safe deployment transaction.
       *
       */
      async createSafeDeploymentTransaction(customSaltNonce, transactionOptions) {
        var _a;
        if (!__classPrivateFieldGet(this, _Safe_predictedSafe, "f")) {
          throw new Error("Predict Safe should be present");
        }
        const { safeAccountConfig, safeDeploymentConfig } = __classPrivateFieldGet(this, _Safe_predictedSafe, "f");
        const safeVersion = await this.getContractVersion();
        const ethAdapter = __classPrivateFieldGet(this, _Safe_ethAdapter, "f");
        const chainId = await ethAdapter.getChainId();
        const isL1SafeMasterCopy = __classPrivateFieldGet(this, _Safe_contractManager, "f").isL1SafeMasterCopy;
        const customContracts = (_a = __classPrivateFieldGet(this, _Safe_contractManager, "f").contractNetworks) == null ? void 0 : _a[chainId];
        const safeSingletonContract = await (0, safeDeploymentContracts_1.getSafeContract)({
          ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
          safeVersion,
          isL1SafeMasterCopy,
          customContracts
        });
        const safeProxyFactoryContract = await (0, safeDeploymentContracts_1.getProxyFactoryContract)({
          ethAdapter,
          safeVersion,
          customContracts
        });
        const initializer = await (0, utils_1.encodeSetupCallData)({
          ethAdapter,
          safeContract: safeSingletonContract,
          safeAccountConfig,
          customContracts
        });
        const saltNonce = customSaltNonce || (safeDeploymentConfig == null ? void 0 : safeDeploymentConfig.saltNonce) || utils_1.PREDETERMINED_SALT_NONCE;
        const safeDeployTransactionData = {
          ...transactionOptions,
          to: safeProxyFactoryContract.getAddress(),
          value: "0",
          // we use the createProxyWithNonce method to create the Safe in a deterministic address, see: https://github.com/safe-global/safe-contracts/blob/main/contracts/proxies/SafeProxyFactory.sol#L52
          data: safeProxyFactoryContract.encode("createProxyWithNonce", [
            safeSingletonContract.getAddress(),
            initializer,
            saltNonce
          ])
        };
        return safeDeployTransactionData;
      }
      /**
       * This function creates a batch of the provided Safe transactions using the MultiSend contract.
       * It groups the transactions together into a single transaction which can then be executed atomically.
       *
       * @async
       * @function createTransactionBatch
       * @param {MetaTransactionData[]} transactions - An array of MetaTransactionData objects to be batched together.
       * @param {TransactionOption} [transactionOptions] - Optional TransactionOption object to specify additional options for the transaction batch.
       * @returns {Promise<Transaction>} A Promise that resolves with the created transaction batch.
       *
       */
      async createTransactionBatch(transactions, transactionOptions) {
        var _a;
        const chainId = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getChainId();
        const multiSendCallOnlyContract = await (0, safeDeploymentContracts_1.getMultiSendCallOnlyContract)({
          ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
          safeVersion: await this.getContractVersion(),
          customContracts: (_a = __classPrivateFieldGet(this, _Safe_contractManager, "f").contractNetworks) == null ? void 0 : _a[chainId]
        });
        const batchData = multiSendCallOnlyContract.encode("multiSend", [
          (0, utils_4.encodeMultiSendData)(transactions)
          // encoded transactions
        ]);
        const transactionBatch = {
          ...transactionOptions,
          to: multiSendCallOnlyContract.getAddress(),
          value: "0",
          data: batchData
        };
        return transactionBatch;
      }
    };
    _Safe_predictedSafe = /* @__PURE__ */ new WeakMap(), _Safe_ethAdapter = /* @__PURE__ */ new WeakMap(), _Safe_contractManager = /* @__PURE__ */ new WeakMap(), _Safe_ownerManager = /* @__PURE__ */ new WeakMap(), _Safe_moduleManager = /* @__PURE__ */ new WeakMap(), _Safe_guardManager = /* @__PURE__ */ new WeakMap(), _Safe_fallbackHandlerManager = /* @__PURE__ */ new WeakMap();
    exports.default = Safe;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.0.0/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.0.0/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        constant: false,
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "DOMAIN_SEPARATOR_TYPEHASH",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "",
            type: "address"
          },
          {
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_masterCopy",
            type: "address"
          }
        ],
        name: "changeMasterCopy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SENTINEL_MODULES",
        outputs: [
          {
            name: "",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SENTINEL_OWNERS",
        outputs: [
          {
            name: "",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "NAME",
        outputs: [
          {
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getModules",
        outputs: [
          {
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SAFE_MSG_TYPEHASH",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SAFE_TX_TYPEHASH",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "prevModule",
            type: "address"
          },
          {
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "prevOwner",
            type: "address"
          },
          {
            name: "oldOwner",
            type: "address"
          },
          {
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "prevOwner",
            type: "address"
          },
          {
            name: "owner",
            type: "address"
          },
          {
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        payable: true,
        stateMutability: "payable",
        type: "fallback"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "txHash",
            type: "bytes32"
          }
        ],
        name: "ExecutionFailed",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "newContract",
            type: "address"
          }
        ],
        name: "ContractCreation",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_owners",
            type: "address[]"
          },
          {
            name: "_threshold",
            type: "uint256"
          },
          {
            name: "to",
            type: "address"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "paymentToken",
            type: "address"
          },
          {
            name: "payment",
            type: "uint256"
          },
          {
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          },
          {
            name: "safeTxGas",
            type: "uint256"
          },
          {
            name: "baseGas",
            type: "uint256"
          },
          {
            name: "gasPrice",
            type: "uint256"
          },
          {
            name: "gasToken",
            type: "address"
          },
          {
            name: "refundReceiver",
            type: "address"
          },
          {
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_data",
            type: "bytes"
          },
          {
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            name: "",
            type: "bytes4"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          },
          {
            name: "safeTxGas",
            type: "uint256"
          },
          {
            name: "baseGas",
            type: "uint256"
          },
          {
            name: "gasPrice",
            type: "uint256"
          },
          {
            name: "gasToken",
            type: "address"
          },
          {
            name: "refundReceiver",
            type: "address"
          },
          {
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          },
          {
            name: "safeTxGas",
            type: "uint256"
          },
          {
            name: "baseGas",
            type: "uint256"
          },
          {
            name: "gasPrice",
            type: "uint256"
          },
          {
            name: "gasToken",
            type: "address"
          },
          {
            name: "refundReceiver",
            type: "address"
          },
          {
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.0.0/factories/Proxy_factory__factory.js
var require_Proxy_factory_factory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.0.0/factories/Proxy_factory__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Proxy_factory__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        constant: false,
        inputs: [
          {
            name: "_mastercopy",
            type: "address"
          },
          {
            name: "initializer",
            type: "bytes"
          },
          {
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createProxyWithNonce",
        outputs: [
          {
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyCreationCode",
        outputs: [
          {
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "masterCopy",
            type: "address"
          },
          {
            name: "data",
            type: "bytes"
          }
        ],
        name: "createProxy",
        outputs: [
          {
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyRuntimeCode",
        outputs: [
          {
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "proxy",
            type: "address"
          }
        ],
        name: "ProxyCreation",
        type: "event"
      }
    ];
    var Proxy_factory__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Proxy_factory__factory = Proxy_factory__factory;
    Proxy_factory__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.1.1/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory2 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.1.1/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "approvedHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "ApproveHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "masterCopy",
            type: "address"
          }
        ],
        name: "ChangedMasterCopy",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        payable: true,
        stateMutability: "payable",
        type: "fallback"
      },
      {
        constant: true,
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_masterCopy",
            type: "address"
          }
        ],
        name: "changeMasterCopy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "prevModule",
            type: "address"
          },
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModuleReturnData",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getModules",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "start",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "pageSize",
            type: "uint256"
          }
        ],
        name: "getModulesPaginated",
        outputs: [
          {
            internalType: "address[]",
            name: "array",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "next",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "setFallbackHandler",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "oldOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address[]",
            name: "_owners",
            type: "address[]"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          },
          {
            internalType: "address payable",
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address payable",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes32",
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.1.1/factories/Multi_send__factory.js
var require_Multi_send_factory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.1.1/factories/Multi_send__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Multi_send__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send__factory = Multi_send__factory;
    Multi_send__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.1.1/factories/Proxy_factory__factory.js
var require_Proxy_factory_factory2 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.1.1/factories/Proxy_factory__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Proxy_factory__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        name: "ProxyCreation",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "masterCopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "createProxy",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyRuntimeCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyCreationCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_mastercopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createProxyWithNonce",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_mastercopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          },
          {
            internalType: "contract IProxyCreationCallback",
            name: "callback",
            type: "address"
          }
        ],
        name: "createProxyWithCallback",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_mastercopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "calculateCreateProxyWithNonceAddress",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Proxy_factory__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Proxy_factory__factory = Proxy_factory__factory;
    Proxy_factory__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.2.0/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.2.0/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "approvedHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "ApproveHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "masterCopy",
            type: "address"
          }
        ],
        name: "ChangedMasterCopy",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        payable: true,
        stateMutability: "payable",
        type: "fallback"
      },
      {
        constant: true,
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_masterCopy",
            type: "address"
          }
        ],
        name: "changeMasterCopy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "prevModule",
            type: "address"
          },
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModuleReturnData",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getModules",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "start",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "pageSize",
            type: "uint256"
          }
        ],
        name: "getModulesPaginated",
        outputs: [
          {
            internalType: "address[]",
            name: "array",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "next",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "isModuleEnabled",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "setFallbackHandler",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "oldOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address[]",
            name: "_owners",
            type: "address[]"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          },
          {
            internalType: "address payable",
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address payable",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes32",
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Compatibility_fallback_handler__factory.js
var require_Compatibility_fallback_handler_factory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Compatibility_fallback_handler__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Compatibility_fallback_handler__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "contract GnosisSafe",
            name: "safe",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHashForSafe",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getModules",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256[]",
            name: "",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "",
            type: "uint256[]"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC1155BatchReceived",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC1155Received",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC721Received",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "targetContract",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "calldataPayload",
            type: "bytes"
          }
        ],
        name: "simulate",
        outputs: [
          {
            internalType: "bytes",
            name: "response",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes4",
            name: "interfaceId",
            type: "bytes4"
          }
        ],
        name: "supportsInterface",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "tokensReceived",
        outputs: [],
        stateMutability: "pure",
        type: "function"
      }
    ];
    var Compatibility_fallback_handler__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Compatibility_fallback_handler__factory = Compatibility_fallback_handler__factory;
    Compatibility_fallback_handler__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Create_call__factory.js
var require_Create_call_factory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Create_call__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Create_call__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        name: "ContractCreation",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "deploymentData",
            type: "bytes"
          }
        ],
        name: "performCreate",
        outputs: [
          {
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "deploymentData",
            type: "bytes"
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32"
          }
        ],
        name: "performCreate2",
        outputs: [
          {
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Create_call__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Create_call__factory = Create_call__factory;
    Create_call__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory4 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "approvedHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "ApproveHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "ChangedFallbackHandler",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "guard",
            type: "address"
          }
        ],
        name: "ChangedGuard",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "SafeReceived",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "initiator",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address[]",
            name: "owners",
            type: "address[]"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "address",
            name: "initializer",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          }
        ],
        name: "SafeSetup",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        stateMutability: "nonpayable",
        type: "fallback"
      },
      {
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "requiredSignatures",
            type: "uint256"
          }
        ],
        name: "checkNSignatures",
        outputs: [],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "checkSignatures",
        outputs: [],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevModule",
            type: "address"
          },
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address payable",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModuleReturnData",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "getChainId",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "start",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "pageSize",
            type: "uint256"
          }
        ],
        name: "getModulesPaginated",
        outputs: [
          {
            internalType: "address[]",
            name: "array",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "next",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "offset",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "length",
            type: "uint256"
          }
        ],
        name: "getStorageAt",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "isModuleEnabled",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "nonce",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "setFallbackHandler",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "guard",
            type: "address"
          }
        ],
        name: "setGuard",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address[]",
            name: "_owners",
            type: "address[]"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          },
          {
            internalType: "address payable",
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "targetContract",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "calldataPayload",
            type: "bytes"
          }
        ],
        name: "simulateAndRevert",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "oldOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send__factory.js
var require_Multi_send_factory2 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      }
    ];
    var Multi_send__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send__factory = Multi_send__factory;
    Multi_send__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send_call_only__factory.js
var require_Multi_send_call_only_factory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send_call_only__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send_call_only__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      }
    ];
    var Multi_send_call_only__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send_call_only__factory = Multi_send_call_only__factory;
    Multi_send_call_only__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Proxy_factory__factory.js
var require_Proxy_factory_factory3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Proxy_factory__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Proxy_factory__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address",
            name: "singleton",
            type: "address"
          }
        ],
        name: "ProxyCreation",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "calculateCreateProxyWithNonceAddress",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "createProxy",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          },
          {
            internalType: "contract IProxyCreationCallback",
            name: "callback",
            type: "address"
          }
        ],
        name: "createProxyWithCallback",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createProxyWithNonce",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "proxyCreationCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [],
        name: "proxyRuntimeCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "pure",
        type: "function"
      }
    ];
    var Proxy_factory__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Proxy_factory__factory = Proxy_factory__factory;
    Proxy_factory__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Sign_message_lib__factory.js
var require_Sign_message_lib_factory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Sign_message_lib__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sign_message_lib__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Sign_message_lib__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Sign_message_lib__factory = Sign_message_lib__factory;
    Sign_message_lib__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Simulate_tx_accessor__factory.js
var require_Simulate_tx_accessor_factory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.3.0/factories/Simulate_tx_accessor__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Simulate_tx_accessor__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "simulate",
        outputs: [
          {
            internalType: "uint256",
            name: "estimate",
            type: "uint256"
          },
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Simulate_tx_accessor__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Simulate_tx_accessor__factory = Simulate_tx_accessor__factory;
    Simulate_tx_accessor__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Compatibility_fallback_handler__factory.js
var require_Compatibility_fallback_handler_factory2 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Compatibility_fallback_handler__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Compatibility_fallback_handler__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [
          {
            internalType: "contract Safe",
            name: "safe",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "encodeMessageDataForSafe",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "contract Safe",
            name: "safe",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHashForSafe",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getModules",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256[]",
            name: "",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "",
            type: "uint256[]"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC1155BatchReceived",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC1155Received",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC721Received",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "targetContract",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "calldataPayload",
            type: "bytes"
          }
        ],
        name: "simulate",
        outputs: [
          {
            internalType: "bytes",
            name: "response",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes4",
            name: "interfaceId",
            type: "bytes4"
          }
        ],
        name: "supportsInterface",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "tokensReceived",
        outputs: [],
        stateMutability: "pure",
        type: "function"
      }
    ];
    var Compatibility_fallback_handler__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Compatibility_fallback_handler__factory = Compatibility_fallback_handler__factory;
    Compatibility_fallback_handler__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Create_call__factory.js
var require_Create_call_factory2 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Create_call__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Create_call__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        name: "ContractCreation",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "deploymentData",
            type: "bytes"
          }
        ],
        name: "performCreate",
        outputs: [
          {
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "deploymentData",
            type: "bytes"
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32"
          }
        ],
        name: "performCreate2",
        outputs: [
          {
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Create_call__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Create_call__factory = Create_call__factory;
    Create_call__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Multi_send__factory.js
var require_Multi_send_factory3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Multi_send__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      }
    ];
    var Multi_send__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send__factory = Multi_send__factory;
    Multi_send__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Multi_send_call_only__factory.js
var require_Multi_send_call_only_factory2 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Multi_send_call_only__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send_call_only__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      }
    ];
    var Multi_send_call_only__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send_call_only__factory = Multi_send_call_only__factory;
    Multi_send_call_only__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Safe__factory.js
var require_Safe_factory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Safe__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Safe__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "approvedHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "ApproveHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "ChangedFallbackHandler",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "guard",
            type: "address"
          }
        ],
        name: "ChangedGuard",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "SafeReceived",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "initiator",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address[]",
            name: "owners",
            type: "address[]"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "address",
            name: "initializer",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          }
        ],
        name: "SafeSetup",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        stateMutability: "nonpayable",
        type: "fallback"
      },
      {
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "requiredSignatures",
            type: "uint256"
          }
        ],
        name: "checkNSignatures",
        outputs: [],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "checkSignatures",
        outputs: [],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevModule",
            type: "address"
          },
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address payable",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModuleReturnData",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "getChainId",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "start",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "pageSize",
            type: "uint256"
          }
        ],
        name: "getModulesPaginated",
        outputs: [
          {
            internalType: "address[]",
            name: "array",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "next",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "offset",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "length",
            type: "uint256"
          }
        ],
        name: "getStorageAt",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "isModuleEnabled",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "nonce",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "setFallbackHandler",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "guard",
            type: "address"
          }
        ],
        name: "setGuard",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address[]",
            name: "_owners",
            type: "address[]"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          },
          {
            internalType: "address payable",
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "targetContract",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "calldataPayload",
            type: "bytes"
          }
        ],
        name: "simulateAndRevert",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "oldOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
    var Safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Safe__factory = Safe__factory;
    Safe__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Safe_proxy_factory__factory.js
var require_Safe_proxy_factory_factory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Safe_proxy_factory__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Safe_proxy_factory__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "contract SafeProxy",
            name: "proxy",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address",
            name: "singleton",
            type: "address"
          }
        ],
        name: "ProxyCreation",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createChainSpecificProxyWithNonce",
        outputs: [
          {
            internalType: "contract SafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          },
          {
            internalType: "contract IProxyCreationCallback",
            name: "callback",
            type: "address"
          }
        ],
        name: "createProxyWithCallback",
        outputs: [
          {
            internalType: "contract SafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createProxyWithNonce",
        outputs: [
          {
            internalType: "contract SafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "getChainId",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "proxyCreationCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "pure",
        type: "function"
      }
    ];
    var Safe_proxy_factory__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Safe_proxy_factory__factory = Safe_proxy_factory__factory;
    Safe_proxy_factory__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Sign_message_lib__factory.js
var require_Sign_message_lib_factory2 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Sign_message_lib__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sign_message_lib__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Sign_message_lib__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Sign_message_lib__factory = Sign_message_lib__factory;
    Sign_message_lib__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Simulate_tx_accessor__factory.js
var require_Simulate_tx_accessor_factory2 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/typechain/src/ethers-v5/v1.4.1/factories/Simulate_tx_accessor__factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Simulate_tx_accessor__factory = void 0;
    var ethers_1 = (init_lib9(), __toCommonJS(lib_exports9));
    var _abi = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "simulate",
        outputs: [
          {
            internalType: "uint256",
            name: "estimate",
            type: "uint256"
          },
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Simulate_tx_accessor__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Simulate_tx_accessor__factory = Simulate_tx_accessor__factory;
    Simulate_tx_accessor__factory.abi = _abi;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CompatibilityFallbackHandler/CompatibilityFallbackHandlerEthersContract.js
var require_CompatibilityFallbackHandlerEthersContract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CompatibilityFallbackHandler/CompatibilityFallbackHandlerEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
    };
    exports.default = CompatibilityFallbackHandlerEthersContract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CompatibilityFallbackHandler/v1.3.0/CompatibilityFallbackHandler_V1_3_0_Ethers.js
var require_CompatibilityFallbackHandler_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CompatibilityFallbackHandler/v1.3.0/CompatibilityFallbackHandler_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerEthersContract_1 = __importDefault(require_CompatibilityFallbackHandlerEthersContract());
    var CompatibilityFallbackHandler_V1_3_0_Ethers = class extends CompatibilityFallbackHandlerEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CompatibilityFallbackHandler_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CompatibilityFallbackHandler/v1.4.1/CompatibilityFallbackHandler_V1_4_1_Ethers.js
var require_CompatibilityFallbackHandler_V1_4_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CompatibilityFallbackHandler/v1.4.1/CompatibilityFallbackHandler_V1_4_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerEthersContract_1 = __importDefault(require_CompatibilityFallbackHandlerEthersContract());
    var CompatibilityFallbackHandler_V1_4_1_Ethers = class extends CompatibilityFallbackHandlerEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CompatibilityFallbackHandler_V1_4_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/utils/index.js
var require_utils14 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSignerCompatible = exports.isTypedDataSigner = exports.toTxResult = exports.sameString = void 0;
    var abstract_signer_1 = (init_lib6(), __toCommonJS(lib_exports6));
    function sameString(str1, str2) {
      return str1.toLowerCase() === str2.toLowerCase();
    }
    exports.sameString = sameString;
    function toTxResult(transactionResponse, options) {
      return {
        hash: transactionResponse.hash,
        options,
        transactionResponse
      };
    }
    exports.toTxResult = toTxResult;
    function isTypedDataSigner(signer) {
      return signer._signTypedData !== void 0;
    }
    exports.isTypedDataSigner = isTypedDataSigner;
    function isSignerCompatible(signerOrProvider) {
      const candidate = signerOrProvider;
      return typeof candidate.signMessage === "function" && typeof candidate.signTransaction === "function" && candidate._isSigner || candidate instanceof abstract_signer_1.Signer;
    }
    exports.isSignerCompatible = isSignerCompatible;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CreateCall/CreateCallEthersContract.js
var require_CreateCallEthersContract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CreateCall/CreateCallEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils14();
    var CreateCallEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
      async performCreate2(value, deploymentData, salt, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("performCreate2", [value, deploymentData, salt], {
            ...options
          });
        }
        const txResponse = await this.contract.performCreate2(value, deploymentData, salt, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async performCreate(value, deploymentData, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("performCreate", [value, deploymentData], {
            ...options
          });
        }
        const txResponse = await this.contract.performCreate(value, deploymentData, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toString();
      }
    };
    exports.default = CreateCallEthersContract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CreateCall/v1.3.0/CreateCallEthersContract_V1_3_0_Ethers.js
var require_CreateCallEthersContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CreateCall/v1.3.0/CreateCallEthersContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CreateCallEthersContract_1 = __importDefault(require_CreateCallEthersContract());
    var CreateCallContract_V1_3_0_Ethers = class extends CreateCallEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CreateCallContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CreateCall/v1.4.1/CreateCallEthersContract_V1_4_1_Ethers.js
var require_CreateCallEthersContract_V1_4_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/CreateCall/v1.4.1/CreateCallEthersContract_V1_4_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CreateCallEthersContract_1 = __importDefault(require_CreateCallEthersContract());
    var CreateCallContract_V1_4_1_Ethers = class extends CreateCallEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CreateCallContract_V1_4_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSend/MultiSendEthersContract.js
var require_MultiSendEthersContract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSend/MultiSendEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
    };
    exports.default = MultiSendEthersContract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSend/v1.1.1/MultiSendContract_V1_1_1_Ethers.js
var require_MultiSendContract_V1_1_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSend/v1.1.1/MultiSendContract_V1_1_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendEthersContract_1 = __importDefault(require_MultiSendEthersContract());
    var MultiSendContract_V1_1_1_Ethers = class extends MultiSendEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_1_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSend/v1.3.0/MultiSendContract_V1_3_0_Ethers.js
var require_MultiSendContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSend/v1.3.0/MultiSendContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendEthersContract_1 = __importDefault(require_MultiSendEthersContract());
    var MultiSendContract_V1_3_0_Ethers = class extends MultiSendEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSend/v1.4.1/MultiSendContract_V1_4_1_Ethers.js
var require_MultiSendContract_V1_4_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSend/v1.4.1/MultiSendContract_V1_4_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendEthersContract_1 = __importDefault(require_MultiSendEthersContract());
    var MultiSendContract_V1_4_1_Ethers = class extends MultiSendEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_4_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSendCallOnly/MultiSendCallOnlyEthersContract.js
var require_MultiSendCallOnlyEthersContract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSendCallOnly/MultiSendCallOnlyEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
    };
    exports.default = MultiSendCallOnlyEthersContract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSendCallOnly/v1.3.0/MultiSendCallOnlyContract_V1_3_0_Ethers.js
var require_MultiSendCallOnlyContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSendCallOnly/v1.3.0/MultiSendCallOnlyContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyEthersContract_1 = __importDefault(require_MultiSendCallOnlyEthersContract());
    var MultiSendCallOnlyContract_V1_3_0_Ethers = class extends MultiSendCallOnlyEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendCallOnlyContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSendCallOnly/v1.4.1/MultiSendCallOnlyContract_V1_4_1_Ethers.js
var require_MultiSendCallOnlyContract_V1_4_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/MultiSendCallOnly/v1.4.1/MultiSendCallOnlyContract_V1_4_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyEthersContract_1 = __importDefault(require_MultiSendCallOnlyEthersContract());
    var MultiSendCallOnlyContract_V1_4_1_Ethers = class extends MultiSendCallOnlyEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendCallOnlyContract_V1_4_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/utils/constants.js
var require_constants2 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/utils/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENTINEL_ADDRESS = exports.EMPTY_DATA = exports.ZERO_ADDRESS = void 0;
    exports.ZERO_ADDRESS = `0x${"0".repeat(40)}`;
    exports.EMPTY_DATA = "0x";
    exports.SENTINEL_ADDRESS = "0x0000000000000000000000000000000000000001";
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/SafeContractEthers.js
var require_SafeContractEthers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/SafeContractEthers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils14();
    var SafeContractEthers = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      async getVersion() {
        return await this.contract.VERSION();
      }
      getAddress() {
        return this.contract.address;
      }
      async getNonce() {
        return (await this.contract.nonce()).toNumber();
      }
      async getThreshold() {
        return (await this.contract.getThreshold()).toNumber();
      }
      async getOwners() {
        return this.contract.getOwners();
      }
      async isOwner(address) {
        return this.contract.isOwner(address);
      }
      async getTransactionHash(safeTransactionData) {
        return this.contract.getTransactionHash(safeTransactionData.to, safeTransactionData.value, safeTransactionData.data, safeTransactionData.operation, safeTransactionData.safeTxGas, safeTransactionData.baseGas, safeTransactionData.gasPrice, safeTransactionData.gasToken, safeTransactionData.refundReceiver, safeTransactionData.nonce);
      }
      async approvedHashes(ownerAddress, hash) {
        return this.contract.approvedHashes(ownerAddress, hash);
      }
      async approveHash(hash, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("approveHash", [hash], { ...options });
        }
        const txResponse = await this.contract.approveHash(hash, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async isValidTransaction(safeTransaction, options) {
        let isTxValid = false;
        try {
          if (options && !options.gasLimit) {
            options.gasLimit = await this.estimateGas("execTransaction", [
              safeTransaction.data.to,
              safeTransaction.data.value,
              safeTransaction.data.data,
              safeTransaction.data.operation,
              safeTransaction.data.safeTxGas,
              safeTransaction.data.baseGas,
              safeTransaction.data.gasPrice,
              safeTransaction.data.gasToken,
              safeTransaction.data.refundReceiver,
              safeTransaction.encodedSignatures()
            ], {
              ...options
            });
          }
          isTxValid = await this.contract.callStatic.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);
        } catch {
        }
        return isTxValid;
      }
      async execTransaction(safeTransaction, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("execTransaction", [
            safeTransaction.data.to,
            safeTransaction.data.value,
            safeTransaction.data.data,
            safeTransaction.data.operation,
            safeTransaction.data.safeTxGas,
            safeTransaction.data.baseGas,
            safeTransaction.data.gasPrice,
            safeTransaction.data.gasToken,
            safeTransaction.data.refundReceiver,
            safeTransaction.encodedSignatures()
          ], {
            ...options
          });
        }
        const txResponse = await this.contract.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async estimateGas(methodName, params, options) {
        const a = (await this.contract.estimateGas[methodName](...params, options)).toString();
        return a;
      }
    };
    exports.default = SafeContractEthers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/v1.0.0/SafeContract_V1_0_0_Ethers.js
var require_SafeContract_V1_0_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/v1.0.0/SafeContract_V1_0_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils14();
    var constants_1 = require_constants2();
    var SafeContractEthers_1 = __importDefault(require_SafeContractEthers());
    var SafeContract_V1_0_0_Ethers = class extends SafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, paymentToken, payment, paymentReceiver, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.getModules();
      }
      async isModuleEnabled(moduleAddress) {
        const modules = await this.getModules();
        const isModuleEnabled = modules.some((enabledModuleAddress) => (0, utils_1.sameString)(enabledModuleAddress, moduleAddress));
        return isModuleEnabled;
      }
    };
    exports.default = SafeContract_V1_0_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/v1.1.1/SafeContract_V1_1_1_Ethers.js
var require_SafeContract_V1_1_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/v1.1.1/SafeContract_V1_1_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils14();
    var constants_1 = require_constants2();
    var SafeContractEthers_1 = __importDefault(require_SafeContractEthers());
    var SafeContract_V1_1_1_Ethers = class extends SafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.getModules();
      }
      async isModuleEnabled(moduleAddress) {
        const modules = await this.getModules();
        const isModuleEnabled = modules.some((enabledModuleAddress) => (0, utils_1.sameString)(enabledModuleAddress, moduleAddress));
        return isModuleEnabled;
      }
    };
    exports.default = SafeContract_V1_1_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/v1.2.0/SafeContract_V1_2_0_Ethers.js
var require_SafeContract_V1_2_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/v1.2.0/SafeContract_V1_2_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils14();
    var constants_1 = require_constants2();
    var SafeContractEthers_1 = __importDefault(require_SafeContractEthers());
    var SafeContract_V1_2_0_Ethers = class extends SafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.getModules();
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.isModuleEnabled(moduleAddress);
      }
    };
    exports.default = SafeContract_V1_2_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/v1.3.0/SafeContract_V1_3_0_Ethers.js
var require_SafeContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/v1.3.0/SafeContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils14();
    var constants_1 = require_constants2();
    var SafeContractEthers_1 = __importDefault(require_SafeContractEthers());
    var SafeContract_V1_3_0_Ethers = class extends SafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        const { array } = await this.contract.getModulesPaginated(constants_1.SENTINEL_ADDRESS, 10);
        return array;
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.isModuleEnabled(moduleAddress);
      }
    };
    exports.default = SafeContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/v1.4.1/SafeContract_V1_4_1_Ethers.js
var require_SafeContract_V1_4_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/Safe/v1.4.1/SafeContract_V1_4_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils14();
    var constants_1 = require_constants2();
    var SafeContractEthers_1 = __importDefault(require_SafeContractEthers());
    var SafeContract_V1_4_1_Ethers = class extends SafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        const { array } = await this.contract.getModulesPaginated(constants_1.SENTINEL_ADDRESS, 10);
        return array;
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.isModuleEnabled(moduleAddress);
      }
    };
    exports.default = SafeContract_V1_4_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SafeProxyFactory/SafeProxyFactoryEthersContract.js
var require_SafeProxyFactoryEthersContract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SafeProxyFactory/SafeProxyFactoryEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var SafeProxyFactoryEthersContract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.address;
      }
      async proxyCreationCode() {
        return this.contract.proxyCreationCode();
      }
      async createProxy({ safeMasterCopyAddress, initializer, saltNonce, options, callback }) {
        if (bignumber_1.BigNumber.from(saltNonce).lt(0))
          throw new Error("saltNonce must be greater than or equal to 0");
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("createProxyWithNonce", [safeMasterCopyAddress, initializer, saltNonce], {
            ...options
          });
        }
        const proxyAddress = this.contract.createProxyWithNonce(safeMasterCopyAddress, initializer, saltNonce, options).then(async (txResponse) => {
          var _a;
          if (callback) {
            callback(txResponse.hash);
          }
          const txReceipt = await txResponse.wait();
          const proxyCreationEvent = (_a = txReceipt == null ? void 0 : txReceipt.events) == null ? void 0 : _a.find(({ event }) => event === "ProxyCreation");
          if (!proxyCreationEvent || !proxyCreationEvent.args) {
            throw new Error("SafeProxy was not deployed correctly");
          }
          const proxyAddress2 = proxyCreationEvent.args[0];
          return proxyAddress2;
        });
        return proxyAddress;
      }
      encode(methodName, params) {
        return this.contract.interface.encodeFunctionData(methodName, params);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toString();
      }
    };
    exports.default = SafeProxyFactoryEthersContract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SafeProxyFactory/v1.0.0/SafeProxyFactoryContract_V1_0_0_Ethers.js
var require_SafeProxyFactoryContract_V1_0_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SafeProxyFactory/v1.0.0/SafeProxyFactoryContract_V1_0_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SafeProxyFactoryEthersContract_1 = __importDefault(require_SafeProxyFactoryEthersContract());
    var SafeProxyFactoryContract_V1_0_0_Ethers = class extends SafeProxyFactoryEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SafeProxyFactoryContract_V1_0_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SafeProxyFactory/v1.1.1/SafeProxyFactoryContract_V1_1_1_Ethers.js
var require_SafeProxyFactoryContract_V1_1_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SafeProxyFactory/v1.1.1/SafeProxyFactoryContract_V1_1_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SafeProxyFactoryEthersContract_1 = __importDefault(require_SafeProxyFactoryEthersContract());
    var SafeProxyFactoryContract_V1_1_1_Ethers = class extends SafeProxyFactoryEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SafeProxyFactoryContract_V1_1_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SafeProxyFactory/v1.3.0/SafeProxyFactoryContract_V1_3_0_Ethers.js
var require_SafeProxyFactoryContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SafeProxyFactory/v1.3.0/SafeProxyFactoryContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SafeProxyFactoryEthersContract_1 = __importDefault(require_SafeProxyFactoryEthersContract());
    var SafeProxyFactoryContract_V1_3_0_Ethers = class extends SafeProxyFactoryEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SafeProxyFactoryContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SafeProxyFactory/v1.4.1/SafeProxyFactoryContract_V1_4_1_Ethers.js
var require_SafeProxyFactoryContract_V1_4_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SafeProxyFactory/v1.4.1/SafeProxyFactoryContract_V1_4_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SafeProxyFactoryEthersContract_1 = __importDefault(require_SafeProxyFactoryEthersContract());
    var SafeProxyFactoryContract_V1_4_1_Ethers = class extends SafeProxyFactoryEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SafeProxyFactoryContract_V1_4_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SignMessageLib/SignMessageLibEthersContract.js
var require_SignMessageLibEthersContract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SignMessageLib/SignMessageLibEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils14();
    var SignMessageLibEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
      async signMessage(data, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("signMessage", [data], { ...options });
        }
        const txResponse = await this.contract.signMessage(data, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getMessageHash(message) {
        return this.contract.getMessageHash(message);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toString();
      }
    };
    exports.default = SignMessageLibEthersContract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SignMessageLib/v1.3.0/SignMessageLibContract_V1_3_0_Ethers.js
var require_SignMessageLibContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SignMessageLib/v1.3.0/SignMessageLibContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SignMessageLibEthersContract_1 = __importDefault(require_SignMessageLibEthersContract());
    var SignMessageLibContract_V1_3_0_Ethers = class extends SignMessageLibEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SignMessageLibContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SignMessageLib/v1.4.1/SignMessageLibContract_V1_4_1_Ethers.js
var require_SignMessageLibContract_V1_4_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SignMessageLib/v1.4.1/SignMessageLibContract_V1_4_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SignMessageLibEthersContract_1 = __importDefault(require_SignMessageLibEthersContract());
    var SignMessageLibContract_V1_4_1_Ethers = class extends SignMessageLibEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SignMessageLibContract_V1_4_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SimulateTxAccessor/SimulateTxAccessorEthersContract.js
var require_SimulateTxAccessorEthersContract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SimulateTxAccessor/SimulateTxAccessorEthersContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SimulateTxAccessorEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
    };
    exports.default = SimulateTxAccessorEthersContract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SimulateTxAccessor/v1.3.0/SimulateTxAccessorContract_V1_3_0_Ethers.js
var require_SimulateTxAccessorContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SimulateTxAccessor/v1.3.0/SimulateTxAccessorContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SimulateTxAccessorEthersContract_1 = __importDefault(require_SimulateTxAccessorEthersContract());
    var SimulateTxAccessorContract_V1_3_0_Ethers = class extends SimulateTxAccessorEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SimulateTxAccessorContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SimulateTxAccessor/v1.4.1/SimulateTxAccessorContract_V1_4_1_Ethers.js
var require_SimulateTxAccessorContract_V1_4_1_Ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/SimulateTxAccessor/v1.4.1/SimulateTxAccessorContract_V1_4_1_Ethers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SimulateTxAccessorEthersContract_1 = __importDefault(require_SimulateTxAccessorEthersContract());
    var SimulateTxAccessorContract_V1_4_1_Ethers = class extends SimulateTxAccessorEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SimulateTxAccessorContract_V1_4_1_Ethers;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/contractInstancesEthers.js
var require_contractInstancesEthers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/contracts/contractInstancesEthers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSimulateTxAccessorContractInstance = exports.getCreateCallContractInstance = exports.getSignMessageLibContractInstance = exports.getSafeProxyFactoryContractInstance = exports.getMultiSendCallOnlyContractInstance = exports.getMultiSendContractInstance = exports.getCompatibilityFallbackHandlerContractInstance = exports.getSafeContractInstance = void 0;
    var Gnosis_safe__factory_1 = require_Gnosis_safe_factory();
    var Proxy_factory__factory_1 = require_Proxy_factory_factory();
    var Gnosis_safe__factory_2 = require_Gnosis_safe_factory2();
    var Multi_send__factory_1 = require_Multi_send_factory();
    var Proxy_factory__factory_2 = require_Proxy_factory_factory2();
    var Gnosis_safe__factory_3 = require_Gnosis_safe_factory3();
    var Compatibility_fallback_handler__factory_1 = require_Compatibility_fallback_handler_factory();
    var Create_call__factory_1 = require_Create_call_factory();
    var Gnosis_safe__factory_4 = require_Gnosis_safe_factory4();
    var Multi_send__factory_2 = require_Multi_send_factory2();
    var Multi_send_call_only__factory_1 = require_Multi_send_call_only_factory();
    var Proxy_factory__factory_3 = require_Proxy_factory_factory3();
    var Sign_message_lib__factory_1 = require_Sign_message_lib_factory();
    var Simulate_tx_accessor__factory_1 = require_Simulate_tx_accessor_factory();
    var Compatibility_fallback_handler__factory_2 = require_Compatibility_fallback_handler_factory2();
    var Create_call__factory_2 = require_Create_call_factory2();
    var Multi_send__factory_3 = require_Multi_send_factory3();
    var Multi_send_call_only__factory_2 = require_Multi_send_call_only_factory2();
    var Safe__factory_1 = require_Safe_factory();
    var Safe_proxy_factory__factory_1 = require_Safe_proxy_factory_factory();
    var Sign_message_lib__factory_2 = require_Sign_message_lib_factory2();
    var Simulate_tx_accessor__factory_2 = require_Simulate_tx_accessor_factory2();
    var CompatibilityFallbackHandler_V1_3_0_Ethers_1 = __importDefault(require_CompatibilityFallbackHandler_V1_3_0_Ethers());
    var CompatibilityFallbackHandler_V1_4_1_Ethers_1 = __importDefault(require_CompatibilityFallbackHandler_V1_4_1_Ethers());
    var CreateCallEthersContract_V1_3_0_Ethers_1 = __importDefault(require_CreateCallEthersContract_V1_3_0_Ethers());
    var CreateCallEthersContract_V1_4_1_Ethers_1 = __importDefault(require_CreateCallEthersContract_V1_4_1_Ethers());
    var MultiSendContract_V1_1_1_Ethers_1 = __importDefault(require_MultiSendContract_V1_1_1_Ethers());
    var MultiSendContract_V1_3_0_Ethers_1 = __importDefault(require_MultiSendContract_V1_3_0_Ethers());
    var MultiSendContract_V1_4_1_Ethers_1 = __importDefault(require_MultiSendContract_V1_4_1_Ethers());
    var MultiSendCallOnlyContract_V1_3_0_Ethers_1 = __importDefault(require_MultiSendCallOnlyContract_V1_3_0_Ethers());
    var MultiSendCallOnlyContract_V1_4_1_Ethers_1 = __importDefault(require_MultiSendCallOnlyContract_V1_4_1_Ethers());
    var SafeContract_V1_0_0_Ethers_1 = __importDefault(require_SafeContract_V1_0_0_Ethers());
    var SafeContract_V1_1_1_Ethers_1 = __importDefault(require_SafeContract_V1_1_1_Ethers());
    var SafeContract_V1_2_0_Ethers_1 = __importDefault(require_SafeContract_V1_2_0_Ethers());
    var SafeContract_V1_3_0_Ethers_1 = __importDefault(require_SafeContract_V1_3_0_Ethers());
    var SafeContract_V1_4_1_Ethers_1 = __importDefault(require_SafeContract_V1_4_1_Ethers());
    var SafeProxyFactoryContract_V1_0_0_Ethers_1 = __importDefault(require_SafeProxyFactoryContract_V1_0_0_Ethers());
    var SafeProxyFactoryContract_V1_1_1_Ethers_1 = __importDefault(require_SafeProxyFactoryContract_V1_1_1_Ethers());
    var SafeProxyFactoryContract_V1_3_0_Ethers_1 = __importDefault(require_SafeProxyFactoryContract_V1_3_0_Ethers());
    var SafeProxyFactoryContract_V1_4_1_Ethers_1 = __importDefault(require_SafeProxyFactoryContract_V1_4_1_Ethers());
    var SignMessageLibContract_V1_3_0_Ethers_1 = __importDefault(require_SignMessageLibContract_V1_3_0_Ethers());
    var SignMessageLibContract_V1_4_1_Ethers_1 = __importDefault(require_SignMessageLibContract_V1_4_1_Ethers());
    var SimulateTxAccessorContract_V1_3_0_Ethers_1 = __importDefault(require_SimulateTxAccessorContract_V1_3_0_Ethers());
    var SimulateTxAccessorContract_V1_4_1_Ethers_1 = __importDefault(require_SimulateTxAccessorContract_V1_4_1_Ethers());
    function getSafeContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let safeContract;
      switch (safeVersion) {
        case "1.4.1":
          safeContract = Safe__factory_1.Safe__factory.connect(contractAddress, signerOrProvider);
          return new SafeContract_V1_4_1_Ethers_1.default(safeContract);
        case "1.3.0":
          safeContract = Gnosis_safe__factory_4.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new SafeContract_V1_3_0_Ethers_1.default(safeContract);
        case "1.2.0":
          safeContract = Gnosis_safe__factory_3.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new SafeContract_V1_2_0_Ethers_1.default(safeContract);
        case "1.1.1":
          safeContract = Gnosis_safe__factory_2.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new SafeContract_V1_1_1_Ethers_1.default(safeContract);
        case "1.0.0":
          safeContract = Gnosis_safe__factory_1.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new SafeContract_V1_0_0_Ethers_1.default(safeContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSafeContractInstance = getSafeContractInstance;
    function getCompatibilityFallbackHandlerContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let compatibilityFallbackHandlerContract;
      switch (safeVersion) {
        case "1.4.1":
          compatibilityFallbackHandlerContract = Compatibility_fallback_handler__factory_2.Compatibility_fallback_handler__factory.connect(contractAddress, signerOrProvider);
          return new CompatibilityFallbackHandler_V1_4_1_Ethers_1.default(compatibilityFallbackHandlerContract);
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
          compatibilityFallbackHandlerContract = Compatibility_fallback_handler__factory_1.Compatibility_fallback_handler__factory.connect(contractAddress, signerOrProvider);
          return new CompatibilityFallbackHandler_V1_3_0_Ethers_1.default(compatibilityFallbackHandlerContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getCompatibilityFallbackHandlerContractInstance = getCompatibilityFallbackHandlerContractInstance;
    function getMultiSendContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let multiSendContract;
      switch (safeVersion) {
        case "1.4.1":
          multiSendContract = Multi_send__factory_3.Multi_send__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendContract_V1_4_1_Ethers_1.default(multiSendContract);
        case "1.3.0":
          multiSendContract = Multi_send__factory_2.Multi_send__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendContract_V1_3_0_Ethers_1.default(multiSendContract);
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          multiSendContract = Multi_send__factory_1.Multi_send__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendContract_V1_1_1_Ethers_1.default(multiSendContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getMultiSendContractInstance = getMultiSendContractInstance;
    function getMultiSendCallOnlyContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let multiSendCallOnlyContract;
      switch (safeVersion) {
        case "1.4.1":
          multiSendCallOnlyContract = Multi_send_call_only__factory_2.Multi_send_call_only__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendCallOnlyContract_V1_4_1_Ethers_1.default(multiSendCallOnlyContract);
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          multiSendCallOnlyContract = Multi_send_call_only__factory_1.Multi_send_call_only__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendCallOnlyContract_V1_3_0_Ethers_1.default(multiSendCallOnlyContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getMultiSendCallOnlyContractInstance = getMultiSendCallOnlyContractInstance;
    function getSafeProxyFactoryContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let safeProxyFactoryContract;
      switch (safeVersion) {
        case "1.4.1":
          safeProxyFactoryContract = Safe_proxy_factory__factory_1.Safe_proxy_factory__factory.connect(contractAddress, signerOrProvider);
          return new SafeProxyFactoryContract_V1_4_1_Ethers_1.default(safeProxyFactoryContract);
        case "1.3.0":
          safeProxyFactoryContract = Proxy_factory__factory_3.Proxy_factory__factory.connect(contractAddress, signerOrProvider);
          return new SafeProxyFactoryContract_V1_3_0_Ethers_1.default(safeProxyFactoryContract);
        case "1.2.0":
        case "1.1.1":
          safeProxyFactoryContract = Proxy_factory__factory_2.Proxy_factory__factory.connect(contractAddress, signerOrProvider);
          return new SafeProxyFactoryContract_V1_1_1_Ethers_1.default(safeProxyFactoryContract);
        case "1.0.0":
          safeProxyFactoryContract = Proxy_factory__factory_1.Proxy_factory__factory.connect(contractAddress, signerOrProvider);
          return new SafeProxyFactoryContract_V1_0_0_Ethers_1.default(safeProxyFactoryContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSafeProxyFactoryContractInstance = getSafeProxyFactoryContractInstance;
    function getSignMessageLibContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let signMessageLibContract;
      switch (safeVersion) {
        case "1.4.1":
          signMessageLibContract = Sign_message_lib__factory_2.Sign_message_lib__factory.connect(contractAddress, signerOrProvider);
          return new SignMessageLibContract_V1_4_1_Ethers_1.default(signMessageLibContract);
        case "1.3.0":
          signMessageLibContract = Sign_message_lib__factory_1.Sign_message_lib__factory.connect(contractAddress, signerOrProvider);
          return new SignMessageLibContract_V1_3_0_Ethers_1.default(signMessageLibContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSignMessageLibContractInstance = getSignMessageLibContractInstance;
    function getCreateCallContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let createCallContract;
      switch (safeVersion) {
        case "1.4.1":
          createCallContract = Create_call__factory_2.Create_call__factory.connect(contractAddress, signerOrProvider);
          return new CreateCallEthersContract_V1_4_1_Ethers_1.default(createCallContract);
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          createCallContract = Create_call__factory_1.Create_call__factory.connect(contractAddress, signerOrProvider);
          return new CreateCallEthersContract_V1_3_0_Ethers_1.default(createCallContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getCreateCallContractInstance = getCreateCallContractInstance;
    function getSimulateTxAccessorContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let simulateTxAccessorContract;
      switch (safeVersion) {
        case "1.4.1":
          simulateTxAccessorContract = Simulate_tx_accessor__factory_2.Simulate_tx_accessor__factory.connect(contractAddress, signerOrProvider);
          return new SimulateTxAccessorContract_V1_4_1_Ethers_1.default(simulateTxAccessorContract);
        case "1.3.0":
          simulateTxAccessorContract = Simulate_tx_accessor__factory_1.Simulate_tx_accessor__factory.connect(contractAddress, signerOrProvider);
          return new SimulateTxAccessorContract_V1_3_0_Ethers_1.default(simulateTxAccessorContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSimulateTxAccessorContractInstance = getSimulateTxAccessorContractInstance;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/EthersAdapter.js
var require_EthersAdapter = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/EthersAdapter.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _EthersAdapter_ethers;
    var _EthersAdapter_signer;
    var _EthersAdapter_provider;
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var utils_1 = require_utils13();
    var contractInstancesEthers_1 = require_contractInstancesEthers();
    var utils_2 = require_utils14();
    var EthersAdapter2 = class {
      constructor({ ethers, signerOrProvider }) {
        _EthersAdapter_ethers.set(this, void 0);
        _EthersAdapter_signer.set(this, void 0);
        _EthersAdapter_provider.set(this, void 0);
        if (!ethers) {
          throw new Error("ethers property missing from options");
        }
        __classPrivateFieldSet(this, _EthersAdapter_ethers, ethers, "f");
        const isSigner = (0, utils_2.isSignerCompatible)(signerOrProvider);
        if (isSigner) {
          const signer = signerOrProvider;
          if (!signer.provider) {
            throw new Error("Signer must be connected to a provider");
          }
          __classPrivateFieldSet(this, _EthersAdapter_provider, signer.provider, "f");
          __classPrivateFieldSet(this, _EthersAdapter_signer, signer, "f");
        } else {
          __classPrivateFieldSet(this, _EthersAdapter_provider, signerOrProvider, "f");
        }
      }
      getProvider() {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
      }
      getSigner() {
        return __classPrivateFieldGet(this, _EthersAdapter_signer, "f");
      }
      isAddress(address) {
        return __classPrivateFieldGet(this, _EthersAdapter_ethers, "f").utils.isAddress(address);
      }
      async getEip3770Address(fullAddress) {
        const chainId = await this.getChainId();
        return (0, utils_1.validateEip3770Address)(fullAddress, chainId);
      }
      async getBalance(address, blockTag) {
        return bignumber_1.BigNumber.from(await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getBalance(address, blockTag));
      }
      async getNonce(address, blockTag) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getTransactionCount(address, blockTag);
      }
      async getChainId() {
        return (await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getNetwork()).chainId;
      }
      getChecksummedAddress(address) {
        return __classPrivateFieldGet(this, _EthersAdapter_ethers, "f").utils.getAddress(address);
      }
      async getSafeContract({ safeVersion, singletonDeployment, customContractAddress }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid SafeProxy contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getSafeContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      async getSafeProxyFactoryContract({ safeVersion, singletonDeployment, customContractAddress }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid SafeProxyFactory contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getSafeProxyFactoryContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      async getMultiSendContract({ safeVersion, singletonDeployment, customContractAddress }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid MultiSend contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getMultiSendContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      async getMultiSendCallOnlyContract({ safeVersion, singletonDeployment, customContractAddress }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid MultiSendCallOnly contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getMultiSendCallOnlyContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      async getCompatibilityFallbackHandlerContract({ safeVersion, singletonDeployment, customContractAddress }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid CompatibilityFallbackHandler contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getCompatibilityFallbackHandlerContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      async getSignMessageLibContract({ safeVersion, singletonDeployment, customContractAddress }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid SignMessageLib contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getSignMessageLibContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      async getCreateCallContract({ safeVersion, singletonDeployment, customContractAddress }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid CreateCall contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getCreateCallContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      async getSimulateTxAccessorContract({ safeVersion, singletonDeployment, customContractAddress }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid SimulateTxAccessor contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getSimulateTxAccessorContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      async getContractCode(address, blockTag) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getCode(address, blockTag);
      }
      async isContractDeployed(address, blockTag) {
        const contractCode = await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getCode(address, blockTag);
        return contractCode !== "0x";
      }
      async getStorageAt(address, position) {
        const content = await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getStorageAt(address, position);
        const decodedContent = this.decodeParameters(["address"], content);
        return decodedContent[0];
      }
      async getTransaction(transactionHash) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getTransaction(transactionHash);
      }
      async getSignerAddress() {
        var _a;
        return (_a = __classPrivateFieldGet(this, _EthersAdapter_signer, "f")) == null ? void 0 : _a.getAddress();
      }
      signMessage(message) {
        if (!__classPrivateFieldGet(this, _EthersAdapter_signer, "f")) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const messageArray = __classPrivateFieldGet(this, _EthersAdapter_ethers, "f").utils.arrayify(message);
        return __classPrivateFieldGet(this, _EthersAdapter_signer, "f").signMessage(messageArray);
      }
      async signTypedData(safeTransactionEIP712Args) {
        if (!__classPrivateFieldGet(this, _EthersAdapter_signer, "f")) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        if ((0, utils_2.isTypedDataSigner)(__classPrivateFieldGet(this, _EthersAdapter_signer, "f"))) {
          const typedData = (0, utils_1.generateTypedData)(safeTransactionEIP712Args);
          const signature = await __classPrivateFieldGet(this, _EthersAdapter_signer, "f")._signTypedData(typedData.domain, { SafeTx: typedData.types.SafeTx }, typedData.message);
          return signature;
        }
        throw new Error("The current signer does not implement EIP-712 to sign typed data");
      }
      async estimateGas(transaction) {
        return (await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").estimateGas(transaction)).toString();
      }
      call(transaction, blockTag) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").call(transaction, blockTag);
      }
      encodeParameters(types, values) {
        return new (__classPrivateFieldGet(this, _EthersAdapter_ethers, "f")).utils.AbiCoder().encode(types, values);
      }
      decodeParameters(types, values) {
        return new (__classPrivateFieldGet(this, _EthersAdapter_ethers, "f")).utils.AbiCoder().decode(types, values);
      }
    };
    _EthersAdapter_ethers = /* @__PURE__ */ new WeakMap(), _EthersAdapter_signer = /* @__PURE__ */ new WeakMap(), _EthersAdapter_provider = /* @__PURE__ */ new WeakMap();
    exports.default = EthersAdapter2;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/index.js
var require_ethers = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignMessageLibEthersContract = exports.SafeProxyFactoryEthersContract = exports.SafeContractEthers = exports.MultiSendEthersContract = exports.MultiSendCallOnlyEthersContract = exports.EthersAdapter = exports.CreateCallEthersContract = void 0;
    var EthersAdapter_1 = __importDefault(require_EthersAdapter());
    exports.EthersAdapter = EthersAdapter_1.default;
    var CreateCallEthersContract_1 = __importDefault(require_CreateCallEthersContract());
    exports.CreateCallEthersContract = CreateCallEthersContract_1.default;
    var MultiSendEthersContract_1 = __importDefault(require_MultiSendEthersContract());
    exports.MultiSendEthersContract = MultiSendEthersContract_1.default;
    var MultiSendCallOnlyEthersContract_1 = __importDefault(require_MultiSendCallOnlyEthersContract());
    exports.MultiSendCallOnlyEthersContract = MultiSendCallOnlyEthersContract_1.default;
    var SafeContractEthers_1 = __importDefault(require_SafeContractEthers());
    exports.SafeContractEthers = SafeContractEthers_1.default;
    var SafeProxyFactoryEthersContract_1 = __importDefault(require_SafeProxyFactoryEthersContract());
    exports.SafeProxyFactoryEthersContract = SafeProxyFactoryEthersContract_1.default;
    var SignMessageLibEthersContract_1 = __importDefault(require_SignMessageLibEthersContract());
    exports.SignMessageLibEthersContract = SignMessageLibEthersContract_1.default;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CompatibilityFallbackHandler/CompatibilityFallbackHandlerWeb3Contract.js
var require_CompatibilityFallbackHandlerWeb3Contract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CompatibilityFallbackHandler/CompatibilityFallbackHandlerWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
    };
    exports.default = CompatibilityFallbackHandlerWeb3Contract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CompatibilityFallbackHandler/v1.3.0/CompatibilityFallbackHandler_V1_3_0_Web3.js
var require_CompatibilityFallbackHandler_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CompatibilityFallbackHandler/v1.3.0/CompatibilityFallbackHandler_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerWeb3Contract_1 = __importDefault(require_CompatibilityFallbackHandlerWeb3Contract());
    var CompatibilityFallbackHandler_V1_3_0_Web3 = class extends CompatibilityFallbackHandlerWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CompatibilityFallbackHandler_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CompatibilityFallbackHandler/v1.4.1/CompatibilityFallbackHandler_V1_4_1_Web3.js
var require_CompatibilityFallbackHandler_V1_4_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CompatibilityFallbackHandler/v1.4.1/CompatibilityFallbackHandler_V1_4_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerWeb3Contract_1 = __importDefault(require_CompatibilityFallbackHandlerWeb3Contract());
    var CompatibilityFallbackHandler_V1_4_1_Web3 = class extends CompatibilityFallbackHandlerWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CompatibilityFallbackHandler_V1_4_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/utils/index.js
var require_utils15 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toTxResult = exports.sameString = void 0;
    function sameString(str1, str2) {
      return str1.toLowerCase() === str2.toLowerCase();
    }
    exports.sameString = sameString;
    async function toTxResult(promiEvent, options) {
      return new Promise((resolve, reject) => promiEvent.once("transactionHash", (hash) => resolve({ hash, promiEvent, options })).catch(reject));
    }
    exports.toTxResult = toTxResult;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CreateCall/CreateCallWeb3Contract.js
var require_CreateCallWeb3Contract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CreateCall/CreateCallWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils15();
    var CreateCallWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      async performCreate2(value, deploymentData, salt, options) {
        if (options && !options.gas) {
          options.gas = await this.estimateGas("performCreate2", [value, deploymentData, salt], {
            ...options
          });
        }
        const txResponse = this.contract.methods.performCreate2(value, deploymentData, salt).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async performCreate(value, deploymentData, options) {
        if (options && !options.gas) {
          options.gas = await this.estimateGas("performCreate", [value, deploymentData], { ...options });
        }
        const txResponse = this.contract.methods.performCreate(value, deploymentData).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.methods[methodName](...params).estimateGas(options)).toString();
      }
    };
    exports.default = CreateCallWeb3Contract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CreateCall/v1.3.0/CreateCallEthersContract_V1_3_0_Web3.js
var require_CreateCallEthersContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CreateCall/v1.3.0/CreateCallEthersContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CreateCallWeb3Contract_1 = __importDefault(require_CreateCallWeb3Contract());
    var CreateCallContract_V1_3_0_Web3 = class extends CreateCallWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CreateCallContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CreateCall/v1.4.1/CreateCallEthersContract_V1_4_1_Web3.js
var require_CreateCallEthersContract_V1_4_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/CreateCall/v1.4.1/CreateCallEthersContract_V1_4_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CreateCallWeb3Contract_1 = __importDefault(require_CreateCallWeb3Contract());
    var CreateCallContract_V1_4_1_Web3 = class extends CreateCallWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CreateCallContract_V1_4_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSend/MultiSendWeb3Contract.js
var require_MultiSendWeb3Contract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSend/MultiSendWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
    };
    exports.default = MultiSendWeb3Contract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSend/v1.1.1/MultiSendContract_V1_1_1_Web3.js
var require_MultiSendContract_V1_1_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSend/v1.1.1/MultiSendContract_V1_1_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendWeb3Contract_1 = __importDefault(require_MultiSendWeb3Contract());
    var MultiSendContract_V1_1_1_Web3 = class extends MultiSendWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_1_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSend/v1.3.0/MultiSendContract_V1_3_0_Web3.js
var require_MultiSendContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSend/v1.3.0/MultiSendContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendWeb3Contract_1 = __importDefault(require_MultiSendWeb3Contract());
    var MultiSendContract_V1_3_0_Web3 = class extends MultiSendWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSend/v1.4.1/MultiSendContract_V1_4_1_Web3.js
var require_MultiSendContract_V1_4_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSend/v1.4.1/MultiSendContract_V1_4_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendWeb3Contract_1 = __importDefault(require_MultiSendWeb3Contract());
    var MultiSendContract_V1_4_1_Web3 = class extends MultiSendWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_4_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSendCallOnly/MultiSendCallOnlyWeb3Contract.js
var require_MultiSendCallOnlyWeb3Contract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSendCallOnly/MultiSendCallOnlyWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
    };
    exports.default = MultiSendCallOnlyWeb3Contract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSendCallOnly/v1.3.0/MultiSendCallOnlyContract_V1_3_0_Web3.js
var require_MultiSendCallOnlyContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSendCallOnly/v1.3.0/MultiSendCallOnlyContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyWeb3Contract_1 = __importDefault(require_MultiSendCallOnlyWeb3Contract());
    var MultiSendCallOnlyContract_V1_3_0_Web3 = class extends MultiSendCallOnlyWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendCallOnlyContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSendCallOnly/v1.4.1/MultiSendCallOnlyContract_V1_4_1_Web3.js
var require_MultiSendCallOnlyContract_V1_4_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/MultiSendCallOnly/v1.4.1/MultiSendCallOnlyContract_V1_4_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyWeb3Contract_1 = __importDefault(require_MultiSendCallOnlyWeb3Contract());
    var MultiSendCallOnlyContract_V1_4_1_Web3 = class extends MultiSendCallOnlyWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendCallOnlyContract_V1_4_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/utils/constants.js
var require_constants3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/utils/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENTINEL_ADDRESS = exports.EMPTY_DATA = exports.ZERO_ADDRESS = void 0;
    exports.ZERO_ADDRESS = `0x${"0".repeat(40)}`;
    exports.EMPTY_DATA = "0x";
    exports.SENTINEL_ADDRESS = "0x0000000000000000000000000000000000000001";
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/SafeContractWeb3.js
var require_SafeContractWeb3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/SafeContractWeb3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var utils_1 = require_utils15();
    var SafeContractWeb3 = class {
      constructor(contract) {
        this.contract = contract;
      }
      async getVersion() {
        return await this.contract.methods.VERSION().call();
      }
      getAddress() {
        return this.contract.options.address;
      }
      async getNonce() {
        return Number(await this.contract.methods.nonce().call());
      }
      async getThreshold() {
        return Number(await this.contract.methods.getThreshold().call());
      }
      async getOwners() {
        return this.contract.methods.getOwners().call();
      }
      async isOwner(address) {
        return this.contract.methods.isOwner(address).call();
      }
      async getTransactionHash(safeTransactionData) {
        return this.contract.methods.getTransactionHash(safeTransactionData.to, safeTransactionData.value, safeTransactionData.data, safeTransactionData.operation, safeTransactionData.safeTxGas, safeTransactionData.baseGas, safeTransactionData.gasPrice, safeTransactionData.gasToken, safeTransactionData.refundReceiver, safeTransactionData.nonce).call();
      }
      async approvedHashes(ownerAddress, hash) {
        return bignumber_1.BigNumber.from(await this.contract.methods.approvedHashes(ownerAddress, hash).call());
      }
      async approveHash(hash, options) {
        if (options && !options.gas) {
          options.gas = await this.estimateGas("approveHash", [hash], { ...options });
        }
        const txResponse = this.contract.methods.approveHash(hash).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async isValidTransaction(safeTransaction, options) {
        let isTxValid = false;
        try {
          if (options && !options.gas) {
            options.gas = await this.estimateGas("execTransaction", [
              safeTransaction.data.to,
              safeTransaction.data.value,
              safeTransaction.data.data,
              safeTransaction.data.operation,
              safeTransaction.data.safeTxGas,
              safeTransaction.data.baseGas,
              safeTransaction.data.gasPrice,
              safeTransaction.data.gasToken,
              safeTransaction.data.refundReceiver,
              safeTransaction.encodedSignatures()
            ], {
              ...options
            });
          }
          isTxValid = await this.contract.methods.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures()).call(options);
        } catch {
        }
        return isTxValid;
      }
      async execTransaction(safeTransaction, options) {
        if (options && !options.gas) {
          options.gas = await this.estimateGas("execTransaction", [
            safeTransaction.data.to,
            safeTransaction.data.value,
            safeTransaction.data.data,
            safeTransaction.data.operation,
            safeTransaction.data.safeTxGas,
            safeTransaction.data.baseGas,
            safeTransaction.data.gasPrice,
            safeTransaction.data.gasToken,
            safeTransaction.data.refundReceiver,
            safeTransaction.encodedSignatures()
          ], {
            ...options
          });
        }
        const txResponse = this.contract.methods.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures()).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.methods[methodName](...params).estimateGas(options)).toString();
      }
    };
    exports.default = SafeContractWeb3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/v1.0.0/SafeContract_V1_0_0_Web3.js
var require_SafeContract_V1_0_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/v1.0.0/SafeContract_V1_0_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils15();
    var constants_1 = require_constants3();
    var SafeContractWeb3_1 = __importDefault(require_SafeContractWeb3());
    var SafeContract_V1_0_0_Web3 = class extends SafeContractWeb3_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gas) {
          options.gas = await this.estimateGas("setup", [owners, threshold, to, data, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = this.contract.methods.setup(owners, threshold, to, data, paymentToken, payment, paymentReceiver).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.methods.getModules().call();
      }
      async isModuleEnabled(moduleAddress) {
        const modules = await this.getModules();
        const isModuleEnabled = modules.some((enabledModuleAddress) => (0, utils_1.sameString)(enabledModuleAddress, moduleAddress));
        return isModuleEnabled;
      }
    };
    exports.default = SafeContract_V1_0_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/v1.1.1/SafeContract_V1_1_1_Web3.js
var require_SafeContract_V1_1_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/v1.1.1/SafeContract_V1_1_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils15();
    var constants_1 = require_constants3();
    var SafeContractWeb3_1 = __importDefault(require_SafeContractWeb3());
    var SafeContract_V1_1_1_Web3 = class extends SafeContractWeb3_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gas) {
          options.gas = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = this.contract.methods.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.methods.getModules().call();
      }
      async isModuleEnabled(moduleAddress) {
        const modules = await this.getModules();
        const isModuleEnabled = modules.some((enabledModuleAddress) => (0, utils_1.sameString)(enabledModuleAddress, moduleAddress));
        return isModuleEnabled;
      }
    };
    exports.default = SafeContract_V1_1_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/v1.2.0/SafeContract_V1_2_0_Web3.js
var require_SafeContract_V1_2_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/v1.2.0/SafeContract_V1_2_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils15();
    var constants_1 = require_constants3();
    var SafeContractWeb3_1 = __importDefault(require_SafeContractWeb3());
    var SafeContract_V1_2_0_Web3 = class extends SafeContractWeb3_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gas) {
          options.gas = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = this.contract.methods.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.methods.getModules().call();
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.methods.isModuleEnabled(moduleAddress).call();
      }
    };
    exports.default = SafeContract_V1_2_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/v1.3.0/SafeContract_V1_3_0_Web3.js
var require_SafeContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/v1.3.0/SafeContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils15();
    var constants_1 = require_constants3();
    var SafeContractWeb3_1 = __importDefault(require_SafeContractWeb3());
    var SafeContract_V1_3_0_Web3 = class extends SafeContractWeb3_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gas) {
          options.gas = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = this.contract.methods.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        const { array } = await this.contract.methods.getModulesPaginated(constants_1.SENTINEL_ADDRESS, 10).call();
        return array;
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.methods.isModuleEnabled(moduleAddress).call();
      }
    };
    exports.default = SafeContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/v1.4.1/SafeContract_V1_4_1_Web3.js
var require_SafeContract_V1_4_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/Safe/v1.4.1/SafeContract_V1_4_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils15();
    var constants_1 = require_constants3();
    var SafeContractWeb3_1 = __importDefault(require_SafeContractWeb3());
    var SafeContract_V1_4_1_Web3 = class extends SafeContractWeb3_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gas) {
          options.gas = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = this.contract.methods.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        const { array } = await this.contract.methods.getModulesPaginated(constants_1.SENTINEL_ADDRESS, 10).call();
        return array;
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.methods.isModuleEnabled(moduleAddress).call();
      }
    };
    exports.default = SafeContract_V1_4_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SafeProxyFactory/SafeProxyFactoryWeb3Contract.js
var require_SafeProxyFactoryWeb3Contract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SafeProxyFactory/SafeProxyFactoryWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var utils_1 = require_utils15();
    var SafeProxyFactoryWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      async proxyCreationCode() {
        return this.contract.methods.proxyCreationCode().call();
      }
      async createProxy({ safeMasterCopyAddress, initializer, saltNonce, options, callback }) {
        var _a, _b, _c;
        if (bignumber_1.BigNumber.from(saltNonce).lt(0))
          throw new Error("saltNonce must be greater than or equal to 0");
        if (options && !options.gas) {
          options.gas = await this.estimateGas("createProxyWithNonce", [safeMasterCopyAddress, initializer, saltNonce], {
            ...options
          });
        }
        const txResponse = this.contract.methods.createProxyWithNonce(safeMasterCopyAddress, initializer, saltNonce).send(options);
        if (callback) {
          const txResult2 = await (0, utils_1.toTxResult)(txResponse);
          callback(txResult2.hash);
        }
        const txResult = await new Promise((resolve, reject) => txResponse.once("receipt", (receipt) => resolve(receipt)).catch(reject));
        const proxyAddress = (_c = (_b = (_a = txResult.events) == null ? void 0 : _a.ProxyCreation) == null ? void 0 : _b.returnValues) == null ? void 0 : _c.proxy;
        if (!proxyAddress) {
          throw new Error("SafeProxy was not deployed correctly");
        }
        return proxyAddress;
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.methods[methodName](...params).estimateGas(options)).toString();
      }
    };
    exports.default = SafeProxyFactoryWeb3Contract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SafeProxyFactory/v1.0.0/SafeProxyFactoryContract_V1_0_0_Web3.js
var require_SafeProxyFactoryContract_V1_0_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SafeProxyFactory/v1.0.0/SafeProxyFactoryContract_V1_0_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SafeProxyFactoryWeb3Contract_1 = __importDefault(require_SafeProxyFactoryWeb3Contract());
    var SafeProxyFactoryContract_V1_0_0_Web3 = class extends SafeProxyFactoryWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SafeProxyFactoryContract_V1_0_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SafeProxyFactory/v1.1.1/SafeProxyFactoryContract_V1_1_1_Web3.js
var require_SafeProxyFactoryContract_V1_1_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SafeProxyFactory/v1.1.1/SafeProxyFactoryContract_V1_1_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SafeProxyFactoryWeb3Contract_1 = __importDefault(require_SafeProxyFactoryWeb3Contract());
    var SafeProxyFactoryContract_V1_1_1_Web3 = class extends SafeProxyFactoryWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SafeProxyFactoryContract_V1_1_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SafeProxyFactory/v1.3.0/SafeProxyFactoryContract_V1_3_0_Web3.js
var require_SafeProxyFactoryContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SafeProxyFactory/v1.3.0/SafeProxyFactoryContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SafeProxyFactoryWeb3Contract_1 = __importDefault(require_SafeProxyFactoryWeb3Contract());
    var SafeProxyFactoryContract_V1_3_0_Web3 = class extends SafeProxyFactoryWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SafeProxyFactoryContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SafeProxyFactory/v1.4.1/SafeProxyFactoryContract_V1_4_1_Web3.js
var require_SafeProxyFactoryContract_V1_4_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SafeProxyFactory/v1.4.1/SafeProxyFactoryContract_V1_4_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SafeProxyFactoryWeb3Contract_1 = __importDefault(require_SafeProxyFactoryWeb3Contract());
    var SafeProxyFactoryContract_V1_4_1_Web3 = class extends SafeProxyFactoryWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SafeProxyFactoryContract_V1_4_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SignMessageLib/SignMessageLibWeb3Contract.js
var require_SignMessageLibWeb3Contract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SignMessageLib/SignMessageLibWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils15();
    var SignMessageLibWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      async signMessage(data, options) {
        if (options && !options.gas) {
          options.gas = await this.estimateGas("signMessage", [data], { ...options });
        }
        const txResponse = this.contract.methods.signMessage(data).send(options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getMessageHash(message) {
        return this.contract.methods.getMessageHash(message).call();
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.methods[methodName](...params).estimateGas(options)).toString();
      }
    };
    exports.default = SignMessageLibWeb3Contract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SignMessageLib/v1.3.0/SignMessageLibContract_V1_3_0_Web3.js
var require_SignMessageLibContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SignMessageLib/v1.3.0/SignMessageLibContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SignMessageLibWeb3Contract_1 = __importDefault(require_SignMessageLibWeb3Contract());
    var SignMessageLibContract_V1_3_0_Web3 = class extends SignMessageLibWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SignMessageLibContract_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SignMessageLib/v1.4.1/SignMessageLibContract_V1_4_1_Web3.js
var require_SignMessageLibContract_V1_4_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SignMessageLib/v1.4.1/SignMessageLibContract_V1_4_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SignMessageLibWeb3Contract_1 = __importDefault(require_SignMessageLibWeb3Contract());
    var SignMessageLibContract_V1_4_1_Web3 = class extends SignMessageLibWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SignMessageLibContract_V1_4_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SimulateTxAccessor/SimulateTxAccessorWeb3Contract.js
var require_SimulateTxAccessorWeb3Contract = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SimulateTxAccessor/SimulateTxAccessorWeb3Contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SimulateTxAccessorWeb3Contract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.options.address;
      }
      encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
      }
    };
    exports.default = SimulateTxAccessorWeb3Contract;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SimulateTxAccessor/v1.3.0/SimulateTxAccessorContract_V1_3_0_Web3.js
var require_SimulateTxAccessorContract_V1_3_0_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SimulateTxAccessor/v1.3.0/SimulateTxAccessorContract_V1_3_0_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SimulateTxAccessorWeb3Contract_1 = __importDefault(require_SimulateTxAccessorWeb3Contract());
    var SimulateTxAccessor_V1_3_0_Web3 = class extends SimulateTxAccessorWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SimulateTxAccessor_V1_3_0_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SimulateTxAccessor/v1.4.1/SimulateTxAccessorContract_V1_4_1_Web3.js
var require_SimulateTxAccessorContract_V1_4_1_Web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/SimulateTxAccessor/v1.4.1/SimulateTxAccessorContract_V1_4_1_Web3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SimulateTxAccessorWeb3Contract_1 = __importDefault(require_SimulateTxAccessorWeb3Contract());
    var SimulateTxAccessor_V1_4_1_Web3 = class extends SimulateTxAccessorWeb3Contract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SimulateTxAccessor_V1_4_1_Web3;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/contractInstancesWeb3.js
var require_contractInstancesWeb3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/contracts/contractInstancesWeb3.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSimulateTxAccessorContractInstance = exports.getCreateCallContractInstance = exports.getSignMessageLibContractInstance = exports.getSafeProxyFactoryContractInstance = exports.getMultiSendCallOnlyContractInstance = exports.getMultiSendContractInstance = exports.getCompatibilityFallbackHandlerContractInstance = exports.getSafeContractInstance = void 0;
    var CompatibilityFallbackHandler_V1_3_0_Web3_1 = __importDefault(require_CompatibilityFallbackHandler_V1_3_0_Web3());
    var CompatibilityFallbackHandler_V1_4_1_Web3_1 = __importDefault(require_CompatibilityFallbackHandler_V1_4_1_Web3());
    var CreateCallEthersContract_V1_3_0_Web3_1 = __importDefault(require_CreateCallEthersContract_V1_3_0_Web3());
    var CreateCallEthersContract_V1_4_1_Web3_1 = __importDefault(require_CreateCallEthersContract_V1_4_1_Web3());
    var MultiSendContract_V1_1_1_Web3_1 = __importDefault(require_MultiSendContract_V1_1_1_Web3());
    var MultiSendContract_V1_3_0_Web3_1 = __importDefault(require_MultiSendContract_V1_3_0_Web3());
    var MultiSendContract_V1_4_1_Web3_1 = __importDefault(require_MultiSendContract_V1_4_1_Web3());
    var MultiSendCallOnlyContract_V1_3_0_Web3_1 = __importDefault(require_MultiSendCallOnlyContract_V1_3_0_Web3());
    var MultiSendCallOnlyContract_V1_4_1_Web3_1 = __importDefault(require_MultiSendCallOnlyContract_V1_4_1_Web3());
    var SafeContract_V1_0_0_Web3_1 = __importDefault(require_SafeContract_V1_0_0_Web3());
    var SafeContract_V1_1_1_Web3_1 = __importDefault(require_SafeContract_V1_1_1_Web3());
    var SafeContract_V1_2_0_Web3_1 = __importDefault(require_SafeContract_V1_2_0_Web3());
    var SafeContract_V1_3_0_Web3_1 = __importDefault(require_SafeContract_V1_3_0_Web3());
    var SafeContract_V1_4_1_Web3_1 = __importDefault(require_SafeContract_V1_4_1_Web3());
    var SafeProxyFactoryContract_V1_0_0_Web3_1 = __importDefault(require_SafeProxyFactoryContract_V1_0_0_Web3());
    var SafeProxyFactoryContract_V1_1_1_Web3_1 = __importDefault(require_SafeProxyFactoryContract_V1_1_1_Web3());
    var SafeProxyFactoryContract_V1_3_0_Web3_1 = __importDefault(require_SafeProxyFactoryContract_V1_3_0_Web3());
    var SafeProxyFactoryContract_V1_4_1_Web3_1 = __importDefault(require_SafeProxyFactoryContract_V1_4_1_Web3());
    var SignMessageLibContract_V1_3_0_Web3_1 = __importDefault(require_SignMessageLibContract_V1_3_0_Web3());
    var SignMessageLibContract_V1_4_1_Web3_1 = __importDefault(require_SignMessageLibContract_V1_4_1_Web3());
    var SimulateTxAccessorContract_V1_3_0_Web3_1 = __importDefault(require_SimulateTxAccessorContract_V1_3_0_Web3());
    var SimulateTxAccessorContract_V1_4_1_Web3_1 = __importDefault(require_SimulateTxAccessorContract_V1_4_1_Web3());
    function getSafeContractInstance(safeVersion, safeContract) {
      switch (safeVersion) {
        case "1.4.1":
          return new SafeContract_V1_4_1_Web3_1.default(safeContract);
        case "1.3.0":
          return new SafeContract_V1_3_0_Web3_1.default(safeContract);
        case "1.2.0":
          return new SafeContract_V1_2_0_Web3_1.default(safeContract);
        case "1.1.1":
          return new SafeContract_V1_1_1_Web3_1.default(safeContract);
        case "1.0.0":
          return new SafeContract_V1_0_0_Web3_1.default(safeContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSafeContractInstance = getSafeContractInstance;
    function getCompatibilityFallbackHandlerContractInstance(safeVersion, compatibilityFallbackhandlerContract) {
      switch (safeVersion) {
        case "1.4.1":
          return new CompatibilityFallbackHandler_V1_4_1_Web3_1.default(compatibilityFallbackhandlerContract);
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
          return new CompatibilityFallbackHandler_V1_3_0_Web3_1.default(compatibilityFallbackhandlerContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getCompatibilityFallbackHandlerContractInstance = getCompatibilityFallbackHandlerContractInstance;
    function getMultiSendContractInstance(safeVersion, multiSendContract) {
      switch (safeVersion) {
        case "1.4.1":
          return new MultiSendContract_V1_4_1_Web3_1.default(multiSendContract);
        case "1.3.0":
          return new MultiSendContract_V1_3_0_Web3_1.default(multiSendContract);
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          return new MultiSendContract_V1_1_1_Web3_1.default(multiSendContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getMultiSendContractInstance = getMultiSendContractInstance;
    function getMultiSendCallOnlyContractInstance(safeVersion, multiSendCallOnlyContract) {
      switch (safeVersion) {
        case "1.4.1":
          return new MultiSendCallOnlyContract_V1_4_1_Web3_1.default(multiSendCallOnlyContract);
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          return new MultiSendCallOnlyContract_V1_3_0_Web3_1.default(multiSendCallOnlyContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getMultiSendCallOnlyContractInstance = getMultiSendCallOnlyContractInstance;
    function getSafeProxyFactoryContractInstance(safeVersion, safeProxyFactoryContract) {
      switch (safeVersion) {
        case "1.4.1":
          return new SafeProxyFactoryContract_V1_4_1_Web3_1.default(safeProxyFactoryContract);
        case "1.3.0":
          return new SafeProxyFactoryContract_V1_3_0_Web3_1.default(safeProxyFactoryContract);
        case "1.2.0":
        case "1.1.1":
          return new SafeProxyFactoryContract_V1_1_1_Web3_1.default(safeProxyFactoryContract);
        case "1.0.0":
          return new SafeProxyFactoryContract_V1_0_0_Web3_1.default(safeProxyFactoryContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSafeProxyFactoryContractInstance = getSafeProxyFactoryContractInstance;
    function getSignMessageLibContractInstance(safeVersion, signMessageLibContract) {
      switch (safeVersion) {
        case "1.4.1":
          return new SignMessageLibContract_V1_4_1_Web3_1.default(signMessageLibContract);
        case "1.3.0":
          return new SignMessageLibContract_V1_3_0_Web3_1.default(signMessageLibContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSignMessageLibContractInstance = getSignMessageLibContractInstance;
    function getCreateCallContractInstance(safeVersion, createCallContract) {
      switch (safeVersion) {
        case "1.4.1":
          return new CreateCallEthersContract_V1_4_1_Web3_1.default(createCallContract);
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          return new CreateCallEthersContract_V1_3_0_Web3_1.default(createCallContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getCreateCallContractInstance = getCreateCallContractInstance;
    function getSimulateTxAccessorContractInstance(safeVersion, simulateTxAccessorContract) {
      switch (safeVersion) {
        case "1.4.1":
          return new SimulateTxAccessorContract_V1_4_1_Web3_1.default(simulateTxAccessorContract);
        case "1.3.0":
          return new SimulateTxAccessorContract_V1_3_0_Web3_1.default(simulateTxAccessorContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSimulateTxAccessorContractInstance = getSimulateTxAccessorContractInstance;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/Web3Adapter.js
var require_Web3Adapter = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/Web3Adapter.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _Web3Adapter_web3;
    var _Web3Adapter_signerAddress;
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var utils_1 = require_utils13();
    var contractInstancesWeb3_1 = require_contractInstancesWeb3();
    var Web3Adapter = class {
      constructor({ web3, signerAddress }) {
        _Web3Adapter_web3.set(this, void 0);
        _Web3Adapter_signerAddress.set(this, void 0);
        if (!web3) {
          throw new Error("web3 property missing from options");
        }
        __classPrivateFieldSet(this, _Web3Adapter_web3, web3, "f");
        __classPrivateFieldSet(this, _Web3Adapter_signerAddress, signerAddress, "f");
      }
      isAddress(address) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").utils.isAddress(address);
      }
      async getEip3770Address(fullAddress) {
        const chainId = await this.getChainId();
        return (0, utils_1.validateEip3770Address)(fullAddress, chainId);
      }
      async getBalance(address, defaultBlock) {
        const balance = defaultBlock ? await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getBalance(address, defaultBlock) : await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getBalance(address);
        return bignumber_1.BigNumber.from(balance);
      }
      async getNonce(address, defaultBlock) {
        const nonce = defaultBlock ? await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getTransactionCount(address, defaultBlock) : await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getTransactionCount(address);
        return nonce;
      }
      async getChainId() {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getChainId();
      }
      getChecksummedAddress(address) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").utils.toChecksumAddress(address);
      }
      async getSafeContract({ safeVersion, singletonDeployment, customContractAddress, customContractAbi }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid SafeProxy contract address");
        }
        const safeContract = this.getContract(contractAddress, customContractAbi ?? (singletonDeployment == null ? void 0 : singletonDeployment.abi));
        return (0, contractInstancesWeb3_1.getSafeContractInstance)(safeVersion, safeContract);
      }
      async getSafeProxyFactoryContract({ safeVersion, singletonDeployment, customContractAddress, customContractAbi }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid SafeProxyFactory contract address");
        }
        const proxyFactoryContract = this.getContract(contractAddress, customContractAbi ?? (singletonDeployment == null ? void 0 : singletonDeployment.abi));
        return (0, contractInstancesWeb3_1.getSafeProxyFactoryContractInstance)(safeVersion, proxyFactoryContract);
      }
      async getMultiSendContract({ safeVersion, singletonDeployment, customContractAddress, customContractAbi }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid MultiSend contract address");
        }
        const multiSendContract = this.getContract(contractAddress, customContractAbi ?? (singletonDeployment == null ? void 0 : singletonDeployment.abi));
        return (0, contractInstancesWeb3_1.getMultiSendContractInstance)(safeVersion, multiSendContract);
      }
      async getMultiSendCallOnlyContract({ safeVersion, singletonDeployment, customContractAddress, customContractAbi }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid MultiSendCallOnly contract address");
        }
        const multiSendContract = this.getContract(contractAddress, customContractAbi ?? (singletonDeployment == null ? void 0 : singletonDeployment.abi));
        return (0, contractInstancesWeb3_1.getMultiSendCallOnlyContractInstance)(safeVersion, multiSendContract);
      }
      async getCompatibilityFallbackHandlerContract({ safeVersion, singletonDeployment, customContractAddress, customContractAbi }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid Compatibility Fallback Handler contract address");
        }
        const multiSendContract = this.getContract(contractAddress, customContractAbi ?? (singletonDeployment == null ? void 0 : singletonDeployment.abi));
        return (0, contractInstancesWeb3_1.getCompatibilityFallbackHandlerContractInstance)(safeVersion, multiSendContract);
      }
      async getSignMessageLibContract({ safeVersion, singletonDeployment, customContractAddress, customContractAbi }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid SignMessageLib contract address");
        }
        const signMessageLibContract = this.getContract(contractAddress, customContractAbi ?? (singletonDeployment == null ? void 0 : singletonDeployment.abi));
        return (0, contractInstancesWeb3_1.getSignMessageLibContractInstance)(safeVersion, signMessageLibContract);
      }
      async getCreateCallContract({ safeVersion, singletonDeployment, customContractAddress, customContractAbi }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid CreateCall contract address");
        }
        const createCallContract = this.getContract(contractAddress, customContractAbi ?? (singletonDeployment == null ? void 0 : singletonDeployment.abi));
        return (0, contractInstancesWeb3_1.getCreateCallContractInstance)(safeVersion, createCallContract);
      }
      async getSimulateTxAccessorContract({ safeVersion, singletonDeployment, customContractAddress, customContractAbi }) {
        const chainId = await this.getChainId();
        const contractAddress = customContractAddress ?? (singletonDeployment == null ? void 0 : singletonDeployment.networkAddresses[chainId]);
        if (!contractAddress) {
          throw new Error("Invalid SimulateTxAccessor contract address");
        }
        const simulateTxAccessorContract = this.getContract(contractAddress, customContractAbi ?? (singletonDeployment == null ? void 0 : singletonDeployment.abi));
        return (0, contractInstancesWeb3_1.getSimulateTxAccessorContractInstance)(safeVersion, simulateTxAccessorContract);
      }
      getContract(address, abi, options) {
        return new (__classPrivateFieldGet(this, _Web3Adapter_web3, "f")).eth.Contract(abi, address, options);
      }
      async getContractCode(address, defaultBlock) {
        const code = defaultBlock ? await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getCode(address, defaultBlock) : await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getCode(address);
        return code;
      }
      async isContractDeployed(address, defaultBlock) {
        const contractCode = await this.getContractCode(address, defaultBlock);
        return contractCode !== "0x";
      }
      async getStorageAt(address, position) {
        const content = await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getStorageAt(address, position);
        const decodedContent = this.decodeParameters(["address"], content);
        return decodedContent[0];
      }
      async getTransaction(transactionHash) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.getTransaction(transactionHash);
      }
      async getSignerAddress() {
        return __classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f");
      }
      signMessage(message) {
        if (!__classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f")) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.sign(message, __classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f"));
      }
      async signTypedData(safeTransactionEIP712Args, methodVersion) {
        if (!__classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f")) {
          throw new Error("This method requires a signer");
        }
        const typedData = (0, utils_1.generateTypedData)(safeTransactionEIP712Args);
        let method = "eth_signTypedData_v3";
        if (methodVersion === "v4") {
          method = "eth_signTypedData_v4";
        } else if (!methodVersion) {
          method = "eth_signTypedData";
        }
        const jsonTypedData = JSON.stringify(typedData);
        const signedTypedData = {
          jsonrpc: "2.0",
          method,
          params: methodVersion === "v3" || methodVersion === "v4" ? [__classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f"), jsonTypedData] : [jsonTypedData, __classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f")],
          from: __classPrivateFieldGet(this, _Web3Adapter_signerAddress, "f"),
          id: (/* @__PURE__ */ new Date()).getTime()
        };
        return new Promise((resolve, reject) => {
          const provider = __classPrivateFieldGet(this, _Web3Adapter_web3, "f").currentProvider;
          function callback(err, val) {
            if (err) {
              reject(err);
              return;
            }
            if ((val == null ? void 0 : val.result) == null) {
              reject(new Error("EIP-712 is not supported by user's wallet"));
              return;
            }
            resolve(val.result);
          }
          provider.send(signedTypedData, callback);
        });
      }
      async estimateGas(transaction, callback) {
        return (await __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.estimateGas(transaction, callback)).toString();
      }
      call(transaction, defaultBlock) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.call(transaction, defaultBlock);
      }
      encodeParameters(types, values) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.abi.encodeParameters(types, values);
      }
      decodeParameters(types, values) {
        return __classPrivateFieldGet(this, _Web3Adapter_web3, "f").eth.abi.decodeParameters(types, values);
      }
    };
    _Web3Adapter_web3 = /* @__PURE__ */ new WeakMap(), _Web3Adapter_signerAddress = /* @__PURE__ */ new WeakMap();
    exports.default = Web3Adapter;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/index.js
var require_web3 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/adapters/web3/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Web3Adapter = exports.SignMessageLibWeb3Contract = exports.SafeProxyFactoryWeb3Contract = exports.SafeContractWeb3 = exports.MultiSendWeb3Contract = exports.MultiSendCallOnlyWeb3Contract = exports.CreateCallWeb3Contract = void 0;
    var Web3Adapter_1 = __importDefault(require_Web3Adapter());
    exports.Web3Adapter = Web3Adapter_1.default;
    var CreateCallWeb3Contract_1 = __importDefault(require_CreateCallWeb3Contract());
    exports.CreateCallWeb3Contract = CreateCallWeb3Contract_1.default;
    var MultiSendWeb3Contract_1 = __importDefault(require_MultiSendWeb3Contract());
    exports.MultiSendWeb3Contract = MultiSendWeb3Contract_1.default;
    var MultiSendCallOnlyWeb3Contract_1 = __importDefault(require_MultiSendCallOnlyWeb3Contract());
    exports.MultiSendCallOnlyWeb3Contract = MultiSendCallOnlyWeb3Contract_1.default;
    var SafeContractWeb3_1 = __importDefault(require_SafeContractWeb3());
    exports.SafeContractWeb3 = SafeContractWeb3_1.default;
    var SafeProxyFactoryWeb3Contract_1 = __importDefault(require_SafeProxyFactoryWeb3Contract());
    exports.SafeProxyFactoryWeb3Contract = SafeProxyFactoryWeb3Contract_1.default;
    var SignMessageLibWeb3Contract_1 = __importDefault(require_SignMessageLibWeb3Contract());
    exports.SignMessageLibWeb3Contract = SignMessageLibWeb3Contract_1.default;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/safeFactory/index.js
var require_safeFactory = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/safeFactory/index.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _SafeFactory_contractNetworks;
    var _SafeFactory_isL1SafeMasterCopy;
    var _SafeFactory_safeVersion;
    var _SafeFactory_ethAdapter;
    var _SafeFactory_safeProxyFactoryContract;
    var _SafeFactory_safeContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var Safe_1 = __importDefault(require_Safe());
    var config_1 = require_config();
    var safeDeploymentContracts_1 = require_safeDeploymentContracts();
    var utils_1 = require_utils7();
    var SafeFactory = class _SafeFactory {
      constructor() {
        _SafeFactory_contractNetworks.set(this, void 0);
        _SafeFactory_isL1SafeMasterCopy.set(this, void 0);
        _SafeFactory_safeVersion.set(this, void 0);
        _SafeFactory_ethAdapter.set(this, void 0);
        _SafeFactory_safeProxyFactoryContract.set(this, void 0);
        _SafeFactory_safeContract.set(this, void 0);
      }
      static async create({ ethAdapter, safeVersion = config_1.DEFAULT_SAFE_VERSION, isL1SafeMasterCopy = false, contractNetworks }) {
        const safeFactorySdk = new _SafeFactory();
        await safeFactorySdk.init({ ethAdapter, safeVersion, isL1SafeMasterCopy, contractNetworks });
        return safeFactorySdk;
      }
      async init({ ethAdapter, safeVersion, isL1SafeMasterCopy, contractNetworks }) {
        __classPrivateFieldSet(this, _SafeFactory_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _SafeFactory_safeVersion, safeVersion, "f");
        __classPrivateFieldSet(this, _SafeFactory_isL1SafeMasterCopy, isL1SafeMasterCopy, "f");
        __classPrivateFieldSet(this, _SafeFactory_contractNetworks, contractNetworks, "f");
        const chainId = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChainId();
        const customContracts = contractNetworks == null ? void 0 : contractNetworks[chainId];
        __classPrivateFieldSet(this, _SafeFactory_safeProxyFactoryContract, await (0, safeDeploymentContracts_1.getProxyFactoryContract)({
          ethAdapter,
          safeVersion,
          customContracts
        }), "f");
        __classPrivateFieldSet(this, _SafeFactory_safeContract, await (0, safeDeploymentContracts_1.getSafeContract)({
          ethAdapter,
          safeVersion,
          isL1SafeMasterCopy,
          customContracts
        }), "f");
      }
      getEthAdapter() {
        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f");
      }
      getSafeVersion() {
        return __classPrivateFieldGet(this, _SafeFactory_safeVersion, "f");
      }
      getAddress() {
        return __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, "f").getAddress();
      }
      async getChainId() {
        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChainId();
      }
      async predictSafeAddress(safeAccountConfig, saltNonce = utils_1.PREDETERMINED_SALT_NONCE) {
        var _a;
        const chainId = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChainId();
        const customContracts = (_a = __classPrivateFieldGet(this, _SafeFactory_contractNetworks, "f")) == null ? void 0 : _a[chainId];
        const safeVersion = __classPrivateFieldGet(this, _SafeFactory_safeVersion, "f");
        const safeDeploymentConfig = { saltNonce, safeVersion };
        return (0, utils_1.predictSafeAddress)({
          ethAdapter: __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f"),
          safeAccountConfig,
          safeDeploymentConfig,
          isL1SafeMasterCopy: __classPrivateFieldGet(this, _SafeFactory_isL1SafeMasterCopy, "f"),
          customContracts
        });
      }
      async deploySafe({ safeAccountConfig, saltNonce = utils_1.PREDETERMINED_SALT_NONCE, options, callback }) {
        var _a;
        (0, utils_1.validateSafeAccountConfig)(safeAccountConfig);
        (0, utils_1.validateSafeDeploymentConfig)({ saltNonce });
        const signerAddress = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const chainId = await this.getChainId();
        const customContracts = (_a = __classPrivateFieldGet(this, _SafeFactory_contractNetworks, "f")) == null ? void 0 : _a[chainId];
        const initializer = await (0, utils_1.encodeSetupCallData)({
          ethAdapter: __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f"),
          safeAccountConfig,
          safeContract: __classPrivateFieldGet(this, _SafeFactory_safeContract, "f"),
          customContracts
        });
        if ((options == null ? void 0 : options.gas) && (options == null ? void 0 : options.gasLimit)) {
          throw new Error("Cannot specify gas and gasLimit together in transaction options");
        }
        const safeAddress = await __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, "f").createProxy({
          safeMasterCopyAddress: __classPrivateFieldGet(this, _SafeFactory_safeContract, "f").getAddress(),
          initializer,
          saltNonce,
          options: {
            from: signerAddress,
            ...options
          },
          callback
        });
        const isContractDeployed = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").isContractDeployed(safeAddress);
        if (!isContractDeployed) {
          throw new Error("SafeProxy contract is not deployed on the current network");
        }
        const safe = await Safe_1.default.create({
          ethAdapter: __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f"),
          safeAddress,
          isL1SafeMasterCopy: __classPrivateFieldGet(this, _SafeFactory_isL1SafeMasterCopy, "f"),
          contractNetworks: __classPrivateFieldGet(this, _SafeFactory_contractNetworks, "f")
        });
        return safe;
      }
    };
    _SafeFactory_contractNetworks = /* @__PURE__ */ new WeakMap(), _SafeFactory_isL1SafeMasterCopy = /* @__PURE__ */ new WeakMap(), _SafeFactory_safeVersion = /* @__PURE__ */ new WeakMap(), _SafeFactory_ethAdapter = /* @__PURE__ */ new WeakMap(), _SafeFactory_safeProxyFactoryContract = /* @__PURE__ */ new WeakMap(), _SafeFactory_safeContract = /* @__PURE__ */ new WeakMap();
    exports.default = SafeFactory;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/utils/erc-20/index.js
var require_erc_20 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/utils/erc-20/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createERC20TokenTransferTransaction = exports.isGasTokenCompatibleWithHandlePayment = exports.getERC20Decimals = void 0;
    var abi_1 = (init_lib5(), __toCommonJS(lib_exports5));
    var constants_1 = require_constants();
    var ERC20_ABI = [
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function decimals() view returns (uint8)"
    ];
    async function getERC20Decimals(tokenAddress, safe) {
      const ethAdapter = safe.getEthAdapter();
      const erc20Interface = new abi_1.Interface(ERC20_ABI);
      const getTokenDecimalsTransaction = {
        to: tokenAddress,
        from: tokenAddress,
        value: "0",
        data: erc20Interface.encodeFunctionData("decimals")
      };
      const response = await ethAdapter.call(getTokenDecimalsTransaction);
      const decimals = Number(response);
      if (Number.isNaN(decimals)) {
        throw new Error("Invalid ERC-20 decimals");
      }
      return decimals;
    }
    exports.getERC20Decimals = getERC20Decimals;
    var STANDARD_ERC20_DECIMALS = 18;
    async function isGasTokenCompatibleWithHandlePayment(gasToken, safe) {
      const isNativeToken = gasToken === constants_1.ZERO_ADDRESS;
      if (isNativeToken) {
        return true;
      }
      const gasTokenDecimals = await getERC20Decimals(gasToken, safe);
      const hasTokenStandardERC20Decimals = gasTokenDecimals === STANDARD_ERC20_DECIMALS;
      return hasTokenStandardERC20Decimals;
    }
    exports.isGasTokenCompatibleWithHandlePayment = isGasTokenCompatibleWithHandlePayment;
    function createERC20TokenTransferTransaction(tokenAddress, toAddress, amount) {
      const erc20Interface = new abi_1.Interface(ERC20_ABI);
      const transferTransaction = {
        to: tokenAddress,
        value: "0",
        data: erc20Interface.encodeFunctionData("transfer", [toAddress, amount])
      };
      return transferTransaction;
    }
    exports.createERC20TokenTransferTransaction = createERC20TokenTransferTransaction;
  }
});

// node_modules/@safe-global/protocol-kit/dist/src/index.js
var require_src6 = __commonJS({
  "node_modules/@safe-global/protocol-kit/dist/src/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.standardizeSafeTransactionData = exports.predictSafeAddress = exports.isGasTokenCompatibleWithHandlePayment = exports.getSignMessageLibContract = exports.getSafeContract = exports.getProxyFactoryContract = exports.getMultiSendContract = exports.getMultiSendCallOnlyContract = exports.getERC20Decimals = exports.getCreateCallContract = exports.getCompatibilityFallbackHandlerContract = exports.encodeSetupCallData = exports.encodeMultiSendData = exports.encodeCreateProxyWithNonce = exports.Web3Adapter = exports.SignMessageLibWeb3Contract = exports.SignMessageLibEthersContract = exports.SafeProxyFactoryWeb3Contract = exports.SafeProxyFactoryEthersContract = exports.SafeFactory = exports.SafeContractWeb3 = exports.SafeContractEthers = exports.PREDETERMINED_SALT_NONCE = exports.MultiSendWeb3Contract = exports.MultiSendEthersContract = exports.MultiSendCallOnlyWeb3Contract = exports.MultiSendCallOnlyEthersContract = exports.EthersAdapter = exports.EthSafeSignature = exports.DEFAULT_SAFE_VERSION = exports.createERC20TokenTransferTransaction = exports.CreateCallWeb3Contract = exports.CreateCallEthersContract = exports.ContractManager = exports.estimateSafeDeploymentGas = exports.estimateSafeTxGas = exports.estimateTxGas = exports.estimateTxBaseGas = void 0;
    var Safe_1 = __importDefault(require_Safe());
    var ethers_1 = require_ethers();
    Object.defineProperty(exports, "CreateCallEthersContract", { enumerable: true, get: function() {
      return ethers_1.CreateCallEthersContract;
    } });
    Object.defineProperty(exports, "EthersAdapter", { enumerable: true, get: function() {
      return ethers_1.EthersAdapter;
    } });
    Object.defineProperty(exports, "MultiSendCallOnlyEthersContract", { enumerable: true, get: function() {
      return ethers_1.MultiSendCallOnlyEthersContract;
    } });
    Object.defineProperty(exports, "MultiSendEthersContract", { enumerable: true, get: function() {
      return ethers_1.MultiSendEthersContract;
    } });
    Object.defineProperty(exports, "SafeContractEthers", { enumerable: true, get: function() {
      return ethers_1.SafeContractEthers;
    } });
    Object.defineProperty(exports, "SafeProxyFactoryEthersContract", { enumerable: true, get: function() {
      return ethers_1.SafeProxyFactoryEthersContract;
    } });
    Object.defineProperty(exports, "SignMessageLibEthersContract", { enumerable: true, get: function() {
      return ethers_1.SignMessageLibEthersContract;
    } });
    var web3_1 = require_web3();
    Object.defineProperty(exports, "CreateCallWeb3Contract", { enumerable: true, get: function() {
      return web3_1.CreateCallWeb3Contract;
    } });
    Object.defineProperty(exports, "MultiSendCallOnlyWeb3Contract", { enumerable: true, get: function() {
      return web3_1.MultiSendCallOnlyWeb3Contract;
    } });
    Object.defineProperty(exports, "MultiSendWeb3Contract", { enumerable: true, get: function() {
      return web3_1.MultiSendWeb3Contract;
    } });
    Object.defineProperty(exports, "SafeContractWeb3", { enumerable: true, get: function() {
      return web3_1.SafeContractWeb3;
    } });
    Object.defineProperty(exports, "SafeProxyFactoryWeb3Contract", { enumerable: true, get: function() {
      return web3_1.SafeProxyFactoryWeb3Contract;
    } });
    Object.defineProperty(exports, "SignMessageLibWeb3Contract", { enumerable: true, get: function() {
      return web3_1.SignMessageLibWeb3Contract;
    } });
    Object.defineProperty(exports, "Web3Adapter", { enumerable: true, get: function() {
      return web3_1.Web3Adapter;
    } });
    var config_1 = require_config();
    Object.defineProperty(exports, "DEFAULT_SAFE_VERSION", { enumerable: true, get: function() {
      return config_1.DEFAULT_SAFE_VERSION;
    } });
    var safeDeploymentContracts_1 = require_safeDeploymentContracts();
    Object.defineProperty(exports, "getCompatibilityFallbackHandlerContract", { enumerable: true, get: function() {
      return safeDeploymentContracts_1.getCompatibilityFallbackHandlerContract;
    } });
    Object.defineProperty(exports, "getCreateCallContract", { enumerable: true, get: function() {
      return safeDeploymentContracts_1.getCreateCallContract;
    } });
    Object.defineProperty(exports, "getMultiSendCallOnlyContract", { enumerable: true, get: function() {
      return safeDeploymentContracts_1.getMultiSendCallOnlyContract;
    } });
    Object.defineProperty(exports, "getMultiSendContract", { enumerable: true, get: function() {
      return safeDeploymentContracts_1.getMultiSendContract;
    } });
    Object.defineProperty(exports, "getProxyFactoryContract", { enumerable: true, get: function() {
      return safeDeploymentContracts_1.getProxyFactoryContract;
    } });
    Object.defineProperty(exports, "getSafeContract", { enumerable: true, get: function() {
      return safeDeploymentContracts_1.getSafeContract;
    } });
    Object.defineProperty(exports, "getSignMessageLibContract", { enumerable: true, get: function() {
      return safeDeploymentContracts_1.getSignMessageLibContract;
    } });
    var utils_1 = require_utils7();
    Object.defineProperty(exports, "PREDETERMINED_SALT_NONCE", { enumerable: true, get: function() {
      return utils_1.PREDETERMINED_SALT_NONCE;
    } });
    Object.defineProperty(exports, "encodeCreateProxyWithNonce", { enumerable: true, get: function() {
      return utils_1.encodeCreateProxyWithNonce;
    } });
    Object.defineProperty(exports, "encodeSetupCallData", { enumerable: true, get: function() {
      return utils_1.encodeSetupCallData;
    } });
    Object.defineProperty(exports, "predictSafeAddress", { enumerable: true, get: function() {
      return utils_1.predictSafeAddress;
    } });
    var contractManager_1 = __importDefault(require_contractManager());
    exports.ContractManager = contractManager_1.default;
    var safeFactory_1 = __importDefault(require_safeFactory());
    exports.SafeFactory = safeFactory_1.default;
    var utils_2 = require_utils13();
    Object.defineProperty(exports, "EthSafeSignature", { enumerable: true, get: function() {
      return utils_2.EthSafeSignature;
    } });
    Object.defineProperty(exports, "estimateTxBaseGas", { enumerable: true, get: function() {
      return utils_2.estimateTxBaseGas;
    } });
    Object.defineProperty(exports, "estimateTxGas", { enumerable: true, get: function() {
      return utils_2.estimateTxGas;
    } });
    Object.defineProperty(exports, "estimateSafeTxGas", { enumerable: true, get: function() {
      return utils_2.estimateSafeTxGas;
    } });
    Object.defineProperty(exports, "estimateSafeDeploymentGas", { enumerable: true, get: function() {
      return utils_2.estimateSafeDeploymentGas;
    } });
    var utils_3 = require_utils12();
    Object.defineProperty(exports, "encodeMultiSendData", { enumerable: true, get: function() {
      return utils_3.encodeMultiSendData;
    } });
    Object.defineProperty(exports, "standardizeSafeTransactionData", { enumerable: true, get: function() {
      return utils_3.standardizeSafeTransactionData;
    } });
    var erc_20_1 = require_erc_20();
    Object.defineProperty(exports, "getERC20Decimals", { enumerable: true, get: function() {
      return erc_20_1.getERC20Decimals;
    } });
    Object.defineProperty(exports, "isGasTokenCompatibleWithHandlePayment", { enumerable: true, get: function() {
      return erc_20_1.isGasTokenCompatibleWithHandlePayment;
    } });
    Object.defineProperty(exports, "createERC20TokenTransferTransaction", { enumerable: true, get: function() {
      return erc_20_1.createERC20TokenTransferTransaction;
    } });
    exports.default = Safe_1.default;
  }
});

// node_modules/@thirdweb-dev/wallets/evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js
init_lib9();
var import_safe_ethers_adapters = __toESM(require_src3());
var import_protocol_kit = __toESM(require_src6());
var CHAIN_ID_TO_GNOSIS_SERVER_URL = {
  // mainnet
  1: "https://safe-transaction-mainnet.safe.global",
  // Sepolia
  11155111: "https://safe-transaction-sepolia.safe.global",
  // optimism
  10: "https://safe-transaction-optimism.safe.global",
  // bsc
  56: "https://safe-transaction-bsc.safe.global",
  // gnosis
  100: "https://safe-transaction-gnosis-chain.safe.global",
  // polygon
  137: "https://safe-transaction-polygon.safe.global",
  // avalanche
  43114: "https://safe-transaction-avalanche.safe.global",
  // arbitrum
  42161: "https://safe-transaction-arbitrum.safe.global",
  // celo
  42220: "https://safe-transaction-celo.safe.global",
  // Base mainnet
  8453: "https://safe-transaction-base.safe.global",
  // aurora
  1313161554: "https://safe-transaction-aurora.safe.global",
  //  Polygon zkEVM
  1101: "https://safe-transaction-zkevm.safe.global",
  //  ZkSync Mainnet
  324: "https://safe-transaction-zksync.safe.global"
};
var CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS = {
  // mainnet
  1: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // polygon
  137: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // bsc
  56: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // arbitrum
  42161: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // aurora
  1313161554: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // avalanche
  43114: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  // optimism
  10: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  // celo
  42220: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  // gnosis chain - https://docs.safe.global/smart-account-supported-networks/v1.3.0#gnosis
  100: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // Sepolia - https://docs.safe.global/smart-account-supported-networks/v1.3.0#sepolia
  11155111: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  // base mainnet - https://docs.safe.global/smart-account-supported-networks/v1.3.0#base
  8453: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  // Polygon zkEVM - https://docs.safe.global/smart-account-supported-networks/v1.3.0#polygon-zkevm
  1101: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  // ZkSync Mainnet - https://docs.safe.global/smart-account-supported-networks/v1.3.0#zksync-mainnet
  324: "0x357147caf9C0cCa67DfA0CF5369318d8193c8407"
};
var SIGN_MESSAGE_LIB_ABI = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "bytes32",
    name: "msgHash",
    type: "bytes32"
  }],
  name: "SignMsg",
  type: "event"
}, {
  inputs: [{
    internalType: "bytes",
    name: "message",
    type: "bytes"
  }],
  name: "getMessageHash",
  outputs: [{
    internalType: "bytes32",
    name: "",
    type: "bytes32"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "bytes",
    name: "_data",
    type: "bytes"
  }],
  name: "signMessage",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}];
var __IS_SERVER__ = false;
var SafeConnector = class _SafeConnector extends Connector {
  // config
  // private options: SafeOptions;
  constructor() {
    super();
    _defineProperty(this, "supportedChains", _SafeConnector.supportedChains);
    _defineProperty(this, "id", "safe-wallet");
    _defineProperty(this, "ready", !__IS_SERVER__);
    _defineProperty(this, "name", "Safe Wallet");
    {
      this.ready = true;
    }
  }
  async connect(args) {
    if (!(args.chain.chainId in CHAIN_ID_TO_GNOSIS_SERVER_URL)) {
      throw new Error("Chain not supported by Safe");
    }
    this.safeSigner = await this.createSafeSigner(args);
    return await this.getAddress();
  }
  async createSafeSigner(params) {
    this.personalWallet = params.personalWallet;
    const signer = await params.personalWallet.getSigner();
    const safeAddress = params.safeAddress;
    const safeChainId = params.chain.chainId;
    if (!signer) {
      throw new Error("cannot create Gnosis Safe signer without a personal signer");
    }
    const signerChainId = await signer.getChainId();
    if (signerChainId !== safeChainId) {
      throw new Error("chainId of personal signer has to match safe chainId");
    }
    if (!safeAddress) {
      throw new Error("safeAddress is required");
    }
    if (!safeChainId) {
      throw new Error("safeChainId is required");
    }
    const serverUrl = CHAIN_ID_TO_GNOSIS_SERVER_URL[safeChainId];
    const signMessageLibAddress = CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS[safeChainId];
    if (!serverUrl || !signMessageLibAddress) {
      throw new Error("Chain not supported");
    }
    const ethAdapter = new import_protocol_kit.EthersAdapter({
      ethers: ethers_exports,
      signerOrProvider: signer
    });
    const safe = await import_protocol_kit.default.create({
      ethAdapter,
      safeAddress
    });
    const service = new import_safe_ethers_adapters.SafeService(serverUrl);
    const safeSigner = new import_safe_ethers_adapters.SafeEthersSigner(safe, service, signer.provider);
    safeSigner.signMessage = async (message) => {
      var _a;
      const contract = new ethers_exports.BaseContract(signMessageLibAddress, SIGN_MESSAGE_LIB_ABI);
      const data = contract.interface.encodeFunctionData("signMessage", [ethers_exports.utils.hashMessage(message)]);
      const to = signMessageLibAddress;
      const value = "0";
      const operation = 1;
      const safeTxGas = 5e4;
      const baseGas = 5e4;
      const gasPrice = 0;
      const gasToken = ethers_exports.constants.AddressZero;
      const refundReceiver = ethers_exports.constants.AddressZero;
      const safeTx = await safe.createTransaction({
        safeTransactionData: {
          to,
          value,
          operation,
          data,
          baseGas,
          safeTxGas,
          gasPrice,
          gasToken,
          refundReceiver
        }
      });
      const safeTxHash = await safe.getTransactionHash(safeTx);
      const safeSignature = await safe.signTransactionHash(safeTxHash);
      await service.proposeTx(await safe.getAddress(), safeTxHash, safeTx, safeSignature);
      while (true) {
        try {
          const txDetails = await service.getSafeTxDetails(safeTxHash);
          if (txDetails.transactionHash) {
            await ((_a = signer.provider) == null ? void 0 : _a.waitForTransaction(txDetails.transactionHash));
            break;
          }
        } catch (e) {
        }
        await new Promise((resolve) => setTimeout(resolve, 5e3));
      }
      return "0x";
    };
    this.previousConnector = params.personalWallet;
    return safeSigner;
  }
  async disconnect() {
    this.safeSigner = void 0;
    this.previousConnector = void 0;
    return void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    return await signer.getAddress();
  }
  async getChainId() {
    return (await this.getSigner()).getChainId();
  }
  async getProvider() {
    const provider = (await this.getSigner()).provider;
    if (!provider) {
      throw new Error("No provider available");
    }
    return provider;
  }
  async getSigner() {
    if (!this.safeSigner) {
      throw new Error("not connected - please call connect() first");
    }
    return this.safeSigner;
  }
  async isConnected() {
    try {
      const account = await this.getAddress();
      return !!account;
    } catch (e) {
      return false;
    }
  }
  onAccountsChanged(accounts) {
    if (accounts.length === 0) {
      this.emit("disconnect");
    } else {
      if (accounts[0]) {
        this.emit("change", {
          account: ethers_exports.utils.getAddress(accounts[0])
        });
      }
    }
  }
  onDisconnect() {
    this.emit("disconnect");
  }
  switchChain() {
    throw new Error("Safe connector does not support switching chains");
  }
  updateChains() {
  }
  async setupListeners() {
  }
};
_defineProperty(SafeConnector, "supportedChains", (() => Object.keys(CHAIN_ID_TO_GNOSIS_SERVER_URL))());
export {
  SafeConnector
};
/*! Bundled license information:

utf8/utf8.js:
  (*! https://mths.be/utf8js v3.0.0 by @mathias *)
*/
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-safe.browser.esm-UMCPCQBD.js.map
