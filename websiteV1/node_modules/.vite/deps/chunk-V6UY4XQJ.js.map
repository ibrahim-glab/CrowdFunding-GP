{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/erc-721-standard-af039d94.browser.esm.js"],
  "sourcesContent": ["import { aL as resolveAddress } from './index-e7118e8b.browser.esm.js';\r\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-de84ba20.browser.esm.js';\r\nimport { E as Erc721 } from './erc-721-91c6bacf.browser.esm.js';\r\n\r\n/**\r\n * Standard ERC721 NFT functions\r\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\r\n * @example\r\n * ```javascript\r\n * const contract = await sdk.getContract(\"{{contract_address}}\");\r\n * await contract.nft.transfer(walletAddress, tokenId);\r\n * ```\r\n * @public\r\n */\r\nclass StandardErc721 {\r\n  get chainId() {\r\n    return this._chainId;\r\n  }\r\n  constructor(contractWrapper, storage, chainId) {\r\n    this.contractWrapper = contractWrapper;\r\n    this.storage = storage;\r\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\r\n    this._chainId = chainId;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  onNetworkUpdated(network) {\r\n    this.contractWrapper.updateSignerOrProvider(network);\r\n  }\r\n  getAddress() {\r\n    return this.contractWrapper.address;\r\n  }\r\n\r\n  /**\r\n   * Get all NFTs\r\n   *\r\n   * @remarks Get all the data associated with every NFT in this contract.\r\n   *\r\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const nfts = await contract.getAll();\r\n   * console.log(nfts);\r\n   * ```\r\n   * @param queryParams - optional filtering to only fetch a subset of results.\r\n   * @returns The NFT metadata for all NFTs queried.\r\n   */\r\n  async getAll(queryParams) {\r\n    return this.erc721.getAll(queryParams);\r\n  }\r\n\r\n  /**\r\n   * Get all NFTs owned by a specific wallet\r\n   *\r\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to get the NFTs of\r\n   * const address = \"{{wallet_address}}\";\r\n   * const nfts = await contract.getOwned(address);\r\n   * console.log(nfts);\r\n   * ```\r\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\r\n   * @param queryParams - optional filtering to only fetch a subset of results.\r\n   * @returns The NFT metadata for all NFTs in the contract.\r\n   */\r\n  async getOwned(walletAddress, queryParams) {\r\n    if (walletAddress) {\r\n      walletAddress = await resolveAddress(walletAddress);\r\n    }\r\n    return this.erc721.getOwned(walletAddress, queryParams);\r\n  }\r\n\r\n  /**\r\n   * Get Owned Token Ids\r\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\r\n   */\r\n  async getOwnedTokenIds(walletAddress) {\r\n    if (walletAddress) {\r\n      walletAddress = await resolveAddress(walletAddress);\r\n    }\r\n    return this.erc721.getOwnedTokenIds(walletAddress);\r\n  }\r\n\r\n  /**\r\n   * Get total minted supply count\r\n   */\r\n  async totalSupply() {\r\n    return this.erc721.totalCirculatingSupply();\r\n  }\r\n\r\n  /**\r\n   * Get a single NFT\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const tokenId = 0;\r\n   * const nft = await contract.get(tokenId);\r\n   * ```\r\n   * @param tokenId - the tokenId of the NFT to retrieve\r\n   * @returns The NFT metadata\r\n   */\r\n  async get(tokenId) {\r\n    return this.erc721.get(tokenId);\r\n  }\r\n\r\n  /**\r\n   * Get the current owner of a given NFT within this Contract\r\n   *\r\n   * @param tokenId - the tokenId of the NFT\r\n   * @returns The address of the owner\r\n   */\r\n  async ownerOf(tokenId) {\r\n    return this.erc721.ownerOf(tokenId);\r\n  }\r\n\r\n  /**\r\n   * Get NFT Balance\r\n   *\r\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const walletAddress = \"{{wallet_address}}\";\r\n   * const balance = await contract.balanceOf(walletAddress);\r\n   * console.log(balance);\r\n   * ```\r\n   */\r\n  async balanceOf(address) {\r\n    return this.erc721.balanceOf(address);\r\n  }\r\n\r\n  /**\r\n   * Get NFT Balance for the currently connected wallet\r\n   */\r\n  async balance() {\r\n    return this.erc721.balance();\r\n  }\r\n\r\n  /**\r\n   * Get whether this wallet has approved transfers from the given operator\r\n   * @param address - the wallet address\r\n   * @param operator - the operator address\r\n   */\r\n  async isApproved(address, operator) {\r\n    return this.erc721.isApproved(address, operator);\r\n  }\r\n\r\n  /**\r\n   * Transfer an NFT\r\n   *\r\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const walletAddress = \"{{wallet_address}}\";\r\n   * const tokenId = 0;\r\n   * await contract.transfer(walletAddress, tokenId);\r\n   * ```\r\n   */\r\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\r\n    return this.erc721.transfer.prepare(to, tokenId);\r\n  });\r\n\r\n  /**\r\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\r\n   * @param operator - the operator's address\r\n   * @param approved - whether to approve or remove\r\n   *\r\n   * @internal\r\n   */\r\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\r\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\r\n  });\r\n\r\n  /**\r\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\r\n   * @param operator - the operator's address\r\n   * @param tokenId - the tokenId to give approval for\r\n   *\r\n   * @internal\r\n   */\r\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"approve\",\r\n      args: [await resolveAddress(operator), tokenId]\r\n    });\r\n  });\r\n}\r\n\r\nexport { StandardErc721 as S };\r\n"],
  "mappings": ";;;;;;;;;;;;;AAcA,IAAM,iBAAN,MAAqB;AAAA,EAInB,YAAY,iBAAiB,SAAS,SAAS;AAkJ/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA0B,yBAAyB,OAAO,IAAI,YAAY;AACxE,aAAO,KAAK,OAAO,SAAS,QAAQ,IAAI,OAAO;AAAA,IACjD,CAAC;AASD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAmC,yBAAyB,OAAO,UAAU,aAAa;AACxF,aAAO,KAAK,OAAO,kBAAkB,QAAQ,UAAU,QAAQ;AAAA,IACjE,CAAC;AASD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAqC,yBAAyB,OAAO,UAAU,YAAY;AACzF,aAAO,YAAY,oBAAoB;AAAA,QACrC,iBAAiB,KAAK;AAAA,QACtB,QAAQ;AAAA,QACR,MAAM,CAAC,MAAM,eAAe,QAAQ,GAAG,OAAO;AAAA,MAChD,CAAC;AAAA,IACH,CAAC;AA7KC,SAAK,kBAAkB;AACvB,SAAK,UAAU;AACf,SAAK,SAAS,IAAI,OAAO,KAAK,iBAAiB,KAAK,SAAS,OAAO;AACpE,SAAK,WAAW;AAAA,EAClB;AAAA,EARA,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAWA,iBAAiB,SAAS;AACxB,SAAK,gBAAgB,uBAAuB,OAAO;AAAA,EACrD;AAAA,EACA,aAAa;AACX,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,MAAM,OAAO,aAAa;AACxB,WAAO,KAAK,OAAO,OAAO,WAAW;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAM,SAAS,eAAe,aAAa;AACzC,QAAI,eAAe;AACjB,sBAAgB,MAAM,eAAe,aAAa;AAAA,IACpD;AACA,WAAO,KAAK,OAAO,SAAS,eAAe,WAAW;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,iBAAiB,eAAe;AACpC,QAAI,eAAe;AACjB,sBAAgB,MAAM,eAAe,aAAa;AAAA,IACpD;AACA,WAAO,KAAK,OAAO,iBAAiB,aAAa;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc;AAClB,WAAO,KAAK,OAAO,uBAAuB;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,IAAI,SAAS;AACjB,WAAO,KAAK,OAAO,IAAI,OAAO;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,QAAQ,SAAS;AACrB,WAAO,KAAK,OAAO,QAAQ,OAAO;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,UAAU,SAAS;AACvB,WAAO,KAAK,OAAO,UAAU,OAAO;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU;AACd,WAAO,KAAK,OAAO,QAAQ;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAW,SAAS,UAAU;AAClC,WAAO,KAAK,OAAO,WAAW,SAAS,QAAQ;AAAA,EACjD;AA2CF;",
  "names": []
}
