{
  "version": 3,
  "sources": ["../../@toruslabs/solana-embed/node_modules/eth-rpc-errors/src/classes.ts", "../../@toruslabs/solana-embed/node_modules/eth-rpc-errors/src/error-constants.ts", "../../@toruslabs/solana-embed/node_modules/eth-rpc-errors/src/utils.ts", "../../@toruslabs/solana-embed/node_modules/eth-rpc-errors/src/errors.ts", "../../@toruslabs/solana-embed/node_modules/eth-rpc-errors/src/index.ts", "../../@toruslabs/solana-embed/package.json", "../../@toruslabs/solana-embed/src/messages.ts", "../../@toruslabs/solana-embed/src/interfaces.ts", "../../@toruslabs/solana-embed/src/config.ts", "../../@toruslabs/solana-embed/src/loglevel.ts", "../../@toruslabs/solana-embed/src/utils.ts", "../../@toruslabs/solana-embed/src/baseProvider.ts", "../../@toruslabs/solana-embed/src/embedUtils.ts", "../../@toruslabs/solana-embed/src/PopupHandler.ts", "../../@toruslabs/solana-embed/src/communicationProvider.ts", "../../@toruslabs/solana-embed/src/inPageProvider.ts", "../../@toruslabs/solana-embed/src/siteMetadata.ts", "../../@toruslabs/solana-embed/src/embed.ts", "../../@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts"],
  "sourcesContent": [null, null, null, null, null, "{\n  \"name\": \"@toruslabs/solana-embed\",\n  \"version\": \"0.2.2\",\n  \"description\": \"Embed script for solana blockchain\",\n  \"main\": \"dist/solanaEmbed.cjs.js\",\n  \"module\": \"dist/solanaEmbed.esm.js\",\n  \"unpkg\": \"dist/solanaEmbed.umd.min.js\",\n  \"jsdelivr\": \"dist/solanaEmbed.umd.min.js\",\n  \"types\": \"dist/types/index.d.ts\",\n  \"files\": [\n    \"dist\",\n    \"src\"\n  ],\n  \"scripts\": {\n    \"start\": \"torus-scripts start\",\n    \"build\": \"torus-scripts build\",\n    \"build:test\": \"cross-env NODE_ENV=testing torus-scripts build\",\n    \"release\": \"torus-scripts release\",\n    \"prepack\": \"npm run build\",\n    \"lint:ts\": \"eslint --fix 'src/**/*.ts'\",\n    \"prepare\": \"husky install\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/torusresearch/solana-embed.git\"\n  },\n  \"dependencies\": {\n    \"@solana/web3.js\": \"^1.36.0\",\n    \"@toruslabs/base-controllers\": \"^2.0.0\",\n    \"@toruslabs/http-helpers\": \"^3.0.0\",\n    \"@toruslabs/openlogin-jrpc\": \"^2.0.0\",\n    \"eth-rpc-errors\": \"^4.0.3\",\n    \"fast-deep-equal\": \"^3.1.3\",\n    \"is-stream\": \"^2.0.0\",\n    \"lodash-es\": \"^4.17.21\",\n    \"loglevel\": \"^1.8.0\",\n    \"pump\": \"^3.0.0\"\n  },\n  \"peerDependencies\": {\n    \"@babel/runtime\": \"7.x\"\n  },\n  \"devDependencies\": {\n    \"@babel/register\": \"^7.17.7\",\n    \"@commitlint/cli\": \"^16.2.1\",\n    \"@commitlint/config-conventional\": \"^16.2.1\",\n    \"@commitlint/is-ignored\": \"^16.2.1\",\n    \"@toruslabs/eslint-config-typescript\": \"^1.0.1\",\n    \"@toruslabs/torus-scripts\": \"^1.0.3\",\n    \"@babel/runtime\": \"^7.18.0\",\n    \"@types/bs58\": \"^4.0.1\",\n    \"@types/node\": \"^17.0.35\",\n    \"@types/once\": \"^1.4.0\",\n    \"@types/pump\": \"^1.1.1\",\n    \"@types/readable-stream\": \"^2.3.13\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.25.0\",\n    \"@typescript-eslint/parser\": \"^5.25.0\",\n    \"cross-env\": \"^7.0.3\",\n    \"eslint\": \"^8.15.0\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-mocha\": \"^10.0.4\",\n    \"eslint-plugin-n\": \"^15.2.0\",\n    \"eslint-plugin-prettier\": \"^4.0.0\",\n    \"eslint-plugin-promise\": \"^6.0.0\",\n    \"eslint-plugin-simple-import-sort\": \"^7.0.0\",\n    \"eslint-plugin-tsdoc\": \"^0.2.16\",\n    \"husky\": \"^8.0.1\",\n    \"lint-staged\": \"^12.4.1\",\n    \"mocha\": \"^10.0.0\",\n    \"prettier\": \"^2.6.2\",\n    \"puppeteer\": \"^14.1.1\",\n    \"rimraf\": \"^3.0.2\",\n    \"ts-node\": \"^10.7.0\",\n    \"typescript\": \"^4.6.4\"\n  },\n  \"mocha\": {\n    \"timeout\": 0\n  },\n  \"keywords\": [\n    \"torus\",\n    \"wallet\",\n    \"Solana\",\n    \"embed\",\n    \"login\",\n    \"OAuth\",\n    \"crypto\"\n  ],\n  \"author\": \"Torus Labs\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/torusresearch/solana-embed/issues\"\n  },\n  \"homepage\": \"https://github.com/torusresearch/solana-embed#readme\",\n  \"lint-staged\": {\n    \"!(*d).{js,ts}\": [\n      \"eslint --cache --fix\",\n      \"prettier --write\"\n    ],\n    \"*.{json, md}\": [\n      \"prettier --write\"\n    ]\n  },\n  \"engines\": {\n    \"node\": \">=14.17.0\",\n    \"npm\": \">=6.x\"\n  }\n}\n", "export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n", "import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type PAYMENT_PROVIDER_TYPE = typeof PAYMENT_PROVIDER[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = typeof TORUS_BUILD_ENV[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = typeof BUTTON_POSITION[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\" | \"discover\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = typeof LOGIN_PROVIDER[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n", "import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: `torus-${window.location.hostname}`,\n};\n", "import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n", "import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://green-dark-sky.solana-mainnet.quiknode.pro/0b4b99540b7930cf590dc7fb0a2d1c9a906fd53c/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://spring-black-waterfall.solana-testnet.quiknode.pro/89830c37acd15df105b23742d37f33dc85b5eff8/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n", "import { createLoggerMiddleware, SafeEventEmitterProvider, SendCallBack } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { duplex as isDuplexStream } from \"is-stream\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n", "export const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport async function documentReady(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n", "import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n", "import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n", "import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n", "/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n", "import { PublicKey, SignaturePubkeyPair, Transaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { version } = require(\"../package.json\");\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    const handleSetup = async () => {\n      return new Promise<void>((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata();\n            // send init params here\n            this.torusIframe.contentWindow.postMessage(\n              {\n                buttonPosition,\n                apiKey,\n                network,\n                dappMetadata,\n                extraParams,\n              },\n              torusIframeUrl.origin\n            );\n            await this._setupWeb3({\n              torusUrl,\n            });\n            if (showTorusButton) this.showTorusButton();\n            else this.hideTorusButton();\n            this.isInitialized = true;\n            (window as any).torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve, reject)\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: Transaction): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\") },\n    })) as string;\n    return response;\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message: transaction.serializeMessage().toString(\"hex\"), messageOnly: true },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const encodedMessage: string[] = transactions.map((tx) => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (m) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] });\n          self\n            .login({ loginProvider: params[0] })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n", "import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super();\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n    this.sessionTime = params.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const { blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, ticker, tickerName, logo: \"\" };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await super.disconnect();\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(options: { sessionTime?: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["EthereumRpcError", "createErrorMiddleware", "req", "res", "next", "method", "error", "ethErrors", "rpc", "invalidRequest", "message", "data", "done", "log", "logStreamDisconnectWarning", "remoteLabel", "emitter", "warningMsg", "stack", "warn", "listenerCount", "emit", "storageAvailable", "type", "storage", "window", "x", "setItem", "removeItem", "e", "code", "name", "length", "getPopupFeatures", "width", "w", "height", "h", "dualScreenLeft", "screenLeft", "undefined", "screenX", "dualScreenTop", "screenTop", "screenY", "innerWidth", "document", "documentElement", "clientWidth", "screen", "innerHeight", "clientHeight", "systemZoom", "left", "Math", "abs", "top", "features", "documentReady", "Promise", "resolve", "readyState", "handleEvent", "imgExists", "url", "reject", "img", "createElement", "onload", "onerror", "src", "getSiteIcon", "icon", "querySelector", "href", "Array", "from", "querySelectorAll", "find", "_icon", "Boolean", "TORUS_BUILD_ENV", "BUTTON_POSITION", "LOGIN_PROVIDER", "translations", "getWindowId", "getTorusUrl", "getUserLanguage", "FEATURES_PROVIDER_CHANGE_WINDOW", "FEATURES_DEFAULT_WALLET_WINDOW", "FEATURES_DEFAULT_POPUP_WINDOW", "FEATURES_CONFIRM_WINDOW", "BaseProvider", "htmlToElement", "PopupHandler", "TorusCommunicationProvider", "TorusInPageProvider", "getSiteName", "getSiteMetadata", "version", "PROVIDER_UNSAFE_METHODS", "COMMUNICATION_UNSAFE_METHODS", "isLocalStorageAvailable", "Torus", "errors", "disconnected", "permanentlyDisconnected", "unsupportedSync", "invalidDuplexStream", "invalidOptions", "maxEventListeners", "invalidRequestArgs", "invalidRequestMethod", "invalidRequestParams", "invalidLoggerObject", "invalidLoggerMethod", "info", "connected", "chainId", "warnings", "PRODUCTION", "DEVELOPMENT", "TESTING", "BOTTOM_LEFT", "TOP_LEFT", "BOTTOM_RIGHT", "TOP_RIGHT", "GOOGLE", "FACEBOOK", "REDDIT", "DISCORD", "TWITCH", "APPLE", "LINE", "GITHUB", "KAKAO", "LINKEDIN", "TWITTER", "WEIBO", "WECHAT", "EMAIL_PASSWORDLESS", "en", "embed", "continue", "actionRequired", "pendingAction", "cookiesRequired", "enableCookies", "clickHere", "de", "ja", "ko", "zh", "supportedVerifierList", "api", "prodTorusUrl", "localStorageKey", "location", "hostname", "loglevel", "getLogger", "random", "toString", "slice", "buildEnv", "torusUrl", "logLevel", "userLanguage", "navigator", "language", "userLanguages", "split", "Object", "prototype", "hasOwnProperty", "call", "config", "SafeEventEmitter", "constructor", "connectionStream", "jsonRpcStreamName", "isDuplexStream", "Error", "messages", "isTorus", "setMaxListeners", "_handleConnect", "bind", "_handleDisconnect", "_handleStreamDisconnect", "_rpcRequest", "_initializeState", "request", "sendAsync", "mux", "ObjectMultiplex", "pump", "ignoreStream", "jsonRpcConnection", "createStreamMiddleware", "stream", "createStream", "rpcEngine", "JRPCEngine", "push", "createIdRemapMiddleware", "createLoggerMiddleware", "origin", "middleware", "_rpcEngine", "jsonRpcConnectionEvents", "events", "args", "isArray", "params", "getRpcPromiseCallback", "send", "payload", "callback", "streamName", "handle", "eventName", "handler", "handlerArgs", "handlerWrapper", "removeEventListener", "addEventListener", "html", "template", "trimmedHtml", "trim", "innerHTML", "content", "firstChild", "target", "windowTimer", "iClosedWindow", "_setupTimer", "Number", "setInterval", "closed", "clearInterval", "open", "focus", "close", "redirect", "locationReplaceOnRedirect", "replace", "_state", "_defaultState", "dappStorageKey", "languageTranslations", "configuration", "embedTranslations", "windowRefs", "on", "isConnected", "notificationHandler", "COMMUNICATION_NOTIFICATIONS", "IFRAME_STATUS", "isFullScreen", "rid", "_displayIframe", "isFull", "CREATE_WINDOW", "windowId", "_createPopupBlockAlert", "CLOSE_WINDOW", "_handleCloseWindow", "USER_LOGGED_IN", "currentLoginProvider", "isLoggedIn", "USER_LOGGED_OUT", "isIFrameFullScreen", "torusAlertContainer", "torusIframe", "COMMUNICATION_JRPC_METHODS", "GET_PROVIDER_STATE", "initialized", "_handleWindow", "finalUrl", "URL", "hash", "handledWindow", "OPENED_WINDOW", "once", "CLOSED_WINDOW", "style", "display", "torusWidgetVisibility", "buttonPosition", "right", "bottom", "assign", "hideTorusButton", "showTorusButton", "cb", "_payload", "jsonrpc", "tryWindowHandle", "debug", "isRecoverable", "errorMessage", "isPermanentlyDisconnected", "EthereumRpcError", "logoUrl", "getLogoUrl", "torusAlert", "successAlert", "btnContainer", "appendChild", "bindOnLoad", "remove", "children", "attachOnLoad", "hasEmittedConnection", "selectedAddress", "_handleAccountsChanged", "_handleChainChanged", "_handleUnlockStateChanged", "jsonRpcNotificationHandler", "PROVIDER_NOTIFICATIONS", "ACCOUNTS_CHANGED", "UNLOCK_STATE_CHANGED", "CHAIN_CHANGED", "accounts", "isUnlocked", "PROVIDER_JRPC_METHODS", "isInternal", "err", "result", "isEthAccounts", "finalAccounts", "account", "dequal", "siteName", "metaTitle", "title", "require", "SET_PROVIDER", "preLoadIframe", "torusIframeHtml", "crossOrigin", "rel", "relList", "supports", "head", "modalZIndex", "isInitialized", "requestedLoginProvider", "alertZIndex", "communicationProvider", "init", "enableLogging", "network", "useLocalStorage", "apiKey", "extraParams", "setAPIKey", "enableAll", "setDefaultLevel", "disableAll", "handleDappStorageKey", "torusIframeUrl", "pathname", "endsWith", "hashParams", "URLSearchParams", "append", "styleLink", "handleSetup", "body", "dappMetadata", "contentWindow", "postMessage", "_setupWeb3", "torus", "login", "loginProvider", "provider", "login_hint", "loginWithPrivateKey", "loginParams", "privateKey", "userInfo", "success", "logout", "LOGOUT", "cleanUp", "clearInit", "isElement", "element", "Element", "Document", "contains", "setProvider", "showWallet", "path", "instanceId", "WALLET_INSTANCE_ID", "finalPath", "searchParams", "keys", "forEach", "walletWindow", "getUserInfo", "userInfoResponse", "USER_INFO", "initiateTopup", "topupResponse", "TOPUP", "getAccounts", "response", "sendTransaction", "transaction", "serialize", "requireAllSignatures", "signTransaction", "serializeMessage", "messageOnly", "parsed", "JSON", "parse", "signature", "publicKey", "PublicKey", "Buffer", "addSignature", "signAllTransactions", "transactions", "encodedMessage", "map", "tx", "responses", "signatures", "item", "idx", "signMessage", "getGaslessPublicKey", "storedKey", "localStorage", "getItem", "generatedKey", "providerParams", "providerStream", "BasePostMessageStream", "targetWindow", "communicationStream", "inPageProvider", "includes", "detectAccountRequestPrototypeModifier", "m", "originalMethod", "self", "providerFunc", "then", "catch", "apply", "proxiedInPageProvider", "Proxy", "deleteProperty", "proxiedCommunicationProvider", "all", "SolanaWalletAdapter", "BaseSolanaAdapter", "constructor", "params", "WALLET_ADAPTERS", "TORUS_SOLANA", "ADAPTER_NAMESPACES", "SOLANA", "CHAIN_NAMESPACES", "ADAPTER_CATEGORY", "EXTERNAL", "ADAPTER_STATUS", "NOT_READY", "torusWalletOptions", "adapterSettings", "initParams", "loginSettings", "chainConfig", "sessionTime", "provider", "status", "CONNECTED", "solanaProvider", "_", "Error", "init", "options", "checkInitializationRequirements", "network", "getChainConfig", "blockExplorer", "displayName", "ticker", "tickerName", "rpcTarget", "chainId", "blockExplorerUrl", "logo", "torusInstance", "Torus", "log", "debug", "_objectSpread", "showTorusButton", "TorusInjectedProvider", "config", "READY", "emit", "ADAPTER_EVENTS", "autoConnect", "rehydrated", "connect", "error", "ERRORED", "checkConnectionRequirements", "WalletInitializationError", "notReady", "CONNECTING", "adapter", "login", "torusInpageProvider", "sendTransaction", "bind", "signAllTransactions", "signMessage", "signTransaction", "setupProvider", "Web3AuthError", "code", "setProvider", "reconnected", "WalletLoginError", "connectionError", "disconnect", "cleanup", "logout", "DISCONNECTED", "getUserInfo", "notConnectedError", "userInfo", "setAdapterSettings"]
}
