{
  "version": 3,
  "sources": ["../../bowser/src/constants.js", "../../bowser/src/utils.js", "../../bowser/src/parser-browsers.js", "../../bowser/src/parser-os.js", "../../bowser/src/parser-platforms.js", "../../bowser/src/parser-engines.js", "../../bowser/src/parser.js", "../../bowser/src/bowser.js"],
  "sourcesContent": ["// NOTE: this list must be up-to-date with browsers listed in\n// test/acceptance/useragentstrings.yml\nexport const BROWSER_ALIASES_MAP = {\n  'Amazon Silk': 'amazon_silk',\n  'Android Browser': 'android',\n  Bada: 'bada',\n  BlackBerry: 'blackberry',\n  Chrome: 'chrome',\n  Chromium: 'chromium',\n  Electron: 'electron',\n  Epiphany: 'epiphany',\n  Firefox: 'firefox',\n  Focus: 'focus',\n  Generic: 'generic',\n  'Google Search': 'google_search',\n  Googlebot: 'googlebot',\n  'Internet Explorer': 'ie',\n  'K-Meleon': 'k_meleon',\n  Maxthon: 'maxthon',\n  'Microsoft Edge': 'edge',\n  'MZ Browser': 'mz',\n  'NAVER Whale Browser': 'naver',\n  Opera: 'opera',\n  'Opera Coast': 'opera_coast',\n  PhantomJS: 'phantomjs',\n  Puffin: 'puffin',\n  QupZilla: 'qupzilla',\n  QQ: 'qq',\n  QQLite: 'qqlite',\n  Safari: 'safari',\n  Sailfish: 'sailfish',\n  'Samsung Internet for Android': 'samsung_internet',\n  SeaMonkey: 'seamonkey',\n  Sleipnir: 'sleipnir',\n  Swing: 'swing',\n  Tizen: 'tizen',\n  'UC Browser': 'uc',\n  Vivaldi: 'vivaldi',\n  'WebOS Browser': 'webos',\n  WeChat: 'wechat',\n  'Yandex Browser': 'yandex',\n  Roku: 'roku',\n};\n\nexport const BROWSER_MAP = {\n  amazon_silk: 'Amazon Silk',\n  android: 'Android Browser',\n  bada: 'Bada',\n  blackberry: 'BlackBerry',\n  chrome: 'Chrome',\n  chromium: 'Chromium',\n  electron: 'Electron',\n  epiphany: 'Epiphany',\n  firefox: 'Firefox',\n  focus: 'Focus',\n  generic: 'Generic',\n  googlebot: 'Googlebot',\n  google_search: 'Google Search',\n  ie: 'Internet Explorer',\n  k_meleon: 'K-Meleon',\n  maxthon: 'Maxthon',\n  edge: 'Microsoft Edge',\n  mz: 'MZ Browser',\n  naver: 'NAVER Whale Browser',\n  opera: 'Opera',\n  opera_coast: 'Opera Coast',\n  phantomjs: 'PhantomJS',\n  puffin: 'Puffin',\n  qupzilla: 'QupZilla',\n  qq: 'QQ Browser',\n  qqlite: 'QQ Browser Lite',\n  safari: 'Safari',\n  sailfish: 'Sailfish',\n  samsung_internet: 'Samsung Internet for Android',\n  seamonkey: 'SeaMonkey',\n  sleipnir: 'Sleipnir',\n  swing: 'Swing',\n  tizen: 'Tizen',\n  uc: 'UC Browser',\n  vivaldi: 'Vivaldi',\n  webos: 'WebOS Browser',\n  wechat: 'WeChat',\n  yandex: 'Yandex Browser',\n};\n\nexport const PLATFORMS_MAP = {\n  tablet: 'tablet',\n  mobile: 'mobile',\n  desktop: 'desktop',\n  tv: 'tv',\n};\n\nexport const OS_MAP = {\n  WindowsPhone: 'Windows Phone',\n  Windows: 'Windows',\n  MacOS: 'macOS',\n  iOS: 'iOS',\n  Android: 'Android',\n  WebOS: 'WebOS',\n  BlackBerry: 'BlackBerry',\n  Bada: 'Bada',\n  Tizen: 'Tizen',\n  Linux: 'Linux',\n  ChromeOS: 'Chrome OS',\n  PlayStation4: 'PlayStation 4',\n  Roku: 'Roku',\n};\n\nexport const ENGINE_MAP = {\n  EdgeHTML: 'EdgeHTML',\n  Blink: 'Blink',\n  Trident: 'Trident',\n  Presto: 'Presto',\n  Gecko: 'Gecko',\n  WebKit: 'WebKit',\n};\n", "import { BROWSER_MAP, BROWSER_ALIASES_MAP } from './constants.js';\n\nexport default class Utils {\n  /**\n   * Get first matched item for a string\n   * @param {RegExp} regexp\n   * @param {String} ua\n   * @return {Array|{index: number, input: string}|*|boolean|string}\n   */\n  static getFirstMatch(regexp, ua) {\n    const match = ua.match(regexp);\n    return (match && match.length > 0 && match[1]) || '';\n  }\n\n  /**\n   * Get second matched item for a string\n   * @param regexp\n   * @param {String} ua\n   * @return {Array|{index: number, input: string}|*|boolean|string}\n   */\n  static getSecondMatch(regexp, ua) {\n    const match = ua.match(regexp);\n    return (match && match.length > 1 && match[2]) || '';\n  }\n\n  /**\n   * Match a regexp and return a constant or undefined\n   * @param {RegExp} regexp\n   * @param {String} ua\n   * @param {*} _const Any const that will be returned if regexp matches the string\n   * @return {*}\n   */\n  static matchAndReturnConst(regexp, ua, _const) {\n    if (regexp.test(ua)) {\n      return _const;\n    }\n    return void (0);\n  }\n\n  static getWindowsVersionName(version) {\n    switch (version) {\n      case 'NT': return 'NT';\n      case 'XP': return 'XP';\n      case 'NT 5.0': return '2000';\n      case 'NT 5.1': return 'XP';\n      case 'NT 5.2': return '2003';\n      case 'NT 6.0': return 'Vista';\n      case 'NT 6.1': return '7';\n      case 'NT 6.2': return '8';\n      case 'NT 6.3': return '8.1';\n      case 'NT 10.0': return '10';\n      default: return undefined;\n    }\n  }\n\n  /**\n   * Get macOS version name\n   *    10.5 - Leopard\n   *    10.6 - Snow Leopard\n   *    10.7 - Lion\n   *    10.8 - Mountain Lion\n   *    10.9 - Mavericks\n   *    10.10 - Yosemite\n   *    10.11 - El Capitan\n   *    10.12 - Sierra\n   *    10.13 - High Sierra\n   *    10.14 - Mojave\n   *    10.15 - Catalina\n   *\n   * @example\n   *   getMacOSVersionName(\"10.14\") // 'Mojave'\n   *\n   * @param  {string} version\n   * @return {string} versionName\n   */\n  static getMacOSVersionName(version) {\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\n    v.push(0);\n    if (v[0] !== 10) return undefined;\n    switch (v[1]) {\n      case 5: return 'Leopard';\n      case 6: return 'Snow Leopard';\n      case 7: return 'Lion';\n      case 8: return 'Mountain Lion';\n      case 9: return 'Mavericks';\n      case 10: return 'Yosemite';\n      case 11: return 'El Capitan';\n      case 12: return 'Sierra';\n      case 13: return 'High Sierra';\n      case 14: return 'Mojave';\n      case 15: return 'Catalina';\n      default: return undefined;\n    }\n  }\n\n  /**\n   * Get Android version name\n   *    1.5 - Cupcake\n   *    1.6 - Donut\n   *    2.0 - Eclair\n   *    2.1 - Eclair\n   *    2.2 - Froyo\n   *    2.x - Gingerbread\n   *    3.x - Honeycomb\n   *    4.0 - Ice Cream Sandwich\n   *    4.1 - Jelly Bean\n   *    4.4 - KitKat\n   *    5.x - Lollipop\n   *    6.x - Marshmallow\n   *    7.x - Nougat\n   *    8.x - Oreo\n   *    9.x - Pie\n   *\n   * @example\n   *   getAndroidVersionName(\"7.0\") // 'Nougat'\n   *\n   * @param  {string} version\n   * @return {string} versionName\n   */\n  static getAndroidVersionName(version) {\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\n    v.push(0);\n    if (v[0] === 1 && v[1] < 5) return undefined;\n    if (v[0] === 1 && v[1] < 6) return 'Cupcake';\n    if (v[0] === 1 && v[1] >= 6) return 'Donut';\n    if (v[0] === 2 && v[1] < 2) return 'Eclair';\n    if (v[0] === 2 && v[1] === 2) return 'Froyo';\n    if (v[0] === 2 && v[1] > 2) return 'Gingerbread';\n    if (v[0] === 3) return 'Honeycomb';\n    if (v[0] === 4 && v[1] < 1) return 'Ice Cream Sandwich';\n    if (v[0] === 4 && v[1] < 4) return 'Jelly Bean';\n    if (v[0] === 4 && v[1] >= 4) return 'KitKat';\n    if (v[0] === 5) return 'Lollipop';\n    if (v[0] === 6) return 'Marshmallow';\n    if (v[0] === 7) return 'Nougat';\n    if (v[0] === 8) return 'Oreo';\n    if (v[0] === 9) return 'Pie';\n    return undefined;\n  }\n\n  /**\n   * Get version precisions count\n   *\n   * @example\n   *   getVersionPrecision(\"1.10.3\") // 3\n   *\n   * @param  {string} version\n   * @return {number}\n   */\n  static getVersionPrecision(version) {\n    return version.split('.').length;\n  }\n\n  /**\n   * Calculate browser version weight\n   *\n   * @example\n   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1\n   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1\n   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0\n   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1\n   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0\n   *\n   * @param {String} versionA versions versions to compare\n   * @param {String} versionB versions versions to compare\n   * @param {boolean} [isLoose] enable loose comparison\n   * @return {Number} comparison result: -1 when versionA is lower,\n   * 1 when versionA is bigger, 0 when both equal\n   */\n  /* eslint consistent-return: 1 */\n  static compareVersions(versionA, versionB, isLoose = false) {\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\n    const versionAPrecision = Utils.getVersionPrecision(versionA);\n    const versionBPrecision = Utils.getVersionPrecision(versionB);\n\n    let precision = Math.max(versionAPrecision, versionBPrecision);\n    let lastPrecision = 0;\n\n    const chunks = Utils.map([versionA, versionB], (version) => {\n      const delta = precision - Utils.getVersionPrecision(version);\n\n      // 2) \"9\" -> \"9.0\" (for precision = 2)\n      const _version = version + new Array(delta + 1).join('.0');\n\n      // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\n      return Utils.map(_version.split('.'), chunk => new Array(20 - chunk.length).join('0') + chunk).reverse();\n    });\n\n    // adjust precision for loose comparison\n    if (isLoose) {\n      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);\n    }\n\n    // iterate in reverse order by reversed chunks array\n    precision -= 1;\n    while (precision >= lastPrecision) {\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\n      if (chunks[0][precision] > chunks[1][precision]) {\n        return 1;\n      }\n\n      if (chunks[0][precision] === chunks[1][precision]) {\n        if (precision === lastPrecision) {\n          // all version chunks are same\n          return 0;\n        }\n\n        precision -= 1;\n      } else if (chunks[0][precision] < chunks[1][precision]) {\n        return -1;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Array::map polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} iterator\n   * @return {Array}\n   */\n  static map(arr, iterator) {\n    const result = [];\n    let i;\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, iterator);\n    }\n    for (i = 0; i < arr.length; i += 1) {\n      result.push(iterator(arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Array::find polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} predicate\n   * @return {Array}\n   */\n  static find(arr, predicate) {\n    let i;\n    let l;\n    if (Array.prototype.find) {\n      return Array.prototype.find.call(arr, predicate);\n    }\n    for (i = 0, l = arr.length; i < l; i += 1) {\n      const value = arr[i];\n      if (predicate(value, i)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Object::assign polyfill\n   *\n   * @param  {Object} obj\n   * @param  {Object} ...objs\n   * @return {Object}\n   */\n  static assign(obj, ...assigners) {\n    const result = obj;\n    let i;\n    let l;\n    if (Object.assign) {\n      return Object.assign(obj, ...assigners);\n    }\n    for (i = 0, l = assigners.length; i < l; i += 1) {\n      const assigner = assigners[i];\n      if (typeof assigner === 'object' && assigner !== null) {\n        const keys = Object.keys(assigner);\n        keys.forEach((key) => {\n          result[key] = assigner[key];\n        });\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * Get short version/alias for a browser name\n   *\n   * @example\n   *   getBrowserAlias('Microsoft Edge') // edge\n   *\n   * @param  {string} browserName\n   * @return {string}\n   */\n  static getBrowserAlias(browserName) {\n    return BROWSER_ALIASES_MAP[browserName];\n  }\n\n  /**\n   * Get short version/alias for a browser name\n   *\n   * @example\n   *   getBrowserAlias('edge') // Microsoft Edge\n   *\n   * @param  {string} browserAlias\n   * @return {string}\n   */\n  static getBrowserTypeByAlias(browserAlias) {\n    return BROWSER_MAP[browserAlias] || '';\n  }\n}\n", "/**\n * Browsers' descriptors\n *\n * The idea of descriptors is simple. You should know about them two simple things:\n * 1. Every descriptor has a method or property called `test` and a `describe` method.\n * 2. Order of descriptors is important.\n *\n * More details:\n * 1. Method or property `test` serves as a way to detect whether the UA string\n * matches some certain browser or not. The `describe` method helps to make a result\n * object with params that show some browser-specific things: name, version, etc.\n * 2. Order of descriptors is important because a Parser goes through them one by one\n * in course. For example, if you insert Chrome's descriptor as the first one,\n * more then a half of browsers will be described as Chrome, because they will pass\n * the Chrome descriptor's test.\n *\n * Descriptor's `test` could be a property with an array of RegExps, where every RegExp\n * will be applied to a UA string to test it whether it matches or not.\n * If a descriptor has two or more regexps in the `test` array it tests them one by one\n * with a logical sum operation. Parser stops if it has found any RegExp that matches the UA.\n *\n * Or `test` could be a method. In that case it gets a Parser instance and should\n * return true/false to get the Parser know if this browser descriptor matches the UA or not.\n */\n\nimport Utils from './utils.js';\n\nconst commonVersionIdentifier = /version\\/(\\d+(\\.?_?\\d+)+)/i;\n\nconst browsersList = [\n  /* Googlebot */\n  {\n    test: [/googlebot/i],\n    describe(ua) {\n      const browser = {\n        name: 'Googlebot',\n      };\n      const version = Utils.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* Opera < 13.0 */\n  {\n    test: [/opera/i],\n    describe(ua) {\n      const browser = {\n        name: 'Opera',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* Opera > 13.0 */\n  {\n    test: [/opr\\/|opios/i],\n    describe(ua) {\n      const browser = {\n        name: 'Opera',\n      };\n      const version = Utils.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/SamsungBrowser/i],\n    describe(ua) {\n      const browser = {\n        name: 'Samsung Internet for Android',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/Whale/i],\n    describe(ua) {\n      const browser = {\n        name: 'NAVER Whale Browser',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/MZBrowser/i],\n    describe(ua) {\n      const browser = {\n        name: 'MZ Browser',\n      };\n      const version = Utils.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/focus/i],\n    describe(ua) {\n      const browser = {\n        name: 'Focus',\n      };\n      const version = Utils.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/swing/i],\n    describe(ua) {\n      const browser = {\n        name: 'Swing',\n      };\n      const version = Utils.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/coast/i],\n    describe(ua) {\n      const browser = {\n        name: 'Opera Coast',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/opt\\/\\d+(?:.?_?\\d+)+/i],\n    describe(ua) {\n      const browser = {\n        name: 'Opera Touch',\n      };\n      const version = Utils.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/yabrowser/i],\n    describe(ua) {\n      const browser = {\n        name: 'Yandex Browser',\n      };\n      const version = Utils.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/ucbrowser/i],\n    describe(ua) {\n      const browser = {\n        name: 'UC Browser',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/Maxthon|mxios/i],\n    describe(ua) {\n      const browser = {\n        name: 'Maxthon',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/epiphany/i],\n    describe(ua) {\n      const browser = {\n        name: 'Epiphany',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/puffin/i],\n    describe(ua) {\n      const browser = {\n        name: 'Puffin',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/sleipnir/i],\n    describe(ua) {\n      const browser = {\n        name: 'Sleipnir',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/k-meleon/i],\n    describe(ua) {\n      const browser = {\n        name: 'K-Meleon',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/micromessenger/i],\n    describe(ua) {\n      const browser = {\n        name: 'WeChat',\n      };\n      const version = Utils.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/qqbrowser/i],\n    describe(ua) {\n      const browser = {\n        name: (/qqbrowserlite/i).test(ua) ? 'QQ Browser Lite' : 'QQ Browser',\n      };\n      const version = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/msie|trident/i],\n    describe(ua) {\n      const browser = {\n        name: 'Internet Explorer',\n      };\n      const version = Utils.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/\\sedg\\//i],\n    describe(ua) {\n      const browser = {\n        name: 'Microsoft Edge',\n      };\n\n      const version = Utils.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/edg([ea]|ios)/i],\n    describe(ua) {\n      const browser = {\n        name: 'Microsoft Edge',\n      };\n\n      const version = Utils.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/vivaldi/i],\n    describe(ua) {\n      const browser = {\n        name: 'Vivaldi',\n      };\n      const version = Utils.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/seamonkey/i],\n    describe(ua) {\n      const browser = {\n        name: 'SeaMonkey',\n      };\n      const version = Utils.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/sailfish/i],\n    describe(ua) {\n      const browser = {\n        name: 'Sailfish',\n      };\n\n      const version = Utils.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/silk/i],\n    describe(ua) {\n      const browser = {\n        name: 'Amazon Silk',\n      };\n      const version = Utils.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/phantom/i],\n    describe(ua) {\n      const browser = {\n        name: 'PhantomJS',\n      };\n      const version = Utils.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/slimerjs/i],\n    describe(ua) {\n      const browser = {\n        name: 'SlimerJS',\n      };\n      const version = Utils.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i],\n    describe(ua) {\n      const browser = {\n        name: 'BlackBerry',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/(web|hpw)[o0]s/i],\n    describe(ua) {\n      const browser = {\n        name: 'WebOS Browser',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/bada/i],\n    describe(ua) {\n      const browser = {\n        name: 'Bada',\n      };\n      const version = Utils.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/tizen/i],\n    describe(ua) {\n      const browser = {\n        name: 'Tizen',\n      };\n      const version = Utils.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/qupzilla/i],\n    describe(ua) {\n      const browser = {\n        name: 'QupZilla',\n      };\n      const version = Utils.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/firefox|iceweasel|fxios/i],\n    describe(ua) {\n      const browser = {\n        name: 'Firefox',\n      };\n      const version = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/electron/i],\n    describe(ua) {\n      const browser = {\n        name: 'Electron',\n      };\n      const version = Utils.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/MiuiBrowser/i],\n    describe(ua) {\n      const browser = {\n        name: 'Miui',\n      };\n      const version = Utils.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/chromium/i],\n    describe(ua) {\n      const browser = {\n        name: 'Chromium',\n      };\n      const version = Utils.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/chrome|crios|crmo/i],\n    describe(ua) {\n      const browser = {\n        name: 'Chrome',\n      };\n      const version = Utils.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n  {\n    test: [/GSA/i],\n    describe(ua) {\n      const browser = {\n        name: 'Google Search',\n      };\n      const version = Utils.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* Android Browser */\n  {\n    test(parser) {\n      const notLikeAndroid = !parser.test(/like android/i);\n      const butAndroid = parser.test(/android/i);\n      return notLikeAndroid && butAndroid;\n    },\n    describe(ua) {\n      const browser = {\n        name: 'Android Browser',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* PlayStation 4 */\n  {\n    test: [/playstation 4/i],\n    describe(ua) {\n      const browser = {\n        name: 'PlayStation 4',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* Safari */\n  {\n    test: [/safari|applewebkit/i],\n    describe(ua) {\n      const browser = {\n        name: 'Safari',\n      };\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n\n      if (version) {\n        browser.version = version;\n      }\n\n      return browser;\n    },\n  },\n\n  /* Something else */\n  {\n    test: [/.*/i],\n    describe(ua) {\n      /* Here we try to make sure that there are explicit details about the device\n       * in order to decide what regexp exactly we want to apply\n       * (as there is a specific decision based on that conclusion)\n       */\n      const regexpWithoutDeviceSpec = /^(.*)\\/(.*) /;\n      const regexpWithDeviceSpec = /^(.*)\\/(.*)[ \\t]\\((.*)/;\n      const hasDeviceSpec = ua.search('\\\\(') !== -1;\n      const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;\n      return {\n        name: Utils.getFirstMatch(regexp, ua),\n        version: Utils.getSecondMatch(regexp, ua),\n      };\n    },\n  },\n];\n\nexport default browsersList;\n", "import Utils from './utils.js';\nimport { OS_MAP } from './constants.js';\n\nexport default [\n  /* Roku */\n  {\n    test: [/Roku\\/DVP/],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i, ua);\n      return {\n        name: OS_MAP.Roku,\n        version,\n      };\n    },\n  },\n\n  /* Windows Phone */\n  {\n    test: [/windows phone/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i, ua);\n      return {\n        name: OS_MAP.WindowsPhone,\n        version,\n      };\n    },\n  },\n\n  /* Windows */\n  {\n    test: [/windows /i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i, ua);\n      const versionName = Utils.getWindowsVersionName(version);\n\n      return {\n        name: OS_MAP.Windows,\n        version,\n        versionName,\n      };\n    },\n  },\n\n  /* Firefox on iPad */\n  {\n    test: [/Macintosh(.*?) FxiOS(.*?)\\//],\n    describe(ua) {\n      const result = {\n        name: OS_MAP.iOS,\n      };\n      const version = Utils.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/, ua);\n      if (version) {\n        result.version = version;\n      }\n      return result;\n    },\n  },\n\n  /* macOS */\n  {\n    test: [/macintosh/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i, ua).replace(/[_\\s]/g, '.');\n      const versionName = Utils.getMacOSVersionName(version);\n\n      const os = {\n        name: OS_MAP.MacOS,\n        version,\n      };\n      if (versionName) {\n        os.versionName = versionName;\n      }\n      return os;\n    },\n  },\n\n  /* iOS */\n  {\n    test: [/(ipod|iphone|ipad)/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i, ua).replace(/[_\\s]/g, '.');\n\n      return {\n        name: OS_MAP.iOS,\n        version,\n      };\n    },\n  },\n\n  /* Android */\n  {\n    test(parser) {\n      const notLikeAndroid = !parser.test(/like android/i);\n      const butAndroid = parser.test(/android/i);\n      return notLikeAndroid && butAndroid;\n    },\n    describe(ua) {\n      const version = Utils.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i, ua);\n      const versionName = Utils.getAndroidVersionName(version);\n      const os = {\n        name: OS_MAP.Android,\n        version,\n      };\n      if (versionName) {\n        os.versionName = versionName;\n      }\n      return os;\n    },\n  },\n\n  /* WebOS */\n  {\n    test: [/(web|hpw)[o0]s/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i, ua);\n      const os = {\n        name: OS_MAP.WebOS,\n      };\n\n      if (version && version.length) {\n        os.version = version;\n      }\n      return os;\n    },\n  },\n\n  /* BlackBerry */\n  {\n    test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i, ua)\n        || Utils.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i, ua)\n        || Utils.getFirstMatch(/\\bbb(\\d+)/i, ua);\n\n      return {\n        name: OS_MAP.BlackBerry,\n        version,\n      };\n    },\n  },\n\n  /* Bada */\n  {\n    test: [/bada/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i, ua);\n\n      return {\n        name: OS_MAP.Bada,\n        version,\n      };\n    },\n  },\n\n  /* Tizen */\n  {\n    test: [/tizen/i],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i, ua);\n\n      return {\n        name: OS_MAP.Tizen,\n        version,\n      };\n    },\n  },\n\n  /* Linux */\n  {\n    test: [/linux/i],\n    describe() {\n      return {\n        name: OS_MAP.Linux,\n      };\n    },\n  },\n\n  /* Chrome OS */\n  {\n    test: [/CrOS/],\n    describe() {\n      return {\n        name: OS_MAP.ChromeOS,\n      };\n    },\n  },\n\n  /* Playstation 4 */\n  {\n    test: [/PlayStation 4/],\n    describe(ua) {\n      const version = Utils.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i, ua);\n      return {\n        name: OS_MAP.PlayStation4,\n        version,\n      };\n    },\n  },\n];\n", "import Utils from './utils.js';\nimport { PLATFORMS_MAP } from './constants.js';\n\n/*\n * Tablets go first since usually they have more specific\n * signs to detect.\n */\n\nexport default [\n  /* Googlebot */\n  {\n    test: [/googlebot/i],\n    describe() {\n      return {\n        type: 'bot',\n        vendor: 'Google',\n      };\n    },\n  },\n\n  /* Huawei */\n  {\n    test: [/huawei/i],\n    describe(ua) {\n      const model = Utils.getFirstMatch(/(can-l01)/i, ua) && 'Nova';\n      const platform = {\n        type: PLATFORMS_MAP.mobile,\n        vendor: 'Huawei',\n      };\n      if (model) {\n        platform.model = model;\n      }\n      return platform;\n    },\n  },\n\n  /* Nexus Tablet */\n  {\n    test: [/nexus\\s*(?:7|8|9|10).*/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: 'Nexus',\n      };\n    },\n  },\n\n  /* iPad */\n  {\n    test: [/ipad/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: 'Apple',\n        model: 'iPad',\n      };\n    },\n  },\n\n  /* Firefox on iPad */\n  {\n    test: [/Macintosh(.*?) FxiOS(.*?)\\//],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: 'Apple',\n        model: 'iPad',\n      };\n    },\n  },\n\n  /* Amazon Kindle Fire */\n  {\n    test: [/kftt build/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: 'Amazon',\n        model: 'Kindle Fire HD 7',\n      };\n    },\n  },\n\n  /* Another Amazon Tablet with Silk */\n  {\n    test: [/silk/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n        vendor: 'Amazon',\n      };\n    },\n  },\n\n  /* Tablet */\n  {\n    test: [/tablet(?! pc)/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n      };\n    },\n  },\n\n  /* iPod/iPhone */\n  {\n    test(parser) {\n      const iDevice = parser.test(/ipod|iphone/i);\n      const likeIDevice = parser.test(/like (ipod|iphone)/i);\n      return iDevice && !likeIDevice;\n    },\n    describe(ua) {\n      const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: 'Apple',\n        model,\n      };\n    },\n  },\n\n  /* Nexus Mobile */\n  {\n    test: [/nexus\\s*[0-6].*/i, /galaxy nexus/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: 'Nexus',\n      };\n    },\n  },\n\n  /* Mobile */\n  {\n    test: [/[^-]mobi/i],\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n      };\n    },\n  },\n\n  /* BlackBerry */\n  {\n    test(parser) {\n      return parser.getBrowserName(true) === 'blackberry';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: 'BlackBerry',\n      };\n    },\n  },\n\n  /* Bada */\n  {\n    test(parser) {\n      return parser.getBrowserName(true) === 'bada';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n      };\n    },\n  },\n\n  /* Windows Phone */\n  {\n    test(parser) {\n      return parser.getBrowserName() === 'windows phone';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n        vendor: 'Microsoft',\n      };\n    },\n  },\n\n  /* Android Tablet */\n  {\n    test(parser) {\n      const osMajorVersion = Number(String(parser.getOSVersion()).split('.')[0]);\n      return parser.getOSName(true) === 'android' && (osMajorVersion >= 3);\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tablet,\n      };\n    },\n  },\n\n  /* Android Mobile */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'android';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.mobile,\n      };\n    },\n  },\n\n  /* desktop */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'macos';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.desktop,\n        vendor: 'Apple',\n      };\n    },\n  },\n\n  /* Windows */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'windows';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.desktop,\n      };\n    },\n  },\n\n  /* Linux */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'linux';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.desktop,\n      };\n    },\n  },\n\n  /* PlayStation 4 */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'playstation 4';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tv,\n      };\n    },\n  },\n\n  /* Roku */\n  {\n    test(parser) {\n      return parser.getOSName(true) === 'roku';\n    },\n    describe() {\n      return {\n        type: PLATFORMS_MAP.tv,\n      };\n    },\n  },\n];\n", "import Utils from './utils.js';\nimport { ENGINE_MAP } from './constants.js';\n\n/*\n * More specific goes first\n */\nexport default [\n  /* EdgeHTML */\n  {\n    test(parser) {\n      return parser.getBrowserName(true) === 'microsoft edge';\n    },\n    describe(ua) {\n      const isBlinkBased = /\\sedg\\//i.test(ua);\n\n      // return blink if it's blink-based one\n      if (isBlinkBased) {\n        return {\n          name: ENGINE_MAP.Blink,\n        };\n      }\n\n      // otherwise match the version and return EdgeHTML\n      const version = Utils.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      return {\n        name: ENGINE_MAP.EdgeHTML,\n        version,\n      };\n    },\n  },\n\n  /* Trident */\n  {\n    test: [/trident/i],\n    describe(ua) {\n      const engine = {\n        name: ENGINE_MAP.Trident,\n      };\n\n      const version = Utils.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        engine.version = version;\n      }\n\n      return engine;\n    },\n  },\n\n  /* Presto */\n  {\n    test(parser) {\n      return parser.test(/presto/i);\n    },\n    describe(ua) {\n      const engine = {\n        name: ENGINE_MAP.Presto,\n      };\n\n      const version = Utils.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        engine.version = version;\n      }\n\n      return engine;\n    },\n  },\n\n  /* Gecko */\n  {\n    test(parser) {\n      const isGecko = parser.test(/gecko/i);\n      const likeGecko = parser.test(/like gecko/i);\n      return isGecko && !likeGecko;\n    },\n    describe(ua) {\n      const engine = {\n        name: ENGINE_MAP.Gecko,\n      };\n\n      const version = Utils.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        engine.version = version;\n      }\n\n      return engine;\n    },\n  },\n\n  /* Blink */\n  {\n    test: [/(apple)?webkit\\/537\\.36/i],\n    describe() {\n      return {\n        name: ENGINE_MAP.Blink,\n      };\n    },\n  },\n\n  /* WebKit */\n  {\n    test: [/(apple)?webkit/i],\n    describe(ua) {\n      const engine = {\n        name: ENGINE_MAP.WebKit,\n      };\n\n      const version = Utils.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n\n      if (version) {\n        engine.version = version;\n      }\n\n      return engine;\n    },\n  },\n];\n", "import browserParsersList from './parser-browsers.js';\nimport osParsersList from './parser-os.js';\nimport platformParsersList from './parser-platforms.js';\nimport enginesParsersList from './parser-engines.js';\nimport Utils from './utils.js';\n\n/**\n * The main class that arranges the whole parsing process.\n */\nclass Parser {\n  /**\n   * Create instance of Parser\n   *\n   * @param {String} UA User-Agent string\n   * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance\n   * improvements if you need to make a more particular parsing\n   * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}\n   *\n   * @throw {Error} in case of empty UA String\n   *\n   * @constructor\n   */\n  constructor(UA, skipParsing = false) {\n    if (UA === void (0) || UA === null || UA === '') {\n      throw new Error(\"UserAgent parameter can't be empty\");\n    }\n\n    this._ua = UA;\n\n    /**\n     * @typedef ParsedResult\n     * @property {Object} browser\n     * @property {String|undefined} [browser.name]\n     * Browser name, like `\"Chrome\"` or `\"Internet Explorer\"`\n     * @property {String|undefined} [browser.version] Browser version as a String `\"12.01.45334.10\"`\n     * @property {Object} os\n     * @property {String|undefined} [os.name] OS name, like `\"Windows\"` or `\"macOS\"`\n     * @property {String|undefined} [os.version] OS version, like `\"NT 5.1\"` or `\"10.11.1\"`\n     * @property {String|undefined} [os.versionName] OS name, like `\"XP\"` or `\"High Sierra\"`\n     * @property {Object} platform\n     * @property {String|undefined} [platform.type]\n     * platform type, can be either `\"desktop\"`, `\"tablet\"` or `\"mobile\"`\n     * @property {String|undefined} [platform.vendor] Vendor of the device,\n     * like `\"Apple\"` or `\"Samsung\"`\n     * @property {String|undefined} [platform.model] Device model,\n     * like `\"iPhone\"` or `\"Kindle Fire HD 7\"`\n     * @property {Object} engine\n     * @property {String|undefined} [engine.name]\n     * Can be any of this: `WebKit`, `Blink`, `Gecko`, `Trident`, `Presto`, `EdgeHTML`\n     * @property {String|undefined} [engine.version] String version of the engine\n     */\n    this.parsedResult = {};\n\n    if (skipParsing !== true) {\n      this.parse();\n    }\n  }\n\n  /**\n   * Get UserAgent string of current Parser instance\n   * @return {String} User-Agent String of the current <Parser> object\n   *\n   * @public\n   */\n  getUA() {\n    return this._ua;\n  }\n\n  /**\n   * Test a UA string for a regexp\n   * @param {RegExp} regex\n   * @return {Boolean}\n   */\n  test(regex) {\n    return regex.test(this._ua);\n  }\n\n  /**\n   * Get parsed browser object\n   * @return {Object}\n   */\n  parseBrowser() {\n    this.parsedResult.browser = {};\n\n    const browserDescriptor = Utils.find(browserParsersList, (_browser) => {\n      if (typeof _browser.test === 'function') {\n        return _browser.test(this);\n      }\n\n      if (_browser.test instanceof Array) {\n        return _browser.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (browserDescriptor) {\n      this.parsedResult.browser = browserDescriptor.describe(this.getUA());\n    }\n\n    return this.parsedResult.browser;\n  }\n\n  /**\n   * Get parsed browser object\n   * @return {Object}\n   *\n   * @public\n   */\n  getBrowser() {\n    if (this.parsedResult.browser) {\n      return this.parsedResult.browser;\n    }\n\n    return this.parseBrowser();\n  }\n\n  /**\n   * Get browser's name\n   * @return {String} Browser's name or an empty string\n   *\n   * @public\n   */\n  getBrowserName(toLowerCase) {\n    if (toLowerCase) {\n      return String(this.getBrowser().name).toLowerCase() || '';\n    }\n    return this.getBrowser().name || '';\n  }\n\n\n  /**\n   * Get browser's version\n   * @return {String} version of browser\n   *\n   * @public\n   */\n  getBrowserVersion() {\n    return this.getBrowser().version;\n  }\n\n  /**\n   * Get OS\n   * @return {Object}\n   *\n   * @example\n   * this.getOS();\n   * {\n   *   name: 'macOS',\n   *   version: '10.11.12'\n   * }\n   */\n  getOS() {\n    if (this.parsedResult.os) {\n      return this.parsedResult.os;\n    }\n\n    return this.parseOS();\n  }\n\n  /**\n   * Parse OS and save it to this.parsedResult.os\n   * @return {*|{}}\n   */\n  parseOS() {\n    this.parsedResult.os = {};\n\n    const os = Utils.find(osParsersList, (_os) => {\n      if (typeof _os.test === 'function') {\n        return _os.test(this);\n      }\n\n      if (_os.test instanceof Array) {\n        return _os.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (os) {\n      this.parsedResult.os = os.describe(this.getUA());\n    }\n\n    return this.parsedResult.os;\n  }\n\n  /**\n   * Get OS name\n   * @param {Boolean} [toLowerCase] return lower-cased value\n   * @return {String} name of the OS — macOS, Windows, Linux, etc.\n   */\n  getOSName(toLowerCase) {\n    const { name } = this.getOS();\n\n    if (toLowerCase) {\n      return String(name).toLowerCase() || '';\n    }\n\n    return name || '';\n  }\n\n  /**\n   * Get OS version\n   * @return {String} full version with dots ('10.11.12', '5.6', etc)\n   */\n  getOSVersion() {\n    return this.getOS().version;\n  }\n\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n  getPlatform() {\n    if (this.parsedResult.platform) {\n      return this.parsedResult.platform;\n    }\n\n    return this.parsePlatform();\n  }\n\n  /**\n   * Get platform name\n   * @param {Boolean} [toLowerCase=false]\n   * @return {*}\n   */\n  getPlatformType(toLowerCase = false) {\n    const { type } = this.getPlatform();\n\n    if (toLowerCase) {\n      return String(type).toLowerCase() || '';\n    }\n\n    return type || '';\n  }\n\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n  parsePlatform() {\n    this.parsedResult.platform = {};\n\n    const platform = Utils.find(platformParsersList, (_platform) => {\n      if (typeof _platform.test === 'function') {\n        return _platform.test(this);\n      }\n\n      if (_platform.test instanceof Array) {\n        return _platform.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (platform) {\n      this.parsedResult.platform = platform.describe(this.getUA());\n    }\n\n    return this.parsedResult.platform;\n  }\n\n  /**\n   * Get parsed engine\n   * @return {{}}\n   */\n  getEngine() {\n    if (this.parsedResult.engine) {\n      return this.parsedResult.engine;\n    }\n\n    return this.parseEngine();\n  }\n\n  /**\n   * Get engines's name\n   * @return {String} Engines's name or an empty string\n   *\n   * @public\n   */\n  getEngineName(toLowerCase) {\n    if (toLowerCase) {\n      return String(this.getEngine().name).toLowerCase() || '';\n    }\n    return this.getEngine().name || '';\n  }\n\n  /**\n   * Get parsed platform\n   * @return {{}}\n   */\n  parseEngine() {\n    this.parsedResult.engine = {};\n\n    const engine = Utils.find(enginesParsersList, (_engine) => {\n      if (typeof _engine.test === 'function') {\n        return _engine.test(this);\n      }\n\n      if (_engine.test instanceof Array) {\n        return _engine.test.some(condition => this.test(condition));\n      }\n\n      throw new Error(\"Browser's test function is not valid\");\n    });\n\n    if (engine) {\n      this.parsedResult.engine = engine.describe(this.getUA());\n    }\n\n    return this.parsedResult.engine;\n  }\n\n  /**\n   * Parse full information about the browser\n   * @returns {Parser}\n   */\n  parse() {\n    this.parseBrowser();\n    this.parseOS();\n    this.parsePlatform();\n    this.parseEngine();\n\n    return this;\n  }\n\n  /**\n   * Get parsed result\n   * @return {ParsedResult}\n   */\n  getResult() {\n    return Utils.assign({}, this.parsedResult);\n  }\n\n  /**\n   * Check if parsed browser matches certain conditions\n   *\n   * @param {Object} checkTree It's one or two layered object,\n   * which can include a platform or an OS on the first layer\n   * and should have browsers specs on the bottom-laying layer\n   *\n   * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.\n   * Returns `undefined` when the browser is no described in the checkTree object.\n   *\n   * @example\n   * const browser = Bowser.getParser(window.navigator.userAgent);\n   * if (browser.satisfies({chrome: '>118.01.1322' }))\n   * // or with os\n   * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))\n   * // or with platforms\n   * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))\n   */\n  satisfies(checkTree) {\n    const platformsAndOSes = {};\n    let platformsAndOSCounter = 0;\n    const browsers = {};\n    let browsersCounter = 0;\n\n    const allDefinitions = Object.keys(checkTree);\n\n    allDefinitions.forEach((key) => {\n      const currentDefinition = checkTree[key];\n      if (typeof currentDefinition === 'string') {\n        browsers[key] = currentDefinition;\n        browsersCounter += 1;\n      } else if (typeof currentDefinition === 'object') {\n        platformsAndOSes[key] = currentDefinition;\n        platformsAndOSCounter += 1;\n      }\n    });\n\n    if (platformsAndOSCounter > 0) {\n      const platformsAndOSNames = Object.keys(platformsAndOSes);\n      const OSMatchingDefinition = Utils.find(platformsAndOSNames, name => (this.isOS(name)));\n\n      if (OSMatchingDefinition) {\n        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);\n\n        if (osResult !== void 0) {\n          return osResult;\n        }\n      }\n\n      const platformMatchingDefinition = Utils.find(\n        platformsAndOSNames,\n        name => (this.isPlatform(name)),\n      );\n      if (platformMatchingDefinition) {\n        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);\n\n        if (platformResult !== void 0) {\n          return platformResult;\n        }\n      }\n    }\n\n    if (browsersCounter > 0) {\n      const browserNames = Object.keys(browsers);\n      const matchingDefinition = Utils.find(browserNames, name => (this.isBrowser(name, true)));\n\n      if (matchingDefinition !== void 0) {\n        return this.compareVersion(browsers[matchingDefinition]);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Check if the browser name equals the passed string\n   * @param browserName The string to compare with the browser name\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\n   * @returns {boolean}\n   */\n  isBrowser(browserName, includingAlias = false) {\n    const defaultBrowserName = this.getBrowserName().toLowerCase();\n    let browserNameLower = browserName.toLowerCase();\n    const alias = Utils.getBrowserTypeByAlias(browserNameLower);\n\n    if (includingAlias && alias) {\n      browserNameLower = alias.toLowerCase();\n    }\n    return browserNameLower === defaultBrowserName;\n  }\n\n  compareVersion(version) {\n    let expectedResults = [0];\n    let comparableVersion = version;\n    let isLoose = false;\n\n    const currentBrowserVersion = this.getBrowserVersion();\n\n    if (typeof currentBrowserVersion !== 'string') {\n      return void 0;\n    }\n\n    if (version[0] === '>' || version[0] === '<') {\n      comparableVersion = version.substr(1);\n      if (version[1] === '=') {\n        isLoose = true;\n        comparableVersion = version.substr(2);\n      } else {\n        expectedResults = [];\n      }\n      if (version[0] === '>') {\n        expectedResults.push(1);\n      } else {\n        expectedResults.push(-1);\n      }\n    } else if (version[0] === '=') {\n      comparableVersion = version.substr(1);\n    } else if (version[0] === '~') {\n      isLoose = true;\n      comparableVersion = version.substr(1);\n    }\n\n    return expectedResults.indexOf(\n      Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose),\n    ) > -1;\n  }\n\n  isOS(osName) {\n    return this.getOSName(true) === String(osName).toLowerCase();\n  }\n\n  isPlatform(platformType) {\n    return this.getPlatformType(true) === String(platformType).toLowerCase();\n  }\n\n  isEngine(engineName) {\n    return this.getEngineName(true) === String(engineName).toLowerCase();\n  }\n\n  /**\n   * Is anything? Check if the browser is called \"anything\",\n   * the OS called \"anything\" or the platform called \"anything\"\n   * @param {String} anything\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\n   * @returns {Boolean}\n   */\n  is(anything, includingAlias = false) {\n    return this.isBrowser(anything, includingAlias) || this.isOS(anything)\n      || this.isPlatform(anything);\n  }\n\n  /**\n   * Check if any of the given values satisfies this.is(anything)\n   * @param {String[]} anythings\n   * @returns {Boolean}\n   */\n  some(anythings = []) {\n    return anythings.some(anything => this.is(anything));\n  }\n}\n\nexport default Parser;\n", "/*!\n * Bowser - a browser detector\n * https://github.com/lancedikson/bowser\n * MIT License | (c) Dustin Diaz 2012-2015\n * MIT License | (c) Denis Demchenko 2015-2019\n */\nimport Parser from './parser.js';\nimport {\n  BROWSER_MAP,\n  ENGINE_MAP,\n  OS_MAP,\n  PLATFORMS_MAP,\n} from './constants.js';\n\n/**\n * Bowser class.\n * Keep it simple as much as it can be.\n * It's supposed to work with collections of {@link Parser} instances\n * rather then solve one-instance problems.\n * All the one-instance stuff is located in Parser class.\n *\n * @class\n * @classdesc Bowser is a static object, that provides an API to the Parsers\n * @hideconstructor\n */\nclass Bowser {\n  /**\n   * Creates a {@link Parser} instance\n   *\n   * @param {String} UA UserAgent string\n   * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it\n   * explicitly. Same as `skipParsing` for {@link Parser}.\n   * @returns {Parser}\n   * @throws {Error} when UA is not a String\n   *\n   * @example\n   * const parser = Bowser.getParser(window.navigator.userAgent);\n   * const result = parser.getResult();\n   */\n  static getParser(UA, skipParsing = false) {\n    if (typeof UA !== 'string') {\n      throw new Error('UserAgent should be a string');\n    }\n    return new Parser(UA, skipParsing);\n  }\n\n  /**\n   * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately\n   *\n   * @param UA\n   * @return {ParsedResult}\n   *\n   * @example\n   * const result = Bowser.parse(window.navigator.userAgent);\n   */\n  static parse(UA) {\n    return (new Parser(UA)).getResult();\n  }\n\n  static get BROWSER_MAP() {\n    return BROWSER_MAP;\n  }\n\n  static get ENGINE_MAP() {\n    return ENGINE_MAP;\n  }\n\n  static get OS_MAP() {\n    return OS_MAP;\n  }\n\n  static get PLATFORMS_MAP() {\n    return PLATFORMS_MAP;\n  }\n}\n\nexport default Bowser;\n"],
  "mappings": ";;;;;AAAA,IAEa,qBA0CA,aAyCA,eAOA,QAgBA;AA5Gb;AAAA;AAEO,IAAM,sBAAsB;AAAA,MACjC,eAAe;AAAA,MACf,mBAAmB;AAAA,MACnB,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,MACV,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS;AAAA,MACT,iBAAiB;AAAA,MACjB,WAAW;AAAA,MACX,qBAAqB;AAAA,MACrB,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,kBAAkB;AAAA,MAClB,cAAc;AAAA,MACd,uBAAuB;AAAA,MACvB,OAAO;AAAA,MACP,eAAe;AAAA,MACf,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,gCAAgC;AAAA,MAChC,WAAW;AAAA,MACX,UAAU;AAAA,MACV,OAAO;AAAA,MACP,OAAO;AAAA,MACP,cAAc;AAAA,MACd,SAAS;AAAA,MACT,iBAAiB;AAAA,MACjB,QAAQ;AAAA,MACR,kBAAkB;AAAA,MAClB,MAAM;AAAA,IACR;AAEO,IAAM,cAAc;AAAA,MACzB,aAAa;AAAA,MACb,SAAS;AAAA,MACT,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,MACV,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS;AAAA,MACT,WAAW;AAAA,MACX,eAAe;AAAA,MACf,IAAI;AAAA,MACJ,UAAU;AAAA,MACV,SAAS;AAAA,MACT,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,OAAO;AAAA,MACP,aAAa;AAAA,MACb,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,kBAAkB;AAAA,MAClB,WAAW;AAAA,MACX,UAAU;AAAA,MACV,OAAO;AAAA,MACP,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,SAAS;AAAA,MACT,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,IACV;AAEO,IAAM,gBAAgB;AAAA,MAC3B,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,IAAI;AAAA,IACN;AAEO,IAAM,SAAS;AAAA,MACpB,cAAc;AAAA,MACd,SAAS;AAAA,MACT,OAAO;AAAA,MACP,KAAK;AAAA,MACL,SAAS;AAAA,MACT,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,MACP,UAAU;AAAA,MACV,cAAc;AAAA,MACd,MAAM;AAAA,IACR;AAEO,IAAM,aAAa;AAAA,MACxB,UAAU;AAAA,MACV,OAAO;AAAA,MACP,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAAA;AAAA;;;ACnHA,IAEqB;AAFrB;AAAA;AAAA;AAEA,IAAqB,QAArB,MAAqB,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOzB,OAAO,cAAc,QAAQ,IAAI;AAC/B,cAAM,QAAQ,GAAG,MAAM,MAAM;AAC7B,eAAQ,SAAS,MAAM,SAAS,KAAK,MAAM,CAAC,KAAM;AAAA,MACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,OAAO,eAAe,QAAQ,IAAI;AAChC,cAAM,QAAQ,GAAG,MAAM,MAAM;AAC7B,eAAQ,SAAS,MAAM,SAAS,KAAK,MAAM,CAAC,KAAM;AAAA,MACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,OAAO,oBAAoB,QAAQ,IAAI,QAAQ;AAC7C,YAAI,OAAO,KAAK,EAAE,GAAG;AACnB,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,MAEA,OAAO,sBAAsB,SAAS;AACpC,gBAAQ,SAAS;AAAA,UACf,KAAK;AAAM,mBAAO;AAAA,UAClB,KAAK;AAAM,mBAAO;AAAA,UAClB,KAAK;AAAU,mBAAO;AAAA,UACtB,KAAK;AAAU,mBAAO;AAAA,UACtB,KAAK;AAAU,mBAAO;AAAA,UACtB,KAAK;AAAU,mBAAO;AAAA,UACtB,KAAK;AAAU,mBAAO;AAAA,UACtB,KAAK;AAAU,mBAAO;AAAA,UACtB,KAAK;AAAU,mBAAO;AAAA,UACtB,KAAK;AAAW,mBAAO;AAAA,UACvB;AAAS,mBAAO;AAAA,QAClB;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAsBA,OAAO,oBAAoB,SAAS;AAClC,cAAM,IAAI,QAAQ,MAAM,GAAG,EAAE,OAAO,GAAG,CAAC,EAAE,IAAI,OAAK,SAAS,GAAG,EAAE,KAAK,CAAC;AACvE,UAAE,KAAK,CAAC;AACR,YAAI,EAAE,CAAC,MAAM;AAAI,iBAAO;AACxB,gBAAQ,EAAE,CAAC,GAAG;AAAA,UACZ,KAAK;AAAG,mBAAO;AAAA,UACf,KAAK;AAAG,mBAAO;AAAA,UACf,KAAK;AAAG,mBAAO;AAAA,UACf,KAAK;AAAG,mBAAO;AAAA,UACf,KAAK;AAAG,mBAAO;AAAA,UACf,KAAK;AAAI,mBAAO;AAAA,UAChB,KAAK;AAAI,mBAAO;AAAA,UAChB,KAAK;AAAI,mBAAO;AAAA,UAChB,KAAK;AAAI,mBAAO;AAAA,UAChB,KAAK;AAAI,mBAAO;AAAA,UAChB,KAAK;AAAI,mBAAO;AAAA,UAChB;AAAS,mBAAO;AAAA,QAClB;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA0BA,OAAO,sBAAsB,SAAS;AACpC,cAAM,IAAI,QAAQ,MAAM,GAAG,EAAE,OAAO,GAAG,CAAC,EAAE,IAAI,OAAK,SAAS,GAAG,EAAE,KAAK,CAAC;AACvE,UAAE,KAAK,CAAC;AACR,YAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,IAAI;AAAG,iBAAO;AACnC,YAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,IAAI;AAAG,iBAAO;AACnC,YAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,KAAK;AAAG,iBAAO;AACpC,YAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,IAAI;AAAG,iBAAO;AACnC,YAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,MAAM;AAAG,iBAAO;AACrC,YAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,IAAI;AAAG,iBAAO;AACnC,YAAI,EAAE,CAAC,MAAM;AAAG,iBAAO;AACvB,YAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,IAAI;AAAG,iBAAO;AACnC,YAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,IAAI;AAAG,iBAAO;AACnC,YAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,KAAK;AAAG,iBAAO;AACpC,YAAI,EAAE,CAAC,MAAM;AAAG,iBAAO;AACvB,YAAI,EAAE,CAAC,MAAM;AAAG,iBAAO;AACvB,YAAI,EAAE,CAAC,MAAM;AAAG,iBAAO;AACvB,YAAI,EAAE,CAAC,MAAM;AAAG,iBAAO;AACvB,YAAI,EAAE,CAAC,MAAM;AAAG,iBAAO;AACvB,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA,OAAO,oBAAoB,SAAS;AAClC,eAAO,QAAQ,MAAM,GAAG,EAAE;AAAA,MAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmBA,OAAO,gBAAgB,UAAU,UAAU,UAAU,OAAO;AAE1D,cAAM,oBAAoB,OAAM,oBAAoB,QAAQ;AAC5D,cAAM,oBAAoB,OAAM,oBAAoB,QAAQ;AAE5D,YAAI,YAAY,KAAK,IAAI,mBAAmB,iBAAiB;AAC7D,YAAI,gBAAgB;AAEpB,cAAM,SAAS,OAAM,IAAI,CAAC,UAAU,QAAQ,GAAG,CAAC,YAAY;AAC1D,gBAAM,QAAQ,YAAY,OAAM,oBAAoB,OAAO;AAG3D,gBAAM,WAAW,UAAU,IAAI,MAAM,QAAQ,CAAC,EAAE,KAAK,IAAI;AAGzD,iBAAO,OAAM,IAAI,SAAS,MAAM,GAAG,GAAG,WAAS,IAAI,MAAM,KAAK,MAAM,MAAM,EAAE,KAAK,GAAG,IAAI,KAAK,EAAE,QAAQ;AAAA,QACzG,CAAC;AAGD,YAAI,SAAS;AACX,0BAAgB,YAAY,KAAK,IAAI,mBAAmB,iBAAiB;AAAA,QAC3E;AAGA,qBAAa;AACb,eAAO,aAAa,eAAe;AAEjC,cAAI,OAAO,CAAC,EAAE,SAAS,IAAI,OAAO,CAAC,EAAE,SAAS,GAAG;AAC/C,mBAAO;AAAA,UACT;AAEA,cAAI,OAAO,CAAC,EAAE,SAAS,MAAM,OAAO,CAAC,EAAE,SAAS,GAAG;AACjD,gBAAI,cAAc,eAAe;AAE/B,qBAAO;AAAA,YACT;AAEA,yBAAa;AAAA,UACf,WAAW,OAAO,CAAC,EAAE,SAAS,IAAI,OAAO,CAAC,EAAE,SAAS,GAAG;AACtD,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,OAAO,IAAI,KAAK,UAAU;AACxB,cAAM,SAAS,CAAC;AAChB,YAAI;AACJ,YAAI,MAAM,UAAU,KAAK;AACvB,iBAAO,MAAM,UAAU,IAAI,KAAK,KAAK,QAAQ;AAAA,QAC/C;AACA,aAAK,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AAClC,iBAAO,KAAK,SAAS,IAAI,CAAC,CAAC,CAAC;AAAA,QAC9B;AACA,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,OAAO,KAAK,KAAK,WAAW;AAC1B,YAAI;AACJ,YAAI;AACJ,YAAI,MAAM,UAAU,MAAM;AACxB,iBAAO,MAAM,UAAU,KAAK,KAAK,KAAK,SAAS;AAAA,QACjD;AACA,aAAK,IAAI,GAAG,IAAI,IAAI,QAAQ,IAAI,GAAG,KAAK,GAAG;AACzC,gBAAM,QAAQ,IAAI,CAAC;AACnB,cAAI,UAAU,OAAO,CAAC,GAAG;AACvB,mBAAO;AAAA,UACT;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,OAAO,OAAO,QAAQ,WAAW;AAC/B,cAAM,SAAS;AACf,YAAI;AACJ,YAAI;AACJ,YAAI,OAAO,QAAQ;AACjB,iBAAO,OAAO,OAAO,KAAK,GAAG,SAAS;AAAA,QACxC;AACA,aAAK,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG,KAAK,GAAG;AAC/C,gBAAM,WAAW,UAAU,CAAC;AAC5B,cAAI,OAAO,aAAa,YAAY,aAAa,MAAM;AACrD,kBAAM,OAAO,OAAO,KAAK,QAAQ;AACjC,iBAAK,QAAQ,CAAC,QAAQ;AACpB,qBAAO,GAAG,IAAI,SAAS,GAAG;AAAA,YAC5B,CAAC;AAAA,UACH;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA,OAAO,gBAAgB,aAAa;AAClC,eAAO,oBAAoB,WAAW;AAAA,MACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA,OAAO,sBAAsB,cAAc;AACzC,eAAO,YAAY,YAAY,KAAK;AAAA,MACtC;AAAA,IACF;AAAA;AAAA;;;ACpTA,IA2BM,yBAEA,cA8pBC;AA3rBP;AAAA;AAyBA;AAEA,IAAM,0BAA0B;AAEhC,IAAM,eAAe;AAAA;AAAA,MAEnB;AAAA,QACE,MAAM,CAAC,YAAY;AAAA,QACnB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,4BAA4B,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAEtH,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,QAAQ;AAAA,QACf,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,mCAAmC,EAAE;AAE7H,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,cAAc;AAAA,QACrB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,4BAA4B,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAEtH,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,iBAAiB;AAAA,QACxB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,4CAA4C,EAAE;AAEtI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,QAAQ;AAAA,QACf,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,kCAAkC,EAAE;AAE5H,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,YAAY;AAAA,QACnB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,sCAAsC,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAEhI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,QAAQ;AAAA,QACf,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,kCAAkC,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAE5H,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,QAAQ;AAAA,QACf,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,kCAAkC,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAE5H,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,QAAQ;AAAA,QACf,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,mCAAmC,EAAE;AAE7H,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,uBAAuB;AAAA,QAC9B,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,iCAAiC,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAE3H,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,YAAY;AAAA,QACnB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,uCAAuC,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAEjI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,YAAY;AAAA,QACnB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,uCAAuC,EAAE;AAEjI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,gBAAgB;AAAA,QACvB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,2CAA2C,EAAE;AAErI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,sCAAsC,EAAE;AAEhI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,SAAS;AAAA,QAChB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,oCAAoC,EAAE;AAE9H,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,sCAAsC,EAAE;AAEhI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,sCAAsC,EAAE;AAEhI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,iBAAiB;AAAA,QACxB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,4CAA4C,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAEtI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,YAAY;AAAA,QACnB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAO,iBAAkB,KAAK,EAAE,IAAI,oBAAoB;AAAA,UAC1D;AACA,gBAAM,UAAU,MAAM,cAAc,mDAAmD,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAE7I,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,eAAe;AAAA,QACtB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,kCAAkC,EAAE;AAExE,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,UAAU;AAAA,QACjB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AAEA,gBAAM,UAAU,MAAM,cAAc,4BAA4B,EAAE;AAElE,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,gBAAgB;AAAA,QACvB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AAEA,gBAAM,UAAU,MAAM,eAAe,oCAAoC,EAAE;AAE3E,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,UAAU;AAAA,QACjB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,8BAA8B,EAAE;AAEpE,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,YAAY;AAAA,QACnB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,gCAAgC,EAAE;AAEtE,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AAEA,gBAAM,UAAU,MAAM,cAAc,sCAAsC,EAAE;AAE5E,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,OAAO;AAAA,QACd,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,2BAA2B,EAAE;AAEjE,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,UAAU;AAAA,QACjB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,gCAAgC,EAAE;AAEtE,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,+BAA+B,EAAE;AAErE,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,uBAAuB,cAAc;AAAA,QAC5C,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,sCAAsC,EAAE;AAEhI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,iBAAiB;AAAA,QACxB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE,KAAK,MAAM,cAAc,2CAA2C,EAAE;AAErI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,OAAO;AAAA,QACd,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,6BAA6B,EAAE;AAEnE,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,QAAQ;AAAA,QACf,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,2CAA2C,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAErI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,sCAAsC,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAEhI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,0BAA0B;AAAA,QACjC,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,qDAAqD,EAAE;AAE3F,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,mCAAmC,EAAE;AAEzE,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,cAAc;AAAA,QACrB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yCAAyC,EAAE;AAE/E,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,sCAAsC,EAAE,KAAK,MAAM,cAAc,yBAAyB,EAAE;AAEhI,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,oBAAoB;AAAA,QAC3B,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,4CAA4C,EAAE;AAElF,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM,CAAC,MAAM;AAAA,QACb,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,8BAA8B,EAAE;AAEpE,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,gBAAM,iBAAiB,CAAC,OAAO,KAAK,eAAe;AACnD,gBAAM,aAAa,OAAO,KAAK,UAAU;AACzC,iBAAO,kBAAkB;AAAA,QAC3B;AAAA,QACA,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE;AAE/D,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,gBAAgB;AAAA,QACvB,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE;AAE/D,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,qBAAqB;AAAA,QAC5B,SAAS,IAAI;AACX,gBAAM,UAAU;AAAA,YACd,MAAM;AAAA,UACR;AACA,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE;AAE/D,cAAI,SAAS;AACX,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,KAAK;AAAA,QACZ,SAAS,IAAI;AAKX,gBAAM,0BAA0B;AAChC,gBAAM,uBAAuB;AAC7B,gBAAM,gBAAgB,GAAG,OAAO,KAAK,MAAM;AAC3C,gBAAM,SAAS,gBAAgB,uBAAuB;AACtD,iBAAO;AAAA,YACL,MAAM,MAAM,cAAc,QAAQ,EAAE;AAAA,YACpC,SAAS,MAAM,eAAe,QAAQ,EAAE;AAAA,UAC1C;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,IAAO,0BAAQ;AAAA;AAAA;;;AC3rBf,IAGO;AAHP;AAAA;AAAA;AACA;AAEA,IAAO,oBAAQ;AAAA;AAAA,MAEb;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,yBAAyB,EAAE;AAC/D,iBAAO;AAAA,YACL,MAAM,OAAO;AAAA,YACb;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,gBAAgB;AAAA,QACvB,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,0CAA0C,EAAE;AAChF,iBAAO;AAAA,YACL,MAAM,OAAO;AAAA,YACb;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,kCAAkC,EAAE;AACxE,gBAAM,cAAc,MAAM,sBAAsB,OAAO;AAEvD,iBAAO;AAAA,YACL,MAAM,OAAO;AAAA,YACb;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,6BAA6B;AAAA,QACpC,SAAS,IAAI;AACX,gBAAM,SAAS;AAAA,YACb,MAAM,OAAO;AAAA,UACf;AACA,gBAAM,UAAU,MAAM,eAAe,yBAAyB,EAAE;AAChE,cAAI,SAAS;AACX,mBAAO,UAAU;AAAA,UACnB;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,YAAY;AAAA,QACnB,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,8BAA8B,EAAE,EAAE,QAAQ,UAAU,GAAG;AAC3F,gBAAM,cAAc,MAAM,oBAAoB,OAAO;AAErD,gBAAM,KAAK;AAAA,YACT,MAAM,OAAO;AAAA,YACb;AAAA,UACF;AACA,cAAI,aAAa;AACf,eAAG,cAAc;AAAA,UACnB;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,qBAAqB;AAAA,QAC5B,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,sCAAsC,EAAE,EAAE,QAAQ,UAAU,GAAG;AAEnG,iBAAO;AAAA,YACL,MAAM,OAAO;AAAA,YACb;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,gBAAM,iBAAiB,CAAC,OAAO,KAAK,eAAe;AACnD,gBAAM,aAAa,OAAO,KAAK,UAAU;AACzC,iBAAO,kBAAkB;AAAA,QAC3B;AAAA,QACA,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,+BAA+B,EAAE;AACrE,gBAAM,cAAc,MAAM,sBAAsB,OAAO;AACvD,gBAAM,KAAK;AAAA,YACT,MAAM,OAAO;AAAA,YACb;AAAA,UACF;AACA,cAAI,aAAa;AACf,eAAG,cAAc;AAAA,UACnB;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,iBAAiB;AAAA,QACxB,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,oCAAoC,EAAE;AAC1E,gBAAM,KAAK;AAAA,YACT,MAAM,OAAO;AAAA,UACf;AAEA,cAAI,WAAW,QAAQ,QAAQ;AAC7B,eAAG,UAAU;AAAA,UACf;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,uBAAuB,cAAc;AAAA,QAC5C,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,mCAAmC,EAAE,KACpE,MAAM,cAAc,oCAAoC,EAAE,KAC1D,MAAM,cAAc,cAAc,EAAE;AAEzC,iBAAO;AAAA,YACL,MAAM,OAAO;AAAA,YACb;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,OAAO;AAAA,QACd,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,wBAAwB,EAAE;AAE9D,iBAAO;AAAA,YACL,MAAM,OAAO;AAAA,YACb;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,QAAQ;AAAA,QACf,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,4BAA4B,EAAE;AAElE,iBAAO;AAAA,YACL,MAAM,OAAO;AAAA,YACb;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,QAAQ;AAAA,QACf,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,OAAO;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,MAAM;AAAA,QACb,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,OAAO;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,eAAe;AAAA,QACtB,SAAS,IAAI;AACX,gBAAM,UAAU,MAAM,cAAc,oCAAoC,EAAE;AAC1E,iBAAO;AAAA,YACL,MAAM,OAAO;AAAA,YACb;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;ACtMA,IAQO;AARP;AAAA;AAAA;AACA;AAOA,IAAO,2BAAQ;AAAA;AAAA,MAEb;AAAA,QACE,MAAM,CAAC,YAAY;AAAA,QACnB,WAAW;AACT,iBAAO;AAAA,YACL,MAAM;AAAA,YACN,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,SAAS;AAAA,QAChB,SAAS,IAAI;AACX,gBAAM,QAAQ,MAAM,cAAc,cAAc,EAAE,KAAK;AACvD,gBAAM,WAAW;AAAA,YACf,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,UACV;AACA,cAAI,OAAO;AACT,qBAAS,QAAQ;AAAA,UACnB;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,yBAAyB;AAAA,QAChC,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,OAAO;AAAA,QACd,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,YACR,OAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,6BAA6B;AAAA,QACpC,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,YACR,OAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,aAAa;AAAA,QACpB,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,YACR,OAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,OAAO;AAAA,QACd,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,gBAAgB;AAAA,QACvB,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,gBAAM,UAAU,OAAO,KAAK,cAAc;AAC1C,gBAAM,cAAc,OAAO,KAAK,qBAAqB;AACrD,iBAAO,WAAW,CAAC;AAAA,QACrB;AAAA,QACA,SAAS,IAAI;AACX,gBAAM,QAAQ,MAAM,cAAc,kBAAkB,EAAE;AACtD,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,oBAAoB,eAAe;AAAA,QAC1C,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,WAAW;AAAA,QAClB,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,eAAe,IAAI,MAAM;AAAA,QACzC;AAAA,QACA,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,eAAe,IAAI,MAAM;AAAA,QACzC;AAAA,QACA,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,eAAe,MAAM;AAAA,QACrC;AAAA,QACA,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,gBAAM,iBAAiB,OAAO,OAAO,OAAO,aAAa,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACzE,iBAAO,OAAO,UAAU,IAAI,MAAM,aAAc,kBAAkB;AAAA,QACpE;AAAA,QACA,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,UAAU,IAAI,MAAM;AAAA,QACpC;AAAA,QACA,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,UAAU,IAAI,MAAM;AAAA,QACpC;AAAA,QACA,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,YACpB,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,UAAU,IAAI,MAAM;AAAA,QACpC;AAAA,QACA,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,UAAU,IAAI,MAAM;AAAA,QACpC;AAAA,QACA,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,UAAU,IAAI,MAAM;AAAA,QACpC;AAAA,QACA,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,UAAU,IAAI,MAAM;AAAA,QACpC;AAAA,QACA,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,cAAc;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;ACzQA,IAMO;AANP;AAAA;AAAA;AACA;AAKA,IAAO,yBAAQ;AAAA;AAAA,MAEb;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,eAAe,IAAI,MAAM;AAAA,QACzC;AAAA,QACA,SAAS,IAAI;AACX,gBAAM,eAAe,WAAW,KAAK,EAAE;AAGvC,cAAI,cAAc;AAChB,mBAAO;AAAA,cACL,MAAM,WAAW;AAAA,YACnB;AAAA,UACF;AAGA,gBAAM,UAAU,MAAM,cAAc,2BAA2B,EAAE;AAEjE,iBAAO;AAAA,YACL,MAAM,WAAW;AAAA,YACjB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,UAAU;AAAA,QACjB,SAAS,IAAI;AACX,gBAAM,SAAS;AAAA,YACb,MAAM,WAAW;AAAA,UACnB;AAEA,gBAAM,UAAU,MAAM,cAAc,8BAA8B,EAAE;AAEpE,cAAI,SAAS;AACX,mBAAO,UAAU;AAAA,UACnB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,iBAAO,OAAO,KAAK,SAAS;AAAA,QAC9B;AAAA,QACA,SAAS,IAAI;AACX,gBAAM,SAAS;AAAA,YACb,MAAM,WAAW;AAAA,UACnB;AAEA,gBAAM,UAAU,MAAM,cAAc,6BAA6B,EAAE;AAEnE,cAAI,SAAS;AACX,mBAAO,UAAU;AAAA,UACnB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,KAAK,QAAQ;AACX,gBAAM,UAAU,OAAO,KAAK,QAAQ;AACpC,gBAAM,YAAY,OAAO,KAAK,aAAa;AAC3C,iBAAO,WAAW,CAAC;AAAA,QACrB;AAAA,QACA,SAAS,IAAI;AACX,gBAAM,SAAS;AAAA,YACb,MAAM,WAAW;AAAA,UACnB;AAEA,gBAAM,UAAU,MAAM,cAAc,4BAA4B,EAAE;AAElE,cAAI,SAAS;AACX,mBAAO,UAAU;AAAA,UACnB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,0BAA0B;AAAA,QACjC,WAAW;AACT,iBAAO;AAAA,YACL,MAAM,WAAW;AAAA,UACnB;AAAA,QACF;AAAA,MACF;AAAA;AAAA,MAGA;AAAA,QACE,MAAM,CAAC,iBAAiB;AAAA,QACxB,SAAS,IAAI;AACX,gBAAM,SAAS;AAAA,YACb,MAAM,WAAW;AAAA,UACnB;AAEA,gBAAM,UAAU,MAAM,cAAc,6BAA6B,EAAE;AAEnE,cAAI,SAAS;AACX,mBAAO,UAAU;AAAA,UACnB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;ACvHA,IASM,QAseC;AA/eP;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA,IAAM,SAAN,MAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaX,YAAY,IAAI,cAAc,OAAO;AACnC,YAAI,OAAO,UAAY,OAAO,QAAQ,OAAO,IAAI;AAC/C,gBAAM,IAAI,MAAM,oCAAoC;AAAA,QACtD;AAEA,aAAK,MAAM;AAwBX,aAAK,eAAe,CAAC;AAErB,YAAI,gBAAgB,MAAM;AACxB,eAAK,MAAM;AAAA,QACb;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,QAAQ;AACN,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,KAAK,OAAO;AACV,eAAO,MAAM,KAAK,KAAK,GAAG;AAAA,MAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,eAAe;AACb,aAAK,aAAa,UAAU,CAAC;AAE7B,cAAM,oBAAoB,MAAM,KAAK,yBAAoB,CAAC,aAAa;AACrE,cAAI,OAAO,SAAS,SAAS,YAAY;AACvC,mBAAO,SAAS,KAAK,IAAI;AAAA,UAC3B;AAEA,cAAI,SAAS,gBAAgB,OAAO;AAClC,mBAAO,SAAS,KAAK,KAAK,eAAa,KAAK,KAAK,SAAS,CAAC;AAAA,UAC7D;AAEA,gBAAM,IAAI,MAAM,sCAAsC;AAAA,QACxD,CAAC;AAED,YAAI,mBAAmB;AACrB,eAAK,aAAa,UAAU,kBAAkB,SAAS,KAAK,MAAM,CAAC;AAAA,QACrE;AAEA,eAAO,KAAK,aAAa;AAAA,MAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,aAAa;AACX,YAAI,KAAK,aAAa,SAAS;AAC7B,iBAAO,KAAK,aAAa;AAAA,QAC3B;AAEA,eAAO,KAAK,aAAa;AAAA,MAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,eAAe,aAAa;AAC1B,YAAI,aAAa;AACf,iBAAO,OAAO,KAAK,WAAW,EAAE,IAAI,EAAE,YAAY,KAAK;AAAA,QACzD;AACA,eAAO,KAAK,WAAW,EAAE,QAAQ;AAAA,MACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,oBAAoB;AAClB,eAAO,KAAK,WAAW,EAAE;AAAA,MAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaA,QAAQ;AACN,YAAI,KAAK,aAAa,IAAI;AACxB,iBAAO,KAAK,aAAa;AAAA,QAC3B;AAEA,eAAO,KAAK,QAAQ;AAAA,MACtB;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,UAAU;AACR,aAAK,aAAa,KAAK,CAAC;AAExB,cAAM,KAAK,MAAM,KAAK,mBAAe,CAAC,QAAQ;AAC5C,cAAI,OAAO,IAAI,SAAS,YAAY;AAClC,mBAAO,IAAI,KAAK,IAAI;AAAA,UACtB;AAEA,cAAI,IAAI,gBAAgB,OAAO;AAC7B,mBAAO,IAAI,KAAK,KAAK,eAAa,KAAK,KAAK,SAAS,CAAC;AAAA,UACxD;AAEA,gBAAM,IAAI,MAAM,sCAAsC;AAAA,QACxD,CAAC;AAED,YAAI,IAAI;AACN,eAAK,aAAa,KAAK,GAAG,SAAS,KAAK,MAAM,CAAC;AAAA,QACjD;AAEA,eAAO,KAAK,aAAa;AAAA,MAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,UAAU,aAAa;AACrB,cAAM,EAAE,KAAK,IAAI,KAAK,MAAM;AAE5B,YAAI,aAAa;AACf,iBAAO,OAAO,IAAI,EAAE,YAAY,KAAK;AAAA,QACvC;AAEA,eAAO,QAAQ;AAAA,MACjB;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,eAAe;AACb,eAAO,KAAK,MAAM,EAAE;AAAA,MACtB;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,cAAc;AACZ,YAAI,KAAK,aAAa,UAAU;AAC9B,iBAAO,KAAK,aAAa;AAAA,QAC3B;AAEA,eAAO,KAAK,cAAc;AAAA,MAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,gBAAgB,cAAc,OAAO;AACnC,cAAM,EAAE,KAAK,IAAI,KAAK,YAAY;AAElC,YAAI,aAAa;AACf,iBAAO,OAAO,IAAI,EAAE,YAAY,KAAK;AAAA,QACvC;AAEA,eAAO,QAAQ;AAAA,MACjB;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,gBAAgB;AACd,aAAK,aAAa,WAAW,CAAC;AAE9B,cAAM,WAAW,MAAM,KAAK,0BAAqB,CAAC,cAAc;AAC9D,cAAI,OAAO,UAAU,SAAS,YAAY;AACxC,mBAAO,UAAU,KAAK,IAAI;AAAA,UAC5B;AAEA,cAAI,UAAU,gBAAgB,OAAO;AACnC,mBAAO,UAAU,KAAK,KAAK,eAAa,KAAK,KAAK,SAAS,CAAC;AAAA,UAC9D;AAEA,gBAAM,IAAI,MAAM,sCAAsC;AAAA,QACxD,CAAC;AAED,YAAI,UAAU;AACZ,eAAK,aAAa,WAAW,SAAS,SAAS,KAAK,MAAM,CAAC;AAAA,QAC7D;AAEA,eAAO,KAAK,aAAa;AAAA,MAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,YAAY;AACV,YAAI,KAAK,aAAa,QAAQ;AAC5B,iBAAO,KAAK,aAAa;AAAA,QAC3B;AAEA,eAAO,KAAK,YAAY;AAAA,MAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,cAAc,aAAa;AACzB,YAAI,aAAa;AACf,iBAAO,OAAO,KAAK,UAAU,EAAE,IAAI,EAAE,YAAY,KAAK;AAAA,QACxD;AACA,eAAO,KAAK,UAAU,EAAE,QAAQ;AAAA,MAClC;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,cAAc;AACZ,aAAK,aAAa,SAAS,CAAC;AAE5B,cAAM,SAAS,MAAM,KAAK,wBAAoB,CAAC,YAAY;AACzD,cAAI,OAAO,QAAQ,SAAS,YAAY;AACtC,mBAAO,QAAQ,KAAK,IAAI;AAAA,UAC1B;AAEA,cAAI,QAAQ,gBAAgB,OAAO;AACjC,mBAAO,QAAQ,KAAK,KAAK,eAAa,KAAK,KAAK,SAAS,CAAC;AAAA,UAC5D;AAEA,gBAAM,IAAI,MAAM,sCAAsC;AAAA,QACxD,CAAC;AAED,YAAI,QAAQ;AACV,eAAK,aAAa,SAAS,OAAO,SAAS,KAAK,MAAM,CAAC;AAAA,QACzD;AAEA,eAAO,KAAK,aAAa;AAAA,MAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,QAAQ;AACN,aAAK,aAAa;AAClB,aAAK,QAAQ;AACb,aAAK,cAAc;AACnB,aAAK,YAAY;AAEjB,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,YAAY;AACV,eAAO,MAAM,OAAO,CAAC,GAAG,KAAK,YAAY;AAAA,MAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBA,UAAU,WAAW;AACnB,cAAM,mBAAmB,CAAC;AAC1B,YAAI,wBAAwB;AAC5B,cAAM,WAAW,CAAC;AAClB,YAAI,kBAAkB;AAEtB,cAAM,iBAAiB,OAAO,KAAK,SAAS;AAE5C,uBAAe,QAAQ,CAAC,QAAQ;AAC9B,gBAAM,oBAAoB,UAAU,GAAG;AACvC,cAAI,OAAO,sBAAsB,UAAU;AACzC,qBAAS,GAAG,IAAI;AAChB,+BAAmB;AAAA,UACrB,WAAW,OAAO,sBAAsB,UAAU;AAChD,6BAAiB,GAAG,IAAI;AACxB,qCAAyB;AAAA,UAC3B;AAAA,QACF,CAAC;AAED,YAAI,wBAAwB,GAAG;AAC7B,gBAAM,sBAAsB,OAAO,KAAK,gBAAgB;AACxD,gBAAM,uBAAuB,MAAM,KAAK,qBAAqB,UAAS,KAAK,KAAK,IAAI,CAAE;AAEtF,cAAI,sBAAsB;AACxB,kBAAM,WAAW,KAAK,UAAU,iBAAiB,oBAAoB,CAAC;AAEtE,gBAAI,aAAa,QAAQ;AACvB,qBAAO;AAAA,YACT;AAAA,UACF;AAEA,gBAAM,6BAA6B,MAAM;AAAA,YACvC;AAAA,YACA,UAAS,KAAK,WAAW,IAAI;AAAA,UAC/B;AACA,cAAI,4BAA4B;AAC9B,kBAAM,iBAAiB,KAAK,UAAU,iBAAiB,0BAA0B,CAAC;AAElF,gBAAI,mBAAmB,QAAQ;AAC7B,qBAAO;AAAA,YACT;AAAA,UACF;AAAA,QACF;AAEA,YAAI,kBAAkB,GAAG;AACvB,gBAAM,eAAe,OAAO,KAAK,QAAQ;AACzC,gBAAM,qBAAqB,MAAM,KAAK,cAAc,UAAS,KAAK,UAAU,MAAM,IAAI,CAAE;AAExF,cAAI,uBAAuB,QAAQ;AACjC,mBAAO,KAAK,eAAe,SAAS,kBAAkB,CAAC;AAAA,UACzD;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,UAAU,aAAa,iBAAiB,OAAO;AAC7C,cAAM,qBAAqB,KAAK,eAAe,EAAE,YAAY;AAC7D,YAAI,mBAAmB,YAAY,YAAY;AAC/C,cAAM,QAAQ,MAAM,sBAAsB,gBAAgB;AAE1D,YAAI,kBAAkB,OAAO;AAC3B,6BAAmB,MAAM,YAAY;AAAA,QACvC;AACA,eAAO,qBAAqB;AAAA,MAC9B;AAAA,MAEA,eAAe,SAAS;AACtB,YAAI,kBAAkB,CAAC,CAAC;AACxB,YAAI,oBAAoB;AACxB,YAAI,UAAU;AAEd,cAAM,wBAAwB,KAAK,kBAAkB;AAErD,YAAI,OAAO,0BAA0B,UAAU;AAC7C,iBAAO;AAAA,QACT;AAEA,YAAI,QAAQ,CAAC,MAAM,OAAO,QAAQ,CAAC,MAAM,KAAK;AAC5C,8BAAoB,QAAQ,OAAO,CAAC;AACpC,cAAI,QAAQ,CAAC,MAAM,KAAK;AACtB,sBAAU;AACV,gCAAoB,QAAQ,OAAO,CAAC;AAAA,UACtC,OAAO;AACL,8BAAkB,CAAC;AAAA,UACrB;AACA,cAAI,QAAQ,CAAC,MAAM,KAAK;AACtB,4BAAgB,KAAK,CAAC;AAAA,UACxB,OAAO;AACL,4BAAgB,KAAK,EAAE;AAAA,UACzB;AAAA,QACF,WAAW,QAAQ,CAAC,MAAM,KAAK;AAC7B,8BAAoB,QAAQ,OAAO,CAAC;AAAA,QACtC,WAAW,QAAQ,CAAC,MAAM,KAAK;AAC7B,oBAAU;AACV,8BAAoB,QAAQ,OAAO,CAAC;AAAA,QACtC;AAEA,eAAO,gBAAgB;AAAA,UACrB,MAAM,gBAAgB,uBAAuB,mBAAmB,OAAO;AAAA,QACzE,IAAI;AAAA,MACN;AAAA,MAEA,KAAK,QAAQ;AACX,eAAO,KAAK,UAAU,IAAI,MAAM,OAAO,MAAM,EAAE,YAAY;AAAA,MAC7D;AAAA,MAEA,WAAW,cAAc;AACvB,eAAO,KAAK,gBAAgB,IAAI,MAAM,OAAO,YAAY,EAAE,YAAY;AAAA,MACzE;AAAA,MAEA,SAAS,YAAY;AACnB,eAAO,KAAK,cAAc,IAAI,MAAM,OAAO,UAAU,EAAE,YAAY;AAAA,MACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,GAAG,UAAU,iBAAiB,OAAO;AACnC,eAAO,KAAK,UAAU,UAAU,cAAc,KAAK,KAAK,KAAK,QAAQ,KAChE,KAAK,WAAW,QAAQ;AAAA,MAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,KAAK,YAAY,CAAC,GAAG;AACnB,eAAO,UAAU,KAAK,cAAY,KAAK,GAAG,QAAQ,CAAC;AAAA,MACrD;AAAA,IACF;AAEA,IAAO,iBAAQ;AAAA;AAAA;;;AC/ef,IAyBM,QAmDC;AA5EP;AAAA;AAMA;AACA;AAkBA,IAAM,SAAN,MAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcX,OAAO,UAAU,IAAI,cAAc,OAAO;AACxC,YAAI,OAAO,OAAO,UAAU;AAC1B,gBAAM,IAAI,MAAM,8BAA8B;AAAA,QAChD;AACA,eAAO,IAAI,eAAO,IAAI,WAAW;AAAA,MACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA,OAAO,MAAM,IAAI;AACf,eAAQ,IAAI,eAAO,EAAE,EAAG,UAAU;AAAA,MACpC;AAAA,MAEA,WAAW,cAAc;AACvB,eAAO;AAAA,MACT;AAAA,MAEA,WAAW,aAAa;AACtB,eAAO;AAAA,MACT;AAAA,MAEA,WAAW,SAAS;AAClB,eAAO;AAAA,MACT;AAAA,MAEA,WAAW,gBAAgB;AACzB,eAAO;AAAA,MACT;AAAA,IACF;AAEA,IAAO,iBAAQ;AAAA;AAAA;",
  "names": []
}
