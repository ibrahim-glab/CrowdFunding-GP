{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/token-drop-60b3a7e1.browser.esm.js"],
  "sourcesContent": ["import { constants } from 'ethers';\r\nimport { dH as TOKEN_DROP_CONTRACT_ROLES, cq as ContractWrapper, bj as AbiSchema, dI as DropErc20ContractSchema, aL as resolveAddress, H as getRoleHash } from './index-e7118e8b.browser.esm.js';\r\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-de84ba20.browser.esm.js';\r\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-3d68505c.browser.esm.js';\r\nimport { C as ContractEncoder } from './fetchCurrencyValue-27d660ae.browser.esm.js';\r\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\r\nimport { C as ContractPlatformFee } from './contract-platform-fee-789b7ae1.browser.esm.js';\r\nimport { C as ContractRoles } from './contract-roles-423d8c8f.browser.esm.js';\r\nimport { C as ContractPrimarySale } from './contract-sales-c7829960.browser.esm.js';\r\nimport { D as DropClaimConditions } from './drop-claim-conditions-171f45b9.browser.esm.js';\r\nimport { S as StandardErc20 } from './erc-20-standard-e52e0cd6.browser.esm.js';\r\nimport 'zod';\r\nimport '@thirdweb-dev/chains';\r\nimport '@thirdweb-dev/crypto';\r\nimport 'tiny-invariant';\r\nimport 'bn.js';\r\nimport 'bs58';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\r\nimport 'ethers/lib/utils';\r\nimport 'eventemitter3';\r\nimport '@thirdweb-dev/storage';\r\nimport 'fast-deep-equal';\r\nimport './signature-61410b74.browser.esm.js';\r\nimport './normalizePriceValue-ee13e65c.browser.esm.js';\r\nimport '@thirdweb-dev/merkletree';\r\nimport './assertEnabled-0bc21898.browser.esm.js';\r\nimport './setErc20Allowance-0fd3045e.browser.esm.js';\r\nimport 'uuid';\r\nimport './erc-20-ce512258.browser.esm.js';\r\n\r\n/**\r\n * Create a Drop contract for a standard crypto token or cryptocurrency.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\r\n *\r\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\r\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token-drop\");\r\n * ```\r\n * @internal\r\n * @deprecated use contract.erc20 instead\r\n */\r\nclass TokenDrop extends StandardErc20 {\r\n  static contractRoles = TOKEN_DROP_CONTRACT_ROLES;\r\n\r\n  /**\r\n   * Configure claim conditions\r\n   * @remarks Define who can claim Tokens, when and how many.\r\n   * @example\r\n   * ```javascript\r\n   * const presaleStartTime = new Date();\r\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\r\n   * const claimConditions = [\r\n   *   {\r\n   *     startTime: presaleStartTime, // start the presale now\r\n   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale\r\n   *     price: 0.001, // presale price per token\r\n   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\r\n   *   },\r\n   *   {\r\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\r\n   *     price: 0.008, // public sale price per token\r\n   *   }\r\n   * ]);\r\n   * await contract.claimConditions.set(claimConditions);\r\n   * ```\r\n   */\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n\r\n  constructor(network, address, storage) {\r\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\r\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\r\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\r\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\r\n    super(contractWrapper, storage, chainId);\r\n    this.abi = AbiSchema.parse(abi || []);\r\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);\r\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\r\n    this.roles = new ContractRoles(this.contractWrapper, TokenDrop.contractRoles);\r\n    this.encoder = new ContractEncoder(this.contractWrapper);\r\n    this.estimator = new GasCostEstimator(this.contractWrapper);\r\n    this.events = new ContractEvents(this.contractWrapper);\r\n    this.sales = new ContractPrimarySale(this.contractWrapper);\r\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\r\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\r\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\r\n  }\r\n\r\n  /** ******************************\r\n   * READ FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Get your wallet voting power for the current checkpoints\r\n   *\r\n   * @returns The amount of voting power in tokens\r\n   */\r\n  async getVoteBalance() {\r\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\r\n  }\r\n  async getVoteBalanceOf(account) {\r\n    return await this.erc20.getValue(await this.contractWrapper.read(\"getVotes\", [await resolveAddress(account)]));\r\n  }\r\n\r\n  /**\r\n   * Get your voting delegatee address\r\n   *\r\n   * @returns The address of your vote delegatee\r\n   */\r\n  async getDelegation() {\r\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\r\n  }\r\n\r\n  /**\r\n   * Get a specific address voting delegatee address\r\n   *\r\n   * @returns The address of your vote delegatee\r\n   */\r\n  async getDelegationOf(account) {\r\n    return await this.contractWrapper.read(\"delegates\", [await resolveAddress(account)]);\r\n  }\r\n\r\n  /**\r\n   * Get whether users can transfer tokens from this contract\r\n   */\r\n  async isTransferRestricted() {\r\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\r\n    return !anyoneCanTransfer;\r\n  }\r\n\r\n  /** ******************************\r\n   * WRITE FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Claim a certain amount of tokens\r\n   * @remarks See {@link TokenDrop.claimTo}\r\n   * @param amount - the amount of tokens to mint\r\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\r\n   */\r\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\r\n    var _this = this;\r\n    return async function (amount) {\r\n      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\r\n      return _this.claimTo.prepare(await _this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);\r\n    };\r\n  })());\r\n\r\n  /**\r\n   * Claim a certain amount of tokens to a specific Wallet\r\n   *\r\n   * @remarks Let the specified wallet claim Tokens.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\r\n   * const quantity = 42.69; // how many tokens you want to claim\r\n   *\r\n   * const tx = await contract.claimTo(address, quantity);\r\n   * const receipt = tx.receipt; // the transaction receipt\r\n   * ```\r\n   *\r\n   * @param destinationAddress - Address you want to send the token to\r\n   * @param amount - Quantity of the tokens you want to claim\r\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\r\n   *\r\n   * @returns  The transaction receipt\r\n   */\r\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\r\n    var _this2 = this;\r\n    return async function (destinationAddress, amount) {\r\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\r\n      return _this2.erc20.claimTo.prepare(destinationAddress, amount, {\r\n        checkERC20Allowance\r\n      });\r\n    };\r\n  })());\r\n\r\n  /**\r\n   * Lets you delegate your voting power to the delegateeAddress\r\n   *\r\n   * @param delegateeAddress - delegatee wallet address\r\n   * @alpha\r\n   */\r\n  delegateTo = /* @__PURE__ */buildTransactionFunction(async delegateeAddress => {\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"delegate\",\r\n      args: [await resolveAddress(delegateeAddress)]\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Burn Tokens\r\n   *\r\n   * @remarks Burn tokens held by the connected wallet\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The amount of this token you want to burn\r\n   * const amount = 1.2;\r\n   *\r\n   * await contract.burnTokens(amount);\r\n   * ```\r\n   */\r\n  burnTokens = /* @__PURE__ */buildTransactionFunction(async amount => {\r\n    return this.erc20.burn.prepare(amount);\r\n  });\r\n  /**\r\n   * Burn Tokens\r\n   *\r\n   * @remarks Burn tokens held by the specified wallet\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet sending the tokens\r\n   * const holderAddress = \"{{wallet_address}}\";\r\n   *\r\n   * // The amount of this token you want to burn\r\n   * const amount = 1.2;\r\n   *\r\n   * await contract.burnFrom(holderAddress, amount);\r\n   * ```\r\n   */\r\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\r\n    return this.erc20.burnFrom.prepare(holder, amount);\r\n  });\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  async prepare(method, args, overrides) {\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method,\r\n      args,\r\n      overrides\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  async call(functionName, args, overrides) {\r\n    return this.contractWrapper.call(functionName, args, overrides);\r\n  }\r\n}\r\n\r\nexport { TokenDrop };\r\n"],
  "mappings": "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",
  "names": []
}
