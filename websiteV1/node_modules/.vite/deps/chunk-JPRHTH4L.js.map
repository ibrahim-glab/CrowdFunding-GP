{
  "version": 3,
  "sources": ["../../multiformats/esm/vendor/base-x.js", "../../multiformats/esm/src/bytes.js", "../../multiformats/esm/src/bases/base.js", "../../multiformats/esm/src/bases/identity.js", "../../multiformats/esm/src/bases/base2.js", "../../multiformats/esm/src/bases/base8.js", "../../multiformats/esm/src/bases/base10.js", "../../multiformats/esm/src/bases/base16.js", "../../multiformats/esm/src/bases/base32.js", "../../multiformats/esm/src/bases/base36.js", "../../multiformats/esm/src/bases/base58.js", "../../multiformats/esm/src/bases/base64.js", "../../multiformats/esm/src/bases/base256emoji.js", "../../multiformats/esm/vendor/varint.js", "../../multiformats/esm/src/varint.js", "../../multiformats/esm/src/hashes/digest.js", "../../multiformats/esm/src/hashes/hasher.js", "../../multiformats/esm/src/hashes/sha2-browser.js", "../../multiformats/esm/src/hashes/identity.js", "../../multiformats/esm/src/codecs/raw.js", "../../multiformats/esm/src/codecs/json.js", "../../multiformats/esm/src/cid.js", "../../multiformats/esm/src/index.js", "../../multiformats/esm/src/basics.js", "../../uint8arrays/esm/src/util/as-uint8array.js", "../../uint8arrays/esm/src/alloc.js", "../../uint8arrays/esm/src/util/bases.js", "../../uint8arrays/esm/src/to-string.js", "../../uint8arrays/esm/src/from-string.js", "../../uint8arrays/esm/src/concat.js", "../../uint8arrays/esm/src/equals.js"],
  "sourcesContent": ["function base(ALPHABET, name) {\r\n  if (ALPHABET.length >= 255) {\r\n    throw new TypeError('Alphabet too long');\r\n  }\r\n  var BASE_MAP = new Uint8Array(256);\r\n  for (var j = 0; j < BASE_MAP.length; j++) {\r\n    BASE_MAP[j] = 255;\r\n  }\r\n  for (var i = 0; i < ALPHABET.length; i++) {\r\n    var x = ALPHABET.charAt(i);\r\n    var xc = x.charCodeAt(0);\r\n    if (BASE_MAP[xc] !== 255) {\r\n      throw new TypeError(x + ' is ambiguous');\r\n    }\r\n    BASE_MAP[xc] = i;\r\n  }\r\n  var BASE = ALPHABET.length;\r\n  var LEADER = ALPHABET.charAt(0);\r\n  var FACTOR = Math.log(BASE) / Math.log(256);\r\n  var iFACTOR = Math.log(256) / Math.log(BASE);\r\n  function encode(source) {\r\n    if (source instanceof Uint8Array);\r\n    else if (ArrayBuffer.isView(source)) {\r\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\r\n    } else if (Array.isArray(source)) {\r\n      source = Uint8Array.from(source);\r\n    }\r\n    if (!(source instanceof Uint8Array)) {\r\n      throw new TypeError('Expected Uint8Array');\r\n    }\r\n    if (source.length === 0) {\r\n      return '';\r\n    }\r\n    var zeroes = 0;\r\n    var length = 0;\r\n    var pbegin = 0;\r\n    var pend = source.length;\r\n    while (pbegin !== pend && source[pbegin] === 0) {\r\n      pbegin++;\r\n      zeroes++;\r\n    }\r\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\r\n    var b58 = new Uint8Array(size);\r\n    while (pbegin !== pend) {\r\n      var carry = source[pbegin];\r\n      var i = 0;\r\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\r\n        carry += 256 * b58[it1] >>> 0;\r\n        b58[it1] = carry % BASE >>> 0;\r\n        carry = carry / BASE >>> 0;\r\n      }\r\n      if (carry !== 0) {\r\n        throw new Error('Non-zero carry');\r\n      }\r\n      length = i;\r\n      pbegin++;\r\n    }\r\n    var it2 = size - length;\r\n    while (it2 !== size && b58[it2] === 0) {\r\n      it2++;\r\n    }\r\n    var str = LEADER.repeat(zeroes);\r\n    for (; it2 < size; ++it2) {\r\n      str += ALPHABET.charAt(b58[it2]);\r\n    }\r\n    return str;\r\n  }\r\n  function decodeUnsafe(source) {\r\n    if (typeof source !== 'string') {\r\n      throw new TypeError('Expected String');\r\n    }\r\n    if (source.length === 0) {\r\n      return new Uint8Array();\r\n    }\r\n    var psz = 0;\r\n    if (source[psz] === ' ') {\r\n      return;\r\n    }\r\n    var zeroes = 0;\r\n    var length = 0;\r\n    while (source[psz] === LEADER) {\r\n      zeroes++;\r\n      psz++;\r\n    }\r\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\r\n    var b256 = new Uint8Array(size);\r\n    while (source[psz]) {\r\n      var carry = BASE_MAP[source.charCodeAt(psz)];\r\n      if (carry === 255) {\r\n        return;\r\n      }\r\n      var i = 0;\r\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\r\n        carry += BASE * b256[it3] >>> 0;\r\n        b256[it3] = carry % 256 >>> 0;\r\n        carry = carry / 256 >>> 0;\r\n      }\r\n      if (carry !== 0) {\r\n        throw new Error('Non-zero carry');\r\n      }\r\n      length = i;\r\n      psz++;\r\n    }\r\n    if (source[psz] === ' ') {\r\n      return;\r\n    }\r\n    var it4 = size - length;\r\n    while (it4 !== size && b256[it4] === 0) {\r\n      it4++;\r\n    }\r\n    var vch = new Uint8Array(zeroes + (size - it4));\r\n    var j = zeroes;\r\n    while (it4 !== size) {\r\n      vch[j++] = b256[it4++];\r\n    }\r\n    return vch;\r\n  }\r\n  function decode(string) {\r\n    var buffer = decodeUnsafe(string);\r\n    if (buffer) {\r\n      return buffer;\r\n    }\r\n    throw new Error(`Non-${ name } character`);\r\n  }\r\n  return {\r\n    encode: encode,\r\n    decodeUnsafe: decodeUnsafe,\r\n    decode: decode\r\n  };\r\n}\r\nvar src = base;\r\nvar _brrp__multiformats_scope_baseX = src;\r\nexport default _brrp__multiformats_scope_baseX;", "const empty = new Uint8Array(0);\r\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\r\nconst fromHex = hex => {\r\n  const hexes = hex.match(/../g);\r\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\r\n};\r\nconst equals = (aa, bb) => {\r\n  if (aa === bb)\r\n    return true;\r\n  if (aa.byteLength !== bb.byteLength) {\r\n    return false;\r\n  }\r\n  for (let ii = 0; ii < aa.byteLength; ii++) {\r\n    if (aa[ii] !== bb[ii]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\nconst coerce = o => {\r\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\r\n    return o;\r\n  if (o instanceof ArrayBuffer)\r\n    return new Uint8Array(o);\r\n  if (ArrayBuffer.isView(o)) {\r\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\r\n  }\r\n  throw new Error('Unknown type, must be binary type');\r\n};\r\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\r\nconst fromString = str => new TextEncoder().encode(str);\r\nconst toString = b => new TextDecoder().decode(b);\r\nexport {\r\n  equals,\r\n  coerce,\r\n  isBinary,\r\n  fromHex,\r\n  toHex,\r\n  fromString,\r\n  toString,\r\n  empty\r\n};", "import basex from '../../vendor/base-x.js';\r\nimport { coerce } from '../bytes.js';\r\nclass Encoder {\r\n  constructor(name, prefix, baseEncode) {\r\n    this.name = name;\r\n    this.prefix = prefix;\r\n    this.baseEncode = baseEncode;\r\n  }\r\n  encode(bytes) {\r\n    if (bytes instanceof Uint8Array) {\r\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\r\n    } else {\r\n      throw Error('Unknown type, must be binary type');\r\n    }\r\n  }\r\n}\r\nclass Decoder {\r\n  constructor(name, prefix, baseDecode) {\r\n    this.name = name;\r\n    this.prefix = prefix;\r\n    if (prefix.codePointAt(0) === undefined) {\r\n      throw new Error('Invalid prefix character');\r\n    }\r\n    this.prefixCodePoint = prefix.codePointAt(0);\r\n    this.baseDecode = baseDecode;\r\n  }\r\n  decode(text) {\r\n    if (typeof text === 'string') {\r\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\r\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\r\n      }\r\n      return this.baseDecode(text.slice(this.prefix.length));\r\n    } else {\r\n      throw Error('Can only multibase decode strings');\r\n    }\r\n  }\r\n  or(decoder) {\r\n    return or(this, decoder);\r\n  }\r\n}\r\nclass ComposedDecoder {\r\n  constructor(decoders) {\r\n    this.decoders = decoders;\r\n  }\r\n  or(decoder) {\r\n    return or(this, decoder);\r\n  }\r\n  decode(input) {\r\n    const prefix = input[0];\r\n    const decoder = this.decoders[prefix];\r\n    if (decoder) {\r\n      return decoder.decode(input);\r\n    } else {\r\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\r\n    }\r\n  }\r\n}\r\nexport const or = (left, right) => new ComposedDecoder({\r\n  ...left.decoders || { [left.prefix]: left },\r\n  ...right.decoders || { [right.prefix]: right }\r\n});\r\nexport class Codec {\r\n  constructor(name, prefix, baseEncode, baseDecode) {\r\n    this.name = name;\r\n    this.prefix = prefix;\r\n    this.baseEncode = baseEncode;\r\n    this.baseDecode = baseDecode;\r\n    this.encoder = new Encoder(name, prefix, baseEncode);\r\n    this.decoder = new Decoder(name, prefix, baseDecode);\r\n  }\r\n  encode(input) {\r\n    return this.encoder.encode(input);\r\n  }\r\n  decode(input) {\r\n    return this.decoder.decode(input);\r\n  }\r\n}\r\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\r\nexport const baseX = ({prefix, name, alphabet}) => {\r\n  const {encode, decode} = basex(alphabet, name);\r\n  return from({\r\n    prefix,\r\n    name,\r\n    encode,\r\n    decode: text => coerce(decode(text))\r\n  });\r\n};\r\nconst decode = (string, alphabet, bitsPerChar, name) => {\r\n  const codes = {};\r\n  for (let i = 0; i < alphabet.length; ++i) {\r\n    codes[alphabet[i]] = i;\r\n  }\r\n  let end = string.length;\r\n  while (string[end - 1] === '=') {\r\n    --end;\r\n  }\r\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\r\n  let bits = 0;\r\n  let buffer = 0;\r\n  let written = 0;\r\n  for (let i = 0; i < end; ++i) {\r\n    const value = codes[string[i]];\r\n    if (value === undefined) {\r\n      throw new SyntaxError(`Non-${ name } character`);\r\n    }\r\n    buffer = buffer << bitsPerChar | value;\r\n    bits += bitsPerChar;\r\n    if (bits >= 8) {\r\n      bits -= 8;\r\n      out[written++] = 255 & buffer >> bits;\r\n    }\r\n  }\r\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\r\n    throw new SyntaxError('Unexpected end of data');\r\n  }\r\n  return out;\r\n};\r\nconst encode = (data, alphabet, bitsPerChar) => {\r\n  const pad = alphabet[alphabet.length - 1] === '=';\r\n  const mask = (1 << bitsPerChar) - 1;\r\n  let out = '';\r\n  let bits = 0;\r\n  let buffer = 0;\r\n  for (let i = 0; i < data.length; ++i) {\r\n    buffer = buffer << 8 | data[i];\r\n    bits += 8;\r\n    while (bits > bitsPerChar) {\r\n      bits -= bitsPerChar;\r\n      out += alphabet[mask & buffer >> bits];\r\n    }\r\n  }\r\n  if (bits) {\r\n    out += alphabet[mask & buffer << bitsPerChar - bits];\r\n  }\r\n  if (pad) {\r\n    while (out.length * bitsPerChar & 7) {\r\n      out += '=';\r\n    }\r\n  }\r\n  return out;\r\n};\r\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\r\n  return from({\r\n    prefix,\r\n    name,\r\n    encode(input) {\r\n      return encode(input, alphabet, bitsPerChar);\r\n    },\r\n    decode(input) {\r\n      return decode(input, alphabet, bitsPerChar, name);\r\n    }\r\n  });\r\n};", "import { from } from './base.js';\r\nimport {\r\n  fromString,\r\n  toString\r\n} from '../bytes.js';\r\nexport const identity = from({\r\n  prefix: '\\0',\r\n  name: 'identity',\r\n  encode: buf => toString(buf),\r\n  decode: str => fromString(str)\r\n});", "import { rfc4648 } from './base.js';\r\nexport const base2 = rfc4648({\r\n  prefix: '0',\r\n  name: 'base2',\r\n  alphabet: '01',\r\n  bitsPerChar: 1\r\n});", "import { rfc4648 } from './base.js';\r\nexport const base8 = rfc4648({\r\n  prefix: '7',\r\n  name: 'base8',\r\n  alphabet: '01234567',\r\n  bitsPerChar: 3\r\n});", "import { baseX } from './base.js';\r\nexport const base10 = baseX({\r\n  prefix: '9',\r\n  name: 'base10',\r\n  alphabet: '0123456789'\r\n});", "import { rfc4648 } from './base.js';\r\nexport const base16 = rfc4648({\r\n  prefix: 'f',\r\n  name: 'base16',\r\n  alphabet: '0123456789abcdef',\r\n  bitsPerChar: 4\r\n});\r\nexport const base16upper = rfc4648({\r\n  prefix: 'F',\r\n  name: 'base16upper',\r\n  alphabet: '0123456789ABCDEF',\r\n  bitsPerChar: 4\r\n});", "import { rfc4648 } from './base.js';\r\nexport const base32 = rfc4648({\r\n  prefix: 'b',\r\n  name: 'base32',\r\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\r\n  bitsPerChar: 5\r\n});\r\nexport const base32upper = rfc4648({\r\n  prefix: 'B',\r\n  name: 'base32upper',\r\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\r\n  bitsPerChar: 5\r\n});\r\nexport const base32pad = rfc4648({\r\n  prefix: 'c',\r\n  name: 'base32pad',\r\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\r\n  bitsPerChar: 5\r\n});\r\nexport const base32padupper = rfc4648({\r\n  prefix: 'C',\r\n  name: 'base32padupper',\r\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\r\n  bitsPerChar: 5\r\n});\r\nexport const base32hex = rfc4648({\r\n  prefix: 'v',\r\n  name: 'base32hex',\r\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\r\n  bitsPerChar: 5\r\n});\r\nexport const base32hexupper = rfc4648({\r\n  prefix: 'V',\r\n  name: 'base32hexupper',\r\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\r\n  bitsPerChar: 5\r\n});\r\nexport const base32hexpad = rfc4648({\r\n  prefix: 't',\r\n  name: 'base32hexpad',\r\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\r\n  bitsPerChar: 5\r\n});\r\nexport const base32hexpadupper = rfc4648({\r\n  prefix: 'T',\r\n  name: 'base32hexpadupper',\r\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\r\n  bitsPerChar: 5\r\n});\r\nexport const base32z = rfc4648({\r\n  prefix: 'h',\r\n  name: 'base32z',\r\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\r\n  bitsPerChar: 5\r\n});", "import { baseX } from './base.js';\r\nexport const base36 = baseX({\r\n  prefix: 'k',\r\n  name: 'base36',\r\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\r\n});\r\nexport const base36upper = baseX({\r\n  prefix: 'K',\r\n  name: 'base36upper',\r\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n});", "import { baseX } from './base.js';\r\nexport const base58btc = baseX({\r\n  name: 'base58btc',\r\n  prefix: 'z',\r\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\r\n});\r\nexport const base58flickr = baseX({\r\n  name: 'base58flickr',\r\n  prefix: 'Z',\r\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\r\n});", "import { rfc4648 } from './base.js';\r\nexport const base64 = rfc4648({\r\n  prefix: 'm',\r\n  name: 'base64',\r\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\r\n  bitsPerChar: 6\r\n});\r\nexport const base64pad = rfc4648({\r\n  prefix: 'M',\r\n  name: 'base64pad',\r\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\r\n  bitsPerChar: 6\r\n});\r\nexport const base64url = rfc4648({\r\n  prefix: 'u',\r\n  name: 'base64url',\r\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\r\n  bitsPerChar: 6\r\n});\r\nexport const base64urlpad = rfc4648({\r\n  prefix: 'U',\r\n  name: 'base64urlpad',\r\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\r\n  bitsPerChar: 6\r\n});", "import { from } from './base.js';\r\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\r\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\r\n  p[i] = c;\r\n  return p;\r\n}, []);\r\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\r\n  p[c.codePointAt(0)] = i;\r\n  return p;\r\n}, []);\r\nfunction encode(data) {\r\n  return data.reduce((p, c) => {\r\n    p += alphabetBytesToChars[c];\r\n    return p;\r\n  }, '');\r\n}\r\nfunction decode(str) {\r\n  const byts = [];\r\n  for (const char of str) {\r\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\r\n    if (byt === undefined) {\r\n      throw new Error(`Non-base256emoji character: ${ char }`);\r\n    }\r\n    byts.push(byt);\r\n  }\r\n  return new Uint8Array(byts);\r\n}\r\nexport const base256emoji = from({\r\n  prefix: '\\uD83D\\uDE80',\r\n  name: 'base256emoji',\r\n  encode,\r\n  decode\r\n});", "var encode_1 = encode;\r\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\r\nfunction encode(num, out, offset) {\r\n  out = out || [];\r\n  offset = offset || 0;\r\n  var oldOffset = offset;\r\n  while (num >= INT) {\r\n    out[offset++] = num & 255 | MSB;\r\n    num /= 128;\r\n  }\r\n  while (num & MSBALL) {\r\n    out[offset++] = num & 255 | MSB;\r\n    num >>>= 7;\r\n  }\r\n  out[offset] = num | 0;\r\n  encode.bytes = offset - oldOffset + 1;\r\n  return out;\r\n}\r\nvar decode = read;\r\nvar MSB$1 = 128, REST$1 = 127;\r\nfunction read(buf, offset) {\r\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\r\n  do {\r\n    if (counter >= l) {\r\n      read.bytes = 0;\r\n      throw new RangeError('Could not decode varint');\r\n    }\r\n    b = buf[counter++];\r\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\r\n    shift += 7;\r\n  } while (b >= MSB$1);\r\n  read.bytes = counter - offset;\r\n  return res;\r\n}\r\nvar N1 = Math.pow(2, 7);\r\nvar N2 = Math.pow(2, 14);\r\nvar N3 = Math.pow(2, 21);\r\nvar N4 = Math.pow(2, 28);\r\nvar N5 = Math.pow(2, 35);\r\nvar N6 = Math.pow(2, 42);\r\nvar N7 = Math.pow(2, 49);\r\nvar N8 = Math.pow(2, 56);\r\nvar N9 = Math.pow(2, 63);\r\nvar length = function (value) {\r\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\r\n};\r\nvar varint = {\r\n  encode: encode_1,\r\n  decode: decode,\r\n  encodingLength: length\r\n};\r\nvar _brrp_varint = varint;\r\nexport default _brrp_varint;", "import varint from '../vendor/varint.js';\r\nexport const decode = (data, offset = 0) => {\r\n  const code = varint.decode(data, offset);\r\n  return [\r\n    code,\r\n    varint.decode.bytes\r\n  ];\r\n};\r\nexport const encodeTo = (int, target, offset = 0) => {\r\n  varint.encode(int, target, offset);\r\n  return target;\r\n};\r\nexport const encodingLength = int => {\r\n  return varint.encodingLength(int);\r\n};", "import {\r\n  coerce,\r\n  equals as equalBytes\r\n} from '../bytes.js';\r\nimport * as varint from '../varint.js';\r\nexport const create = (code, digest) => {\r\n  const size = digest.byteLength;\r\n  const sizeOffset = varint.encodingLength(code);\r\n  const digestOffset = sizeOffset + varint.encodingLength(size);\r\n  const bytes = new Uint8Array(digestOffset + size);\r\n  varint.encodeTo(code, bytes, 0);\r\n  varint.encodeTo(size, bytes, sizeOffset);\r\n  bytes.set(digest, digestOffset);\r\n  return new Digest(code, size, digest, bytes);\r\n};\r\nexport const decode = multihash => {\r\n  const bytes = coerce(multihash);\r\n  const [code, sizeOffset] = varint.decode(bytes);\r\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\r\n  const digest = bytes.subarray(sizeOffset + digestOffset);\r\n  if (digest.byteLength !== size) {\r\n    throw new Error('Incorrect length');\r\n  }\r\n  return new Digest(code, size, digest, bytes);\r\n};\r\nexport const equals = (a, b) => {\r\n  if (a === b) {\r\n    return true;\r\n  } else {\r\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\r\n  }\r\n};\r\nexport class Digest {\r\n  constructor(code, size, digest, bytes) {\r\n    this.code = code;\r\n    this.size = size;\r\n    this.digest = digest;\r\n    this.bytes = bytes;\r\n  }\r\n}", "import * as Digest from './digest.js';\r\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\r\nexport class Hasher {\r\n  constructor(name, code, encode) {\r\n    this.name = name;\r\n    this.code = code;\r\n    this.encode = encode;\r\n  }\r\n  digest(input) {\r\n    if (input instanceof Uint8Array) {\r\n      const result = this.encode(input);\r\n      return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(digest => Digest.create(this.code, digest));\r\n    } else {\r\n      throw Error('Unknown type, must be binary type');\r\n    }\r\n  }\r\n}", "import { from } from './hasher.js';\r\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\r\nexport const sha256 = from({\r\n  name: 'sha2-256',\r\n  code: 18,\r\n  encode: sha('SHA-256')\r\n});\r\nexport const sha512 = from({\r\n  name: 'sha2-512',\r\n  code: 19,\r\n  encode: sha('SHA-512')\r\n});", "import { coerce } from '../bytes.js';\r\nimport * as Digest from './digest.js';\r\nconst code = 0;\r\nconst name = 'identity';\r\nconst encode = coerce;\r\nconst digest = input => Digest.create(code, encode(input));\r\nexport const identity = {\r\n  code,\r\n  name,\r\n  encode,\r\n  digest\r\n};", "import { coerce } from '../bytes.js';\r\nexport const name = 'raw';\r\nexport const code = 85;\r\nexport const encode = node => coerce(node);\r\nexport const decode = data => coerce(data);", "const textEncoder = new TextEncoder();\r\nconst textDecoder = new TextDecoder();\r\nexport const name = 'json';\r\nexport const code = 512;\r\nexport const encode = node => textEncoder.encode(JSON.stringify(node));\r\nexport const decode = data => JSON.parse(textDecoder.decode(data));", "import * as varint from './varint.js';\r\nimport * as Digest from './hashes/digest.js';\r\nimport { base58btc } from './bases/base58.js';\r\nimport { base32 } from './bases/base32.js';\r\nimport { coerce } from './bytes.js';\r\nexport class CID {\r\n  constructor(version, code, multihash, bytes) {\r\n    this.code = code;\r\n    this.version = version;\r\n    this.multihash = multihash;\r\n    this.bytes = bytes;\r\n    this.byteOffset = bytes.byteOffset;\r\n    this.byteLength = bytes.byteLength;\r\n    this.asCID = this;\r\n    this._baseCache = new Map();\r\n    Object.defineProperties(this, {\r\n      byteOffset: hidden,\r\n      byteLength: hidden,\r\n      code: readonly,\r\n      version: readonly,\r\n      multihash: readonly,\r\n      bytes: readonly,\r\n      _baseCache: hidden,\r\n      asCID: hidden\r\n    });\r\n  }\r\n  toV0() {\r\n    switch (this.version) {\r\n    case 0: {\r\n        return this;\r\n      }\r\n    default: {\r\n        const {code, multihash} = this;\r\n        if (code !== DAG_PB_CODE) {\r\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\r\n        }\r\n        if (multihash.code !== SHA_256_CODE) {\r\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\r\n        }\r\n        return CID.createV0(multihash);\r\n      }\r\n    }\r\n  }\r\n  toV1() {\r\n    switch (this.version) {\r\n    case 0: {\r\n        const {code, digest} = this.multihash;\r\n        const multihash = Digest.create(code, digest);\r\n        return CID.createV1(this.code, multihash);\r\n      }\r\n    case 1: {\r\n        return this;\r\n      }\r\n    default: {\r\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\r\n      }\r\n    }\r\n  }\r\n  equals(other) {\r\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\r\n  }\r\n  toString(base) {\r\n    const {bytes, version, _baseCache} = this;\r\n    switch (version) {\r\n    case 0:\r\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\r\n    default:\r\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\r\n    }\r\n  }\r\n  toJSON() {\r\n    return {\r\n      code: this.code,\r\n      version: this.version,\r\n      hash: this.multihash.bytes\r\n    };\r\n  }\r\n  get [Symbol.toStringTag]() {\r\n    return 'CID';\r\n  }\r\n  [Symbol.for('nodejs.util.inspect.custom')]() {\r\n    return 'CID(' + this.toString() + ')';\r\n  }\r\n  static isCID(value) {\r\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\r\n    return !!(value && (value[cidSymbol] || value.asCID === value));\r\n  }\r\n  get toBaseEncodedString() {\r\n    throw new Error('Deprecated, use .toString()');\r\n  }\r\n  get codec() {\r\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\r\n  }\r\n  get buffer() {\r\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\r\n  }\r\n  get multibaseName() {\r\n    throw new Error('\"multibaseName\" property is deprecated');\r\n  }\r\n  get prefix() {\r\n    throw new Error('\"prefix\" property is deprecated');\r\n  }\r\n  static asCID(value) {\r\n    if (value instanceof CID) {\r\n      return value;\r\n    } else if (value != null && value.asCID === value) {\r\n      const {version, code, multihash, bytes} = value;\r\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\r\n    } else if (value != null && value[cidSymbol] === true) {\r\n      const {version, multihash, code} = value;\r\n      const digest = Digest.decode(multihash);\r\n      return CID.create(version, code, digest);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  static create(version, code, digest) {\r\n    if (typeof code !== 'number') {\r\n      throw new Error('String codecs are no longer supported');\r\n    }\r\n    switch (version) {\r\n    case 0: {\r\n        if (code !== DAG_PB_CODE) {\r\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\r\n        } else {\r\n          return new CID(version, code, digest, digest.bytes);\r\n        }\r\n      }\r\n    case 1: {\r\n        const bytes = encodeCID(version, code, digest.bytes);\r\n        return new CID(version, code, digest, bytes);\r\n      }\r\n    default: {\r\n        throw new Error('Invalid version');\r\n      }\r\n    }\r\n  }\r\n  static createV0(digest) {\r\n    return CID.create(0, DAG_PB_CODE, digest);\r\n  }\r\n  static createV1(code, digest) {\r\n    return CID.create(1, code, digest);\r\n  }\r\n  static decode(bytes) {\r\n    const [cid, remainder] = CID.decodeFirst(bytes);\r\n    if (remainder.length) {\r\n      throw new Error('Incorrect length');\r\n    }\r\n    return cid;\r\n  }\r\n  static decodeFirst(bytes) {\r\n    const specs = CID.inspectBytes(bytes);\r\n    const prefixSize = specs.size - specs.multihashSize;\r\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\r\n    if (multihashBytes.byteLength !== specs.multihashSize) {\r\n      throw new Error('Incorrect length');\r\n    }\r\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\r\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\r\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\r\n    return [\r\n      cid,\r\n      bytes.subarray(specs.size)\r\n    ];\r\n  }\r\n  static inspectBytes(initialBytes) {\r\n    let offset = 0;\r\n    const next = () => {\r\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\r\n      offset += length;\r\n      return i;\r\n    };\r\n    let version = next();\r\n    let codec = DAG_PB_CODE;\r\n    if (version === 18) {\r\n      version = 0;\r\n      offset = 0;\r\n    } else if (version === 1) {\r\n      codec = next();\r\n    }\r\n    if (version !== 0 && version !== 1) {\r\n      throw new RangeError(`Invalid CID version ${ version }`);\r\n    }\r\n    const prefixSize = offset;\r\n    const multihashCode = next();\r\n    const digestSize = next();\r\n    const size = offset + digestSize;\r\n    const multihashSize = size - prefixSize;\r\n    return {\r\n      version,\r\n      codec,\r\n      multihashCode,\r\n      digestSize,\r\n      multihashSize,\r\n      size\r\n    };\r\n  }\r\n  static parse(source, base) {\r\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\r\n    const cid = CID.decode(bytes);\r\n    cid._baseCache.set(prefix, source);\r\n    return cid;\r\n  }\r\n}\r\nconst parseCIDtoBytes = (source, base) => {\r\n  switch (source[0]) {\r\n  case 'Q': {\r\n      const decoder = base || base58btc;\r\n      return [\r\n        base58btc.prefix,\r\n        decoder.decode(`${ base58btc.prefix }${ source }`)\r\n      ];\r\n    }\r\n  case base58btc.prefix: {\r\n      const decoder = base || base58btc;\r\n      return [\r\n        base58btc.prefix,\r\n        decoder.decode(source)\r\n      ];\r\n    }\r\n  case base32.prefix: {\r\n      const decoder = base || base32;\r\n      return [\r\n        base32.prefix,\r\n        decoder.decode(source)\r\n      ];\r\n    }\r\n  default: {\r\n      if (base == null) {\r\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\r\n      }\r\n      return [\r\n        source[0],\r\n        base.decode(source)\r\n      ];\r\n    }\r\n  }\r\n};\r\nconst toStringV0 = (bytes, cache, base) => {\r\n  const {prefix} = base;\r\n  if (prefix !== base58btc.prefix) {\r\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\r\n  }\r\n  const cid = cache.get(prefix);\r\n  if (cid == null) {\r\n    const cid = base.encode(bytes).slice(1);\r\n    cache.set(prefix, cid);\r\n    return cid;\r\n  } else {\r\n    return cid;\r\n  }\r\n};\r\nconst toStringV1 = (bytes, cache, base) => {\r\n  const {prefix} = base;\r\n  const cid = cache.get(prefix);\r\n  if (cid == null) {\r\n    const cid = base.encode(bytes);\r\n    cache.set(prefix, cid);\r\n    return cid;\r\n  } else {\r\n    return cid;\r\n  }\r\n};\r\nconst DAG_PB_CODE = 112;\r\nconst SHA_256_CODE = 18;\r\nconst encodeCID = (version, code, multihash) => {\r\n  const codeOffset = varint.encodingLength(version);\r\n  const hashOffset = codeOffset + varint.encodingLength(code);\r\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\r\n  varint.encodeTo(version, bytes, 0);\r\n  varint.encodeTo(code, bytes, codeOffset);\r\n  bytes.set(multihash, hashOffset);\r\n  return bytes;\r\n};\r\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\r\nconst readonly = {\r\n  writable: false,\r\n  configurable: false,\r\n  enumerable: true\r\n};\r\nconst hidden = {\r\n  writable: false,\r\n  enumerable: false,\r\n  configurable: false\r\n};\r\nconst version = '0.0.0-dev';\r\nconst deprecate = (range, message) => {\r\n  if (range.test(version)) {\r\n    console.warn(message);\r\n  } else {\r\n    throw new Error(message);\r\n  }\r\n};\r\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\r\nFollowing code pattern:\r\n\r\nif (CID.isCID(value)) {\r\n  doSomethingWithCID(value)\r\n}\r\n\r\nIs replaced with:\r\n\r\nconst cid = CID.asCID(value)\r\nif (cid) {\r\n  // Make sure to use cid instead of value\r\n  doSomethingWithCID(cid)\r\n}\r\n`;", "import { CID } from './cid.js';\r\nimport * as varint from './varint.js';\r\nimport * as bytes from './bytes.js';\r\nimport * as hasher from './hashes/hasher.js';\r\nimport * as digest from './hashes/digest.js';\r\nexport {\r\n  CID,\r\n  hasher,\r\n  digest,\r\n  varint,\r\n  bytes\r\n};", "import * as identityBase from './bases/identity.js';\r\nimport * as base2 from './bases/base2.js';\r\nimport * as base8 from './bases/base8.js';\r\nimport * as base10 from './bases/base10.js';\r\nimport * as base16 from './bases/base16.js';\r\nimport * as base32 from './bases/base32.js';\r\nimport * as base36 from './bases/base36.js';\r\nimport * as base58 from './bases/base58.js';\r\nimport * as base64 from './bases/base64.js';\r\nimport * as base256emoji from './bases/base256emoji.js';\r\nimport * as sha2 from './hashes/sha2.js';\r\nimport * as identity from './hashes/identity.js';\r\nimport * as raw from './codecs/raw.js';\r\nimport * as json from './codecs/json.js';\r\nimport {\r\n  CID,\r\n  hasher,\r\n  digest,\r\n  varint,\r\n  bytes\r\n} from './index.js';\r\nconst bases = {\r\n  ...identityBase,\r\n  ...base2,\r\n  ...base8,\r\n  ...base10,\r\n  ...base16,\r\n  ...base32,\r\n  ...base36,\r\n  ...base58,\r\n  ...base64,\r\n  ...base256emoji\r\n};\r\nconst hashes = {\r\n  ...sha2,\r\n  ...identity\r\n};\r\nconst codecs = {\r\n  raw,\r\n  json\r\n};\r\nexport {\r\n  CID,\r\n  hasher,\r\n  digest,\r\n  varint,\r\n  bytes,\r\n  hashes,\r\n  bases,\r\n  codecs\r\n};", "export function asUint8Array(buf) {\r\n  if (globalThis.Buffer != null) {\r\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\r\n  }\r\n  return buf;\r\n}", "import { asUint8Array } from './util/as-uint8array.js';\r\nexport function alloc(size = 0) {\r\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\r\n    return asUint8Array(globalThis.Buffer.alloc(size));\r\n  }\r\n  return new Uint8Array(size);\r\n}\r\nexport function allocUnsafe(size = 0) {\r\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\r\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size));\r\n  }\r\n  return new Uint8Array(size);\r\n}", "import { bases } from 'multiformats/basics';\r\nimport { allocUnsafe } from '../alloc.js';\r\nfunction createCodec(name, prefix, encode, decode) {\r\n  return {\r\n    name,\r\n    prefix,\r\n    encoder: {\r\n      name,\r\n      prefix,\r\n      encode\r\n    },\r\n    decoder: { decode }\r\n  };\r\n}\r\nconst string = createCodec('utf8', 'u', buf => {\r\n  const decoder = new TextDecoder('utf8');\r\n  return 'u' + decoder.decode(buf);\r\n}, str => {\r\n  const encoder = new TextEncoder();\r\n  return encoder.encode(str.substring(1));\r\n});\r\nconst ascii = createCodec('ascii', 'a', buf => {\r\n  let string = 'a';\r\n  for (let i = 0; i < buf.length; i++) {\r\n    string += String.fromCharCode(buf[i]);\r\n  }\r\n  return string;\r\n}, str => {\r\n  str = str.substring(1);\r\n  const buf = allocUnsafe(str.length);\r\n  for (let i = 0; i < str.length; i++) {\r\n    buf[i] = str.charCodeAt(i);\r\n  }\r\n  return buf;\r\n});\r\nconst BASES = {\r\n  utf8: string,\r\n  'utf-8': string,\r\n  hex: bases.base16,\r\n  latin1: ascii,\r\n  ascii: ascii,\r\n  binary: ascii,\r\n  ...bases\r\n};\r\nexport default BASES;", "import bases from './util/bases.js';\r\nexport function toString(array, encoding = 'utf8') {\r\n  const base = bases[encoding];\r\n  if (!base) {\r\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\r\n  }\r\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\r\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\r\n  }\r\n  return base.encoder.encode(array).substring(1);\r\n}", "import bases from './util/bases.js';\r\nimport { asUint8Array } from './util/as-uint8array.js';\r\nexport function fromString(string, encoding = 'utf8') {\r\n  const base = bases[encoding];\r\n  if (!base) {\r\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\r\n  }\r\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\r\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\r\n  }\r\n  return base.decoder.decode(`${ base.prefix }${ string }`);\r\n}", "import { allocUnsafe } from './alloc.js';\r\nimport { asUint8Array } from './util/as-uint8array.js';\r\nexport function concat(arrays, length) {\r\n  if (!length) {\r\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\r\n  }\r\n  const output = allocUnsafe(length);\r\n  let offset = 0;\r\n  for (const arr of arrays) {\r\n    output.set(arr, offset);\r\n    offset += arr.length;\r\n  }\r\n  return asUint8Array(output);\r\n}", "export function equals(a, b) {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n  if (a.byteLength !== b.byteLength) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < a.byteLength; i++) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}"],
  "mappings": "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",
  "names": ["name", "encode", "length", "i", "j", "decode", "string", "name", "encode", "decode", "alphabet", "string", "encode", "decode", "encode", "decode", "decode", "init_varint", "code", "decode", "equals", "init_varint", "code", "digest", "from", "name", "code", "encode", "digest", "name", "from", "identity_exports", "identity", "encode", "init_identity", "code", "decode", "encode", "name", "code", "decode", "encode", "name", "init_varint", "version", "code", "digest", "equals", "base", "decode", "length", "cid", "init_varint", "init_identity", "identity_exports", "name", "encode", "decode", "string", "toString", "base", "fromString", "string", "base", "length", "equals"]
}
