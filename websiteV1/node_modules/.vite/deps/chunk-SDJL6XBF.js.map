{
  "version": 3,
  "sources": ["../../@web3auth/solana-provider/node_modules/base-x/src/index.js", "../../@web3auth/solana-provider/node_modules/bs58/index.js", "../../@web3auth/solana-provider/node_modules/eth-rpc-errors/src/classes.ts", "../../@web3auth/solana-provider/node_modules/eth-rpc-errors/src/error-constants.ts", "../../@web3auth/solana-provider/node_modules/eth-rpc-errors/src/utils.ts", "../../@web3auth/solana-provider/node_modules/eth-rpc-errors/src/errors.ts", "../../@web3auth/solana-provider/node_modules/eth-rpc-errors/src/index.ts", "../../@web3auth/solana-provider/src/rpc/JrpcClient.ts", "../../@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/sollet/providerHandlers.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/sollet/solletInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts", "../../@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts", "../../@web3auth/solana-provider/src/solanaWallet.ts"],
  "sourcesContent": ["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", null, null, null, null, null, "import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n", "import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: Transaction[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: Transaction }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n", "import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n", "import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n", "import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n", "import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n", "import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, signature);\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n", "import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n", "import { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n", "import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n", "import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolletHandlers = (injectedProvider: SolletWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  providerHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n    const { signature } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n  providerHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return providerHandlers;\n};\n", "import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\n\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolletHandlers } from \"./providerHandlers\";\n\nexport class SolletInjectedProvider extends BaseInjectedProvider<SolletWallet> {\n  protected getProviderHandlers(injectedProvider: SolletWallet): IProviderHandlers {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n", "import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n", "import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n", "import { Keypair, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n", "import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n", "import { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const signedTransactions = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    })) as Transaction[];\n    return signedTransactions;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n"],
  "mappings": "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",
  "names": ["i", "j", "createChainIdMiddleware", "chainId", "req", "res", "next", "end", "method", "result", "createProviderConfigMiddleware", "providerConfig", "createConfigMiddleware", "mergeMiddleware", "createJsonRpcClient", "rpcTarget", "fetchMiddleware", "createFetchMiddleware", "networkMiddleware", "createGetAccountsMiddleware", "getAccounts", "createAsyncMiddleware", "request", "response", "Error", "accounts", "undefined", "createRequestAccountsMiddleware", "requestAccounts", "createGenericJRPCMiddleware", "targetMethod", "handler", "createSolanaMiddleware", "providerHandlers", "signTransaction", "signAndSendTransaction", "signAllTransactions", "signMessage", "getPrivateKey", "getSecretKey", "createChainSwitchMiddleware", "addNewChainConfig", "switchSolanaChain", "createAccountMiddleware", "updatePrivatekey", "createInjectedProviderProxyMiddleware", "provider", "_next", "_objectSpread", "getProviderHandlers", "privKey", "getProviderEngineProxy", "keyPairGenerator", "Keypair", "fromSecretKey", "Buffer", "from", "WalletInitializationError", "invalidParams", "keyPair", "publicKey", "toBase58", "bs58", "encode", "secretKey", "params", "message", "ethErrors", "rpc", "transaction", "partialSign", "signedMsg", "nacl", "sign", "detached", "_providerEngineProxy", "custom", "code", "sig", "serialize", "signature", "length", "txns", "tx", "BaseInjectedProvider", "getBaseProviderHandlers", "PhantomInjectedProvider", "getSlopeHandlers", "SlopeInjectedProxyProvider", "getSolflareHandlers", "SolflareInjectedProvider", "getSolletHandlers", "SolletInjectedProvider", "getTorusHandlers", "TorusInjectedProvider", "SolanaPrivateKeyProvider", "SolanaWallet", "BaseProvider", "constructor", "config", "state", "chainConfig", "chainNamespace", "CHAIN_NAMESPACES", "SOLANA", "switchChain", "_", "Promise", "resolve", "setupProvider", "injectedProvider", "engine", "JRPCEngine", "solanaMiddleware", "push", "configMiddleware", "injectedProviderProxy", "getInjectedProviderProxy", "providerFromEngine", "updateProviderEngineProxy", "lookupNetwork", "update", "toBytes", "methodNotSupported", "sigData", "display", "txRes", "data", "connect", "txMessage", "invalidRequest", "serializeMessage", "PublicKey", "decode", "addSignature", "conn", "Connection", "sendRawTransaction", "allTxns", "unsignedTx", "i", "msg", "signatures", "bind", "solflareProviderHandlers", "sendTransaction", "transactions", "handleInjectedProviderUpdate", "setupEngine", "connectedChainId", "connectedHexChainId", "isHexStrict", "toString", "parseInt", "rpcConnectionError", "emit", "on", "configure", "enable", "privateKey", "getChainSwitchMiddleware", "getAccountMiddleware", "updateAccount", "existingKey", "getChainConfig", "health", "chainSwitchHandlers", "chainName", "rpcUrls", "blockExplorerUrls", "nativeCurrency", "addChain", "ticker", "symbol", "tickerName", "name", "displayName", "blockExplorer", "chainSwitchMiddleware", "accountHandlers", "providerFactory", "signedTransaction", "signedTransactions", "args"]
}
