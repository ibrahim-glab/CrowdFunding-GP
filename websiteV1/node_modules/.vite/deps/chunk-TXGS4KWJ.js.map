{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/dist/embedded-wallet-46af4c3a.browser.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from './defineProperty-d7c057bf.browser.esm.js';\r\nimport { ChainToPublicRpc } from '@paperxyz/sdk-common-utilities';\r\nimport { Signer, getDefaultProvider } from 'ethers';\r\nimport { defineReadOnly } from 'ethers/lib/utils';\r\nimport { getDefaultGasOverrides } from '@thirdweb-dev/sdk';\r\n\r\n/**\r\n * @internal\r\n */\r\nconst EMBEDDED_WALLET_PATH = \"/sdk/2022-08-12/embedded-wallet\";\r\n/**\r\n * @internal\r\n */\r\nconst GET_IFRAME_BASE_URL = () => {\r\n  if (!!(localStorage.getItem(\"IS_THIRDWEB_DEV\") === \"true\")) {\r\n    return window.localStorage.getItem(\"THIRDWEB_DEV_URL\") ?? \"http://localhost:3000\";\r\n  }\r\n  return `https://embedded-wallet.thirdweb.com`;\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst WALLET_USER_DETAILS_LOCAL_STORAGE_NAME = clientId => `thirdwebEwsWalletUserDetails-${clientId}`;\r\n\r\n/**\r\n * @internal\r\n */\r\nconst WALLET_USER_ID_LOCAL_STORAGE_NAME = clientId => `thirdwebEwsWalletUserId-${clientId}`;\r\n\r\n/**\r\n * @internal\r\n */\r\nconst AUTH_TOKEN_LOCAL_STORAGE_PREFIX = \"walletToken\";\r\n\r\n/**\r\n * @internal\r\n */\r\nconst AUTH_TOKEN_LOCAL_STORAGE_NAME = clientId => {\r\n  return `${AUTH_TOKEN_LOCAL_STORAGE_PREFIX}-${clientId}`;\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nconst DEVICE_SHARE_LOCAL_STORAGE_PREFIX = \"a\";\r\n\r\n/**\r\n * @internal\r\n */\r\nconst DEVICE_SHARE_LOCAL_STORAGE_NAME = (clientId, userId) => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}-${userId}`;\r\n\r\n/**\r\n * @internal\r\n */\r\nconst DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED = clientId => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}`;\r\n\r\nlet RecoveryShareManagement = /*#__PURE__*/function (RecoveryShareManagement) {\r\n  RecoveryShareManagement[\"USER_MANAGED\"] = \"USER_MANAGED\";\r\n  RecoveryShareManagement[\"CLOUD_MANAGED\"] = \"AWS_MANAGED\";\r\n  return RecoveryShareManagement;\r\n}({});\r\nlet AuthProvider = /*#__PURE__*/function (AuthProvider) {\r\n  AuthProvider[\"COGNITO\"] = \"Cognito\";\r\n  AuthProvider[\"GOOGLE\"] = \"Google\";\r\n  AuthProvider[\"EMAIL_OTP\"] = \"EmailOtp\";\r\n  AuthProvider[\"CUSTOM_JWT\"] = \"CustomJWT\";\r\n  AuthProvider[\"CUSTOM_AUTH_ENDPOINT\"] = \"CustomAuthEndpoint\";\r\n  AuthProvider[\"FACEBOOK\"] = \"Facebook\";\r\n  AuthProvider[\"APPLE\"] = \"Apple\";\r\n  return AuthProvider;\r\n}({});\r\n\r\n/**\r\n * @internal\r\n */\r\n\r\n// TODO: Clean up tech debt of random type Objects\r\n// E.g. StoredTokenType is really not used anywhere but it exists as this object for legacy reason\r\n\r\n// Class constructor types\r\n// types for class constructors still a little messy right now.\r\n// Open to PRs from whoever sees this and knows of a cleaner way to handle things\r\n\r\n// Auth Types\r\n\r\n// Embedded Wallet Types\r\nlet UserWalletStatus = /*#__PURE__*/function (UserWalletStatus) {\r\n  UserWalletStatus[\"LOGGED_OUT\"] = \"Logged Out\";\r\n  UserWalletStatus[\"LOGGED_IN_WALLET_UNINITIALIZED\"] = \"Logged In, Wallet Uninitialized\";\r\n  UserWalletStatus[\"LOGGED_IN_NEW_DEVICE\"] = \"Logged In, New Device\";\r\n  UserWalletStatus[\"LOGGED_IN_WALLET_INITIALIZED\"] = \"Logged In, Wallet Initialized\";\r\n  return UserWalletStatus;\r\n}({});\r\n\r\n/**\r\n * @internal\r\n */\r\n\r\n// ! Types seem repetitive, but the name should identify which goes where\r\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method iframe call\r\n\r\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method\r\n\r\nconst data = new Map();\r\nclass LocalStorage {\r\n  constructor(_ref) {\r\n    let {\r\n      clientId\r\n    } = _ref;\r\n    this.isSupported = !!window.localStorage;\r\n    this.clientId = clientId;\r\n  }\r\n  async getItem(key) {\r\n    if (this.isSupported) {\r\n      return window.localStorage.getItem(key);\r\n    } else {\r\n      return data.get(key) ?? null;\r\n    }\r\n  }\r\n  async setItem(key, value) {\r\n    if (this.isSupported) {\r\n      return window.localStorage.setItem(key, value);\r\n    } else {\r\n      data.set(key, value);\r\n    }\r\n  }\r\n  async removeItem(key) {\r\n    const item = await this.getItem(key);\r\n    if (this.isSupported && item) {\r\n      window.localStorage.removeItem(key);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  async saveAuthCookie(cookie) {\r\n    await this.setItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId), cookie);\r\n  }\r\n  async getAuthCookie() {\r\n    return this.getItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\r\n  }\r\n  async removeAuthCookie() {\r\n    return this.removeItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\r\n  }\r\n  async saveDeviceShare(share, userId) {\r\n    await this.saveWalletUserId(userId);\r\n    await this.setItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId), share);\r\n  }\r\n  async getDeviceShare() {\r\n    const userId = await this.getWalletUserId();\r\n    if (userId) {\r\n      return this.getItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId));\r\n    }\r\n    return null;\r\n  }\r\n  async removeDeviceShare() {\r\n    const userId = await this.getWalletUserId();\r\n    if (userId) {\r\n      return this.removeItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId));\r\n    }\r\n    return false;\r\n  }\r\n  async getWalletUserId() {\r\n    return this.getItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\r\n  }\r\n  async saveWalletUserId(userId) {\r\n    await this.setItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId), userId);\r\n  }\r\n  async removeWalletUserId() {\r\n    return this.removeItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\r\n  }\r\n}\r\n\r\nfunction sleep(seconds) {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, seconds * 1000);\r\n  });\r\n}\r\nconst iframeBaseStyle = {\r\n  height: \"100%\",\r\n  width: \"100%\",\r\n  border: \"none\",\r\n  backgroundColor: \"transparent\",\r\n  colorScheme: \"light\",\r\n  position: \"fixed\",\r\n  top: \"0px\",\r\n  right: \"0px\",\r\n  zIndex: \"2147483646\",\r\n  display: \"none\"\r\n};\r\n\r\n// Global var to help track iframe state\r\nconst isIframeLoaded = new Map();\r\nclass IframeCommunicator {\r\n  constructor(_ref) {\r\n    let {\r\n      link,\r\n      iframeId,\r\n      container = document.body,\r\n      iframeStyles,\r\n      onIframeInitialize\r\n    } = _ref;\r\n    _defineProperty(this, \"POLLING_INTERVAL_SECONDS\", 1.4);\r\n    this.iframeBaseUrl = GET_IFRAME_BASE_URL();\r\n\r\n    // Creating the IFrame element for communication\r\n    let iframe = document.getElementById(iframeId);\r\n    const hrefLink = new URL(link);\r\n    const sdkVersion = \"2.4.11\";\r\n    hrefLink.searchParams.set(\"sdkVersion\", sdkVersion);\r\n    if (!iframe || iframe.src !== hrefLink.href) {\r\n      // ! Do not update the hrefLink here or it'll cause multiple re-renders\r\n      if (!iframe) {\r\n        iframe = document.createElement(\"iframe\");\r\n        const mergedIframeStyles = {\r\n          ...iframeBaseStyle,\r\n          ...iframeStyles\r\n        };\r\n        Object.assign(iframe.style, mergedIframeStyles);\r\n        iframe.setAttribute(\"id\", iframeId);\r\n        iframe.setAttribute(\"fetchpriority\", \"high\");\r\n        container.appendChild(iframe);\r\n      }\r\n      iframe.src = hrefLink.href;\r\n      iframe.setAttribute(\"data-version\", sdkVersion);\r\n      const onIframeLoaded = event => {\r\n        if (event.data.eventType === \"ewsIframeLoaded\") {\r\n          window.removeEventListener(\"message\", onIframeLoaded);\r\n          if (!iframe) {\r\n            console.warn(\"thirdweb Iframe not found\");\r\n            return;\r\n          }\r\n          this.onIframeLoadHandler(iframe, onIframeInitialize)();\r\n        }\r\n      };\r\n      window.addEventListener(\"message\", onIframeLoaded);\r\n    }\r\n    this.iframe = iframe;\r\n  }\r\n  async onIframeLoadedInitVariables() {\r\n    return {};\r\n  }\r\n  onIframeLoadHandler(iframe, onIframeInitialize) {\r\n    return async () => {\r\n      const promise = new Promise(async (res, rej) => {\r\n        const channel = new MessageChannel();\r\n        channel.port1.onmessage = event => {\r\n          const {\r\n            data\r\n          } = event;\r\n          channel.port1.close();\r\n          if (!data.success) {\r\n            return rej(new Error(data.error));\r\n          }\r\n          isIframeLoaded.set(iframe.src, true);\r\n          if (onIframeInitialize) {\r\n            onIframeInitialize();\r\n          }\r\n          return res(true);\r\n        };\r\n        const INIT_IFRAME_EVENT = \"initIframe\";\r\n        iframe?.contentWindow?.postMessage(\r\n        // ? We initialise the iframe with a bunch\r\n        // of useful information so that we don't have to pass it\r\n        // through in each of the future call. This would be where we do it.\r\n        {\r\n          eventType: INIT_IFRAME_EVENT,\r\n          data: await this.onIframeLoadedInitVariables()\r\n        }, this.iframeBaseUrl, [channel.port2]);\r\n      });\r\n      await promise;\r\n    };\r\n  }\r\n  async call(_ref2) {\r\n    let {\r\n      procedureName,\r\n      params,\r\n      showIframe = false\r\n    } = _ref2;\r\n    while (!isIframeLoaded.get(this.iframe.src)) {\r\n      await sleep(this.POLLING_INTERVAL_SECONDS);\r\n    }\r\n    if (showIframe) {\r\n      this.iframe.style.display = \"block\";\r\n      // magic number to let the display render before performing the animation of the modal in\r\n      await sleep(0.005);\r\n    }\r\n    const promise = new Promise((res, rej) => {\r\n      const channel = new MessageChannel();\r\n      channel.port1.onmessage = async event => {\r\n        const {\r\n          data\r\n        } = event;\r\n        channel.port1.close();\r\n        if (showIframe) {\r\n          // magic number to let modal fade out before hiding it\r\n          await sleep(0.1);\r\n          this.iframe.style.display = \"none\";\r\n        }\r\n        if (!data.success) {\r\n          rej(new Error(data.error));\r\n        } else {\r\n          res(data.data);\r\n        }\r\n      };\r\n      this.iframe.contentWindow?.postMessage({\r\n        eventType: procedureName,\r\n        data: params\r\n      }, this.iframeBaseUrl, [channel.port2]);\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * This has to be called by any iframe that will be removed from the DOM.\r\n   * Use to make sure that we reset the global loaded state of the particular iframe.src\r\n   */\r\n  destroy() {\r\n    isIframeLoaded.delete(this.iframe.src);\r\n  }\r\n}\r\n\r\nclass EmbeddedWalletIframeCommunicator extends IframeCommunicator {\r\n  constructor(_ref) {\r\n    let {\r\n      clientId,\r\n      customizationOptions\r\n    } = _ref;\r\n    super({\r\n      iframeId: EMBEDDED_WALLET_IFRAME_ID,\r\n      link: createEmbeddedWalletIframeLink({\r\n        clientId,\r\n        path: EMBEDDED_WALLET_PATH,\r\n        queryParams: customizationOptions\r\n      }).href,\r\n      container: document.body\r\n    });\r\n    this.clientId = clientId;\r\n  }\r\n  async onIframeLoadedInitVariables() {\r\n    const localStorage = new LocalStorage({\r\n      clientId: this.clientId\r\n    });\r\n    return {\r\n      authCookie: await localStorage.getAuthCookie(),\r\n      deviceShareStored: await localStorage.getDeviceShare(),\r\n      walletUserId: await localStorage.getWalletUserId(),\r\n      clientId: this.clientId\r\n    };\r\n  }\r\n}\r\n\r\n// This is the URL and ID tag of the iFrame that we communicate with\r\nfunction createEmbeddedWalletIframeLink(_ref2) {\r\n  let {\r\n    clientId,\r\n    path,\r\n    queryParams\r\n  } = _ref2;\r\n  const embeddedWalletUrl = new URL(`${path}`, GET_IFRAME_BASE_URL());\r\n  if (queryParams) {\r\n    for (const queryKey of Object.keys(queryParams)) {\r\n      embeddedWalletUrl.searchParams.set(queryKey, queryParams[queryKey]?.toString() || \"\");\r\n    }\r\n  }\r\n  embeddedWalletUrl.searchParams.set(\"clientId\", clientId);\r\n  return embeddedWalletUrl;\r\n}\r\nconst EMBEDDED_WALLET_IFRAME_ID = \"thirdweb-embedded-wallet-iframe\";\r\n\r\nclass AbstractLogin {\r\n  /**\r\n   * Used to manage the user's auth states. This should not be instantiated directly.\r\n   * Call {@link EmbeddedWalletSdk.auth} instead.\r\n   *\r\n   */\r\n  constructor(_ref) {\r\n    let {\r\n      querier,\r\n      preLogin,\r\n      postLogin,\r\n      clientId\r\n    } = _ref;\r\n    this.LoginQuerier = querier;\r\n    this.preLogin = preLogin;\r\n    this.postLogin = postLogin;\r\n    this.clientId = clientId;\r\n  }\r\n  async sendEmailLoginOtp(_ref2) {\r\n    let {\r\n      email\r\n    } = _ref2;\r\n    await this.preLogin();\r\n    const result = await this.LoginQuerier.call({\r\n      procedureName: \"sendThirdwebEmailLoginOtp\",\r\n      params: {\r\n        email\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n}\r\n\r\nclass BaseLogin extends AbstractLogin {\r\n  constructor() {\r\n    super(...arguments);\r\n    _defineProperty(this, \"closeWindow\", _ref => {\r\n      let {\r\n        isWindowOpenedByFn,\r\n        win,\r\n        closeOpenedWindow\r\n      } = _ref;\r\n      if (isWindowOpenedByFn) {\r\n        win?.close();\r\n      } else {\r\n        if (win && closeOpenedWindow) {\r\n          closeOpenedWindow(win);\r\n        } else if (win) {\r\n          win.close();\r\n        }\r\n      }\r\n    });\r\n  }\r\n  async getOauthLoginUrl(authProvider) {\r\n    const result = await this.LoginQuerier.call({\r\n      procedureName: \"getHeadlessOauthLoginLink\",\r\n      params: {\r\n        authProvider\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  async loginWithModal() {\r\n    await this.preLogin();\r\n    const result = await this.LoginQuerier.call({\r\n      procedureName: \"loginWithThirdwebModal\",\r\n      params: undefined,\r\n      showIframe: true\r\n    });\r\n    return this.postLogin(result);\r\n  }\r\n  async loginWithEmailOtp(_ref2) {\r\n    let {\r\n      email\r\n    } = _ref2;\r\n    await this.preLogin();\r\n    const result = await this.LoginQuerier.call({\r\n      procedureName: \"loginWithThirdwebModal\",\r\n      params: {\r\n        email\r\n      },\r\n      showIframe: true\r\n    });\r\n    return this.postLogin(result);\r\n  }\r\n  getOauthPopUpSizing(authProvider) {\r\n    switch (authProvider) {\r\n      case AuthProvider.FACEBOOK:\r\n        return \"width=715, height=555\";\r\n      default:\r\n        return \"width=350, height=500\";\r\n    }\r\n  }\r\n  async loginWithOauth(args) {\r\n    let win = args?.openedWindow;\r\n    let isWindowOpenedByFn = false;\r\n    if (!win) {\r\n      win = window.open(\"\", \"Login\", this.getOauthPopUpSizing(args.oauthProvider));\r\n      isWindowOpenedByFn = true;\r\n    }\r\n    if (!win) {\r\n      throw new Error(\"Something went wrong opening pop-up\");\r\n    }\r\n    // logout the user\r\n    // fetch the url to open the login window from iframe\r\n    const [{\r\n      loginLink\r\n    }] = await Promise.all([this.getOauthLoginUrl(args.oauthProvider), this.preLogin()]);\r\n    win.location.href = loginLink;\r\n    // listen to result from the login window\r\n    const result = await new Promise((resolve, reject) => {\r\n      // detect when the user closes the login window\r\n      const pollTimer = window.setInterval(async () => {\r\n        if (!win) {\r\n          return;\r\n        }\r\n        if (win.closed) {\r\n          clearInterval(pollTimer);\r\n          window.removeEventListener(\"message\", messageListener);\r\n          reject(new Error(\"User closed login window\"));\r\n        }\r\n      }, 1000);\r\n      const messageListener = async event => {\r\n        if (event.origin !== GET_IFRAME_BASE_URL()) {\r\n          return;\r\n        }\r\n        if (typeof event.data !== \"object\") {\r\n          reject(new Error(\"Invalid event data\"));\r\n          return;\r\n        }\r\n        switch (event.data.eventType) {\r\n          case \"userLoginSuccess\":\r\n            {\r\n              window.removeEventListener(\"message\", messageListener);\r\n              clearInterval(pollTimer);\r\n              this.closeWindow({\r\n                isWindowOpenedByFn,\r\n                win,\r\n                closeOpenedWindow: args?.closeOpenedWindow\r\n              });\r\n              if (event.data.authResult) {\r\n                resolve(event.data.authResult);\r\n              }\r\n              break;\r\n            }\r\n          case \"userLoginFailed\":\r\n            {\r\n              window.removeEventListener(\"message\", messageListener);\r\n              clearInterval(pollTimer);\r\n              this.closeWindow({\r\n                isWindowOpenedByFn,\r\n                win,\r\n                closeOpenedWindow: args?.closeOpenedWindow\r\n              });\r\n              reject(new Error(event.data.error));\r\n              break;\r\n            }\r\n          case \"injectDeveloperClientId\":\r\n            {\r\n              win?.postMessage({\r\n                eventType: \"injectDeveloperClientIdResult\",\r\n                developerClientId: this.clientId,\r\n                authOption: args.oauthProvider\r\n              }, GET_IFRAME_BASE_URL());\r\n              break;\r\n            }\r\n        }\r\n      };\r\n      window.addEventListener(\"message\", messageListener);\r\n    });\r\n    return this.postLogin({\r\n      storedToken: {\r\n        ...result.storedToken,\r\n        shouldStoreCookieString: true\r\n      },\r\n      walletDetails: {\r\n        ...result.walletDetails,\r\n        isIframeStorageEnabled: false\r\n      }\r\n    });\r\n  }\r\n  async loginWithCustomJwt(_ref3) {\r\n    let {\r\n      encryptionKey,\r\n      jwt\r\n    } = _ref3;\r\n    await this.preLogin();\r\n    const result = await this.LoginQuerier.call({\r\n      procedureName: \"loginWithCustomJwt\",\r\n      params: {\r\n        encryptionKey,\r\n        jwt\r\n      }\r\n    });\r\n    return this.postLogin(result);\r\n  }\r\n  async loginWithCustomAuthEndpoint(_ref4) {\r\n    let {\r\n      encryptionKey,\r\n      payload\r\n    } = _ref4;\r\n    await this.preLogin();\r\n    const result = await this.LoginQuerier.call({\r\n      procedureName: \"loginWithCustomAuthEndpoint\",\r\n      params: {\r\n        encryptionKey,\r\n        payload\r\n      }\r\n    });\r\n    return this.postLogin(result);\r\n  }\r\n  async verifyEmailLoginOtp(_ref5) {\r\n    let {\r\n      email,\r\n      otp,\r\n      recoveryCode\r\n    } = _ref5;\r\n    const result = await this.LoginQuerier.call({\r\n      procedureName: \"verifyThirdwebEmailLoginOtp\",\r\n      params: {\r\n        email,\r\n        otp,\r\n        recoveryCode\r\n      }\r\n    });\r\n    return this.postLogin(result);\r\n  }\r\n}\r\n\r\nclass Auth {\r\n  /**\r\n   * Used to manage the user's auth states. This should not be instantiated directly.\r\n   * Call {@link EmbeddedWalletSdk.auth} instead.\r\n   */\r\n  constructor(_ref) {\r\n    let {\r\n      clientId,\r\n      querier,\r\n      onAuthSuccess\r\n    } = _ref;\r\n    this.clientId = clientId;\r\n    this.AuthQuerier = querier;\r\n    this.localStorage = new LocalStorage({\r\n      clientId\r\n    });\r\n    this.onAuthSuccess = onAuthSuccess;\r\n    this.BaseLogin = new BaseLogin({\r\n      postLogin: async result => {\r\n        return this.postLogin(result);\r\n      },\r\n      preLogin: async () => {\r\n        await this.preLogin();\r\n      },\r\n      querier: querier,\r\n      clientId\r\n    });\r\n  }\r\n  async preLogin() {\r\n    await this.logout();\r\n  }\r\n  async postLogin(_ref2) {\r\n    let {\r\n      storedToken,\r\n      walletDetails\r\n    } = _ref2;\r\n    if (storedToken.shouldStoreCookieString) {\r\n      await this.localStorage.saveAuthCookie(storedToken.cookieString);\r\n    }\r\n    const initializedUser = await this.onAuthSuccess({\r\n      storedToken,\r\n      walletDetails\r\n    });\r\n    return initializedUser;\r\n  }\r\n\r\n  /**\r\n   * Used to log the user into their thirdweb wallet on your platform via a myriad of auth providers\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({clientId: \"YOUR_CLIENT_ID\", chain: \"Polygon\"})\r\n   * try {\r\n   *   const user = await thirdwebEmbeddedWallet.auth.loginWithModal();\r\n   *   // user is now logged in\r\n   * } catch (e) {\r\n   *   // User closed modal or something else went wrong during the authentication process\r\n   *   console.error(e)\r\n   * }\r\n   * ```\r\n   *\r\n   * @returns `{{user: InitializedUser}}` An InitializedUser object. See {@link EmbeddedWalletSdk.getUser} for more\r\n   */\r\n  async loginWithModal() {\r\n    return this.BaseLogin.loginWithModal();\r\n  }\r\n\r\n  /**\r\n   * Used to log the user into their thirdweb wallet using email OTP\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   *  // Basic Flow\r\n   *  const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\r\n   *  try {\r\n   *    // prompts user to enter the code they received\r\n   *    const user = await thirdwebEmbeddedWallet.auth.loginWithThirdwebEmailOtp({ email : \"you@example.com\" });\r\n   *    // user is now logged in\r\n   *  } catch (e) {\r\n   *    // User closed the OTP modal or something else went wrong during the authentication process\r\n   *    console.error(e)\r\n   *  }\r\n   * ```\r\n   *\r\n   * @param args - args.email: We will send the email an OTP that needs to be entered in order for them to be logged in.\r\n   * @returns `{{user: InitializedUser}}` An InitializedUser object. See {@link EmbeddedWalletSdk.getUser} for more\r\n   */\r\n  async loginWithEmailOtp(args) {\r\n    return this.BaseLogin.loginWithEmailOtp(args);\r\n  }\r\n  async loginWithCustomJwt(args) {\r\n    return this.BaseLogin.loginWithCustomJwt(args);\r\n  }\r\n  async loginWithCustomAuthEndpoint(args) {\r\n    return this.BaseLogin.loginWithCustomAuthEndpoint(args);\r\n  }\r\n  async loginWithOauth(args) {\r\n    return this.BaseLogin.loginWithOauth(args);\r\n  }\r\n\r\n  /**\r\n   * A headless way to send the users at the passed email an OTP code.\r\n   * You need to then call {@link Auth.verifyEmailLoginOtp} in order to complete the login process\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   *  const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\r\n   *  // sends user an OTP code\r\n   * try {\r\n   *    await thirdwebEmbeddedWallet.auth.sendEmailLoginOtp({ email : \"you@example.com\" });\r\n   * } catch(e) {\r\n   *    // Error Sending user's email an OTP code\r\n   *    console.error(e);\r\n   * }\r\n   *\r\n   * // Then when your user is ready to verify their OTP\r\n   * try {\r\n   *    const user = await thirdwebEmbeddedWallet.auth.verifyEmailLoginOtp({ email: \"you@example.com\", otp: \"6-DIGIT_CODE_HERE\" });\r\n   * } catch(e) {\r\n   *    // Error verifying the OTP code\r\n   *    console.error(e)\r\n   * }\r\n   * ```\r\n   *\r\n   * @param param0 - param0.email We will send the email an OTP that needs to be entered in order for them to be logged in.\r\n   * @returns `{{ isNewUser: boolean }}` IsNewUser indicates if the user is a new user to your platform\r\n   */\r\n  async sendEmailLoginOtp(_ref3) {\r\n    let {\r\n      email\r\n    } = _ref3;\r\n    return this.BaseLogin.sendEmailLoginOtp({\r\n      email\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used to verify the otp that the user receives from thirdweb\r\n   *\r\n   * See {@link Auth.sendEmailLoginOtp} for how the headless call flow looks like. Simply swap out the calls to `loginWithThirdwebEmailOtp` with `verifyThirdwebEmailLoginOtp`\r\n   *\r\n   * @param args - props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\r\n   * props.otp The code that the user received in their email\r\n   * @returns `{{user: InitializedUser}}` An InitializedUser object containing the user's status, wallet, authDetails, and more\r\n   */\r\n  async verifyEmailLoginOtp(args) {\r\n    return this.BaseLogin.verifyEmailLoginOtp(args);\r\n  }\r\n\r\n  /**\r\n   * Logs any existing user out of their wallet.\r\n   * @returns `{{success: boolean}}` true if a user is successfully logged out. false if there's no user currently logged in.\r\n   */\r\n  async logout() {\r\n    const {\r\n      success\r\n    } = await this.AuthQuerier.call({\r\n      procedureName: \"logout\",\r\n      params: undefined\r\n    });\r\n    const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();\r\n    const isRemoveUserId = await this.localStorage.removeWalletUserId();\r\n    return {\r\n      success: success || isRemoveAuthCookie || isRemoveUserId\r\n    };\r\n  }\r\n}\r\n\r\nclass EthersSigner extends Signer {\r\n  constructor(_ref) {\r\n    let {\r\n      provider,\r\n      clientId,\r\n      querier\r\n    } = _ref;\r\n    super();\r\n    _defineProperty(this, \"DEFAULT_ETHEREUM_CHAIN_ID\", 5);\r\n    this.clientId = clientId;\r\n    this.querier = querier;\r\n    // we try to extract a url if possible\r\n    this.endpoint = provider.connection?.url;\r\n    defineReadOnly(this, \"provider\", provider);\r\n  }\r\n  async getAddress() {\r\n    const {\r\n      address\r\n    } = await this.querier.call({\r\n      procedureName: \"getAddress\",\r\n      params: undefined\r\n    });\r\n    return address;\r\n  }\r\n  async signMessage(message) {\r\n    const {\r\n      signedMessage\r\n    } = await this.querier.call({\r\n      procedureName: \"signMessage\",\r\n      params: {\r\n        message,\r\n        chainId: (await this.provider?.getNetwork())?.chainId ?? this.DEFAULT_ETHEREUM_CHAIN_ID,\r\n        rpcEndpoint: this.endpoint\r\n      }\r\n    });\r\n    return signedMessage;\r\n  }\r\n  async signTransaction(transaction) {\r\n    const {\r\n      signedTransaction\r\n    } = await this.querier.call({\r\n      procedureName: \"signTransaction\",\r\n      params: {\r\n        transaction,\r\n        chainId: (await this.provider?.getNetwork())?.chainId ?? this.DEFAULT_ETHEREUM_CHAIN_ID,\r\n        rpcEndpoint: this.endpoint\r\n      }\r\n    });\r\n    return signedTransaction;\r\n  }\r\n  async sendTransaction(transaction) {\r\n    if (!this.provider) {\r\n      throw new Error(\"Provider not found\");\r\n    }\r\n    const gas = await getDefaultGasOverrides(this.provider);\r\n    const txWithGas = {\r\n      ...gas,\r\n      ...transaction\r\n    };\r\n    return super.sendTransaction(txWithGas);\r\n  }\r\n  async _signTypedData(domain, types, message) {\r\n    const {\r\n      signedTypedData\r\n    } = await this.querier.call({\r\n      procedureName: \"signTypedDataV4\",\r\n      params: {\r\n        domain,\r\n        types,\r\n        message,\r\n        chainId: (await this.provider?.getNetwork())?.chainId ?? this.DEFAULT_ETHEREUM_CHAIN_ID,\r\n        rpcEndpoint: this.endpoint\r\n      }\r\n    });\r\n    return signedTypedData;\r\n  }\r\n  connect(provider) {\r\n    return new EthersSigner({\r\n      clientId: this.clientId,\r\n      provider,\r\n      querier: this.querier\r\n    });\r\n  }\r\n}\r\n\r\nclass EmbeddedWallet {\r\n  /**\r\n   * Not meant to be initialized directly. Call {@link initializeUser} to get an instance\r\n   */\r\n  constructor(_ref) {\r\n    let {\r\n      clientId,\r\n      chain,\r\n      querier\r\n    } = _ref;\r\n    this.clientId = clientId;\r\n    this.chain = chain;\r\n    this.walletManagerQuerier = querier;\r\n    this.localStorage = new LocalStorage({\r\n      clientId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   * Used to set-up the user device in the case that they are using incognito\r\n   * @returns `{walletAddress : string }` The user's wallet details\r\n   */\r\n  async postWalletSetUp(_ref2) {\r\n    let {\r\n      deviceShareStored,\r\n      walletAddress,\r\n      isIframeStorageEnabled,\r\n      walletUserId\r\n    } = _ref2;\r\n    if (!isIframeStorageEnabled) {\r\n      await this.localStorage.saveDeviceShare(deviceShareStored, walletUserId);\r\n    }\r\n    return {\r\n      walletAddress\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   * Gets the various status states of the user\r\n   * @example\r\n   * ```typescript\r\n   *  const userStatus = await Paper.getUserWalletStatus();\r\n   *  switch (userStatus.status) {\r\n   *  case UserWalletStatus.LOGGED_OUT: {\r\n   *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\r\n   *    break;\r\n   *  }\r\n   *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {\r\n   *    // User is logged in, but does not have a wallet associated with it\r\n   *    // you also have access to the user's details\r\n   *    userStatus.user.authDetails;\r\n   *    break;\r\n   *  }\r\n   *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {\r\n   *    // User is logged in and created a wallet already, but is missing the device shard\r\n   *    // You have access to:\r\n   *    userStatus.user.authDetails;\r\n   *    userStatus.user.walletAddress;\r\n   *    break;\r\n   *  }\r\n   *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\r\n   *    // user is logged in and wallet is all set up.\r\n   *    // You have access to:\r\n   *    userStatus.user.authDetails;\r\n   *    userStatus.user.walletAddress;\r\n   *    userStatus.user.wallet;\r\n   *    break;\r\n   *  }\r\n   *}\r\n   *```\r\n   * @returns `{GetUserWalletStatusFnReturnType}` an object to containing various information on the user statuses\r\n   */\r\n  async getUserWalletStatus() {\r\n    const userStatus = await this.walletManagerQuerier.call({\r\n      procedureName: \"getUserStatus\",\r\n      params: undefined\r\n    });\r\n    if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED) {\r\n      return {\r\n        status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\r\n        ...userStatus.user,\r\n        wallet: this\r\n      };\r\n    } else if (userStatus.status === UserWalletStatus.LOGGED_IN_NEW_DEVICE) {\r\n      return {\r\n        status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,\r\n        ...userStatus.user\r\n      };\r\n    } else if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED) {\r\n      return {\r\n        status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,\r\n        ...userStatus.user\r\n      };\r\n    } else {\r\n      // Logged out\r\n      return {\r\n        status: userStatus.status\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switches the chain that the user wallet is currently on.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * // user wallet will be set to Polygon\r\n   * const Paper = new ThirdwebEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\r\n   * const user = await Paper.initializeUser();\r\n   * // Switch the user wallet to Mumbai\r\n   * await user.wallet.setChain({ chain: \"Mumbai\" });\r\n   * ```\r\n   * @param param0 - The chain that we are changing the user wallet too\r\n   */\r\n  async setChain(_ref3) {\r\n    let {\r\n      chain\r\n    } = _ref3;\r\n    this.chain = chain;\r\n  }\r\n\r\n  /**\r\n   * Returns an Ethers.Js compatible signer that you can use in conjunction with the rest of dApp\r\n   * @example\r\n   * ```typescript\r\n   * const Paper = new ThirdwebEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\r\n   * const user = await Paper.getUser();\r\n   * if (user.status === UserStatus.LOGGED_IN_WALLET_INITIALIZED) {\r\n   *    // returns a signer on the Polygon mainnet\r\n   *    const signer = await user.getEthersJsSigner();\r\n   *    // returns a signer on the specified RPC endpoints\r\n   *    const signer = await user.getEthersJsSigner({rpcEndpoint: \"https://eth-rpc.gateway.pokt.network\"});\r\n   * }\r\n   * ```\r\n   * @param network - object with the rpc url where calls will be routed through\r\n   * @throws If attempting to call the function without the user wallet initialize on their current device. This should never happen if call {@link ThirdwebEmbeddedWalletSdk.initializeUser} before accessing this function\r\n   * @returns A signer that is compatible with Ether.js. Defaults to the public rpc on the chain specified when initializing the {@link ThirdwebEmbeddedWalletSdk} instance\r\n   */\r\n  async getEthersJsSigner(network) {\r\n    const signer = new EthersSigner({\r\n      clientId: this.clientId,\r\n      provider: getDefaultProvider(network?.rpcEndpoint ?? ChainToPublicRpc[this.chain]),\r\n      querier: this.walletManagerQuerier\r\n    });\r\n    return signer;\r\n  }\r\n}\r\n\r\nclass EmbeddedWalletSdk {\r\n  /**\r\n   * Used to manage the Auth state of the user.\r\n   */\r\n\r\n  isClientIdLegacyPaper(clientId) {\r\n    if (clientId.indexOf(\"-\") > 0 && clientId.length === 36) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @example\r\n   * `const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({ clientId: \"\", chain: \"Goerli\" });`\r\n   * @param param0 - EmbeddedWalletConstructorType\r\n   */\r\n  constructor(_ref) {\r\n    let {\r\n      clientId,\r\n      chain,\r\n      styles,\r\n      onAuthSuccess\r\n    } = _ref;\r\n    if (this.isClientIdLegacyPaper(clientId)) {\r\n      throw new Error(\"You are using a legacy clientId. Please use the clientId found on the thirdweb dashboard settings page\");\r\n    }\r\n    this.clientId = clientId;\r\n    this.querier = new EmbeddedWalletIframeCommunicator({\r\n      clientId,\r\n      customizationOptions: styles\r\n    });\r\n    this.wallet = new EmbeddedWallet({\r\n      clientId,\r\n      chain,\r\n      querier: this.querier\r\n    });\r\n    this.auth = new Auth({\r\n      clientId,\r\n      querier: this.querier,\r\n      onAuthSuccess: async authResult => {\r\n        onAuthSuccess?.(authResult);\r\n        await this.wallet.postWalletSetUp({\r\n          ...authResult.walletDetails,\r\n          walletUserId: authResult.storedToken.authDetails.userWalletId\r\n        });\r\n        await this.querier.call({\r\n          procedureName: \"initIframe\",\r\n          params: {\r\n            deviceShareStored: authResult.walletDetails.deviceShareStored,\r\n            clientId: this.clientId,\r\n            walletUserId: authResult.storedToken.authDetails.userWalletId,\r\n            authCookie: authResult.storedToken.cookieString\r\n          }\r\n        });\r\n        return {\r\n          user: {\r\n            status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\r\n            authDetails: authResult.storedToken.authDetails,\r\n            wallet: this.wallet,\r\n            walletAddress: authResult.walletDetails.walletAddress\r\n          }\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the usr if they are logged in\r\n   * @example\r\n   * ```js\r\n   *  const user = await thirdwebEmbeddedWallet.getUser();\r\n   *  switch (user.status) {\r\n   *     case UserWalletStatus.LOGGED_OUT: {\r\n   *       // User is logged out, call one of the auth methods on thirdwebEmbeddedWallet.auth to authenticate the user\r\n   *       break;\r\n   *     }\r\n   *     case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\r\n   *       // user is logged in and wallet is all set up.\r\n   *       // You have access to:\r\n   *       user.status;\r\n   *       user.authDetails;\r\n   *       user.walletAddress;\r\n   *       user.wallet;\r\n   *       break;\r\n   *     }\r\n   * }\r\n   * ```\r\n   * @returns GetUser - an object to containing various information on the user statuses\r\n   */\r\n  async getUser() {\r\n    return this.wallet.getUserWalletStatus();\r\n  }\r\n}\r\n\r\nexport { AUTH_TOKEN_LOCAL_STORAGE_NAME as A, DEVICE_SHARE_LOCAL_STORAGE_NAME as D, EmbeddedWalletSdk as E, RecoveryShareManagement as R, UserWalletStatus as U, WALLET_USER_DETAILS_LOCAL_STORAGE_NAME as W, DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED as a, WALLET_USER_ID_LOCAL_STORAGE_NAME as b, AuthProvider as c };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA,mBAA+B;AAM/B,IAAM,uBAAuB;AAI7B,IAAM,sBAAsB,MAAM;AAChC,MAAI,CAAC,EAAE,aAAa,QAAQ,iBAAiB,MAAM,SAAS;AAC1D,WAAO,OAAO,aAAa,QAAQ,kBAAkB,KAAK;AAAA,EAC5D;AACA,SAAO;AACT;AAIA,IAAM,yCAAyC,cAAY,gCAAgC,QAAQ;AAKnG,IAAM,oCAAoC,cAAY,2BAA2B,QAAQ;AAKzF,IAAM,kCAAkC;AAKxC,IAAM,gCAAgC,cAAY;AAChD,SAAO,GAAG,+BAA+B,IAAI,QAAQ;AACvD;AAKA,IAAM,oCAAoC;AAK1C,IAAM,kCAAkC,CAAC,UAAU,WAAW,GAAG,iCAAiC,IAAI,QAAQ,IAAI,MAAM;AAKxH,IAAM,6CAA6C,cAAY,GAAG,iCAAiC,IAAI,QAAQ;AAE/G,IAAI,0BAAuC,SAAUA,0BAAyB;AAC5E,EAAAA,yBAAwB,cAAc,IAAI;AAC1C,EAAAA,yBAAwB,eAAe,IAAI;AAC3C,SAAOA;AACT,EAAE,CAAC,CAAC;AACJ,IAAI,eAA4B,SAAUC,eAAc;AACtD,EAAAA,cAAa,SAAS,IAAI;AAC1B,EAAAA,cAAa,QAAQ,IAAI;AACzB,EAAAA,cAAa,WAAW,IAAI;AAC5B,EAAAA,cAAa,YAAY,IAAI;AAC7B,EAAAA,cAAa,sBAAsB,IAAI;AACvC,EAAAA,cAAa,UAAU,IAAI;AAC3B,EAAAA,cAAa,OAAO,IAAI;AACxB,SAAOA;AACT,EAAE,CAAC,CAAC;AAgBJ,IAAI,mBAAgC,SAAUC,mBAAkB;AAC9D,EAAAA,kBAAiB,YAAY,IAAI;AACjC,EAAAA,kBAAiB,gCAAgC,IAAI;AACrD,EAAAA,kBAAiB,sBAAsB,IAAI;AAC3C,EAAAA,kBAAiB,8BAA8B,IAAI;AACnD,SAAOA;AACT,EAAE,CAAC,CAAC;AAWJ,IAAM,OAAO,oBAAI,IAAI;AACrB,IAAM,eAAN,MAAmB;AAAA,EACjB,YAAY,MAAM;AAChB,QAAI;AAAA,MACF;AAAA,IACF,IAAI;AACJ,SAAK,cAAc,CAAC,CAAC,OAAO;AAC5B,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,MAAM,QAAQ,KAAK;AACjB,QAAI,KAAK,aAAa;AACpB,aAAO,OAAO,aAAa,QAAQ,GAAG;AAAA,IACxC,OAAO;AACL,aAAO,KAAK,IAAI,GAAG,KAAK;AAAA,IAC1B;AAAA,EACF;AAAA,EACA,MAAM,QAAQ,KAAK,OAAO;AACxB,QAAI,KAAK,aAAa;AACpB,aAAO,OAAO,aAAa,QAAQ,KAAK,KAAK;AAAA,IAC/C,OAAO;AACL,WAAK,IAAI,KAAK,KAAK;AAAA,IACrB;AAAA,EACF;AAAA,EACA,MAAM,WAAW,KAAK;AACpB,UAAM,OAAO,MAAM,KAAK,QAAQ,GAAG;AACnC,QAAI,KAAK,eAAe,MAAM;AAC5B,aAAO,aAAa,WAAW,GAAG;AAClC,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,eAAe,QAAQ;AAC3B,UAAM,KAAK,QAAQ,8BAA8B,KAAK,QAAQ,GAAG,MAAM;AAAA,EACzE;AAAA,EACA,MAAM,gBAAgB;AACpB,WAAO,KAAK,QAAQ,8BAA8B,KAAK,QAAQ,CAAC;AAAA,EAClE;AAAA,EACA,MAAM,mBAAmB;AACvB,WAAO,KAAK,WAAW,8BAA8B,KAAK,QAAQ,CAAC;AAAA,EACrE;AAAA,EACA,MAAM,gBAAgB,OAAO,QAAQ;AACnC,UAAM,KAAK,iBAAiB,MAAM;AAClC,UAAM,KAAK,QAAQ,gCAAgC,KAAK,UAAU,MAAM,GAAG,KAAK;AAAA,EAClF;AAAA,EACA,MAAM,iBAAiB;AACrB,UAAM,SAAS,MAAM,KAAK,gBAAgB;AAC1C,QAAI,QAAQ;AACV,aAAO,KAAK,QAAQ,gCAAgC,KAAK,UAAU,MAAM,CAAC;AAAA,IAC5E;AACA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,oBAAoB;AACxB,UAAM,SAAS,MAAM,KAAK,gBAAgB;AAC1C,QAAI,QAAQ;AACV,aAAO,KAAK,WAAW,gCAAgC,KAAK,UAAU,MAAM,CAAC;AAAA,IAC/E;AACA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,kBAAkB;AACtB,WAAO,KAAK,QAAQ,kCAAkC,KAAK,QAAQ,CAAC;AAAA,EACtE;AAAA,EACA,MAAM,iBAAiB,QAAQ;AAC7B,UAAM,KAAK,QAAQ,kCAAkC,KAAK,QAAQ,GAAG,MAAM;AAAA,EAC7E;AAAA,EACA,MAAM,qBAAqB;AACzB,WAAO,KAAK,WAAW,kCAAkC,KAAK,QAAQ,CAAC;AAAA,EACzE;AACF;AAEA,SAAS,MAAM,SAAS;AACtB,SAAO,IAAI,QAAQ,aAAW;AAC5B,eAAW,SAAS,UAAU,GAAI;AAAA,EACpC,CAAC;AACH;AACA,IAAM,kBAAkB;AAAA,EACtB,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,UAAU;AAAA,EACV,KAAK;AAAA,EACL,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACX;AAGA,IAAM,iBAAiB,oBAAI,IAAI;AAC/B,IAAM,qBAAN,MAAyB;AAAA,EACvB,YAAY,MAAM;AAChB,QAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA,YAAY,SAAS;AAAA,MACrB;AAAA,MACA;AAAA,IACF,IAAI;AACJ,oBAAgB,MAAM,4BAA4B,GAAG;AACrD,SAAK,gBAAgB,oBAAoB;AAGzC,QAAI,SAAS,SAAS,eAAe,QAAQ;AAC7C,UAAM,WAAW,IAAI,IAAI,IAAI;AAC7B,UAAM,aAAa;AACnB,aAAS,aAAa,IAAI,cAAc,UAAU;AAClD,QAAI,CAAC,UAAU,OAAO,QAAQ,SAAS,MAAM;AAE3C,UAAI,CAAC,QAAQ;AACX,iBAAS,SAAS,cAAc,QAAQ;AACxC,cAAM,qBAAqB;AAAA,UACzB,GAAG;AAAA,UACH,GAAG;AAAA,QACL;AACA,eAAO,OAAO,OAAO,OAAO,kBAAkB;AAC9C,eAAO,aAAa,MAAM,QAAQ;AAClC,eAAO,aAAa,iBAAiB,MAAM;AAC3C,kBAAU,YAAY,MAAM;AAAA,MAC9B;AACA,aAAO,MAAM,SAAS;AACtB,aAAO,aAAa,gBAAgB,UAAU;AAC9C,YAAM,iBAAiB,WAAS;AAC9B,YAAI,MAAM,KAAK,cAAc,mBAAmB;AAC9C,iBAAO,oBAAoB,WAAW,cAAc;AACpD,cAAI,CAAC,QAAQ;AACX,oBAAQ,KAAK,2BAA2B;AACxC;AAAA,UACF;AACA,eAAK,oBAAoB,QAAQ,kBAAkB,EAAE;AAAA,QACvD;AAAA,MACF;AACA,aAAO,iBAAiB,WAAW,cAAc;AAAA,IACnD;AACA,SAAK,SAAS;AAAA,EAChB;AAAA,EACA,MAAM,8BAA8B;AAClC,WAAO,CAAC;AAAA,EACV;AAAA,EACA,oBAAoB,QAAQ,oBAAoB;AAC9C,WAAO,YAAY;AACjB,YAAM,UAAU,IAAI,QAAQ,OAAO,KAAK,QAAQ;AAnPtD;AAoPQ,cAAM,UAAU,IAAI,eAAe;AACnC,gBAAQ,MAAM,YAAY,WAAS;AACjC,gBAAM;AAAA,YACJ,MAAAC;AAAA,UACF,IAAI;AACJ,kBAAQ,MAAM,MAAM;AACpB,cAAI,CAACA,MAAK,SAAS;AACjB,mBAAO,IAAI,IAAI,MAAMA,MAAK,KAAK,CAAC;AAAA,UAClC;AACA,yBAAe,IAAI,OAAO,KAAK,IAAI;AACnC,cAAI,oBAAoB;AACtB,+BAAmB;AAAA,UACrB;AACA,iBAAO,IAAI,IAAI;AAAA,QACjB;AACA,cAAM,oBAAoB;AAC1B,+CAAQ,kBAAR,mBAAuB;AAAA;AAAA;AAAA;AAAA,UAIvB;AAAA,YACE,WAAW;AAAA,YACX,MAAM,MAAM,KAAK,4BAA4B;AAAA,UAC/C;AAAA,UAAG,KAAK;AAAA,UAAe,CAAC,QAAQ,KAAK;AAAA;AAAA,MACvC,CAAC;AACD,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA,MAAM,KAAK,OAAO;AAChB,QAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA,aAAa;AAAA,IACf,IAAI;AACJ,WAAO,CAAC,eAAe,IAAI,KAAK,OAAO,GAAG,GAAG;AAC3C,YAAM,MAAM,KAAK,wBAAwB;AAAA,IAC3C;AACA,QAAI,YAAY;AACd,WAAK,OAAO,MAAM,UAAU;AAE5B,YAAM,MAAM,IAAK;AAAA,IACnB;AACA,UAAM,UAAU,IAAI,QAAQ,CAAC,KAAK,QAAQ;AA9R9C;AA+RM,YAAM,UAAU,IAAI,eAAe;AACnC,cAAQ,MAAM,YAAY,OAAM,UAAS;AACvC,cAAM;AAAA,UACJ,MAAAA;AAAA,QACF,IAAI;AACJ,gBAAQ,MAAM,MAAM;AACpB,YAAI,YAAY;AAEd,gBAAM,MAAM,GAAG;AACf,eAAK,OAAO,MAAM,UAAU;AAAA,QAC9B;AACA,YAAI,CAACA,MAAK,SAAS;AACjB,cAAI,IAAI,MAAMA,MAAK,KAAK,CAAC;AAAA,QAC3B,OAAO;AACL,cAAIA,MAAK,IAAI;AAAA,QACf;AAAA,MACF;AACA,iBAAK,OAAO,kBAAZ,mBAA2B,YAAY;AAAA,QACrC,WAAW;AAAA,QACX,MAAM;AAAA,MACR,GAAG,KAAK,eAAe,CAAC,QAAQ,KAAK;AAAA,IACvC,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU;AACR,mBAAe,OAAO,KAAK,OAAO,GAAG;AAAA,EACvC;AACF;AAEA,IAAM,mCAAN,cAA+C,mBAAmB;AAAA,EAChE,YAAY,MAAM;AAChB,QAAI;AAAA,MACF;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM;AAAA,MACJ,UAAU;AAAA,MACV,MAAM,+BAA+B;AAAA,QACnC;AAAA,QACA,MAAM;AAAA,QACN,aAAa;AAAA,MACf,CAAC,EAAE;AAAA,MACH,WAAW,SAAS;AAAA,IACtB,CAAC;AACD,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,MAAM,8BAA8B;AAClC,UAAMC,gBAAe,IAAI,aAAa;AAAA,MACpC,UAAU,KAAK;AAAA,IACjB,CAAC;AACD,WAAO;AAAA,MACL,YAAY,MAAMA,cAAa,cAAc;AAAA,MAC7C,mBAAmB,MAAMA,cAAa,eAAe;AAAA,MACrD,cAAc,MAAMA,cAAa,gBAAgB;AAAA,MACjD,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AACF;AAGA,SAAS,+BAA+B,OAAO;AAhW/C;AAiWE,MAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM,oBAAoB,IAAI,IAAI,GAAG,IAAI,IAAI,oBAAoB,CAAC;AAClE,MAAI,aAAa;AACf,eAAW,YAAY,OAAO,KAAK,WAAW,GAAG;AAC/C,wBAAkB,aAAa,IAAI,YAAU,iBAAY,QAAQ,MAApB,mBAAuB,eAAc,EAAE;AAAA,IACtF;AAAA,EACF;AACA,oBAAkB,aAAa,IAAI,YAAY,QAAQ;AACvD,SAAO;AACT;AACA,IAAM,4BAA4B;AAElC,IAAM,gBAAN,MAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlB,YAAY,MAAM;AAChB,QAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,MAAM,kBAAkB,OAAO;AAC7B,QAAI;AAAA,MACF;AAAA,IACF,IAAI;AACJ,UAAM,KAAK,SAAS;AACpB,UAAM,SAAS,MAAM,KAAK,aAAa,KAAK;AAAA,MAC1C,eAAe;AAAA,MACf,QAAQ;AAAA,QACN;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AACF;AAEA,IAAM,YAAN,cAAwB,cAAc;AAAA,EACpC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,oBAAgB,MAAM,eAAe,UAAQ;AAC3C,UAAI;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACF,IAAI;AACJ,UAAI,oBAAoB;AACtB,mCAAK;AAAA,MACP,OAAO;AACL,YAAI,OAAO,mBAAmB;AAC5B,4BAAkB,GAAG;AAAA,QACvB,WAAW,KAAK;AACd,cAAI,MAAM;AAAA,QACZ;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,MAAM,iBAAiB,cAAc;AACnC,UAAM,SAAS,MAAM,KAAK,aAAa,KAAK;AAAA,MAC1C,eAAe;AAAA,MACf,QAAQ;AAAA,QACN;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,iBAAiB;AACrB,UAAM,KAAK,SAAS;AACpB,UAAM,SAAS,MAAM,KAAK,aAAa,KAAK;AAAA,MAC1C,eAAe;AAAA,MACf,QAAQ;AAAA,MACR,YAAY;AAAA,IACd,CAAC;AACD,WAAO,KAAK,UAAU,MAAM;AAAA,EAC9B;AAAA,EACA,MAAM,kBAAkB,OAAO;AAC7B,QAAI;AAAA,MACF;AAAA,IACF,IAAI;AACJ,UAAM,KAAK,SAAS;AACpB,UAAM,SAAS,MAAM,KAAK,aAAa,KAAK;AAAA,MAC1C,eAAe;AAAA,MACf,QAAQ;AAAA,QACN;AAAA,MACF;AAAA,MACA,YAAY;AAAA,IACd,CAAC;AACD,WAAO,KAAK,UAAU,MAAM;AAAA,EAC9B;AAAA,EACA,oBAAoB,cAAc;AAChC,YAAQ,cAAc;AAAA,MACpB,KAAK,aAAa;AAChB,eAAO;AAAA,MACT;AACE,eAAO;AAAA,IACX;AAAA,EACF;AAAA,EACA,MAAM,eAAe,MAAM;AACzB,QAAI,MAAM,6BAAM;AAChB,QAAI,qBAAqB;AACzB,QAAI,CAAC,KAAK;AACR,YAAM,OAAO,KAAK,IAAI,SAAS,KAAK,oBAAoB,KAAK,aAAa,CAAC;AAC3E,2BAAqB;AAAA,IACvB;AACA,QAAI,CAAC,KAAK;AACR,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACvD;AAGA,UAAM,CAAC;AAAA,MACL;AAAA,IACF,CAAC,IAAI,MAAM,QAAQ,IAAI,CAAC,KAAK,iBAAiB,KAAK,aAAa,GAAG,KAAK,SAAS,CAAC,CAAC;AACnF,QAAI,SAAS,OAAO;AAEpB,UAAM,SAAS,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEpD,YAAM,YAAY,OAAO,YAAY,YAAY;AAC/C,YAAI,CAAC,KAAK;AACR;AAAA,QACF;AACA,YAAI,IAAI,QAAQ;AACd,wBAAc,SAAS;AACvB,iBAAO,oBAAoB,WAAW,eAAe;AACrD,iBAAO,IAAI,MAAM,0BAA0B,CAAC;AAAA,QAC9C;AAAA,MACF,GAAG,GAAI;AACP,YAAM,kBAAkB,OAAM,UAAS;AACrC,YAAI,MAAM,WAAW,oBAAoB,GAAG;AAC1C;AAAA,QACF;AACA,YAAI,OAAO,MAAM,SAAS,UAAU;AAClC,iBAAO,IAAI,MAAM,oBAAoB,CAAC;AACtC;AAAA,QACF;AACA,gBAAQ,MAAM,KAAK,WAAW;AAAA,UAC5B,KAAK,oBACH;AACE,mBAAO,oBAAoB,WAAW,eAAe;AACrD,0BAAc,SAAS;AACvB,iBAAK,YAAY;AAAA,cACf;AAAA,cACA;AAAA,cACA,mBAAmB,6BAAM;AAAA,YAC3B,CAAC;AACD,gBAAI,MAAM,KAAK,YAAY;AACzB,sBAAQ,MAAM,KAAK,UAAU;AAAA,YAC/B;AACA;AAAA,UACF;AAAA,UACF,KAAK,mBACH;AACE,mBAAO,oBAAoB,WAAW,eAAe;AACrD,0BAAc,SAAS;AACvB,iBAAK,YAAY;AAAA,cACf;AAAA,cACA;AAAA,cACA,mBAAmB,6BAAM;AAAA,YAC3B,CAAC;AACD,mBAAO,IAAI,MAAM,MAAM,KAAK,KAAK,CAAC;AAClC;AAAA,UACF;AAAA,UACF,KAAK,2BACH;AACE,uCAAK,YAAY;AAAA,cACf,WAAW;AAAA,cACX,mBAAmB,KAAK;AAAA,cACxB,YAAY,KAAK;AAAA,YACnB,GAAG,oBAAoB;AACvB;AAAA,UACF;AAAA,QACJ;AAAA,MACF;AACA,aAAO,iBAAiB,WAAW,eAAe;AAAA,IACpD,CAAC;AACD,WAAO,KAAK,UAAU;AAAA,MACpB,aAAa;AAAA,QACX,GAAG,OAAO;AAAA,QACV,yBAAyB;AAAA,MAC3B;AAAA,MACA,eAAe;AAAA,QACb,GAAG,OAAO;AAAA,QACV,wBAAwB;AAAA,MAC1B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,MAAM,mBAAmB,OAAO;AAC9B,QAAI;AAAA,MACF;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,KAAK,SAAS;AACpB,UAAM,SAAS,MAAM,KAAK,aAAa,KAAK;AAAA,MAC1C,eAAe;AAAA,MACf,QAAQ;AAAA,QACN;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO,KAAK,UAAU,MAAM;AAAA,EAC9B;AAAA,EACA,MAAM,4BAA4B,OAAO;AACvC,QAAI;AAAA,MACF;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,KAAK,SAAS;AACpB,UAAM,SAAS,MAAM,KAAK,aAAa,KAAK;AAAA,MAC1C,eAAe;AAAA,MACf,QAAQ;AAAA,QACN;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO,KAAK,UAAU,MAAM;AAAA,EAC9B;AAAA,EACA,MAAM,oBAAoB,OAAO;AAC/B,QAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,SAAS,MAAM,KAAK,aAAa,KAAK;AAAA,MAC1C,eAAe;AAAA,MACf,QAAQ;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO,KAAK,UAAU,MAAM;AAAA,EAC9B;AACF;AAEA,IAAM,OAAN,MAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAKT,YAAY,MAAM;AAChB,QAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,SAAK,WAAW;AAChB,SAAK,cAAc;AACnB,SAAK,eAAe,IAAI,aAAa;AAAA,MACnC;AAAA,IACF,CAAC;AACD,SAAK,gBAAgB;AACrB,SAAK,YAAY,IAAI,UAAU;AAAA,MAC7B,WAAW,OAAM,WAAU;AACzB,eAAO,KAAK,UAAU,MAAM;AAAA,MAC9B;AAAA,MACA,UAAU,YAAY;AACpB,cAAM,KAAK,SAAS;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,MAAM,WAAW;AACf,UAAM,KAAK,OAAO;AAAA,EACpB;AAAA,EACA,MAAM,UAAU,OAAO;AACrB,QAAI;AAAA,MACF;AAAA,MACA;AAAA,IACF,IAAI;AACJ,QAAI,YAAY,yBAAyB;AACvC,YAAM,KAAK,aAAa,eAAe,YAAY,YAAY;AAAA,IACjE;AACA,UAAM,kBAAkB,MAAM,KAAK,cAAc;AAAA,MAC/C;AAAA,MACA;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,MAAM,iBAAiB;AACrB,WAAO,KAAK,UAAU,eAAe;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,MAAM,kBAAkB,MAAM;AAC5B,WAAO,KAAK,UAAU,kBAAkB,IAAI;AAAA,EAC9C;AAAA,EACA,MAAM,mBAAmB,MAAM;AAC7B,WAAO,KAAK,UAAU,mBAAmB,IAAI;AAAA,EAC/C;AAAA,EACA,MAAM,4BAA4B,MAAM;AACtC,WAAO,KAAK,UAAU,4BAA4B,IAAI;AAAA,EACxD;AAAA,EACA,MAAM,eAAe,MAAM;AACzB,WAAO,KAAK,UAAU,eAAe,IAAI;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BA,MAAM,kBAAkB,OAAO;AAC7B,QAAI;AAAA,MACF;AAAA,IACF,IAAI;AACJ,WAAO,KAAK,UAAU,kBAAkB;AAAA,MACtC;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,oBAAoB,MAAM;AAC9B,WAAO,KAAK,UAAU,oBAAoB,IAAI;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,SAAS;AACb,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM,KAAK,YAAY,KAAK;AAAA,MAC9B,eAAe;AAAA,MACf,QAAQ;AAAA,IACV,CAAC;AACD,UAAM,qBAAqB,MAAM,KAAK,aAAa,iBAAiB;AACpE,UAAM,iBAAiB,MAAM,KAAK,aAAa,mBAAmB;AAClE,WAAO;AAAA,MACL,SAAS,WAAW,sBAAsB;AAAA,IAC5C;AAAA,EACF;AACF;AAEA,IAAM,eAAN,MAAM,sBAAqB,OAAO;AAAA,EAChC,YAAY,MAAM;AA/vBpB;AAgwBI,QAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM;AACN,oBAAgB,MAAM,6BAA6B,CAAC;AACpD,SAAK,WAAW;AAChB,SAAK,UAAU;AAEf,SAAK,YAAW,cAAS,eAAT,mBAAqB;AACrC,qCAAe,MAAM,YAAY,QAAQ;AAAA,EAC3C;AAAA,EACA,MAAM,aAAa;AACjB,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM,KAAK,QAAQ,KAAK;AAAA,MAC1B,eAAe;AAAA,MACf,QAAQ;AAAA,IACV,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,YAAY,SAAS;AAtxB7B;AAuxBI,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM,KAAK,QAAQ,KAAK;AAAA,MAC1B,eAAe;AAAA,MACf,QAAQ;AAAA,QACN;AAAA,QACA,WAAU,aAAM,UAAK,aAAL,mBAAe,kBAArB,mBAAoC,YAAW,KAAK;AAAA,QAC9D,aAAa,KAAK;AAAA,MACpB;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,gBAAgB,aAAa;AAnyBrC;AAoyBI,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM,KAAK,QAAQ,KAAK;AAAA,MAC1B,eAAe;AAAA,MACf,QAAQ;AAAA,QACN;AAAA,QACA,WAAU,aAAM,UAAK,aAAL,mBAAe,kBAArB,mBAAoC,YAAW,KAAK;AAAA,QAC9D,aAAa,KAAK;AAAA,MACpB;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,gBAAgB,aAAa;AACjC,QAAI,CAAC,KAAK,UAAU;AAClB,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACtC;AACA,UAAM,MAAM,MAAM,uBAAuB,KAAK,QAAQ;AACtD,UAAM,YAAY;AAAA,MAChB,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AACA,WAAO,MAAM,gBAAgB,SAAS;AAAA,EACxC;AAAA,EACA,MAAM,eAAe,QAAQ,OAAO,SAAS;AA3zB/C;AA4zBI,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM,KAAK,QAAQ,KAAK;AAAA,MAC1B,eAAe;AAAA,MACf,QAAQ;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA,WAAU,aAAM,UAAK,aAAL,mBAAe,kBAArB,mBAAoC,YAAW,KAAK;AAAA,QAC9D,aAAa,KAAK;AAAA,MACpB;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,UAAU;AAChB,WAAO,IAAI,cAAa;AAAA,MACtB,UAAU,KAAK;AAAA,MACf;AAAA,MACA,SAAS,KAAK;AAAA,IAChB,CAAC;AAAA,EACH;AACF;AAEA,IAAM,iBAAN,MAAqB;AAAA;AAAA;AAAA;AAAA,EAInB,YAAY,MAAM;AAChB,QAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,uBAAuB;AAC5B,SAAK,eAAe,IAAI,aAAa;AAAA,MACnC;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,gBAAgB,OAAO;AAC3B,QAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,QAAI,CAAC,wBAAwB;AAC3B,YAAM,KAAK,aAAa,gBAAgB,mBAAmB,YAAY;AAAA,IACzE;AACA,WAAO;AAAA,MACL;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCA,MAAM,sBAAsB;AAC1B,UAAM,aAAa,MAAM,KAAK,qBAAqB,KAAK;AAAA,MACtD,eAAe;AAAA,MACf,QAAQ;AAAA,IACV,CAAC;AACD,QAAI,WAAW,WAAW,iBAAiB,8BAA8B;AACvE,aAAO;AAAA,QACL,QAAQ,iBAAiB;AAAA,QACzB,GAAG,WAAW;AAAA,QACd,QAAQ;AAAA,MACV;AAAA,IACF,WAAW,WAAW,WAAW,iBAAiB,sBAAsB;AACtE,aAAO;AAAA,QACL,QAAQ,iBAAiB;AAAA,QACzB,GAAG,WAAW;AAAA,MAChB;AAAA,IACF,WAAW,WAAW,WAAW,iBAAiB,gCAAgC;AAChF,aAAO;AAAA,QACL,QAAQ,iBAAiB;AAAA,QACzB,GAAG,WAAW;AAAA,MAChB;AAAA,IACF,OAAO;AAEL,aAAO;AAAA,QACL,QAAQ,WAAW;AAAA,MACrB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,MAAM,SAAS,OAAO;AACpB,QAAI;AAAA,MACF;AAAA,IACF,IAAI;AACJ,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,MAAM,kBAAkB,SAAS;AAC/B,UAAM,SAAS,IAAI,aAAa;AAAA,MAC9B,UAAU,KAAK;AAAA,MACf,UAAU,oBAAmB,mCAAS,gBAAe,EAAiB,KAAK,KAAK,CAAC;AAAA,MACjF,SAAS,KAAK;AAAA,IAChB,CAAC;AACD,WAAO;AAAA,EACT;AACF;AAEA,IAAM,oBAAN,MAAwB;AAAA;AAAA;AAAA;AAAA,EAKtB,sBAAsB,UAAU;AAC9B,QAAI,SAAS,QAAQ,GAAG,IAAI,KAAK,SAAS,WAAW,IAAI;AACvD,aAAO;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,MAAM;AAChB,QAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,QAAI,KAAK,sBAAsB,QAAQ,GAAG;AACxC,YAAM,IAAI,MAAM,wGAAwG;AAAA,IAC1H;AACA,SAAK,WAAW;AAChB,SAAK,UAAU,IAAI,iCAAiC;AAAA,MAClD;AAAA,MACA,sBAAsB;AAAA,IACxB,CAAC;AACD,SAAK,SAAS,IAAI,eAAe;AAAA,MAC/B;AAAA,MACA;AAAA,MACA,SAAS,KAAK;AAAA,IAChB,CAAC;AACD,SAAK,OAAO,IAAI,KAAK;AAAA,MACnB;AAAA,MACA,SAAS,KAAK;AAAA,MACd,eAAe,OAAM,eAAc;AACjC,uDAAgB;AAChB,cAAM,KAAK,OAAO,gBAAgB;AAAA,UAChC,GAAG,WAAW;AAAA,UACd,cAAc,WAAW,YAAY,YAAY;AAAA,QACnD,CAAC;AACD,cAAM,KAAK,QAAQ,KAAK;AAAA,UACtB,eAAe;AAAA,UACf,QAAQ;AAAA,YACN,mBAAmB,WAAW,cAAc;AAAA,YAC5C,UAAU,KAAK;AAAA,YACf,cAAc,WAAW,YAAY,YAAY;AAAA,YACjD,YAAY,WAAW,YAAY;AAAA,UACrC;AAAA,QACF,CAAC;AACD,eAAO;AAAA,UACL,MAAM;AAAA,YACJ,QAAQ,iBAAiB;AAAA,YACzB,aAAa,WAAW,YAAY;AAAA,YACpC,QAAQ,KAAK;AAAA,YACb,eAAe,WAAW,cAAc;AAAA,UAC1C;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBA,MAAM,UAAU;AACd,WAAO,KAAK,OAAO,oBAAoB;AAAA,EACzC;AACF;",
  "names": ["RecoveryShareManagement", "AuthProvider", "UserWalletStatus", "data", "localStorage"]
}
