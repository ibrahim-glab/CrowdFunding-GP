{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js"],
  "sourcesContent": ["import { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\r\nimport { utils, BigNumber, providers, Signer, ethers, constants } from 'ethers';\r\nimport { i as isTwUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\r\nimport { s as setAnalyticsHeaders } from '../../../../dist/headers-6010cf81.browser.esm.js';\r\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\r\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\r\nimport { A as ACCOUNT_CORE_ABI, E as ENTRYPOINT_ADDRESS } from '../../../../dist/constants-5a6f7f26.browser.esm.js';\r\nimport { getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\r\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\r\nimport 'eventemitter3';\r\n\r\nasync function hexlifyUserOp(op) {\r\n  const userOp = await utils.resolveProperties(op);\r\n  return Object.keys(userOp).map(key => {\r\n    let val = userOp[key];\r\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\r\n      val = utils.hexValue(val);\r\n    }\r\n    return [key, val];\r\n  }).reduce((set, _ref) => {\r\n    let [k, v] = _ref;\r\n    return {\r\n      ...set,\r\n      [k]: v\r\n    };\r\n  }, {});\r\n}\r\n\r\n// v0.6 userOpHash calculation\r\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\r\n  const op = await utils.resolveProperties(userOp);\r\n  const hashedUserOp = {\r\n    sender: op.sender,\r\n    nonce: op.nonce,\r\n    initCodeHash: utils.keccak256(op.initCode),\r\n    callDataHash: utils.keccak256(op.callData),\r\n    callGasLimit: op.callGasLimit,\r\n    verificationGasLimit: op.verificationGasLimit,\r\n    preVerificationGas: op.preVerificationGas,\r\n    maxFeePerGas: op.maxFeePerGas,\r\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\r\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\r\n  };\r\n  const userOpType = {\r\n    components: [{\r\n      type: \"address\",\r\n      name: \"sender\"\r\n    }, {\r\n      type: \"uint256\",\r\n      name: \"nonce\"\r\n    }, {\r\n      type: \"bytes32\",\r\n      name: \"initCodeHash\"\r\n    }, {\r\n      type: \"bytes32\",\r\n      name: \"callDataHash\"\r\n    }, {\r\n      type: \"uint256\",\r\n      name: \"callGasLimit\"\r\n    }, {\r\n      type: \"uint256\",\r\n      name: \"verificationGasLimit\"\r\n    }, {\r\n      type: \"uint256\",\r\n      name: \"preVerificationGas\"\r\n    }, {\r\n      type: \"uint256\",\r\n      name: \"maxFeePerGas\"\r\n    }, {\r\n      type: \"uint256\",\r\n      name: \"maxPriorityFeePerGas\"\r\n    }, {\r\n      type: \"bytes32\",\r\n      name: \"paymasterAndDataHash\"\r\n    }],\r\n    name: \"hashedUserOp\",\r\n    type: \"tuple\"\r\n  };\r\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\r\n    ...hashedUserOp\r\n  }]);\r\n  // remove leading word (total length) and trailing word (zero-length signature)\r\n\r\n  const userOpHash = utils.keccak256(encoded);\r\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\r\n  return utils.keccak256(enc);\r\n}\r\nconst generateRandomUint192 = () => {\r\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\r\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\r\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\r\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\r\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\r\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\r\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\r\n};\r\nconst randomNonce = () => {\r\n  let hexString = generateRandomUint192().toString(16);\r\n  if (hexString.length % 2 !== 0) {\r\n    hexString = \"0\" + hexString;\r\n  }\r\n  hexString = \"0x\" + hexString;\r\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\r\n};\r\n\r\n/**\r\n * an API to external a UserOperation with paymaster info\r\n */\r\nclass PaymasterAPI {}\r\n\r\nconst DEBUG = false; // TODO set as public flag\r\n\r\nclass HttpRpcClient {\r\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\r\n    this.bundlerUrl = bundlerUrl;\r\n    this.entryPointAddress = entryPointAddress;\r\n    this.chainId = chainId;\r\n    const headers = {};\r\n    if (isTwUrl(this.bundlerUrl)) {\r\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\r\n      if (secretKey) {\r\n        headers[\"x-secret-key\"] = secretKey;\r\n      } else if (clientId) {\r\n        headers[\"x-client-id\"] = clientId;\r\n        if (bundleId) {\r\n          headers[\"x-bundle-id\"] = bundleId;\r\n        }\r\n      }\r\n\r\n      // Dashboard token\r\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\r\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\r\n      }\r\n\r\n      // CLI token\r\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\r\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\r\n        headers[\"x-authorize-wallet\"] = \"true\";\r\n      }\r\n      setAnalyticsHeaders(headers);\r\n    }\r\n    this.userOpJsonRpcProvider = new providers.JsonRpcProvider({\r\n      url: this.bundlerUrl,\r\n      headers\r\n    }, {\r\n      name: \"Connected bundler network\",\r\n      chainId\r\n    });\r\n    this.initializing = this.validateChainId();\r\n  }\r\n  async validateChainId() {\r\n    // validate chainId is in sync with expected chainid\r\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\r\n    const bundlerChain = parseInt(chain);\r\n    if (bundlerChain !== this.chainId) {\r\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * send a UserOperation to the bundler\r\n   * @param userOp1 - The UserOperation to send\r\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\r\n   */\r\n  async sendUserOpToBundler(userOp1) {\r\n    await this.initializing;\r\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\r\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\r\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\r\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\r\n  }\r\n  async estimateUserOpGas(userOp1) {\r\n    await this.initializing;\r\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\r\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\r\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\r\n    return await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\r\n  }\r\n  async printUserOperation(method, _ref) {\r\n    {\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nclass VerifyingPaymasterAPI extends PaymasterAPI {\r\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\r\n    super();\r\n    this.paymasterUrl = paymasterUrl;\r\n    this.entryPoint = entryPoint;\r\n    this.clientId = clientId;\r\n    this.secretKey = secretKey;\r\n  }\r\n  async getPaymasterAndData(userOp) {\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\"\r\n    };\r\n    if (isTwUrl(this.paymasterUrl)) {\r\n      if (this.secretKey && this.clientId) {\r\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\r\n      }\r\n      if (this.secretKey) {\r\n        headers[\"x-secret-key\"] = this.secretKey;\r\n      } else if (this.clientId) {\r\n        headers[\"x-client-id\"] = this.clientId;\r\n        if (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis) {\r\n          headers[\"x-bundle-id\"] = globalThis.APP_BUNDLE_ID;\r\n        }\r\n      }\r\n\r\n      // Dashboard token.\r\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\r\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\r\n      }\r\n\r\n      // CLI token.\r\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\r\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\r\n        headers[\"x-authorize-wallet\"] = \"true\";\r\n      }\r\n      setAnalyticsHeaders(headers);\r\n    }\r\n\r\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\r\n    const response = await fetch(this.paymasterUrl, {\r\n      method: \"POST\",\r\n      headers,\r\n      body: JSON.stringify({\r\n        jsonrpc: \"2.0\",\r\n        id: 1,\r\n        method: \"pm_sponsorUserOperation\",\r\n        params: [await hexlifyUserOp(userOp), this.entryPoint]\r\n      })\r\n    });\r\n    const res = await response.json();\r\n    if (!response.ok) {\r\n      const error = res.error || response.statusText;\r\n      const code = res.code || \"UNKNOWN\";\r\n      throw new Error(`Paymaster error: ${error}\r\nStatus: ${response.status}\r\nCode: ${code}`);\r\n    }\r\n    if (DEBUG) {\r\n      console.debug(\"Paymaster result:\", res);\r\n    }\r\n    if (res.result) {\r\n      // some paymasters return a string, some return an object with more data\r\n      if (typeof res.result === \"string\") {\r\n        return {\r\n          paymasterAndData: res.result\r\n        };\r\n      } else {\r\n        return res.result;\r\n      }\r\n    } else {\r\n      const error = res.error?.message || res.error || response.statusText || \"unknown error\";\r\n      throw new Error(`Paymaster error from ${this.paymasterUrl}: ${error}`);\r\n    }\r\n  }\r\n}\r\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\r\n\r\n/**\r\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\r\n * discover a TransactionReceipt for the operation.\r\n *\r\n * TODO refactor this to a simple event listener on the entry point\r\n */\r\nclass UserOperationEventListener {\r\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\r\n    this.resolve = resolve;\r\n    this.reject = reject;\r\n    this.entryPoint = entryPoint;\r\n    this.sender = sender;\r\n    this.userOpHash = userOpHash;\r\n    this.nonce = nonce;\r\n    this.timeout = timeout;\r\n    _defineProperty(this, \"resolved\", false);\r\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n    this.boundLisener = this.listenerCallback.bind(this);\r\n  }\r\n  start() {\r\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\r\n    // listener takes time... first query directly:\r\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n    setTimeout(async () => {\r\n      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\r\n      if (res.length > 0) {\r\n        void this.listenerCallback(res[0]);\r\n      } else {\r\n        this.entryPoint.once(filter, this.boundLisener);\r\n      }\r\n    }, 100);\r\n  }\r\n  stop() {\r\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  async listenerCallback() {\r\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      param[_key] = arguments[_key];\r\n    }\r\n    // TODO clean this up..\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const event = arguments[arguments.length - 1];\r\n    if (!event.args) {\r\n      console.error(\"got event without args\", event);\r\n      return;\r\n    }\r\n    // TODO: can this happen? we register to event by userOpHash..\r\n    if (event.args.userOpHash !== this.userOpHash) {\r\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\r\n      return;\r\n    }\r\n    const transactionReceipt = await event.getTransactionReceipt();\r\n\r\n    // before returning the receipt, update the status from the event.\r\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\r\n    if (!event.args.success) {\r\n      await this.extractFailureReason(transactionReceipt);\r\n    }\r\n    this.stop();\r\n    this.resolve(transactionReceipt);\r\n    this.resolved = true;\r\n  }\r\n  async extractFailureReason(receipt) {\r\n    receipt.status = 0;\r\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\r\n    if (revertReasonEvents[0]) {\r\n      let message = revertReasonEvents[0].args.revertReason;\r\n      if (message.startsWith(\"0x08c379a0\")) {\r\n        // Error(string)\r\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\r\n      }\r\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\r\n    }\r\n  }\r\n}\r\n\r\nclass ERC4337EthersSigner extends Signer {\r\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\r\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\r\n    super();\r\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\r\n    this.config = config;\r\n    this.originalSigner = originalSigner;\r\n    this.erc4337provider = erc4337provider;\r\n    this.httpRpcClient = httpRpcClient;\r\n    this.smartAccountAPI = smartAccountAPI;\r\n  }\r\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\r\n  async sendTransaction(transaction, options) {\r\n    const tx = await ethers.utils.resolveProperties(transaction);\r\n    await this.verifyAllNecessaryFields(tx);\r\n    const multidimensionalNonce = randomNonce();\r\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\r\n      target: tx.to || \"\",\r\n      data: tx.data?.toString() || \"0x\",\r\n      value: tx.value,\r\n      gasLimit: tx.gasLimit,\r\n      nonce: multidimensionalNonce,\r\n      maxFeePerGas: tx.maxFeePerGas,\r\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas\r\n    }, options);\r\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\r\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\r\n    try {\r\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\r\n    } catch (error) {\r\n      throw this.unwrapError(error);\r\n    }\r\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\r\n    return transactionResponse;\r\n  }\r\n  unwrapError(errorIn) {\r\n    try {\r\n      let errorMsg = \"Unknown Error\";\r\n      if (errorIn.error) {\r\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\r\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\r\n        const errorBody = JSON.parse(errorIn.body);\r\n        const errorStatus = errorIn.status || \"UNKNOWN\";\r\n        const errorCode = errorBody?.code || \"UNKNOWN\";\r\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\r\n        if (failedOpMessage?.includes(\"FailedOp\")) {\r\n          let paymasterInfo = \"\";\r\n          // TODO: better error extraction methods will be needed\r\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\r\n          if (matched) {\r\n            const split = matched[1].split(\",\");\r\n            paymasterInfo = `(paymaster address: ${split[1]})`;\r\n            failedOpMessage = split[2];\r\n          }\r\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\r\n        } else {\r\n          errorMsg = `RPC error: ${failedOpMessage}\r\nStatus: ${errorStatus}\r\nCode: ${errorCode}`;\r\n        }\r\n      }\r\n      const error = new Error(errorMsg);\r\n      error.stack = errorIn.stack;\r\n      return error;\r\n    } catch (error) {}\r\n    return errorIn;\r\n  }\r\n  async verifyAllNecessaryFields(transactionRequest) {\r\n    if (!transactionRequest.to) {\r\n      throw new Error(\"Missing call target\");\r\n    }\r\n    if (!transactionRequest.data && !transactionRequest.value) {\r\n      // TBD: banning no-op UserOps seems to make sense on provider level\r\n      throw new Error(\"Missing call data or value\");\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  connect(provider) {\r\n    throw new Error(\"changing providers is not supported\");\r\n  }\r\n  async getAddress() {\r\n    if (!this.address) {\r\n      this.address = await this.erc4337provider.getSenderAccountAddress();\r\n    }\r\n    return this.address;\r\n  }\r\n  async signMessage(message) {\r\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\r\n    if (isNotDeployed && this.config.deployOnSign) {\r\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\r\n      const tx = await this.sendTransaction({\r\n        to: await this.getAddress(),\r\n        data: \"0x\"\r\n      });\r\n      await tx.wait();\r\n    }\r\n    return await this.originalSigner.signMessage(message);\r\n  }\r\n  async signTransaction(transaction, options) {\r\n    const tx = await ethers.utils.resolveProperties(transaction);\r\n    await this.verifyAllNecessaryFields(tx);\r\n    const multidimensionalNonce = randomNonce();\r\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\r\n      target: tx.to || \"\",\r\n      data: tx.data?.toString() || \"0x\",\r\n      value: tx.value,\r\n      gasLimit: tx.gasLimit,\r\n      nonce: multidimensionalNonce\r\n    }, options);\r\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\r\n    const userOpString = JSON.stringify(await hexlifyUserOp(userOperation));\r\n    return userOpString;\r\n  }\r\n}\r\n\r\nclass ERC4337EthersProvider extends providers.BaseProvider {\r\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\r\n    super({\r\n      name: \"ERC-4337 Custom Network\",\r\n      chainId\r\n    });\r\n    this.chainId = chainId;\r\n    this.config = config;\r\n    this.originalSigner = originalSigner;\r\n    this.originalProvider = originalProvider;\r\n    this.httpRpcClient = httpRpcClient;\r\n    this.entryPoint = entryPoint;\r\n    this.smartAccountAPI = smartAccountAPI;\r\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\r\n  }\r\n  getSigner() {\r\n    return this.signer;\r\n  }\r\n  async perform(method, params) {\r\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\r\n      // TODO: do we need 'perform' method to be available at all?\r\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\r\n      throw new Error(\"Should not get here. Investigate.\");\r\n    }\r\n    if (method === \"estimateGas\") {\r\n      // gas estimation does nothing at this layer, sendTransaction will do the gas estimation for the userOp\r\n      return BigNumber.from(500000);\r\n    }\r\n    return await this.originalProvider.perform(method, params);\r\n  }\r\n  async getTransaction(transactionHash) {\r\n    // TODO\r\n    return await super.getTransaction(transactionHash);\r\n  }\r\n  async getTransactionReceipt(transactionHash) {\r\n    const userOpHash = await transactionHash;\r\n    const sender = await this.getSenderAccountAddress();\r\n    return await new Promise((resolve, reject) => {\r\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\r\n    });\r\n  }\r\n  async getSenderAccountAddress() {\r\n    return await this.smartAccountAPI.getAccountAddress();\r\n  }\r\n  async waitForTransaction(transactionHash, confirmations, timeout) {\r\n    const sender = await this.getSenderAccountAddress();\r\n    return await new Promise((resolve, reject) => {\r\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\r\n      listener.start();\r\n    });\r\n  }\r\n\r\n  // fabricate a response in a format usable by ethers users...\r\n  async constructUserOpTransactionResponse(userOp1) {\r\n    const userOp = await utils.resolveProperties(userOp1);\r\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\r\n    const waitForUserOp = async () => await new Promise((resolve, reject) => {\r\n      new UserOperationEventListener(resolve, reject, this.entryPoint, userOp.sender, userOpHash, userOp.nonce).start();\r\n    });\r\n    return {\r\n      hash: userOpHash,\r\n      confirmations: 0,\r\n      from: userOp.sender,\r\n      nonce: 0,\r\n      // not the real nonce, but good enough for this purpose\r\n      gasLimit: BigNumber.from(userOp.callGasLimit),\r\n      // ??\r\n      value: BigNumber.from(0),\r\n      data: utils.hexValue(userOp.callData),\r\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\r\n      chainId: this.chainId,\r\n      wait: async confirmations => {\r\n        const transactionReceipt = await waitForUserOp();\r\n        if (userOp.initCode.length !== 0) {\r\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\r\n          await this.smartAccountAPI.checkAccountPhantom();\r\n        }\r\n        return transactionReceipt;\r\n      }\r\n    };\r\n  }\r\n  async detectNetwork() {\r\n    return this.originalProvider.detectNetwork();\r\n  }\r\n}\r\n\r\n/**\r\n * wrap an existing provider to tunnel requests through Account Abstraction.\r\n * @param originalProvider - The normal provider\r\n * @param config - see {@link ClientConfig} for more info\r\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\r\n */\r\nfunction create4337Provider(config, accountApi, originalProvider, chainId) {\r\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\r\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\r\n  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\r\n}\r\n\r\nconst DUMMY_SIGNATURE = \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\r\n\r\n/**\r\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\r\n * Subclass should inherit 5 methods to support a specific wallet contract:\r\n *\r\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\r\n * - getNonce - return current account's nonce value\r\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\r\n * - signUserOpHash - sign the hash of a UserOp.\r\n *\r\n * The user can use the following APIs:\r\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\r\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\r\n */\r\nclass BaseAccountAPI {\r\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\r\n\r\n  /**\r\n   * base constructor.\r\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\r\n   */\r\n  constructor(params) {\r\n    _defineProperty(this, \"isPhantom\", true);\r\n    this.provider = params.provider;\r\n    this.entryPointAddress = params.entryPointAddress;\r\n    this.accountAddress = params.accountAddress;\r\n    this.paymasterAPI = params.paymasterAPI;\r\n    this.gasless = params.gasless;\r\n\r\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\r\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\r\n  }\r\n\r\n  /**\r\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\r\n   * this value holds the \"factory\" address, followed by this account's information\r\n   */\r\n\r\n  /**\r\n   * return current account's nonce.\r\n   */\r\n\r\n  /**\r\n   * encode the call from entryPoint through our account to the target contract.\r\n   * @param target - The target contract address\r\n   * @param value - The value to send to the target contract\r\n   * @param data - The calldata to send to the target contract\r\n   */\r\n\r\n  /**\r\n   * sign a userOp's hash (userOpHash).\r\n   * @param userOpHash - The hash to sign\r\n   */\r\n\r\n  /**\r\n   * calculate the account address even before it is deployed\r\n   */\r\n\r\n  /**\r\n   * check if the contract is already deployed.\r\n   */\r\n  async checkAccountPhantom() {\r\n    if (!this.isPhantom) {\r\n      // already deployed. no need to check anymore.\r\n      return this.isPhantom;\r\n    }\r\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\r\n    if (senderAddressCode.length > 2) {\r\n      this.isPhantom = false;\r\n    }\r\n    return this.isPhantom;\r\n  }\r\n\r\n  /**\r\n   * return initCode value to into the UserOp.\r\n   * (either deployment code, or empty hex if contract already deployed)\r\n   */\r\n  async getInitCode() {\r\n    if (await this.checkAccountPhantom()) {\r\n      return await this.getAccountInitCode();\r\n    }\r\n    return \"0x\";\r\n  }\r\n\r\n  /**\r\n   * return maximum gas used for verification.\r\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\r\n   */\r\n  async getVerificationGasLimit() {\r\n    return 100000;\r\n  }\r\n\r\n  /**\r\n   * return userOpHash for signing.\r\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\r\n   * @param userOp - userOperation, (signature field ignored)\r\n   */\r\n  async getUserOpHash(userOp) {\r\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\r\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\r\n  }\r\n\r\n  /**\r\n   * return the account's address.\r\n   * this value is valid even before deploying the contract.\r\n   */\r\n  async getAccountAddress() {\r\n    if (!this.senderAddress) {\r\n      if (this.accountAddress) {\r\n        this.senderAddress = this.accountAddress;\r\n      } else {\r\n        this.senderAddress = await this.getCounterFactualAddress();\r\n      }\r\n    }\r\n    return this.senderAddress;\r\n  }\r\n  async estimateCreationGas(initCode) {\r\n    if (!initCode || initCode === \"0x\") {\r\n      return 0;\r\n    }\r\n    const deployerAddress = initCode.substring(0, 42);\r\n    const deployerCallData = \"0x\" + initCode.substring(42);\r\n    return await this.provider.estimateGas({\r\n      to: deployerAddress,\r\n      data: deployerCallData\r\n    });\r\n  }\r\n  async createUnsignedUserOp(httpRpcClient, info, options) {\r\n    // construct the userOp without gasLimit or preVerifictaionGas\r\n    const initCode = await this.getInitCode();\r\n    const value = parseNumber(info.value) ?? BigNumber.from(0);\r\n    const callData = options?.batchData ? info.data : await this.prepareExecute(info.target, value, info.data).then(tx => tx.encode());\r\n    let {\r\n      maxFeePerGas,\r\n      maxPriorityFeePerGas\r\n    } = info;\r\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\r\n      const feeData = await getDynamicFeeData(this.provider);\r\n      if (!maxPriorityFeePerGas) {\r\n        maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\r\n      }\r\n      if (!maxFeePerGas) {\r\n        maxFeePerGas = feeData.maxFeePerGas ?? undefined;\r\n        const network = await this.provider.getNetwork();\r\n        const chainId = network.chainId;\r\n        if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\r\n          maxPriorityFeePerGas = maxFeePerGas;\r\n        }\r\n      }\r\n    }\r\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\r\n      throw new Error(\"maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely\");\r\n    }\r\n    const [sender, nonce] = await Promise.all([this.getAccountAddress(), info.nonce ? Promise.resolve(info.nonce) : this.getNonce()]);\r\n    const partialOp = {\r\n      sender,\r\n      nonce,\r\n      initCode,\r\n      callData,\r\n      maxFeePerGas,\r\n      maxPriorityFeePerGas,\r\n      callGasLimit: BigNumber.from(1000000),\r\n      verificationGasLimit: BigNumber.from(1000000),\r\n      preVerificationGas: BigNumber.from(1000000),\r\n      paymasterAndData: \"0x\",\r\n      signature: DUMMY_SIGNATURE\r\n    };\r\n\r\n    // paymaster data + maybe used for estimation as well\r\n    const gasless = options?.gasless !== undefined ? options.gasless : this.gasless;\r\n    if (gasless) {\r\n      const paymasterResult = await this.paymasterAPI.getPaymasterAndData(partialOp);\r\n      const paymasterAndData = paymasterResult.paymasterAndData;\r\n      if (paymasterAndData && paymasterAndData !== \"0x\") {\r\n        partialOp.paymasterAndData = paymasterAndData;\r\n      }\r\n      // paymaster can have the gas limits in the response\r\n      if (paymasterResult.callGasLimit && paymasterResult.verificationGasLimit && paymasterResult.preVerificationGas) {\r\n        partialOp.callGasLimit = BigNumber.from(paymasterResult.callGasLimit);\r\n        partialOp.verificationGasLimit = BigNumber.from(paymasterResult.verificationGasLimit);\r\n        partialOp.preVerificationGas = BigNumber.from(paymasterResult.preVerificationGas);\r\n      } else {\r\n        // otherwise fallback to bundler for gas limits\r\n        let estimates;\r\n        try {\r\n          estimates = await httpRpcClient.estimateUserOpGas(partialOp);\r\n        } catch (error) {\r\n          throw this.unwrapBundlerError(error);\r\n        }\r\n        partialOp.callGasLimit = BigNumber.from(estimates.callGasLimit);\r\n        partialOp.verificationGasLimit = BigNumber.from(estimates.verificationGasLimit);\r\n        partialOp.preVerificationGas = BigNumber.from(estimates.preVerificationGas);\r\n        // need paymaster to re-sign after estimates\r\n        if (paymasterAndData && paymasterAndData !== \"0x\") {\r\n          const paymasterResult2 = await this.paymasterAPI.getPaymasterAndData(partialOp);\r\n          if (paymasterResult2.paymasterAndData && paymasterResult2.paymasterAndData !== \"0x\") {\r\n            partialOp.paymasterAndData = paymasterResult2.paymasterAndData;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // query bundler for gas limits\r\n      let estimates;\r\n      try {\r\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\r\n      } catch (error) {\r\n        throw this.unwrapBundlerError(error);\r\n      }\r\n      partialOp.callGasLimit = BigNumber.from(estimates.callGasLimit);\r\n      partialOp.verificationGasLimit = BigNumber.from(estimates.verificationGasLimit);\r\n      partialOp.preVerificationGas = BigNumber.from(estimates.preVerificationGas);\r\n    }\r\n    return {\r\n      ...partialOp,\r\n      signature: \"\"\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sign the filled userOp.\r\n   * @param userOp - The UserOperation to sign (with signature field ignored)\r\n   */\r\n  async signUserOp(userOp) {\r\n    const userOpHash = await this.getUserOpHash(userOp);\r\n    const signature = await this.signUserOpHash(userOpHash);\r\n    return {\r\n      ...userOp,\r\n      signature\r\n    };\r\n  }\r\n\r\n  /**\r\n   * get the transaction that has this userOpHash mined, or null if not found\r\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\r\n   * @param timeout - stop waiting after this timeout\r\n   * @param interval - time to wait between polls.\r\n   * @returns The transactionHash this userOp was mined, or null if not found.\r\n   */\r\n  async getUserOpReceipt(userOpHash) {\r\n    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;\r\n    let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;\r\n    const endtime = Date.now() + timeout;\r\n    while (Date.now() < endtime) {\r\n      const events = await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(userOpHash));\r\n      if (events[0]) {\r\n        return events[0].transactionHash;\r\n      }\r\n      await new Promise(resolve => setTimeout(resolve, interval));\r\n    }\r\n    return null;\r\n  }\r\n  unwrapBundlerError(error) {\r\n    const message = error?.error?.message || error.error || error.message || error;\r\n    return new Error(message);\r\n  }\r\n}\r\nfunction parseNumber(a) {\r\n  if (!a || a === \"\") {\r\n    return null;\r\n  }\r\n  return BigNumber.from(a.toString());\r\n}\r\n\r\nclass AccountAPI extends BaseAccountAPI {\r\n  constructor(params, originalProvider) {\r\n    super({\r\n      ...params,\r\n      provider: originalProvider\r\n    });\r\n    this.params = params;\r\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\r\n    // We don't want to use the localSigner directly since it might be connected to another chain\r\n    // so we just use the public hardhat pkey instead\r\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\r\n      clientId: params.clientId,\r\n      secretKey: params.secretKey,\r\n      // @ts-expect-error expected chain type error\r\n      supportedChains: typeof params.chain === \"object\" ? [params.chain] : undefined\r\n    });\r\n  }\r\n  async getChainId() {\r\n    return await this.provider.getNetwork().then(n => n.chainId);\r\n  }\r\n  async getAccountContract() {\r\n    if (!this.accountContract) {\r\n      if (this.params.accountInfo?.abi) {\r\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\r\n      } else {\r\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\r\n      }\r\n    }\r\n    return this.accountContract;\r\n  }\r\n  async getAccountInitCode() {\r\n    const factory = await this.getFactoryContract();\r\n    console.log(\"Deploying smart wallet via factory\");\r\n    const localSigner = await this.params.localSigner.getAddress();\r\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\r\n    try {\r\n      console.log(\"Cost to deploy smart wallet: \", (await tx.estimateGasCost()).ether, \"ETH\");\r\n    } catch (e) {\r\n      console.error(\"Cost to deploy smart wallet: unknown\", e);\r\n    }\r\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\r\n  }\r\n  async getFactoryContract() {\r\n    if (this.factoryContract) {\r\n      return this.factoryContract;\r\n    }\r\n    if (this.params.factoryInfo?.abi) {\r\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\r\n    } else {\r\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\r\n    }\r\n    return this.factoryContract;\r\n  }\r\n  async getCounterFactualAddress() {\r\n    if (this.params.accountAddress) {\r\n      return this.params.accountAddress;\r\n    }\r\n    const factory = await this.getFactoryContract();\r\n    const localSigner = await this.params.localSigner.getAddress();\r\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\r\n  }\r\n  async getNonce() {\r\n    if (await this.checkAccountPhantom()) {\r\n      return BigNumber.from(0);\r\n    }\r\n    const accountContract = await this.getAccountContract();\r\n    return this.params.accountInfo.getNonce(accountContract);\r\n  }\r\n  async prepareExecute(target, value, data) {\r\n    const accountContract = await this.getAccountContract();\r\n    return this.params.accountInfo.execute(accountContract, target, value, data);\r\n  }\r\n  async prepareExecuteBatch(targets, values, datas) {\r\n    const accountContract = await this.getAccountContract();\r\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\r\n  }\r\n  async signUserOpHash(userOpHash) {\r\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\r\n  }\r\n  async isAcountDeployed() {\r\n    return !(await this.checkAccountPhantom());\r\n  }\r\n}\r\n\r\nclass SmartWalletConnector extends Connector {\r\n  constructor(config) {\r\n    super();\r\n    this.config = config;\r\n  }\r\n  async initialize(params) {\r\n    const config = this.config;\r\n    const originalProvider = getChainProvider(config.chain, {\r\n      clientId: config.clientId,\r\n      secretKey: config.secretKey\r\n    });\r\n    this.chainId = (await originalProvider.getNetwork()).chainId;\r\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\r\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com/v2`;\r\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\r\n    const deployOnSign = config.deployOnSign ?? true;\r\n    const localSigner = await params.personalWallet.getSigner();\r\n    const providerConfig = {\r\n      chain: config.chain,\r\n      localSigner,\r\n      entryPointAddress,\r\n      bundlerUrl,\r\n      paymasterAPI: this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey),\r\n      gasless: config.gasless,\r\n      deployOnSign: deployOnSign,\r\n      factoryAddress: config.factoryAddress,\r\n      accountAddress: params.accountAddress,\r\n      factoryInfo: config.factoryInfo || this.defaultFactoryInfo(),\r\n      accountInfo: config.accountInfo || this.defaultAccountInfo(),\r\n      clientId: config.clientId,\r\n      secretKey: config.secretKey\r\n    };\r\n    this.personalWallet = params.personalWallet;\r\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\r\n    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\r\n    this.accountApi = accountApi;\r\n  }\r\n  async connect(connectionArgs) {\r\n    await this.initialize(connectionArgs);\r\n    return await this.getAddress();\r\n  }\r\n  getProvider() {\r\n    if (!this.aaProvider) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    return Promise.resolve(this.aaProvider);\r\n  }\r\n  async getSigner() {\r\n    if (!this.aaProvider) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    return Promise.resolve(this.aaProvider.getSigner());\r\n  }\r\n  async getAddress() {\r\n    const signer = await this.getSigner();\r\n    return signer.getAddress();\r\n  }\r\n  async isConnected() {\r\n    try {\r\n      const address = await this.getAddress();\r\n      return !!address;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n  async disconnect() {\r\n    this.personalWallet = undefined;\r\n    this.aaProvider = undefined;\r\n  }\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\r\n  async switchChain(chainId) {\r\n    const provider = await this.getProvider();\r\n    const currentChainId = (await provider.getNetwork()).chainId;\r\n    if (currentChainId !== chainId) {\r\n      // only throw if actually trying to switch chains\r\n      throw new Error(\"Not supported.\");\r\n    }\r\n  }\r\n  setupListeners() {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  updateChains(chains) {}\r\n\r\n  /**\r\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\r\n   * @param transaction - The transaction to execute using the smart wallet.\r\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\r\n   */\r\n  async hasPermissionToExecute(transaction) {\r\n    const accountContract = await this.getAccountContract();\r\n    const signer = await this.getSigner();\r\n    const signerAddress = await signer.getAddress();\r\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\r\n    if (!restrictions) {\r\n      return false;\r\n    }\r\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\r\n  }\r\n\r\n  /// PREPARED TRANSACTIONS\r\n\r\n  /**\r\n   * Send a single transaction without waiting for confirmations\r\n   * @param transaction - the transaction to send\r\n   * @param config - optional the transaction configuration\r\n   * @returns The awaitable transaction\r\n   */\r\n  async send(transaction, options) {\r\n    const signer = await this.getSigner();\r\n    return signer.sendTransaction({\r\n      to: transaction.getTarget(),\r\n      data: transaction.encode(),\r\n      value: await transaction.getValue()\r\n    }, options);\r\n  }\r\n\r\n  /**\r\n   * Execute a single transaction (waiting for confirmations)\r\n   * @param transaction - The transaction to execute\r\n   * @returns The transaction receipt\r\n   */\r\n  async execute(transaction, options) {\r\n    const tx = await this.send(transaction, options);\r\n    const receipt = await tx.wait();\r\n    return {\r\n      receipt\r\n    };\r\n  }\r\n  async sendBatch(transactions, options) {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    const signer = await this.getSigner();\r\n    const {\r\n      tx,\r\n      batchData\r\n    } = await this.prepareBatchTx(transactions);\r\n    return await signer.sendTransaction({\r\n      to: await signer.getAddress(),\r\n      data: tx.encode(),\r\n      value: 0\r\n    }, {\r\n      ...options,\r\n      batchData\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute multiple transactions in a single batch\r\n   * @param transactions - The transactions to execute\r\n   * @returns The transaction receipt\r\n   */\r\n  async executeBatch(transactions, options) {\r\n    const tx = await this.sendBatch(transactions, options);\r\n    const receipt = await tx.wait();\r\n    return {\r\n      receipt\r\n    };\r\n  }\r\n\r\n  /// RAW TRANSACTIONS\r\n\r\n  async sendRaw(transaction, options) {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    const signer = await this.getSigner();\r\n    return signer.sendTransaction(transaction, options);\r\n  }\r\n  async executeRaw(transaction, options) {\r\n    const tx = await this.sendRaw(transaction, options);\r\n    const receipt = await tx.wait();\r\n    return {\r\n      receipt\r\n    };\r\n  }\r\n  async sendBatchRaw(transactions, options) {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    const signer = await this.getSigner();\r\n    const batch = await this.prepareBatchRaw(transactions);\r\n    return signer.sendTransaction({\r\n      to: await signer.getAddress(),\r\n      data: batch.tx.encode(),\r\n      value: 0\r\n    }, {\r\n      ...options,\r\n      batchData: batch.batchData // batched tx flag\r\n    });\r\n  }\r\n  async executeBatchRaw(transactions, options) {\r\n    const tx = await this.sendBatchRaw(transactions, options);\r\n    const receipt = await tx.wait();\r\n    return {\r\n      receipt\r\n    };\r\n  }\r\n\r\n  /// ESTIMATION\r\n\r\n  async estimate(transaction, options) {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    return this.estimateTx({\r\n      target: transaction.getTarget(),\r\n      data: transaction.encode(),\r\n      value: await transaction.getValue(),\r\n      gasLimit: await transaction.getOverrides().gasLimit,\r\n      maxFeePerGas: await transaction.getOverrides().maxFeePerGas,\r\n      maxPriorityFeePerGas: await transaction.getOverrides().maxPriorityFeePerGas,\r\n      nonce: await transaction.getOverrides().nonce\r\n    }, options);\r\n  }\r\n  async estimateRaw(transaction, options) {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    const tx = await ethers.utils.resolveProperties(transaction);\r\n    return this.estimateTx({\r\n      target: tx.to || constants.AddressZero,\r\n      data: tx.data?.toString() || \"\",\r\n      value: tx.value || BigNumber.from(0),\r\n      gasLimit: tx.gasLimit,\r\n      maxFeePerGas: tx.maxFeePerGas,\r\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\r\n      nonce: tx.nonce\r\n    }, options);\r\n  }\r\n  async estimateBatch(transactions, options) {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    const {\r\n      tx,\r\n      batchData\r\n    } = await this.prepareBatchTx(transactions);\r\n    return this.estimateTx({\r\n      target: tx.getTarget(),\r\n      data: tx.encode(),\r\n      value: await tx.getValue(),\r\n      gasLimit: await tx.getOverrides().gasLimit,\r\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\r\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\r\n      nonce: await tx.getOverrides().nonce\r\n    }, {\r\n      ...options,\r\n      batchData\r\n    });\r\n  }\r\n  async estimateBatchRaw(transactions, options) {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    const {\r\n      tx,\r\n      batchData\r\n    } = await this.prepareBatchRaw(transactions);\r\n    return this.estimateTx({\r\n      target: tx.getTarget(),\r\n      data: tx.encode(),\r\n      value: await tx.getValue(),\r\n      gasLimit: await tx.getOverrides().gasLimit,\r\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\r\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\r\n      nonce: await tx.getOverrides().nonce\r\n    }, {\r\n      ...options,\r\n      batchData\r\n    });\r\n  }\r\n\r\n  //// DEPLOYMENT\r\n\r\n  /**\r\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\r\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\r\n   * @returns The transaction receipt\r\n   */\r\n  async deploy(options) {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    const signer = await this.getSigner();\r\n    const tx = await signer.sendTransaction({\r\n      to: await signer.getAddress(),\r\n      data: \"0x\"\r\n    }, {\r\n      ...options,\r\n      batchData: {\r\n        targets: [],\r\n        data: [],\r\n        values: []\r\n      } // batched tx flag to avoid hitting the Router fallback method\r\n    });\r\n    const receipt = await tx.wait();\r\n    return {\r\n      receipt\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if the smart wallet contract is deployed\r\n   * @returns true if the smart wallet contract is deployed\r\n   */\r\n  async isDeployed() {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    return await this.accountApi.isAcountDeployed();\r\n  }\r\n  async deployIfNeeded(options) {\r\n    const isDeployed = await this.isDeployed();\r\n    if (!isDeployed) {\r\n      await this.deploy(options);\r\n    }\r\n  }\r\n\r\n  //// PERMISSIONS\r\n\r\n  async grantPermissions(target, permissions) {\r\n    await this.deployIfNeeded();\r\n    const accountContract = await this.getAccountContract();\r\n    return accountContract.account.grantPermissions(target, permissions);\r\n  }\r\n  async revokePermissions(target) {\r\n    await this.deployIfNeeded();\r\n    const accountContract = await this.getAccountContract();\r\n    return accountContract.account.revokeAccess(target);\r\n  }\r\n  async addAdmin(target) {\r\n    await this.deployIfNeeded();\r\n    const accountContract = await this.getAccountContract();\r\n    return accountContract.account.grantAdminPermissions(target);\r\n  }\r\n  async removeAdmin(target) {\r\n    await this.deployIfNeeded();\r\n    const accountContract = await this.getAccountContract();\r\n    return accountContract.account.revokeAdminPermissions(target);\r\n  }\r\n  async getAllActiveSigners() {\r\n    const isDeployed = await this.isDeployed();\r\n    if (isDeployed) {\r\n      const accountContract = await this.getAccountContract();\r\n      return accountContract.account.getAllAdminsAndSigners();\r\n    } else {\r\n      const personalWallet = await this.personalWallet?.getSigner();\r\n      if (!personalWallet) {\r\n        throw new Error(\"Personal wallet not connected\");\r\n      }\r\n      return [{\r\n        isAdmin: true,\r\n        signer: await personalWallet.getAddress(),\r\n        permissions: {\r\n          startDate: new Date(0),\r\n          expirationDate: new Date(0),\r\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\r\n          approvedCallTargets: []\r\n        }\r\n      }];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the underlying account contract of the smart wallet.\r\n   * @returns The account contract of the smart wallet.\r\n   */\r\n  async getAccountContract() {\r\n    const isDeployed = await this.isDeployed();\r\n    if (!isDeployed) {\r\n      throw new Error(\"Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.\");\r\n    }\r\n    // getting a new instance everytime\r\n    // to avoid caching issues pre/post deployment\r\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\r\n      clientId: this.config.clientId,\r\n      secretKey: this.config.secretKey\r\n    });\r\n    if (this.config.accountInfo?.abi) {\r\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\r\n    } else {\r\n      return sdk.getContract(await this.getAddress());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the underlying account factory contract of the smart wallet.\r\n   * @returns The account factory contract.\r\n   */\r\n  async getFactoryContract() {\r\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\r\n      clientId: this.config.clientId,\r\n      secretKey: this.config.secretKey\r\n    });\r\n    if (this.config.factoryInfo?.abi) {\r\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\r\n    }\r\n    return sdk.getContract(this.config.factoryAddress);\r\n  }\r\n  defaultFactoryInfo() {\r\n    return {\r\n      createAccount: async (factory, owner) => {\r\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\r\n      },\r\n      getAccountAddress: async (factory, owner) => {\r\n        return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\r\n      }\r\n    };\r\n  }\r\n  defaultAccountInfo() {\r\n    return {\r\n      execute: async (account, target, value, data) => {\r\n        return account.prepare(\"execute\", [target, value, data]);\r\n      },\r\n      getNonce: async account => {\r\n        return account.call(\"getNonce\", []);\r\n      }\r\n    };\r\n  }\r\n\r\n  /// PRIVATE METHODS\r\n\r\n  async estimateTx(tx, options) {\r\n    if (!this.accountApi || !this.aaProvider) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    let deployGasLimit = BigNumber.from(0);\r\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\r\n    if (!isDeployed) {\r\n      deployGasLimit = await this.estimateDeploymentGasLimit();\r\n    }\r\n    const [userOp, gasPrice] = await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient, tx, options), getGasPrice(provider)]);\r\n    const resolved = await utils.resolveProperties(userOp);\r\n    const transactionGasLimit = BigNumber.from(resolved.callGasLimit);\r\n    const transactionCost = transactionGasLimit.mul(gasPrice);\r\n    const deployCost = deployGasLimit.mul(gasPrice);\r\n    const totalCost = deployCost.add(transactionCost);\r\n    return {\r\n      ether: utils.formatEther(totalCost),\r\n      wei: totalCost,\r\n      details: {\r\n        deployGasLimit,\r\n        transactionGasLimit,\r\n        gasPrice,\r\n        transactionCost,\r\n        deployCost,\r\n        totalCost\r\n      }\r\n    };\r\n  }\r\n  async estimateDeploymentGasLimit() {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    const initCode = await this.accountApi.getInitCode();\r\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\r\n    return BigNumber.from(verificationGasLimit).add(initGas);\r\n  }\r\n  async prepareBatchRaw(transactions) {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\r\n    const targets = resolvedTxs.map(tx => tx.to || constants.AddressZero);\r\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\r\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\r\n    return {\r\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\r\n      batchData: {\r\n        targets,\r\n        data,\r\n        values\r\n      }\r\n    };\r\n  }\r\n  async prepareBatchTx(transactions) {\r\n    if (!this.accountApi) {\r\n      throw new Error(\"Personal wallet not connected\");\r\n    }\r\n    const targets = transactions.map(tx => tx.getTarget());\r\n    const data = transactions.map(tx => tx.encode());\r\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\r\n    return {\r\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\r\n      batchData: {\r\n        targets,\r\n        data,\r\n        values\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nexport { SmartWalletConnector };\r\n"],
  "mappings": "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",
  "names": ["lib_exports"]
}
