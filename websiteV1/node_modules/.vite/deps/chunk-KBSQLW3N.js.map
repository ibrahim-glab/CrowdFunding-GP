{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/erc-20-standard-e52e0cd6.browser.esm.js"],
  "sourcesContent": ["import { d as buildTransactionFunction } from './transactions-de84ba20.browser.esm.js';\r\nimport { E as Erc20 } from './erc-20-ce512258.browser.esm.js';\r\n\r\n/**\r\n * Standard ERC20 Token functions\r\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\r\n * @example\r\n * ```javascript\r\n * const contract = await sdk.getContract(\"{{contract_address}}\");\r\n * await contract.token.transfer(walletAddress, amount);\r\n * ```\r\n * @public\r\n */\r\nclass StandardErc20 {\r\n  get chainId() {\r\n    return this._chainId;\r\n  }\r\n  constructor(contractWrapper, storage, chainId) {\r\n    this.contractWrapper = contractWrapper;\r\n    this.storage = storage;\r\n    this.erc20 = new Erc20(this.contractWrapper, this.storage, chainId);\r\n    this._chainId = chainId;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  onNetworkUpdated(network) {\r\n    this.contractWrapper.updateSignerOrProvider(network);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  getAddress() {\r\n    return this.contractWrapper.address;\r\n  }\r\n\r\n  /** ******************************\r\n   * READ FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Get the token Metadata (name, symbol, etc...)\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const token = await contract.get();\r\n   * ```\r\n   * @returns The token metadata\r\n   */\r\n  async get() {\r\n    return this.erc20.get();\r\n  }\r\n\r\n  /**\r\n   * Get Token Balance for the currently connected wallet\r\n   *\r\n   * @remarks Get a wallets token balance.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const balance = await contract.balance();\r\n   * ```\r\n   *\r\n   * @returns The balance of a specific wallet.\r\n   */\r\n  async balance() {\r\n    return await this.erc20.balance();\r\n  }\r\n\r\n  /**\r\n   * Get Token Balance\r\n   *\r\n   * @remarks Get a wallets token balance.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to check token balance\r\n   * const walletAddress = \"{{wallet_address}}\";\r\n   * const balance = await contract.balanceOf(walletAddress);\r\n   * ```\r\n   *\r\n   * @returns The balance of a specific wallet.\r\n   */\r\n  async balanceOf(address) {\r\n    return this.erc20.balanceOf(address);\r\n  }\r\n\r\n  /**\r\n   * The total supply for this token\r\n   * @remarks Get how much supply has been minted\r\n   * @example\r\n   * ```javascript\r\n   * const balance = await contract.totalSupply();\r\n   * ```\r\n   */\r\n  async totalSupply() {\r\n    return await this.erc20.totalSupply();\r\n  }\r\n\r\n  /**\r\n   * Get Token Allowance\r\n   *\r\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to check token allowance\r\n   * const spenderAddress = \"0x...\";\r\n   * const allowance = await contract.allowance(spenderAddress);\r\n   * ```\r\n   *\r\n   * @returns The allowance of one wallet over anothers funds.\r\n   */\r\n  async allowance(spender) {\r\n    return await this.erc20.allowance(spender);\r\n  }\r\n\r\n  /**\r\n   * Get Token Allowance\r\n   *\r\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet who owns the funds\r\n   * const owner = \"{{wallet_address}}\";\r\n   * // Address of the wallet to check token allowance\r\n   * const spender = \"0x...\";\r\n   * const allowance = await contract.allowanceOf(owner, spender);\r\n   * ```\r\n   *\r\n   * @returns The allowance of one wallet over anothers funds.\r\n   */\r\n  async allowanceOf(owner, spender) {\r\n    return await this.erc20.allowanceOf(owner, spender);\r\n  }\r\n\r\n  /** ******************************\r\n   * WRITE FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Transfer Tokens\r\n   *\r\n   * @remarks Transfer tokens from the connected wallet to another wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet you want to send the tokens to\r\n   * const toAddress = \"0x...\";\r\n   * // The amount of tokens you want to send\r\n   * const amount = 0.1;\r\n   * await contract.transfer(toAddress, amount);\r\n   * ```\r\n   */\r\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\r\n    return this.erc20.transfer.prepare(to, amount);\r\n  });\r\n\r\n  /**\r\n   * Transfer Tokens From Address\r\n   *\r\n   * @remarks Transfer tokens from one wallet to another\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet sending the tokens\r\n   * const fromAddress = \"{{wallet_address}}\";\r\n   * // Address of the wallet you want to send the tokens to\r\n   * const toAddress = \"0x...\";\r\n   * // The number of tokens you want to send\r\n   * const amount = 1.2\r\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\r\n   * await contract.transferFrom(fromAddress, toAddress, amount);\r\n   * ```\r\n   */\r\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\r\n    return this.erc20.transferFrom.prepare(from, to, amount);\r\n  });\r\n\r\n  /**\r\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to allow transfers from\r\n   * const spenderAddress = \"0x...\";\r\n   * // The number of tokens to give as allowance\r\n   * const amount = 100\r\n   * await contract.setAllowance(spenderAddress, amount);\r\n   * ```\r\n   */\r\n  setAllowance = /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\r\n    return this.erc20.setAllowance.prepare(spender, amount);\r\n  });\r\n\r\n  /**\r\n   * Transfer Tokens To Many Wallets\r\n   *\r\n   * @remarks Mint tokens from the connected wallet to many wallets\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Data of the tokens you want to mint\r\n   * const data = [\r\n   *   {\r\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\r\n   *     amount: 100, // How many tokens to mint to specified address\r\n   *   },\r\n   *  {\r\n   *    toAddress: \"0x...\",\r\n   *    amount: 100,\r\n   *  }\r\n   * ]\r\n   *\r\n   * await contract.transferBatch(data);\r\n   * ```\r\n   */\r\n  transferBatch = /* @__PURE__ */buildTransactionFunction(async args => {\r\n    return this.erc20.transferBatch.prepare(args);\r\n  });\r\n}\r\n\r\nexport { StandardErc20 as S };\r\n"],
  "mappings": ";;;;;;;;;;;AAaA,IAAM,gBAAN,MAAoB;AAAA,EAIlB,YAAY,iBAAiB,SAAS,SAAS;AA4I/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA0B,yBAAyB,OAAO,IAAI,WAAW;AACvE,aAAO,KAAK,MAAM,SAAS,QAAQ,IAAI,MAAM;AAAA,IAC/C,CAAC;AAmBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAA8B,yBAAyB,OAAO,MAAM,IAAI,WAAW;AACjF,aAAO,KAAK,MAAM,aAAa,QAAQ,MAAM,IAAI,MAAM;AAAA,IACzD,CAAC;AAcD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAA8B,yBAAyB,OAAO,SAAS,WAAW;AAChF,aAAO,KAAK,MAAM,aAAa,QAAQ,SAAS,MAAM;AAAA,IACxD,CAAC;AAwBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAA+B,yBAAyB,OAAM,SAAQ;AACpE,aAAO,KAAK,MAAM,cAAc,QAAQ,IAAI;AAAA,IAC9C,CAAC;AA5MC,SAAK,kBAAkB;AACvB,SAAK,UAAU;AACf,SAAK,QAAQ,IAAI,MAAM,KAAK,iBAAiB,KAAK,SAAS,OAAO;AAClE,SAAK,WAAW;AAAA,EAClB;AAAA,EARA,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAWA,iBAAiB,SAAS;AACxB,SAAK,gBAAgB,uBAAuB,OAAO;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa;AACX,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,MAAM,MAAM;AACV,WAAO,KAAK,MAAM,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,UAAU;AACd,WAAO,MAAM,KAAK,MAAM,QAAQ;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,MAAM,UAAU,SAAS;AACvB,WAAO,KAAK,MAAM,UAAU,OAAO;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,cAAc;AAClB,WAAO,MAAM,KAAK,MAAM,YAAY;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,MAAM,UAAU,SAAS;AACvB,WAAO,MAAM,KAAK,MAAM,UAAU,OAAO;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAM,YAAY,OAAO,SAAS;AAChC,WAAO,MAAM,KAAK,MAAM,YAAY,OAAO,OAAO;AAAA,EACpD;AAsFF;",
  "names": []
}
