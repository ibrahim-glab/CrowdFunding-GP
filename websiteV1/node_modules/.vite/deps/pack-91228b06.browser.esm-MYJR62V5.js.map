{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/pack-91228b06.browser.esm.js"],
  "sourcesContent": ["import { BigNumber, utils, constants } from 'ethers';\r\nimport { f as fetchCurrencyMetadata, C as ContractEncoder } from './fetchCurrencyValue-27d660ae.browser.esm.js';\r\nimport { h as hasERC20Allowance } from './hasERC20Allowance-f8e28c92.browser.esm.js';\r\nimport { n as normalizePriceValue } from './normalizePriceValue-ee13e65c.browser.esm.js';\r\nimport { dE as FEATURE_PACK_VRF, cq as ContractWrapper, aL as resolveAddress, aY as LINK_TOKEN_ADDRESS, dF as PACK_CONTRACT_ROLES, bj as AbiSchema, c1 as PackContractSchema, H as getRoleHash } from './index-e7118e8b.browser.esm.js';\r\nimport { a as assertEnabled } from './assertEnabled-0bc21898.browser.esm.js';\r\nimport { a as ContractEvents, C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, d as detectContractFeature } from './contract-appuri-3d68505c.browser.esm.js';\r\nimport { i as isTokenApprovedForTransfer } from './marketplace-ad8d6c18.browser.esm.js';\r\nimport { b as uploadOrExtractURI } from './QueryParams-c67b6cd4.browser.esm.js';\r\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-de84ba20.browser.esm.js';\r\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\r\nimport { C as ContractRoyalty, a as ContractOwner } from './contract-owner-1f113a23.browser.esm.js';\r\nimport { C as ContractRoles } from './contract-roles-423d8c8f.browser.esm.js';\r\nimport { S as StandardErc1155 } from './erc-1155-standard-ed14a5bb.browser.esm.js';\r\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\r\nimport { E as Erc20 } from './erc-20-ce512258.browser.esm.js';\r\nimport { c as PackRewardsOutputSchema, d as PackMetadataInputSchema } from './pack-98dc5fa2.browser.esm.js';\r\nimport 'zod';\r\nimport '@thirdweb-dev/chains';\r\nimport '@thirdweb-dev/crypto';\r\nimport 'tiny-invariant';\r\nimport 'bn.js';\r\nimport 'bs58';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\r\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\r\nimport 'ethers/lib/utils';\r\nimport 'eventemitter3';\r\nimport '@thirdweb-dev/storage';\r\nimport './setErc20Allowance-0fd3045e.browser.esm.js';\r\nimport './signature-61410b74.browser.esm.js';\r\nimport '@thirdweb-dev/merkletree';\r\nimport 'uuid';\r\nimport './erc-1155-11567028.browser.esm.js';\r\nimport 'fast-deep-equal';\r\nimport './drop-claim-conditions-171f45b9.browser.esm.js';\r\n\r\nclass PackVRF {\r\n  featureName = FEATURE_PACK_VRF.name;\r\n  constructor(network, address, storage, options, chainId) {\r\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options, storage);\r\n    this.contractWrapper = contractWrapper;\r\n    this.storage = storage;\r\n    this.chainId = chainId;\r\n    this.events = new ContractEvents(this.contractWrapper);\r\n  }\r\n  onNetworkUpdated(network) {\r\n    this.contractWrapper.updateSignerOrProvider(network);\r\n  }\r\n  getAddress() {\r\n    return this.contractWrapper.address;\r\n  }\r\n\r\n  /**\r\n   * Open pack\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const tokenId = 0;\r\n   * const amount = 1;\r\n   * const receipt = await contract.pack.open(tokenId, amount);\r\n   * ```\r\n   *\r\n   * @remarks\r\n   * Open a pack using Chainlink VRFs random number generation\r\n   * This will return a transaction result with the requestId of the open request, NOT the contents of the pack\r\n   * To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\r\n   * You can use the canClaimRewards method to check if the VRF request has been fulfilled\r\n   *\r\n   * @param tokenId - the id of the pack to open\r\n   * @param amount - Optional: the amount of packs to open, defaults to 1\r\n   * @returns\r\n   * @twfeature PackVRF\r\n   */\r\n  open = /* @__PURE__ */buildTransactionFunction((() => {\r\n    var _this = this;\r\n    return async function (tokenId) {\r\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\r\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\r\n      return Transaction.fromContractWrapper({\r\n        contractWrapper: _this.contractWrapper,\r\n        method: \"openPack\",\r\n        args: [tokenId, amount],\r\n        overrides: {\r\n          // Higher gas limit for opening packs\r\n          gasLimit\r\n        },\r\n        parse: receipt => {\r\n          let id = BigNumber.from(0);\r\n          try {\r\n            const event = _this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\r\n            id = event[0].args.requestId;\r\n          } catch (e) {}\r\n          return {\r\n            receipt,\r\n            id\r\n          };\r\n        }\r\n      });\r\n    };\r\n  })());\r\n\r\n  /**\r\n   * Claim the rewards from an opened pack\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const rewards = await contract.pack.claimRewards();\r\n   * ```\r\n   *\r\n   * @remarks This will return the contents of the pack\r\n   * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\r\n   * @returns The random rewards from opening a pack\r\n   * @twfeature PackVRF\r\n   */\r\n  claimRewards = /* @__PURE__ */buildTransactionFunction((() => {\r\n    var _this2 = this;\r\n    return async function () {\r\n      let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;\r\n      return Transaction.fromContractWrapper({\r\n        contractWrapper: _this2.contractWrapper,\r\n        method: \"claimRewards\",\r\n        args: [],\r\n        overrides: {\r\n          // Higher gas limit for opening packs\r\n          gasLimit\r\n        },\r\n        parse: async receipt => {\r\n          const event = _this2.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\r\n          if (event.length === 0) {\r\n            throw new Error(\"PackOpened event not found\");\r\n          }\r\n          const rewards = event[0].args.rewardUnitsDistributed;\r\n          return await _this2.parseRewards(rewards);\r\n        }\r\n      });\r\n    };\r\n  })());\r\n  async parseRewards(rewards) {\r\n    const erc20Rewards = [];\r\n    const erc721Rewards = [];\r\n    const erc1155Rewards = [];\r\n    for (const reward of rewards) {\r\n      switch (reward.tokenType) {\r\n        case 0:\r\n          {\r\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\r\n            erc20Rewards.push({\r\n              contractAddress: reward.assetContract,\r\n              quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\r\n            });\r\n            break;\r\n          }\r\n        case 1:\r\n          {\r\n            erc721Rewards.push({\r\n              contractAddress: reward.assetContract,\r\n              tokenId: reward.tokenId.toString()\r\n            });\r\n            break;\r\n          }\r\n        case 2:\r\n          {\r\n            erc1155Rewards.push({\r\n              contractAddress: reward.assetContract,\r\n              tokenId: reward.tokenId.toString(),\r\n              quantityPerReward: reward.totalAmount.toString()\r\n            });\r\n            break;\r\n          }\r\n      }\r\n    }\r\n    return {\r\n      erc20Rewards,\r\n      erc721Rewards,\r\n      erc1155Rewards\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Setup a listener for when a pack is opened\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {\r\n   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);\r\n   * });\r\n   * ```\r\n   *\r\n   * @param callback - the listener to call when a pack is opened\r\n   * @returns A unsubscribe function to cleanup the listener\r\n   * @twfeature PackVRF\r\n   */\r\n  async addPackOpenEventListener(callback) {\r\n    return this.events.addEventListener(\"PackOpened\", async event => {\r\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if a specific wallet can claim rewards after opening a pack\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const canClaim = await contract.pack.canClaimRewards(\"{{wallet_address}}\");\r\n   * ```\r\n   * @param claimerAddress - Optional: the address to check if they can claim rewards, defaults to the connected address\r\n   * @returns whether the connected address can claim rewards after opening a pack\r\n   * @twfeature PackVRF\r\n   */\r\n  async canClaimRewards(claimerAddress) {\r\n    const address = await resolveAddress(claimerAddress || (await this.contractWrapper.getSignerAddress()));\r\n    return await this.contractWrapper.read(\"canClaimRewards\", [address]);\r\n  }\r\n\r\n  /**\r\n   * Open a pack and claim the rewards\r\n   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const packId = 0;\r\n   * const amount = 1;\r\n   * const { id } = await contract.pack.openAndClaim(packId, amount);\r\n   * ```\r\n   *\r\n   * @param packId - The id of the pack to open\r\n   * @param amount - Optional: the amount of packs to open, defaults to 1\r\n   * @param gasLimit - Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\r\n   * @returns\r\n   * @twfeature PackVRF\r\n   */\r\n  async openAndClaim(packId) {\r\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\r\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\r\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\r\n      // Higher gas limit for opening packs\r\n      gasLimit: BigNumber.from(500000)\r\n    });\r\n    let id = BigNumber.from(0);\r\n    try {\r\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\r\n      id = event[0].args.requestId;\r\n    } catch (e) {}\r\n    return {\r\n      receipt,\r\n      id\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the LINK balance of the contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const balance = await contract.pack.getLinkBalance();\r\n   * ```\r\n   *\r\n   * @returns The balance of LINK in the contract\r\n   * @twfeature PackVRF\r\n   */\r\n  async getLinkBalance() {\r\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\r\n    return this.getLinkContract(ERC20Abi).balanceOf(this.contractWrapper.address);\r\n  }\r\n\r\n  /**\r\n   * Transfer LINK to this contract\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const amount = 1;\r\n   * await contract.pack.transferLink(amount);\r\n   * ```\r\n   *\r\n   * @param amount - the amount of LINK to transfer to the contract\r\n   * @twfeature PackVRF\r\n   */\r\n  async transferLink(amount) {\r\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\r\n    await this.getLinkContract(ERC20Abi).transfer(this.contractWrapper.address, amount);\r\n  }\r\n  getLinkContract(ERC20Abi) {\r\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\r\n    if (!linkAddress) {\r\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\r\n    }\r\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options, this.storage);\r\n    return new Erc20(contract, this.storage, this.chainId);\r\n  }\r\n}\r\n\r\n/**\r\n * Create lootboxes of NFTs with rarity based open mechanics.\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\r\n *\r\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\r\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\r\n * ```\r\n *\r\n * @public\r\n */\r\n// TODO create extension wrappers\r\nclass Pack extends StandardErc1155 {\r\n  static contractRoles = PACK_CONTRACT_ROLES;\r\n\r\n  /**\r\n   * Configure royalties\r\n   * @remarks Set your own royalties for the entire contract or per pack\r\n   * @example\r\n   * ```javascript\r\n   * // royalties on the whole contract\r\n   * contract.royalties.setDefaultRoyaltyInfo({\r\n   *   seller_fee_basis_points: 100, // 1%\r\n   *   fee_recipient: \"0x...\"\r\n   * });\r\n   * // override royalty for a particular pack\r\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\r\n   *   seller_fee_basis_points: 500, // 5%\r\n   *   fee_recipient: \"0x...\"\r\n   * });\r\n   * ```\r\n   */\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n\r\n  /**\r\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\r\n   */\r\n  get vrf() {\r\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\r\n  }\r\n  constructor(network, address, storage) {\r\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\r\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\r\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\r\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\r\n      ...options,\r\n      gasless: {\r\n        ...options.gasless,\r\n        openzeppelin: {\r\n          ...options.gasless.openzeppelin,\r\n          useEOAForwarder: true\r\n        }\r\n      }\r\n    } : options, storage);\r\n    super(contractWrapper, storage, chainId);\r\n    this.abi = AbiSchema.parse(abi || []);\r\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\r\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\r\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\r\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\r\n    this.encoder = new ContractEncoder(this.contractWrapper);\r\n    this.estimator = new GasCostEstimator(this.contractWrapper);\r\n    this.events = new ContractEvents(this.contractWrapper);\r\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\r\n    this.owner = new ContractOwner(this.contractWrapper);\r\n    this._vrf = this.detectVrf();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  onNetworkUpdated(network) {\r\n    this.contractWrapper.updateSignerOrProvider(network);\r\n    this._vrf?.onNetworkUpdated(network);\r\n  }\r\n  getAddress() {\r\n    return this.contractWrapper.address;\r\n  }\r\n\r\n  /** ******************************\r\n   * READ FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Get a single Pack\r\n   *\r\n   * @remarks Get all the data associated with every pack in this contract.\r\n   *\r\n   * By default, returns the first 100 packs, use queryParams to fetch more.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const pack = await contract.get(0);\r\n   * console.log(packs;\r\n   * ```\r\n   */\r\n  async get(tokenId) {\r\n    return this.erc1155.get(tokenId);\r\n  }\r\n\r\n  /**\r\n   * Get All Packs\r\n   *\r\n   * @remarks Get all the data associated with every pack in this contract.\r\n   *\r\n   * By default, returns the first 100 packs, use queryParams to fetch more.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const packs = await contract.getAll();\r\n   * console.log(packs;\r\n   * ```\r\n   * @param queryParams - optional filtering to only fetch a subset of results.\r\n   * @returns The pack metadata for all packs queried.\r\n   */\r\n  async getAll(queryParams) {\r\n    return this.erc1155.getAll(queryParams);\r\n  }\r\n\r\n  /**\r\n   * Get Owned Packs\r\n   *\r\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Address of the wallet to get the packs of\r\n   * const address = \"{{wallet_address}}\";\r\n   * const packss = await contract.getOwned(address);\r\n   * ```\r\n   *\r\n   * @returns The pack metadata for all the owned packs in the contract.\r\n   */\r\n  async getOwned(walletAddress) {\r\n    return this.erc1155.getOwned(walletAddress);\r\n  }\r\n\r\n  /**\r\n   * Get the number of packs created\r\n   * @returns The total number of packs minted in this contract\r\n   * @public\r\n   */\r\n  async getTotalCount() {\r\n    return this.erc1155.totalCount();\r\n  }\r\n\r\n  /**\r\n   * Get whether users can transfer packs from this contract\r\n   */\r\n  async isTransferRestricted() {\r\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\r\n    return !anyoneCanTransfer;\r\n  }\r\n\r\n  /**\r\n   * Get Pack Contents\r\n   * @remarks Get the rewards contained inside a pack.\r\n   *\r\n   * @param packId - The id of the pack to get the contents of.\r\n   * @returns  The contents of the pack.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const packId = 0;\r\n   * const contents = await contract.getPackContents(packId);\r\n   * console.log(contents.erc20Rewards);\r\n   * console.log(contents.erc721Rewards);\r\n   * console.log(contents.erc1155Rewards);\r\n   * ```\r\n   */\r\n  async getPackContents(packId) {\r\n    const {\r\n      contents,\r\n      perUnitAmounts\r\n    } = await this.contractWrapper.read(\"getPackContents\", [packId]);\r\n    const erc20Rewards = [];\r\n    const erc721Rewards = [];\r\n    const erc1155Rewards = [];\r\n    for (let i = 0; i < contents.length; i++) {\r\n      const reward = contents[i];\r\n      const amount = perUnitAmounts[i];\r\n      switch (reward.tokenType) {\r\n        case 0:\r\n          {\r\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\r\n            const quantityPerReward = utils.formatUnits(amount, tokenMetadata.decimals);\r\n            const totalRewards = utils.formatUnits(BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);\r\n            erc20Rewards.push({\r\n              contractAddress: reward.assetContract,\r\n              quantityPerReward,\r\n              totalRewards\r\n            });\r\n            break;\r\n          }\r\n        case 1:\r\n          {\r\n            erc721Rewards.push({\r\n              contractAddress: reward.assetContract,\r\n              tokenId: reward.tokenId.toString()\r\n            });\r\n            break;\r\n          }\r\n        case 2:\r\n          {\r\n            erc1155Rewards.push({\r\n              contractAddress: reward.assetContract,\r\n              tokenId: reward.tokenId.toString(),\r\n              quantityPerReward: amount.toString(),\r\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\r\n            });\r\n            break;\r\n          }\r\n      }\r\n    }\r\n    return {\r\n      erc20Rewards,\r\n      erc721Rewards,\r\n      erc1155Rewards\r\n    };\r\n  }\r\n\r\n  /** ******************************\r\n   * WRITE FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Create Pack\r\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet. See {@link Pack.createTo}\r\n   *\r\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\r\n   * @example\r\n   * ```javascript\r\n   * const pack = {\r\n   *   // The metadata for the pack NFT itself\r\n   *   packMetadata: {\r\n   *     name: \"My Pack\",\r\n   *     description: \"This is a new pack\",\r\n   *     image: \"ipfs://...\",\r\n   *   },\r\n   *   // ERC20 rewards to be included in the pack\r\n   *   erc20Rewards: [\r\n   *     {\r\n   *       contractAddress: \"0x...\",\r\n   *       quantityPerReward: 5,\r\n   *       quantity: 100,\r\n   *       totalRewards: 20,\r\n   *     }\r\n   *   ],\r\n   *   // ERC721 rewards to be included in the pack\r\n   *   erc721Rewards: [\r\n   *     {\r\n   *       contractAddress: \"0x...\",\r\n   *       tokenId: 0,\r\n   *     }\r\n   *   ],\r\n   *   // ERC1155 rewards to be included in the pack\r\n   *   erc1155Rewards: [\r\n   *     {\r\n   *       contractAddress: \"0x...\",\r\n   *       tokenId: 0,\r\n   *       quantityPerReward: 1,\r\n   *       totalRewards: 100,\r\n   *     }\r\n   *   ],\r\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\r\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\r\n   * }\r\n   *\r\n   * const tx = await contract.create(pack);\r\n   * ```\r\n   */\r\n  create = /* @__PURE__ */buildTransactionFunction(async metadataWithRewards => {\r\n    const signerAddress = await this.contractWrapper.getSignerAddress();\r\n    return this.createTo.prepare(signerAddress, metadataWithRewards);\r\n  });\r\n\r\n  /**\r\n   * Add Pack Contents\r\n   * @remarks Add contents to an existing pack. See {@link Pack.addPackContents}\r\n   *\r\n   * @param packId - token Id of the pack to add contents to\r\n   * @param packContents - the rewards to include in the pack\r\n   * @example\r\n   * ```javascript\r\n   * const packContents = {\r\n   *   // ERC20 rewards to be included in the pack\r\n   *   erc20Rewards: [\r\n   *     {\r\n   *       contractAddress: \"0x...\",\r\n   *       quantityPerReward: 5,\r\n   *       quantity: 100,\r\n   *       totalRewards: 20,\r\n   *     }\r\n   *   ],\r\n   *   // ERC721 rewards to be included in the pack\r\n   *   erc721Rewards: [\r\n   *     {\r\n   *       contractAddress: \"0x...\",\r\n   *       tokenId: 0,\r\n   *     }\r\n   *   ],\r\n   *   // ERC1155 rewards to be included in the pack\r\n   *   erc1155Rewards: [\r\n   *     {\r\n   *       contractAddress: \"0x...\",\r\n   *       tokenId: 0,\r\n   *       quantityPerReward: 1,\r\n   *       totalRewards: 100,\r\n   *     }\r\n   *   ],\r\n   * }\r\n   *\r\n   * const tx = await contract.addPackContents(packId, packContents);\r\n   * ```\r\n   */\r\n  addPackContents = /* @__PURE__ */buildTransactionFunction(async (packId, packContents) => {\r\n    const [signerAddress, parsedContents] = await Promise.all([this.contractWrapper.getSignerAddress(), PackRewardsOutputSchema.parseAsync(packContents)]);\r\n    const {\r\n      contents,\r\n      numOfRewardUnits\r\n    } = await this.toPackContentArgs(parsedContents);\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"addPackContents\",\r\n      args: [packId, contents, numOfRewardUnits, signerAddress],\r\n      parse: receipt => {\r\n        const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\r\n        if (event.length === 0) {\r\n          throw new Error(\"PackUpdated event not found\");\r\n        }\r\n        const id = event[0].args.packId;\r\n        return {\r\n          id: id,\r\n          receipt,\r\n          data: () => this.erc1155.get(id)\r\n        };\r\n      }\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Create Pack To Wallet\r\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\r\n   *\r\n   * @param to - the address to mint the pack to\r\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const pack = {\r\n   *   // The metadata for the pack NFT itself\r\n   *   packMetadata: {\r\n   *     name: \"My Pack\",\r\n   *     description: \"This is a new pack\",\r\n   *     image: \"ipfs://...\",\r\n   *   },\r\n   *   // ERC20 rewards to be included in the pack\r\n   *   erc20Rewards: [\r\n   *     {\r\n   *       contractAddress: \"0x...\",\r\n   *       quantityPerReward: 5,\r\n   *       quantity: 100,\r\n   *       totalRewards: 20,\r\n   *     }\r\n   *   ],\r\n   *   // ERC721 rewards to be included in the pack\r\n   *   erc721Rewards: [\r\n   *     {\r\n   *       contractAddress: \"0x...\",\r\n   *       tokenId: 0,\r\n   *     }\r\n   *   ],\r\n   *   // ERC1155 rewards to be included in the pack\r\n   *   erc1155Rewards: [\r\n   *     {\r\n   *       contractAddress: \"0x...\",\r\n   *       tokenId: 0,\r\n   *       quantityPerReward: 1,\r\n   *       totalRewards: 100,\r\n   *     }\r\n   *   ],\r\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\r\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\r\n   * }\r\n   *\r\n   * const tx = await contract.createTo(\"0x...\", pack);\r\n   * ```\r\n   */\r\n  createTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithRewards) => {\r\n    const [uri, parsedMetadata, toAddress] = await Promise.all([uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage), PackMetadataInputSchema.parseAsync(metadataWithRewards), resolveAddress(to)]);\r\n    const {\r\n      erc20Rewards,\r\n      erc721Rewards,\r\n      erc1155Rewards\r\n    } = parsedMetadata;\r\n    const rewardsData = {\r\n      erc20Rewards,\r\n      erc721Rewards,\r\n      erc1155Rewards\r\n    };\r\n    const {\r\n      contents,\r\n      numOfRewardUnits\r\n    } = await this.toPackContentArgs(rewardsData);\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"createPack\",\r\n      args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, toAddress],\r\n      parse: receipt => {\r\n        const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\r\n        if (event.length === 0) {\r\n          throw new Error(\"PackCreated event not found\");\r\n        }\r\n        const packId = event[0].args.packId;\r\n        return {\r\n          id: packId,\r\n          receipt,\r\n          data: () => this.erc1155.get(packId)\r\n        };\r\n      }\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Open Pack\r\n   *\r\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\r\n   * the contained assets will be transferred to the opening users wallet.\r\n   *\r\n   * @param tokenId - the token ID of the pack you want to open\r\n   * @param amount - the amount of packs you want to open\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const tokenId = 0\r\n   * const amount = 1\r\n   * const tx = await contract.open(tokenId, amount);\r\n   * ```\r\n   */\r\n  open = /* @__PURE__ */buildTransactionFunction((() => {\r\n    var _this = this;\r\n    return async function (tokenId) {\r\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\r\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\r\n      if (_this._vrf) {\r\n        throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\r\n      }\r\n      return Transaction.fromContractWrapper({\r\n        contractWrapper: _this.contractWrapper,\r\n        method: \"openPack\",\r\n        args: [tokenId, amount],\r\n        overrides: {\r\n          // Higher gas limit for opening packs\r\n          gasLimit\r\n        },\r\n        parse: async receipt => {\r\n          const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\r\n          if (event.length === 0) {\r\n            throw new Error(\"PackOpened event not found\");\r\n          }\r\n          const rewards = event[0].args.rewardUnitsDistributed;\r\n          const erc20Rewards = [];\r\n          const erc721Rewards = [];\r\n          const erc1155Rewards = [];\r\n          for (const reward of rewards) {\r\n            switch (reward.tokenType) {\r\n              case 0:\r\n                {\r\n                  const tokenMetadata = await fetchCurrencyMetadata(_this.contractWrapper.getProvider(), reward.assetContract);\r\n                  erc20Rewards.push({\r\n                    contractAddress: reward.assetContract,\r\n                    quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\r\n                  });\r\n                  break;\r\n                }\r\n              case 1:\r\n                {\r\n                  erc721Rewards.push({\r\n                    contractAddress: reward.assetContract,\r\n                    tokenId: reward.tokenId.toString()\r\n                  });\r\n                  break;\r\n                }\r\n              case 2:\r\n                {\r\n                  erc1155Rewards.push({\r\n                    contractAddress: reward.assetContract,\r\n                    tokenId: reward.tokenId.toString(),\r\n                    quantityPerReward: reward.totalAmount.toString()\r\n                  });\r\n                  break;\r\n                }\r\n            }\r\n          }\r\n          return {\r\n            erc20Rewards,\r\n            erc721Rewards,\r\n            erc1155Rewards\r\n          };\r\n        }\r\n      });\r\n    };\r\n  })());\r\n\r\n  /** *****************************\r\n   * PRIVATE FUNCTIONS\r\n   *******************************/\r\n\r\n  async toPackContentArgs(metadataWithRewards) {\r\n    const contents = [];\r\n    const numOfRewardUnits = [];\r\n    const {\r\n      erc20Rewards,\r\n      erc721Rewards,\r\n      erc1155Rewards\r\n    } = metadataWithRewards;\r\n    const provider = this.contractWrapper.getProvider();\r\n    const owner = await this.contractWrapper.getSignerAddress();\r\n    for (const erc20 of erc20Rewards) {\r\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\r\n      // Multiply the quantity of one reward by the number of rewards\r\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\r\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\r\n      if (!hasAllowance) {\r\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\r\n      }\r\n      numOfRewardUnits.push(erc20.totalRewards);\r\n      contents.push({\r\n        assetContract: erc20.contractAddress,\r\n        tokenType: 0,\r\n        totalAmount: totalQuantity,\r\n        tokenId: 0\r\n      });\r\n    }\r\n    for (const erc721 of erc721Rewards) {\r\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\r\n      if (!isApproved) {\r\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\r\n      }\r\n      numOfRewardUnits.push(\"1\");\r\n      contents.push({\r\n        assetContract: erc721.contractAddress,\r\n        tokenType: 1,\r\n        totalAmount: 1,\r\n        tokenId: erc721.tokenId\r\n      });\r\n    }\r\n    for (const erc1155 of erc1155Rewards) {\r\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\r\n      if (!isApproved) {\r\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\r\n      }\r\n      numOfRewardUnits.push(erc1155.totalRewards);\r\n      contents.push({\r\n        assetContract: erc1155.contractAddress,\r\n        tokenType: 2,\r\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\r\n        tokenId: erc1155.tokenId\r\n      });\r\n    }\r\n    return {\r\n      contents,\r\n      numOfRewardUnits\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  async prepare(method, args, overrides) {\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method,\r\n      args,\r\n      overrides\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  async call(functionName, args, overrides) {\r\n    return this.contractWrapper.call(functionName, args, overrides);\r\n  }\r\n  detectVrf() {\r\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\r\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.address, this.storage, this.contractWrapper.options, this.chainId);\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport { Pack };\r\n"],
  "mappings": "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",
  "names": []
}
