import {
  _defineProperty
} from "./chunk-YUOLCEGR.js";

// node_modules/@thirdweb-dev/wallets/dist/errors-9f6736cb.browser.esm.js
var RpcError = class extends Error {
  constructor(message, options) {
    const {
      cause,
      code,
      data
    } = options;
    if (!Number.isInteger(code)) {
      throw new Error('"code" must be an integer.');
    }
    if (!message || typeof message !== "string") {
      throw new Error('"message" must be a nonempty string.');
    }
    super(`${message}. Cause: ${JSON.stringify(cause)}`);
    this.cause = cause;
    this.code = code;
    this.data = data;
  }
};
var ProviderRpcError = class extends RpcError {
  /**
   * Create an Ethereum Provider JSON-RPC error.
   * `code` must be an integer in the `1000 <= 4999` range.
   */
  constructor(message, options) {
    const {
      cause,
      code,
      data
    } = options;
    if (!(Number.isInteger(code) && code >= 1e3 && code <= 4999)) {
      throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
    }
    super(message, {
      cause,
      code,
      data
    });
  }
};
var AddChainError = class extends Error {
  constructor() {
    super(...arguments);
    _defineProperty(this, "name", "AddChainError");
    _defineProperty(this, "message", "Error adding chain");
  }
};
var ChainNotConfiguredError = class extends Error {
  constructor(_ref) {
    let {
      chainId,
      connectorId
    } = _ref;
    super(`Chain "${chainId}" not configured for connector "${connectorId}".`);
    _defineProperty(this, "name", "ChainNotConfigured");
  }
};
var ConnectorNotFoundError = class extends Error {
  constructor() {
    super(...arguments);
    _defineProperty(this, "name", "ConnectorNotFoundError");
    _defineProperty(this, "message", "Connector not found");
  }
};
var ResourceUnavailableError = class extends RpcError {
  constructor(cause) {
    super("Resource unavailable", {
      cause,
      code: -32002
    });
    _defineProperty(this, "name", "ResourceUnavailable");
  }
};
var SwitchChainError = class extends ProviderRpcError {
  constructor(cause) {
    super("Error switching chain", {
      cause,
      code: 4902
    });
    _defineProperty(this, "name", "SwitchChainError");
  }
};
var UserRejectedRequestError = class extends ProviderRpcError {
  constructor(cause) {
    super("User rejected request", {
      cause,
      code: 4001
    });
    _defineProperty(this, "name", "UserRejectedRequestError");
  }
};

export {
  ProviderRpcError,
  AddChainError,
  ChainNotConfiguredError,
  ConnectorNotFoundError,
  ResourceUnavailableError,
  SwitchChainError,
  UserRejectedRequestError
};
//# sourceMappingURL=chunk-W53H6NW3.js.map
