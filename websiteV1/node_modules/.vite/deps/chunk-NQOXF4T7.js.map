{
  "version": 3,
  "sources": ["../../@toruslabs/eccrypto/browser.js", "../../@toruslabs/openlogin/src/constants.ts", "../../@toruslabs/openlogin/src/loglevel.ts", "../../@toruslabs/openlogin/src/utils.ts", "../../@toruslabs/openlogin/src/Modal.ts", "../../@toruslabs/openlogin/src/MemoryStore.ts", "../../@toruslabs/openlogin/src/OpenLoginStore.ts", "../../@toruslabs/openlogin/src/Provider.ts", "../../@toruslabs/openlogin/src/OpenLogin.ts"],
  "sourcesContent": ["\"use strict\";\n\nvar EC = require(\"elliptic\").ec;\n\nvar ec = new EC(\"secp256k1\");\nvar browserCrypto = global.crypto || global.msCrypto || {};\nvar subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\n\nvar nodeCrypto = require('crypto');\n\nconst EC_GROUP_ORDER = Buffer.from('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 'hex');\nconst ZERO32 = Buffer.alloc(32, 0);\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || \"Assertion failed\");\n  }\n}\n\nfunction isScalar (x) {\n  return Buffer.isBuffer(x) && x.length === 32;\n}\n\nfunction isValidPrivateKey(privateKey) {\n  if (!isScalar(privateKey))\n  {\n    return false;\n  }\n  return privateKey.compare(ZERO32) > 0 && // > 0\n  privateKey.compare(EC_GROUP_ORDER) < 0; // < G\n}\n\n// Compare two buffers in constant time to prevent timing attacks.\nfunction equalConstTime(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n  var res = 0;\n  for (var i = 0; i < b1.length; i++) {\n    res |= b1[i] ^ b2[i];  // jshint ignore:line\n  }\n  return res === 0;\n}\n\n/* This must check if we're in the browser or\nnot, since the functions are different and does\nnot convert using browserify */\nfunction randomBytes(size) {\n  var arr = new Uint8Array(size);\n  if (typeof browserCrypto.getRandomValues === 'undefined') {\n    return Buffer.from(nodeCrypto.randomBytes(size));\n  } else {\n    browserCrypto.getRandomValues(arr);\n  }\n  return Buffer.from(arr);\n}\n\nfunction sha512(msg) {\n  return new Promise(function(resolve) {\n    var hash = nodeCrypto.createHash('sha512');\n    var result = hash.update(msg).digest();\n    resolve(new Uint8Array(result));\n  });\n}\n\nfunction getAes(op) {\n  return function(iv, key, data) {\n    return new Promise(function(resolve) {\n      if (subtle) {\n        var importAlgorithm = {name: \"AES-CBC\"};\n        var keyp = subtle.importKey(\"raw\", key, importAlgorithm, false, [op]);\n        return keyp.then(function(cryptoKey) {\n          var encAlgorithm = {name: \"AES-CBC\", iv: iv};\n          return subtle[op](encAlgorithm, cryptoKey, data);\n        }).then(function(result) {\n          resolve(Buffer.from(new Uint8Array(result)));\n        });\n      } else {\n        if (op === 'encrypt') {\n          var cipher = nodeCrypto.createCipheriv('aes-256-cbc', key, iv);\n          let firstChunk = cipher.update(data);\n          let secondChunk = cipher.final();\n          resolve(Buffer.concat([firstChunk, secondChunk]));\n        }\n        else if (op === 'decrypt') {\n          var decipher = nodeCrypto.createDecipheriv('aes-256-cbc', key, iv);\n          let firstChunk = decipher.update(data);\n          let secondChunk = decipher.final();\n          resolve(Buffer.concat([firstChunk, secondChunk]));\n        }\n      }\n    });\n  };\n}\n\nvar aesCbcEncrypt = getAes(\"encrypt\");\nvar aesCbcDecrypt = getAes(\"decrypt\");\n\nfunction hmacSha256Sign(key, msg) {\n  return new Promise(function(resolve) {\n    var hmac = nodeCrypto.createHmac('sha256', Buffer.from(key));\n    hmac.update(msg);\n    var result = hmac.digest();\n    resolve(result);\n  });\n}\n\nfunction hmacSha256Verify(key, msg, sig) {\n  return new Promise(function(resolve) {\n    var hmac = nodeCrypto.createHmac('sha256', Buffer.from(key));\n    hmac.update(msg);\n    var expectedSig = hmac.digest();\n    resolve(equalConstTime(expectedSig, sig));\n  });\n}\n\n/**\n  * Generate a new valid private key. Will use the window.crypto or window.msCrypto as source\n  * depending on your browser.\n  * @return {Buffer} A 32-byte private key.\n  * @function\n  */\nexports.generatePrivate = function () {\n  var privateKey = randomBytes(32);\n  while (!isValidPrivateKey(privateKey)) {\n    privateKey = randomBytes(32);\n  }\n  return privateKey;\n};\n\nvar getPublic = exports.getPublic = function(privateKey) {\n  // This function has sync API so we throw an error immediately.\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  // XXX(Kagami): `elliptic.utils.encode` returns array for every\n  // encoding except `hex`.\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(\"arr\"));\n};\n\n/**\n * Get compressed version of public key.\n */\nvar getPublicCompressed = exports.getPublicCompressed = function(privateKey) { // jshint ignore:line\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  // See https://github.com/wanderer/secp256k1-node/issues/46\n  let compressed = true;\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, \"arr\"));\n};\n\n// NOTE(Kagami): We don't use promise shim in Browser implementation\n// because it's supported natively in new browsers (see\n// <http://caniuse.com/#feat=promises>) and we can use only new browsers\n// because of the WebCryptoAPI (see\n// <http://caniuse.com/#feat=cryptography>).\nexports.sign = function(privateKey, msg) {\n  return new Promise(function(resolve) {\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    assert(msg.length > 0, \"Message should not be empty\");\n    assert(msg.length <= 32, \"Message is too long\");\n    resolve(Buffer.from(ec.sign(msg, privateKey, {canonical: true}).toDER()));\n  });\n};\n\nexports.verify = function(publicKey, msg, sig) {\n  return new Promise(function(resolve, reject) {\n    assert(publicKey.length === 65 || publicKey.length === 33, \"Bad public key\");\n    if (publicKey.length === 65)\n    {\n      assert(publicKey[0] === 4, \"Bad public key\");\n    }\n    if (publicKey.length === 33)\n    {\n      assert(publicKey[0] === 2 || publicKey[0] === 3, \"Bad public key\");\n    }\n    assert(msg.length > 0, \"Message should not be empty\");\n    assert(msg.length <= 32, \"Message is too long\");\n    if (ec.verify(msg, sig, publicKey)) {\n      resolve(null);\n    } else {\n      reject(new Error(\"Bad signature\"));\n    }\n  });\n};\n\nvar derive = exports.derive = function(privateKeyA, publicKeyB) {\n  return new Promise(function(resolve) {\n    assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n    assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n    assert(privateKeyA.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n    assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n    if (publicKeyB.length === 65)\n    {\n      assert(publicKeyB[0] === 4, \"Bad public key\");\n    }\n    if (publicKeyB.length === 33)\n    {\n      assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n    }\n    var keyA = ec.keyFromPrivate(privateKeyA);\n    var keyB = ec.keyFromPublic(publicKeyB);\n    var Px = keyA.derive(keyB.getPublic());  // BN instance\n    resolve(Buffer.from(Px.toArray()));\n  });\n};\n\nexports.encrypt = function(publicKeyTo, msg, opts) {\n  opts = opts || {};\n  // Tmp variables to save context from flat promises;\n  var iv, ephemPublicKey, ciphertext, macKey;\n  return new Promise(function(resolve) {\n    var ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n    // There is a very unlikely possibility that it is not a valid key\n    while(!isValidPrivateKey(ephemPrivateKey))\n    {\n      ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n    }\n    ephemPublicKey = getPublic(ephemPrivateKey);\n    resolve(derive(ephemPrivateKey, publicKeyTo));\n  }).then(function(Px) {\n    return sha512(Px);\n  }).then(function(hash) {\n    iv = opts.iv || randomBytes(16);\n    var encryptionKey = hash.slice(0, 32);\n    macKey = hash.slice(32);\n    return aesCbcEncrypt(iv, encryptionKey, msg);\n  }).then(function(data) {\n    ciphertext = data;\n    var dataToMac = Buffer.concat([iv, ephemPublicKey, ciphertext]);\n    return hmacSha256Sign(macKey, dataToMac);\n  }).then(function(mac) {\n    return {\n      iv: iv,\n      ephemPublicKey: ephemPublicKey,\n      ciphertext: ciphertext,\n      mac: mac,\n    };\n  });\n};\n\nexports.decrypt = function(privateKey, opts) {\n  // Tmp variable to save context from flat promises;\n  var encryptionKey;\n  return derive(privateKey, opts.ephemPublicKey).then(function(Px) {\n    return sha512(Px);\n  }).then(function(hash) {\n    encryptionKey = hash.slice(0, 32);\n    var macKey = hash.slice(32);\n    var dataToMac = Buffer.concat([\n      opts.iv,\n      opts.ephemPublicKey,\n      opts.ciphertext\n    ]);\n    return hmacSha256Verify(macKey, dataToMac, opts.mac);\n  }).then(function(macGood) {\n    assert(macGood, \"Bad MAC\");\n    return aesCbcDecrypt(opts.iv, encryptionKey, opts.ciphertext);\n  }).then(function(msg) {\n    return Buffer.from(new Uint8Array(msg));\n  });\n};\n\n", "export const modalDOMElementID = \"openlogin-modal\";\n\nexport const storeKey = \"openlogin_store\";\n\nexport const UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\",\n  SESSIONLESS_REDIRECT: \"sessionless_redirect\",\n} as const;\n\nexport const OPENLOGIN_METHOD = {\n  LOGIN: \"openlogin_login\",\n  LOGOUT: \"openlogin_logout\",\n  CHECK_3PC_SUPPORT: \"openlogin_check_3PC_support\",\n  SET_PID_DATA: \"openlogin_set_pid_data\",\n  GET_DATA: \"openlogin_get_data\",\n} as const;\n\nexport const ALLOWED_INTERACTIONS = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\",\n  JRPC: \"jrpc\",\n} as const;\n\nexport const OPENLOGIN_NETWORK = {\n  MAINNET: \"mainnet\",\n  TESTNET: \"testnet\",\n  CYAN: \"cyan\",\n  DEVELOPMENT: \"development\",\n  SK_TESTNET: \"sk_testnet\",\n  CELESTE: \"celeste\",\n  AQUA: \"aqua\",\n} as const;\n\nexport const SUPPORTED_KEY_CURVES = {\n  SECP256K1: \"secp256k1\",\n  ED25519: \"ed25519\",\n} as const;\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n  SMS_PASSWORDLESS: \"sms_passwordless\",\n  WEBAUTHN: \"webauthn\",\n  JWT: \"jwt\",\n} as const;\n\nexport const MFA_LEVELS = {\n  DEFAULT: \"default\",\n  OPTIONAL: \"optional\",\n  MANDATORY: \"mandatory\",\n  NONE: \"none\",\n} as const;\n", "import loglevel from \"loglevel\";\n\nloglevel.setLevel(\"error\");\n\nexport default loglevel.getLogger(\"openlogin\");\n", "import { getPublic, sign } from \"@toruslabs/eccrypto\";\nimport { base64url, keccak, safeatob } from \"@toruslabs/openlogin-utils\";\n\nimport { PopupResponse } from \"./interfaces\";\nimport log from \"./loglevel\";\n\nexport async function documentReady(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      document.addEventListener(\"DOMContentLoaded\", () => {\n        resolve();\n      });\n    }\n  });\n}\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n\nexport async function whitelistUrl(clientId: string, appKey: string, origin: string): Promise<string> {\n  const appKeyBuf = Buffer.from(appKey.padStart(64, \"0\"), \"hex\");\n  if (base64url.encode(getPublic(appKeyBuf)) !== clientId) throw new Error(\"appKey mismatch\");\n  const sig = await sign(appKeyBuf, Buffer.from(keccak(\"keccak256\").update(origin).digest(\"hex\"), \"hex\"));\n  return base64url.encode(sig);\n}\n\nexport function getHashQueryParams(replaceUrl = false): Record<string, string> {\n  const result = {};\n\n  const url = new URL(window.location.href);\n  url.searchParams.forEach((value, key) => {\n    if (key !== \"result\") {\n      result[key] = value;\n    }\n  });\n  const queryResult = url.searchParams.get(\"result\");\n  if (queryResult) {\n    try {\n      const queryParams = JSON.parse(safeatob(queryResult));\n      Object.keys(queryParams).forEach((key) => {\n        result[key] = queryParams[key];\n      });\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  const hash = url.hash.substring(1);\n  const hashUrl = new URL(`${window.location.origin}/?${hash}`);\n  hashUrl.searchParams.forEach((value, key) => {\n    if (key !== \"result\") {\n      result[key] = value;\n    }\n  });\n  const hashResult = hashUrl.searchParams.get(\"result\");\n\n  if (hashResult) {\n    try {\n      const hashParams = JSON.parse(safeatob(hashResult));\n      Object.keys(hashParams).forEach((key) => {\n        result[key] = hashParams[key];\n      });\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  if (replaceUrl) {\n    const cleanUrl = window.location.origin + window.location.pathname;\n    window.history.replaceState(null, \"\", cleanUrl);\n  }\n\n  return result;\n}\n\nexport function awaitReq<T>(id: string, windowRef: Window): Promise<T> {\n  return new Promise((resolve, reject) => {\n    if (!windowRef) {\n      reject(new Error(\"Unable to open window\"));\n      return;\n    }\n    let closedByHandler = false;\n    const closedMonitor = setInterval(() => {\n      if (!closedByHandler && windowRef.closed) {\n        clearInterval(closedMonitor);\n        reject(new Error(\"user closed popup\"));\n      }\n    }, 500);\n    const handler = (ev: MessageEvent<PopupResponse<T & { error?: string }>>) => {\n      const { pid } = ev.data;\n      if (id !== pid) return;\n      window.removeEventListener(\"message\", handler);\n      closedByHandler = true;\n      clearInterval(closedMonitor);\n      windowRef.close();\n      if (ev.data.data && ev.data.data.error) {\n        reject(new Error(ev.data.data.error));\n      } else {\n        resolve(ev.data.data);\n      }\n    };\n\n    window.addEventListener(\"message\", handler);\n  });\n}\n\nexport function constructURL(params: { baseURL: string; query?: Record<string, unknown>; hash?: Record<string, unknown> }): string {\n  const { baseURL, query, hash } = params;\n\n  const url = new URL(baseURL);\n  if (query) {\n    Object.keys(query).forEach((key) => {\n      url.searchParams.append(key, query[key] as string);\n    });\n  }\n  if (hash) {\n    const h = new URL(constructURL({ baseURL, query: hash })).searchParams.toString();\n    url.hash = h;\n  }\n  return url.toString();\n}\n\nexport function storageAvailable(type: string): boolean {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage: Storage;\n  try {\n    storage = window[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error) {\n    return (\n      error &&\n      // everything except Firefox\n      (error.code === 22 ||\n        // Firefox\n        error.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        error.name === \"QuotaExceededErro r\" ||\n        // Firefox\n        error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storageExists &&\n      storageLength !== 0\n    );\n  }\n}\n\nexport const sessionStorageAvailable = storageAvailable(\"sessionStorage\");\nexport const localStorageAvailable = storageAvailable(\"localStorage\");\n\nexport function preloadIframe(url: string): void {\n  try {\n    if (typeof document === \"undefined\") return;\n    const openloginIframeHtml = document.createElement(\"link\");\n    openloginIframeHtml.href = url;\n    openloginIframeHtml.crossOrigin = \"anonymous\";\n    openloginIframeHtml.type = \"text/html\";\n    openloginIframeHtml.rel = \"prefetch\";\n    if (openloginIframeHtml.relList && openloginIframeHtml.relList.supports) {\n      if (openloginIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(openloginIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.error(error);\n  }\n}\n\nexport function getPopupFeatures(): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const w = 1200;\n  const h = 700;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n", "import { LoginConfig, ObjectMultiplex, PostMessageStream, setupMultiplex, Substream, WhiteLabelData } from \"@toruslabs/openlogin-jrpc\";\n\nimport { modalDOMElementID } from \"./constants\";\nimport log from \"./loglevel\";\nimport { documentReady, htmlToElement } from \"./utils\";\n\nexport const handleStream = (handle: Substream, eventName: string, handler: (chunk: unknown) => void): void => {\n  const handlerWrapper = (chunk: unknown) => {\n    handler(chunk);\n    handle.removeListener(eventName, handlerWrapper);\n  };\n  handle.on(eventName, handlerWrapper);\n};\n\nexport class Modal {\n  modalUrl: string;\n\n  iframeElem: HTMLIFrameElement;\n\n  initialized = false;\n\n  modalZIndex = 99999;\n\n  mux: ObjectMultiplex;\n\n  verifierStream: Substream;\n\n  constructor(modalUrl: string) {\n    this.modalUrl = modalUrl;\n  }\n\n  async init(): Promise<void> {\n    await this.initIFrame(this.modalUrl);\n    this.setupStream();\n  }\n\n  setupStream(): void {\n    if (this.iframeElem === null) throw new Error(\"iframe is null\");\n    this.mux = setupMultiplex(\n      new PostMessageStream({\n        name: \"modal_iframe_rpc\",\n        target: \"modal_rpc\",\n        targetWindow: this.iframeElem.contentWindow,\n        targetOrigin: new URL(this.modalUrl).origin,\n      })\n    );\n    this.verifierStream = this.mux.createStream(\"verifier\");\n  }\n\n  async initIFrame(src: string): Promise<void> {\n    await documentReady();\n    const documentIFrameElem = document.getElementById(modalDOMElementID) as HTMLIFrameElement;\n    if (documentIFrameElem) {\n      documentIFrameElem.remove();\n      log.info(\"already initialized, removing previous modal iframe\");\n    }\n    this.iframeElem = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=${modalDOMElementID}\n        class=\"torusIframe\"\n        src=\"${src}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n    this._hideModal();\n    document.body.appendChild(this.iframeElem);\n    return new Promise<void>((resolve) => {\n      this.iframeElem.onload = () => {\n        this.initialized = true;\n        resolve();\n      };\n    });\n  }\n\n  _showModal(): void {\n    const style: Record<string, unknown> = {};\n    style.display = \"block\";\n    style.position = \"fixed\";\n    style.width = \"100%\";\n    style.height = \"100%\";\n    style.top = \"0px\";\n    style.right = \"0px\";\n    style.left = \"0px\";\n    style.bottom = \"0px\";\n    style.border = \"0\";\n    style[\"z-index\"] = this.modalZIndex;\n    this.iframeElem.setAttribute(\n      \"style\",\n      Object.entries(style)\n        .map(([k, v]) => `${k}:${v}`)\n        .join(\";\")\n    );\n  }\n\n  _hideModal(): void {\n    const style: Record<string, unknown> = {};\n    style.display = \"none\";\n    style.position = \"fixed\";\n    style.width = \"100%\";\n    style.height = \"100%\";\n    style.top = \"0px\";\n    style.right = \"0px\";\n    style.left = \"0px\";\n    style.bottom = \"0px\";\n    style.border = \"0\";\n    style[\"z-index\"] = this.modalZIndex;\n    this.iframeElem.setAttribute(\n      \"style\",\n      Object.entries(style)\n        .map(([k, v]) => `${k}:${v}`)\n        .join(\";\")\n    );\n  }\n\n  async _prompt(clientId: string, whiteLabel: WhiteLabelData, loginConfig: LoginConfig, cb: (chunk: unknown) => Promise<void>): Promise<void> {\n    this._showModal();\n    const modalHandler = (chunk) => {\n      this._hideModal();\n      cb(chunk);\n    };\n    handleStream(this.verifierStream, \"data\", modalHandler);\n    this.verifierStream.write({\n      name: \"prompt\",\n      clientId,\n      whiteLabel,\n      loginConfig,\n    });\n  }\n\n  async cleanup(): Promise<void> {\n    await documentReady();\n    const documentIFrameElem = document.getElementById(modalDOMElementID) as HTMLIFrameElement;\n    if (documentIFrameElem) {\n      documentIFrameElem.remove();\n      this.iframeElem = null;\n    }\n    this.initialized = false;\n  }\n}\n", "import { IStore } from \"./IStore\";\n\nexport class MemoryStore implements IStore {\n  store: Record<string, string> = {};\n\n  getItem(key: string): string {\n    return this.store[key] || null;\n  }\n\n  setItem(key: string, value: string): void {\n    this.store[key] = value;\n  }\n}\n", "import { storeKey } from \"./constants\";\nimport { IStore } from \"./IStore\";\nimport { MemoryStore } from \"./MemoryStore\";\nimport { localStorageAvailable, sessionStorageAvailable } from \"./utils\";\n\nexport default class OpenLoginStore {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: OpenLoginStore;\n\n  private _storeKey: string = storeKey;\n\n  public storage: IStore;\n\n  private constructor(storage: IStore, _storeKey?: string) {\n    this.storage = storage;\n    this._storeKey = _storeKey || storeKey;\n    try {\n      if (!storage.getItem(_storeKey || storeKey)) {\n        this.resetStore();\n      }\n    } catch (error) {\n      // Storage is not available\n    }\n  }\n\n  static getInstance(storeNamespace: string, storageKey: \"session\" | \"local\" = \"local\"): OpenLoginStore {\n    if (!this.instance) {\n      let storage: Storage | MemoryStore = new MemoryStore();\n      if (storageKey === \"local\" && localStorageAvailable) {\n        storage = localStorage;\n      }\n      if (storageKey === \"session\" && sessionStorageAvailable) {\n        storage = sessionStorage;\n      }\n      const finalStoreKey = storeNamespace ? `${storeKey}_${storeNamespace}` : storeKey;\n      this.instance = new this(storage, finalStoreKey);\n    }\n    return this.instance;\n  }\n\n  toJSON(): string {\n    return this.storage.getItem(this._storeKey);\n  }\n\n  resetStore(): Record<string, unknown> {\n    const currStore = this.getStore();\n    this.storage.setItem(this._storeKey, JSON.stringify({}));\n    return currStore;\n  }\n\n  getStore(): Record<string, unknown> {\n    return JSON.parse(this.storage.getItem(this._storeKey));\n  }\n\n  get<T>(key: string): T {\n    const store = JSON.parse(this.storage.getItem(this._storeKey));\n    return store[key];\n  }\n\n  set<T>(key: string, value: T): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey));\n    store[key] = value;\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n", "import {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  JRPCEngine,\n  JRPCRequest,\n  ObjectMultiplex,\n  PostMessageStream,\n  SafeEventEmitter,\n  setupMultiplex,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { randomId } from \"@toruslabs/openlogin-utils\";\nimport pump from \"pump\";\n\nimport log from \"./loglevel\";\n\nexport default class Provider extends SafeEventEmitter {\n  iframeElem: HTMLIFrameElement | null = null;\n\n  rpcStream: PostMessageStream;\n\n  iframeUrl: string;\n\n  rpcEngine: JRPCEngine;\n\n  initialized: boolean;\n\n  mux: ObjectMultiplex;\n\n  init({ iframeElem, iframeUrl }: { iframeElem: HTMLIFrameElement; iframeUrl: string }): void {\n    this.iframeElem = iframeElem;\n    this.iframeUrl = iframeUrl;\n    this.setupStream();\n    this.initialized = true;\n  }\n\n  setupStream(): void {\n    if (this.iframeElem === null) throw new Error(\"iframe is null\");\n    this.rpcStream = new PostMessageStream({\n      name: \"embed_rpc\",\n      target: \"iframe_rpc\",\n      targetWindow: this.iframeElem.contentWindow,\n      targetOrigin: new URL(this.iframeUrl).origin,\n    });\n\n    this.mux = setupMultiplex(this.rpcStream);\n\n    const JRPCConnection = createStreamMiddleware();\n    pump(\n      JRPCConnection.stream as unknown as Stream,\n      this.mux.createStream(\"jrpc\") as unknown as Stream,\n      JRPCConnection.stream as unknown as Stream,\n      (error) => {\n        log.error(`JRPC connection broken`, error);\n      }\n    );\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(JRPCConnection.middleware);\n    this.rpcEngine = rpcEngine;\n  }\n\n  cleanup(): void {\n    this.iframeElem = null;\n    this.initialized = false;\n  }\n\n  _rpcRequest(payload: JRPCRequest<unknown>, callback: (...args: unknown[]) => void): void {\n    if (!payload.jsonrpc) {\n      payload.jsonrpc = \"2.0\";\n    }\n    if (!payload.id) {\n      payload.id = randomId();\n    }\n    this.rpcEngine.handle(payload, callback);\n  }\n}\n", "import { decrypt, Ecies, encrypt, getPublic, sign } from \"@toruslabs/eccrypto\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport { getRpcPromiseCallback, JRPCRequest, LoginConfig, OriginData, SessionInfo, WhiteLabelData } from \"@toruslabs/openlogin-jrpc\";\nimport { base64url, jsonToBase64, keccak, randomId } from \"@toruslabs/openlogin-utils\";\nimport merge from \"lodash.merge\";\n\nimport { ALLOWED_INTERACTIONS, OPENLOGIN_METHOD, OPENLOGIN_NETWORK, UX_MODE } from \"./constants\";\nimport {\n  BaseLogoutParams,\n  BaseRedirectParams,\n  CUSTOM_LOGIN_PROVIDER_TYPE,\n  LOGIN_PROVIDER_TYPE,\n  LoginParams,\n  OPENLOGIN_NETWORK_TYPE,\n  OpenLoginOptions,\n  OpenloginUserInfo,\n  RequestParams,\n  UX_MODE_TYPE,\n} from \"./interfaces\";\nimport { Modal } from \"./Modal\";\nimport OpenLoginStore from \"./OpenLoginStore\";\nimport Provider from \"./Provider\";\nimport { awaitReq, constructURL, getHashQueryParams, getPopupFeatures, preloadIframe } from \"./utils\";\n\npreloadIframe(\"https://app.openlogin.com/sdk-modal\");\n\nexport type OpenLoginState = {\n  network: OPENLOGIN_NETWORK_TYPE;\n  privKey?: string;\n  coreKitKey?: string;\n  walletKey?: string;\n  tKey?: string;\n  oAuthPrivateKey?: string;\n  support3PC?: boolean;\n  clientId: string;\n  iframeUrl: string;\n  redirectUrl: string;\n  startUrl: string;\n  popupUrl: string;\n  store: OpenLoginStore;\n  uxMode: UX_MODE_TYPE;\n  replaceUrlOnRedirect: boolean;\n  originData: OriginData;\n  whiteLabel: WhiteLabelData;\n  loginConfig: LoginConfig;\n  storageServerUrl: string;\n  sessionNamespace: string;\n  webauthnTransports: AuthenticatorTransport[];\n};\n\nclass OpenLogin {\n  provider: Provider;\n\n  state: OpenLoginState;\n\n  modal: Modal;\n\n  constructor(options: OpenLoginOptions) {\n    this.provider = new Proxy(new Provider(), {\n      deleteProperty: () => true, // work around for web3\n    });\n    if (!options._iframeUrl) {\n      if (options.network === OPENLOGIN_NETWORK.MAINNET) {\n        options._iframeUrl = \"https://app.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.CYAN) {\n        options._iframeUrl = \"https://cyan.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.TESTNET) {\n        options._iframeUrl = \"https://beta.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.SK_TESTNET) {\n        options._iframeUrl = \"https://beta-sk.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.CELESTE) {\n        options._iframeUrl = \"https://celeste.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.AQUA) {\n        options._iframeUrl = \"https://aqua.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.DEVELOPMENT) {\n        options._iframeUrl = \"http://localhost:3000\";\n      }\n    }\n    if (!options._iframeUrl) {\n      throw new Error(\"unspecified network and iframeUrl\");\n    }\n    this.modal = new Modal(`${options._iframeUrl}/sdk-modal`);\n    this.initState({\n      ...options,\n      no3PC: options.no3PC ?? false,\n      _iframeUrl: options._iframeUrl,\n      _startUrl: options._startUrl ?? `${options._iframeUrl}/start`,\n      _popupUrl: options._popupUrl ?? `${options._iframeUrl}/popup-window`,\n      redirectUrl: options.redirectUrl ?? `${window.location.protocol}//${window.location.host}${window.location.pathname}`,\n      uxMode: options.uxMode ?? UX_MODE.REDIRECT,\n      replaceUrlOnRedirect: options.replaceUrlOnRedirect ?? true,\n      originData: options.originData ?? { [window.location.origin]: \"\" },\n      whiteLabel: options.whiteLabel ?? {},\n      loginConfig: options.loginConfig ?? {},\n      _storageServerUrl: options._storageServerUrl ?? \"https://broadcast-server.tor.us\",\n      storageKey: options.storageKey === \"session\" ? \"session\" : \"local\",\n      _sessionNamespace: options._sessionNamespace ?? \"\",\n      webauthnTransports: options.webauthnTransports ?? [\"internal\"],\n    });\n  }\n\n  get privKey(): string {\n    return this.state.privKey ? this.state.privKey.padStart(64, \"0\") : \"\";\n  }\n\n  get coreKitKey(): string {\n    return this.state.coreKitKey ? this.state.coreKitKey.padStart(64, \"0\") : \"\";\n  }\n\n  initState(options: Required<OpenLoginOptions>): void {\n    this.state = {\n      uxMode: options.uxMode,\n      network: options.network,\n      store: OpenLoginStore.getInstance(options._sessionNamespace, options.storageKey),\n      iframeUrl: options._iframeUrl,\n      startUrl: options._startUrl,\n      popupUrl: options._popupUrl,\n      clientId: options.clientId,\n      redirectUrl: options.redirectUrl,\n      replaceUrlOnRedirect: options.replaceUrlOnRedirect,\n      originData: options.originData,\n      loginConfig: options.loginConfig,\n      support3PC: !options.no3PC,\n      whiteLabel: options.whiteLabel,\n      storageServerUrl: options._storageServerUrl,\n      sessionNamespace: options._sessionNamespace,\n      webauthnTransports: options.webauthnTransports,\n    };\n  }\n\n  async init(): Promise<void> {\n    if (this.state.network === OPENLOGIN_NETWORK.TESTNET) {\n      // using console log because it shouldn't be affected by loglevel config\n      // eslint-disable-next-line no-console\n      console.log(\"%c WARNING! You are on testnet. Please set network: 'mainnet' in production\", \"color: #FF0000\");\n    }\n    if (this.state.uxMode === UX_MODE.SESSIONLESS_REDIRECT) {\n      await this.updateOriginData();\n      // in this mode iframe is not used so support3pc must be false\n      this.state.support3PC = false;\n    } else {\n      // initialize iframe only when redirect or popup mode\n      await Promise.all([this.modal.init(), this.updateOriginData()]);\n      this.provider.init({ iframeElem: this.modal.iframeElem, iframeUrl: this.state.iframeUrl });\n    }\n\n    const params = getHashQueryParams(this.state.replaceUrlOnRedirect);\n    if (params.sessionId) {\n      this.state.store.set(\"sessionId\", params.sessionId);\n    }\n    if (this.state.uxMode === UX_MODE.SESSIONLESS_REDIRECT) {\n      this._syncState(params);\n    } else {\n      this._syncState(await this._getData());\n    }\n\n    if (this.state.support3PC) {\n      const res = await this._check3PCSupport();\n      this.state.support3PC = !!res.support3PC;\n    }\n  }\n\n  async updateOriginData(): Promise<void> {\n    const filteredOriginData = JSON.parse(JSON.stringify(this.state.originData));\n    Object.keys(filteredOriginData).forEach((key) => {\n      if (filteredOriginData[key] === \"\") delete filteredOriginData[key];\n    });\n    const [whitelist, whiteLabel] = await Promise.all([this.getWhitelist(), this.getWhiteLabel()]);\n    this._syncState({ originData: { ...whitelist, ...filteredOriginData }, whiteLabel: { ...whiteLabel, ...this.state.whiteLabel } });\n  }\n\n  async getWhitelist(): Promise<OriginData> {\n    try {\n      const { clientId } = this.state;\n      if (!clientId) {\n        throw new Error(\"unspecified clientId\");\n      }\n      const url = new URL(\"https://api.developer.tor.us/whitelist\");\n      url.searchParams.append(\"project_id\", this.state.clientId);\n      url.searchParams.append(\"network\", this.state.network);\n      const res = await get<{ signed_urls: OriginData }>(url.href);\n      return res.signed_urls;\n    } catch (_) {\n      // fail silently\n      return {};\n    }\n  }\n\n  async getWhiteLabel(): Promise<WhiteLabelData> {\n    try {\n      const { clientId } = this.state;\n      if (!clientId) {\n        throw new Error(\"unspecified clientId\");\n      }\n      const url = new URL(\"https://api.developer.tor.us/whitelabel\");\n      url.searchParams.append(\"project_id\", this.state.clientId);\n      const res = await get<{ whiteLabel: WhiteLabelData }>(url.href);\n      return res.whiteLabel;\n    } catch (_) {\n      // fail silently\n      return {};\n    }\n  }\n\n  async login(params?: LoginParams & Partial<BaseRedirectParams>): Promise<{ privKey: string }> {\n    if (params?.loginProvider) {\n      return this._selectedLogin(params);\n    }\n    if (this.state.uxMode === UX_MODE.SESSIONLESS_REDIRECT) {\n      throw new Error(`Please pass loginProvider in params while using ${UX_MODE.SESSIONLESS_REDIRECT} mode`);\n    }\n    return this._modal(params);\n  }\n\n  async _selectedLogin(params: LoginParams & Partial<BaseRedirectParams>): Promise<{ privKey: string }> {\n    const defaultParams: BaseRedirectParams = {\n      redirectUrl: this.state.redirectUrl,\n    };\n\n    const loginParams: LoginParams = {\n      loginProvider: params.loginProvider,\n      ...defaultParams,\n      ...params,\n    };\n\n    const res = await this.request<{ privKey: string; store?: Record<string, string> }>({\n      method: OPENLOGIN_METHOD.LOGIN,\n      allowedInteractions: [UX_MODE.REDIRECT, UX_MODE.POPUP],\n      startUrl: this.state.startUrl,\n      popupUrl: this.state.popupUrl,\n      params: [loginParams],\n    });\n    this.state.privKey = res.privKey;\n    if (res.store) {\n      this._syncState(res);\n    } else if (this.state.privKey && this.state.support3PC) {\n      this._syncState(await this._getData());\n    }\n    return { privKey: this.privKey };\n  }\n\n  async logout(logoutParams: Partial<BaseLogoutParams> & Partial<BaseRedirectParams> = {}): Promise<void> {\n    const params: Record<string, unknown> = {};\n    // defaults\n    params.redirectUrl = this.state.redirectUrl;\n    params._clientId = this.state.clientId;\n    params.sessionId = this.state.store.get(\"sessionId\");\n\n    if (logoutParams.clientId) {\n      params._clientId = logoutParams.clientId;\n    }\n    if (logoutParams.redirectUrl !== undefined) {\n      params.redirectUrl = logoutParams.redirectUrl;\n    }\n\n    const allowedInteractions = this.state.uxMode === UX_MODE.SESSIONLESS_REDIRECT ? [ALLOWED_INTERACTIONS.REDIRECT] : [ALLOWED_INTERACTIONS.JRPC];\n    const res = await this.request<void>({\n      method: OPENLOGIN_METHOD.LOGOUT,\n      params: [params],\n      startUrl: this.state.startUrl,\n      popupUrl: this.state.popupUrl,\n      allowedInteractions,\n    });\n\n    this._syncState({\n      privKey: \"\",\n      coreKitKey: \"\",\n      walletKey: \"\",\n      oAuthPrivateKey: \"\",\n      tKey: \"\",\n      store: {\n        name: \"\",\n        profileImage: \"\",\n        dappShare: \"\",\n        idToken: \"\",\n        oAuthIdToken: \"\",\n        oAuthAccessToken: \"\",\n        sessionId: \"\",\n        sessionNamespace: \"\",\n        appState: \"\",\n      },\n    });\n\n    return res;\n  }\n\n  async request<T>(args: RequestParams): Promise<T> {\n    const pid = randomId();\n    let { params } = args;\n\n    // Note: _origin is added later in postMessageStream for jrpc requests\n    // do not add it here since its used for checking postMessage constraints\n    const session: Partial<SessionInfo> = {};\n    if (params.length !== 1) throw new Error(\"request params array should have only one element\");\n    const { startUrl, popupUrl, method, allowedInteractions } = args;\n    if (allowedInteractions.length === 0) throw new Error(\"no allowed interactions\");\n\n    if (this.state.clientId) {\n      session._clientId = this.state.clientId;\n    }\n    if (this.state.sessionNamespace) {\n      session._sessionNamespace = this.state.sessionNamespace;\n    }\n\n    if (this.privKey) {\n      const userData = {\n        clientId: session._clientId,\n        timestamp: Date.now().toString(),\n      };\n      const sig = await sign(\n        Buffer.from(this.privKey, \"hex\"),\n        Buffer.from(keccak(\"keccak256\").update(JSON.stringify(userData)).digest(\"hex\"), \"hex\")\n      );\n      session._user = getPublic(Buffer.from(this.privKey, \"hex\")).toString(\"hex\");\n      session._userSig = base64url.encode(sig);\n      session._userData = userData;\n    }\n\n    session._originData = this.state.originData;\n    session._whiteLabelData = this.state.whiteLabel;\n    session._loginConfig = this.state.loginConfig;\n    session._sessionId = this.state.store.get(\"sessionId\");\n    session._webauthnTransports = this.state.webauthnTransports;\n\n    if (!session._sessionId) {\n      const sessionId = randomId();\n      session._sessionId = sessionId as string;\n      this.state.store.set(\"sessionId\", sessionId);\n    }\n\n    // add in session data (allow overrides)\n    params = [{ ...session, ...params[0] }];\n\n    // use JRPC where possible\n\n    if (allowedInteractions.includes(ALLOWED_INTERACTIONS.JRPC)) {\n      return this._jrpcRequest<Record<string, unknown>[], T>({ method, params });\n    }\n\n    // set origin\n    params[0]._origin = new URL((params[0].redirectUrl as string) ?? this.state.redirectUrl).origin;\n\n    // preset params\n    if (this.state.support3PC) {\n      // set params first if 3PC supported\n      await this._setPIDData(pid, params);\n      // eslint-disable-next-line require-atomic-updates\n      params = [{}];\n    }\n\n    if (!startUrl || !popupUrl) {\n      throw new Error(\"no url for redirect / popup flow\");\n    }\n\n    // method and pid are always in URL hash params\n    // convert params from JSON to base64\n\n    if (this.state.uxMode === UX_MODE.REDIRECT || this.state.uxMode === UX_MODE.SESSIONLESS_REDIRECT) {\n      // if redirects preferred, check for redirect flows first, then check for popup flow\n\n      if (allowedInteractions.includes(ALLOWED_INTERACTIONS.REDIRECT)) {\n        // give time for synchronous methods to complete before redirect\n        setTimeout(() => {\n          window.location.href = constructURL({\n            baseURL: startUrl,\n            hash: { b64Params: jsonToBase64(params[0]), _pid: pid, _method: method },\n          });\n        }, 50);\n        return {} as T;\n      }\n\n      if (allowedInteractions.includes(ALLOWED_INTERACTIONS.POPUP)) {\n        const u = new URL(\n          constructURL({\n            baseURL: popupUrl,\n            hash: { b64Params: jsonToBase64(params[0]), _pid: pid, _method: method },\n          })\n        );\n        const windowRef = window.open(u.toString(), \"_blank\", getPopupFeatures());\n        return awaitReq<T>(pid, windowRef);\n      }\n    } else {\n      // if popups preferred, check for popup flows first, then check for redirect flow\n\n      if (allowedInteractions.includes(ALLOWED_INTERACTIONS.POPUP)) {\n        const u = new URL(\n          constructURL({\n            baseURL: popupUrl,\n            hash: { b64Params: jsonToBase64(params[0]), _pid: pid, _method: method },\n          })\n        );\n        const windowRef = window.open(u.toString(), \"_blank\", getPopupFeatures());\n        return awaitReq<T>(pid, windowRef);\n      }\n\n      if (allowedInteractions.includes(ALLOWED_INTERACTIONS.REDIRECT)) {\n        // give time for synchronous methods to complete before redirect\n        setTimeout(() => {\n          window.location.href = constructURL({\n            baseURL: startUrl,\n            hash: { b64Params: jsonToBase64(params[0]), _pid: pid, _method: method },\n          });\n        }, 50);\n        return null;\n      }\n    }\n\n    throw new Error(\"no matching allowed interactions\");\n  }\n\n  async _jrpcRequest<T, U>(args: JRPCRequest<T>): Promise<U> {\n    // await this.initialized;\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw new Error(\"invalid request args\");\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw new Error(\"invalid request method\");\n    }\n\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error(\"invalid request params\");\n    }\n\n    if (params.length === 0) {\n      params.push({});\n    }\n\n    return new Promise<U>((resolve, reject) => {\n      this.provider._rpcRequest({ method, params }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  async _check3PCSupport(): Promise<Record<string, boolean>> {\n    return this._jrpcRequest<Record<string, unknown>[], Record<string, boolean>>({\n      method: OPENLOGIN_METHOD.CHECK_3PC_SUPPORT,\n      params: [{ _originData: this.state.originData }],\n    });\n  }\n\n  async _setPIDData(pid: string, data: Record<string, unknown>[]): Promise<void> {\n    await this.request({\n      allowedInteractions: [ALLOWED_INTERACTIONS.JRPC],\n      method: OPENLOGIN_METHOD.SET_PID_DATA,\n      params: [\n        {\n          pid,\n          data: data[0],\n        },\n      ],\n    });\n  }\n\n  async _getData(): Promise<Record<string, unknown>> {\n    if (this.state.uxMode === UX_MODE.SESSIONLESS_REDIRECT) return {};\n    return this.request<Record<string, unknown>>({\n      allowedInteractions: [ALLOWED_INTERACTIONS.JRPC],\n      method: OPENLOGIN_METHOD.GET_DATA,\n      params: [{}],\n    });\n  }\n\n  _syncState(newState: Record<string, unknown>): void {\n    if (newState.store) {\n      if (typeof newState.store !== \"object\") {\n        throw new Error(\"expected store to be an object\");\n      }\n      Object.keys(newState.store).forEach((key) => {\n        this.state.store.set(key, newState.store[key]);\n      });\n    }\n    const { store } = this.state;\n    this.state = { ...this.state, ...newState, store };\n  }\n\n  async _modal(params?: LoginParams & Partial<BaseRedirectParams>): Promise<{\n    privKey: string;\n  }> {\n    return new Promise<{ privKey: string }>((resolve, reject) => {\n      this.modal._prompt(this.state.clientId, this.state.whiteLabel, this.state.loginConfig, async (chunk: { cancel?: boolean }): Promise<void> => {\n        if (chunk.cancel) {\n          reject(new Error(\"user canceled login\"));\n        } else {\n          try {\n            const selectedLoginResponse = await this._selectedLogin(merge(params, chunk));\n            resolve(selectedLoginResponse);\n          } catch (error) {\n            reject(error);\n          }\n        }\n      });\n    });\n  }\n\n  async _cleanup(): Promise<void> {\n    await this.modal.cleanup();\n    this.provider.cleanup();\n  }\n\n  async encrypt(message: Buffer, privateKey?: string): Promise<Ecies> {\n    let privKey = privateKey;\n    if (!privKey) {\n      privKey = this.privKey;\n    }\n    // validations\n    if (!/^[0-9a-fA-f]{64}$/.exec(privKey)) {\n      if (privKey === \"\" || privKey === undefined) {\n        throw new Error(\"private key cannot be empty\");\n      } else {\n        throw new Error(\"invalid private key in encrypt\");\n      }\n    }\n    return encrypt(getPublic(Buffer.from(privKey, \"hex\")), message);\n  }\n\n  async decrypt(ciphertext: Ecies, privateKey?: string): Promise<Buffer> {\n    let privKey = privateKey;\n    if (!privKey) {\n      privKey = this.privKey;\n    }\n    // validations\n    if (!/^[0-9a-fA-f]{64}$/.exec(privKey)) {\n      if (privKey === \"\" || privKey === undefined) {\n        throw new Error(\"private key cannot be empty\");\n      } else {\n        throw new Error(\"invalid private key in decrypt\");\n      }\n    }\n    return decrypt(Buffer.from(privKey, \"hex\"), ciphertext);\n  }\n\n  async getUserInfo(): Promise<OpenloginUserInfo> {\n    if (this.privKey) {\n      const storeData = this.state.store.getStore();\n      const userInfo: OpenloginUserInfo = {\n        email: (storeData.email as string) || \"\",\n        name: (storeData.name as string) || \"\",\n        profileImage: (storeData.profileImage as string) || \"\",\n        aggregateVerifier: (storeData.aggregateVerifier as string) || \"\",\n        verifier: (storeData.verifier as string) || \"\",\n        verifierId: (storeData.verifierId as string) || \"\",\n        typeOfLogin: (storeData.typeOfLogin as LOGIN_PROVIDER_TYPE | CUSTOM_LOGIN_PROVIDER_TYPE) || \"\",\n        dappShare: (storeData.dappShare as string) || \"\",\n        idToken: (storeData.idToken as string) || \"\",\n        oAuthIdToken: (storeData.oAuthIdToken as string) || \"\",\n        oAuthAccessToken: (storeData.oAuthAccessToken as string) || \"\",\n      };\n\n      return userInfo;\n    }\n    throw new Error(\"user should be logged in to fetch userInfo\");\n  }\n\n  async getEncodedLoginUrl(loginParams: LoginParams & Partial<BaseRedirectParams>): Promise<string> {\n    const { redirectUrl } = loginParams;\n    const { clientId } = this.state;\n    if (!this.state.originData[origin]) {\n      await this.updateOriginData();\n    }\n    const dataObject = {\n      _clientId: clientId,\n      _origin: new URL(redirectUrl).origin,\n      _originData: this.state.originData,\n      redirectUrl,\n      ...loginParams,\n    };\n\n    const b64Params = jsonToBase64(dataObject);\n    const hashParams = {\n      b64Params,\n      _method: \"openlogin_login\",\n    };\n\n    return constructURL({ baseURL: `${this.state.iframeUrl}/start`, hash: hashParams });\n  }\n}\n\nexport default OpenLogin;\n"],
  "mappings": "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",
  "names": ["getPublic", "documentReady", "_regeneratorRuntime", "Promise", "resolve", "document", "readyState", "addEventListener", "getHashQueryParams", "replaceUrl", "result", "url", "URL", "window", "location", "href", "searchParams", "forEach", "value", "key", "queryResult", "get", "queryParams", "JSON", "parse", "safeatob", "Object", "keys", "error", "log", "hash", "substring", "hashUrl", "origin", "hashResult", "hashParams", "cleanUrl", "pathname", "history", "replaceState", "awaitReq", "id", "windowRef", "reject", "Error", "closedByHandler", "closedMonitor", "setInterval", "closed", "clearInterval", "handler", "ev", "pid", "data", "removeEventListener", "close", "constructURL", "params", "baseURL", "query", "append", "h", "toString", "storageAvailable", "type", "storageExists", "storageLength", "storage", "length", "x", "setItem", "removeItem", "code", "name", "preloadIframe", "openloginIframeHtml", "createElement", "crossOrigin", "rel", "relList", "supports", "head", "appendChild", "getPopupFeatures", "dualScreenLeft", "screenLeft", "undefined", "screenX", "dualScreenTop", "screenTop", "screenY", "w", "width", "innerWidth", "documentElement", "clientWidth", "screen", "height", "innerHeight", "clientHeight", "systemZoom", "left", "Math", "abs", "top", "features", "modalDOMElementID", "storeKey", "UX_MODE", "OPENLOGIN_METHOD", "ALLOWED_INTERACTIONS", "OPENLOGIN_NETWORK", "SUPPORTED_KEY_CURVES", "LOGIN_PROVIDER", "htmlToElement", "sessionStorageAvailable", "localStorageAvailable", "handleStream", "Modal", "MemoryStore", "OpenLoginStore", "Provider", "OpenLogin", "POPUP", "REDIRECT", "SESSIONLESS_REDIRECT", "LOGIN", "LOGOUT", "CHECK_3PC_SUPPORT", "SET_PID_DATA", "GET_DATA", "JRPC", "MAINNET", "TESTNET", "CYAN", "DEVELOPMENT", "SK_TESTNET", "CELESTE", "AQUA", "SECP256K1", "ED25519", "GOOGLE", "FACEBOOK", "REDDIT", "DISCORD", "TWITCH", "APPLE", "LINE", "GITHUB", "KAKAO", "LINKEDIN", "TWITTER", "WEIBO", "WECHAT", "EMAIL_PASSWORDLESS", "SMS_PASSWORDLESS", "WEBAUTHN", "JWT", "loglevel", "setLevel", "getLogger", "html", "template", "trimmedHtml", "trim", "innerHTML", "content", "firstChild", "handle", "eventName", "handlerWrapper", "chunk", "removeListener", "on", "modalUrl", "initIFrame", "setupStream", "iframeElem", "mux", "setupMultiplex", "PostMessageStream", "target", "targetWindow", "contentWindow", "targetOrigin", "verifierStream", "createStream", "src", "documentIFrameElem", "getElementById", "remove", "info", "modalZIndex", "_hideModal", "body", "onload", "initialized", "style", "display", "position", "right", "bottom", "border", "setAttribute", "entries", "map", "k", "v", "join", "clientId", "whiteLabel", "loginConfig", "cb", "_showModal", "modalHandler", "write", "store", "_storeKey", "getItem", "resetStore", "currStore", "getStore", "stringify", "storeNamespace", "storageKey", "instance", "localStorage", "sessionStorage", "finalStoreKey", "iframeUrl", "rpcStream", "JRPCConnection", "createStreamMiddleware", "pump", "stream", "rpcEngine", "JRPCEngine", "push", "createIdRemapMiddleware", "middleware", "payload", "callback", "jsonrpc", "randomId", "SafeEventEmitter", "options", "provider", "Proxy", "deleteProperty", "_iframeUrl", "network", "modal", "initState", "no3PC", "_startUrl", "_popupUrl", "redirectUrl", "protocol", "host", "uxMode", "replaceUrlOnRedirect", "originData", "_storageServerUrl", "_sessionNamespace", "webauthnTransports", "state", "privKey", "padStart", "coreKitKey", "getInstance", "startUrl", "popupUrl", "support3PC", "storageServerUrl", "sessionNamespace", "console", "updateOriginData", "all", "init", "sessionId", "set", "_syncState", "_getData", "_check3PCSupport", "res", "filteredOriginData", "getWhitelist", "getWhiteLabel", "whitelist", "signed_urls", "loginProvider", "_selectedLogin", "_modal", "defaultParams", "loginParams", "request", "method", "allowedInteractions", "logoutParams", "_clientId", "walletKey", "oAuthPrivateKey", "tKey", "profileImage", "dappShare", "idToken", "oAuthIdToken", "oAuthAccessToken", "appState", "args", "session", "userData", "timestamp", "Date", "now", "sign", "Buffer", "from", "keccak", "update", "digest", "sig", "_user", "getPublic", "_userSig", "base64url", "encode", "_userData", "_originData", "_whiteLabelData", "_loginConfig", "_sessionId", "_webauthnTransports", "includes", "_jrpcRequest", "_origin", "_setPIDData", "setTimeout", "b64Params", "jsonToBase64", "_pid", "_method", "u", "open", "Array", "isArray", "_rpcRequest", "getRpcPromiseCallback", "newState", "_prompt", "cancel", "merge", "selectedLoginResponse", "cleanup", "message", "privateKey", "exec", "encrypt", "ciphertext", "decrypt", "storeData", "userInfo", "email", "aggregateVerifier", "verifier", "verifierId", "typeOfLogin", "dataObject"]
}
