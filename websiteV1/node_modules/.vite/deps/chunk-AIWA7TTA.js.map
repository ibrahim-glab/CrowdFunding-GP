{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/marketplacev3-offers-f96181ff.browser.esm.js"],
  "sourcesContent": ["import { BigNumber, Contract, constants, utils } from 'ethers';\r\nimport invariant from 'tiny-invariant';\r\nimport { c as cleanCurrencyAddress } from './cleanCurrencyAddress-f51f872e.browser.esm.js';\r\nimport { C as ContractEncoder, a as fetchCurrencyValue, f as fetchCurrencyMetadata, i as isNativeToken } from './fetchCurrencyValue-27d660ae.browser.esm.js';\r\nimport { n as normalizePriceValue } from './normalizePriceValue-ee13e65c.browser.esm.js';\r\nimport { s as setErc20Allowance } from './setErc20Allowance-0fd3045e.browser.esm.js';\r\nimport { b9 as AddressOrEnsSchema, b6 as BigNumberishSchema, aV as NATIVE_TOKEN_ADDRESS, cv as AmountSchema, dv as FEATURE_DIRECT_LISTINGS, aL as resolveAddress, dw as FEATURE_ENGLISH_AUCTIONS, w as AuctionHasNotEndedError, dx as FEATURE_OFFERS, aW as NATIVE_TOKENS, cq as ContractWrapper } from './index-e7118e8b.browser.esm.js';\r\nimport { g as getAllInBatches, i as isTokenApprovedForTransfer, h as handleTokenApproval } from './marketplace-ad8d6c18.browser.esm.js';\r\nimport { c as fetchTokenMetadataForContract, I as InterfaceId_IERC721, a as InterfaceId_IERC1155 } from './QueryParams-c67b6cd4.browser.esm.js';\r\nimport { d as buildTransactionFunction, T as Transaction } from './transactions-de84ba20.browser.esm.js';\r\nimport { R as RawDateSchema, E as EndDateSchema } from './assertEnabled-0bc21898.browser.esm.js';\r\nimport { z } from 'zod';\r\nimport { a as ContractEvents, G as GasCostEstimator } from './contract-appuri-3d68505c.browser.esm.js';\r\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\r\n\r\n/**\r\n * @internal\r\n */\r\nconst DirectListingInputParamsSchema = /* @__PURE__ */(() => z.object({\r\n  /**\r\n   * The address of the asset being listed.\r\n   */\r\n  assetContractAddress: AddressOrEnsSchema,\r\n  /**\r\n   * The ID of the token to list.\r\n   */\r\n  tokenId: BigNumberishSchema,\r\n  /**\r\n   * The quantity of tokens to include in the listing.\r\n   *\r\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\r\n   */\r\n  quantity: BigNumberishSchema.default(1),\r\n  /**\r\n   * The address of the currency to accept for the listing.\r\n   */\r\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\r\n  /**\r\n   * The price to pay per unit of NFTs listed.\r\n   */\r\n  pricePerToken: AmountSchema,\r\n  /**\r\n   * The start time of the listing.\r\n   */\r\n  startTimestamp: RawDateSchema.default(new Date()),\r\n  /**\r\n   * The end time of the listing.\r\n   */\r\n  endTimestamp: EndDateSchema,\r\n  /**\r\n   * Whether the listing is reserved to be bought from a specific set of buyers.\r\n   */\r\n  isReservedListing: z.boolean().default(false)\r\n}))();\r\n\r\n/**\r\n * @public\r\n */\r\n\r\nlet Status = /*#__PURE__*/function (Status) {\r\n  Status[Status[\"UNSET\"] = 0] = \"UNSET\";\r\n  Status[Status[\"Created\"] = 1] = \"Created\";\r\n  Status[Status[\"Completed\"] = 2] = \"Completed\";\r\n  Status[Status[\"Cancelled\"] = 3] = \"Cancelled\";\r\n  Status[Status[\"Active\"] = 4] = \"Active\";\r\n  Status[Status[\"Expired\"] = 5] = \"Expired\";\r\n  return Status;\r\n}({});\r\n\r\n/**\r\n * Handles direct listings\r\n * @public\r\n */\r\nclass MarketplaceV3DirectListings {\r\n  featureName = FEATURE_DIRECT_LISTINGS.name;\r\n\r\n  // utilities\r\n\r\n  constructor(contractWrapper, storage) {\r\n    this.contractWrapper = contractWrapper;\r\n    this.storage = storage;\r\n    this.events = new ContractEvents(this.contractWrapper);\r\n    this.encoder = new ContractEncoder(this.contractWrapper);\r\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\r\n    this.estimator = new GasCostEstimator(this.contractWrapper);\r\n  }\r\n  getAddress() {\r\n    return this.contractWrapper.address;\r\n  }\r\n\r\n  /** ******************************\r\n   * READ FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Get the total number of direct listings\r\n   *\r\n   * @returns Returns the total number of direct listings created.\r\n   * @public\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const totalListings = await contract.directListings.getTotalCount();\r\n   * ```\r\n   * @twfeature DirectListings\r\n   */\r\n  async getTotalCount() {\r\n    return await this.contractWrapper.read(\"totalListings\", []);\r\n  }\r\n\r\n  /**\r\n   * Get all direct listings\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const listings = await contract.directListings.getAll();\r\n   * ```\r\n   *\r\n   * @param filter - optional filter parameters\r\n   * @returns The Direct listing object array\r\n   * @twfeature DirectListings\r\n   */\r\n  async getAll(filter) {\r\n    const totalListings = await this.getTotalCount();\r\n    const start = BigNumber.from(filter?.start || 0).toNumber();\r\n    const end = totalListings.toNumber();\r\n    if (end === 0) {\r\n      throw new Error(`No listings exist on the contract.`);\r\n    }\r\n    let rawListings = [];\r\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllListings\", [startId, endId]));\r\n    rawListings = batches.flat();\r\n    const filteredListings = await this.applyFilter(rawListings, filter);\r\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\r\n  }\r\n\r\n  /**\r\n   * Get all valid direct listings\r\n   *\r\n   * @remarks A valid listing is where the listing is active, and the creator still owns & has approved Marketplace to transfer the listed NFTs.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const listings = await contract.directListings.getAllValid();\r\n   * ```\r\n   *\r\n   * @param filter - optional filter parameters\r\n   * @returns The Direct listing object array\r\n   * @twfeature DirectListings\r\n   */\r\n  async getAllValid(filter) {\r\n    const totalListings = await this.getTotalCount();\r\n    const start = BigNumber.from(filter?.start || 0).toNumber();\r\n    const end = totalListings.toNumber();\r\n    if (end === 0) {\r\n      throw new Error(`No listings exist on the contract.`);\r\n    }\r\n    let rawListings = [];\r\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidListings\", [startId, endId]));\r\n    rawListings = batches.flat();\r\n    const filteredListings = await this.applyFilter(rawListings, filter);\r\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\r\n  }\r\n\r\n  /**\r\n   * Get a single direct listing\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const listingId = 0;\r\n   * const listing = await contract.directListings.getListing(listingId);\r\n   * ```\r\n   *\r\n   * @param listingId - the listing id\r\n   * @returns The Direct listing object\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const listingId = 0;\r\n   * const listing = await contract.directListings.getListing(listingId);\r\n   * ```\r\n   * @twfeature DirectListings\r\n   */\r\n  async getListing(listingId) {\r\n    const listing = await this.contractWrapper.read(\"getListing\", [listingId]);\r\n    return await this.mapListing(listing);\r\n  }\r\n\r\n  /**\r\n   * Check if a buyer is approved for a specific direct listing\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const listingId = 0;\r\n   * const isBuyerApproved = await contract.directListings.isBuyerApprovedForListing(listingId, \"{{wallet_address}}\");\r\n   * ```\r\n   *\r\n   * @param listingId - the listing id\r\n   * @param buyer - buyer address\r\n   * @twfeature DirectListings\r\n   */\r\n  async isBuyerApprovedForListing(listingId, buyer) {\r\n    const listing = await this.validateListing(BigNumber.from(listingId));\r\n    if (!listing.isReservedListing) {\r\n      throw new Error(`Listing ${listingId} is not a reserved listing.`);\r\n    }\r\n    return await this.contractWrapper.read(\"isBuyerApprovedForListing\", [listingId, await resolveAddress(buyer)]);\r\n  }\r\n\r\n  /**\r\n   * Check if a currency is approved for a specific direct listing\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const listingId = 0;\r\n   * const currencyContractAddress = '0x1234';\r\n   * const isApproved = await contract.directListings.isCurrencyApprovedForListing(listingId, currencyContractAddress);\r\n   * ```\r\n   *\r\n   * @param listingId - the listing id\r\n   * @param currency - currency address\r\n   * @twfeature DirectListings\r\n   */\r\n  async isCurrencyApprovedForListing(listingId, currency) {\r\n    await this.validateListing(BigNumber.from(listingId));\r\n    return await this.contractWrapper.read(\"isCurrencyApprovedForListing\", [listingId, await resolveAddress(currency)]);\r\n  }\r\n\r\n  /**\r\n   * Check price per token for an approved currency\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const listingId = 0;\r\n   * const currencyContractAddress = '0x1234';\r\n   * const price = await contract.directListings.currencyPriceForListing(listingId, currencyContractAddress);\r\n   * ```\r\n   *\r\n   * @param listingId - the listing id\r\n   * @param currencyContractAddress - currency contract address\r\n   * @twfeature DirectListings\r\n   */\r\n  async currencyPriceForListing(listingId, currencyContractAddress) {\r\n    const listing = await this.validateListing(BigNumber.from(listingId));\r\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\r\n    if (resolvedCurrencyAddress === listing.currencyContractAddress) {\r\n      return listing.pricePerToken;\r\n    }\r\n    const isApprovedCurrency = await this.isCurrencyApprovedForListing(listingId, resolvedCurrencyAddress);\r\n    if (!isApprovedCurrency) {\r\n      throw new Error(`Currency ${resolvedCurrencyAddress} is not approved for Listing ${listingId}.`);\r\n    }\r\n    return await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\r\n  }\r\n\r\n  /** ******************************\r\n   * WRITE FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Create new direct listing\r\n   *\r\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Data of the listing you want to create\r\n   * const listing = {\r\n   *   // address of the contract the asset you want to list is on\r\n   *   assetContractAddress: \"0x...\",\r\n   *   // token ID of the asset you want to list\r\n   *   tokenId: \"0\",\r\n   *   // how many of the asset you want to list\r\n   *   quantity: 1,\r\n   *   // address of the currency contract that will be used to pay for the listing\r\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\r\n   *   // The price to pay per unit of NFTs listed.\r\n   *   pricePerToken: 1.5,\r\n   *   // when should the listing open up for offers\r\n   *   startTimestamp: new Date(Date.now()),\r\n   *   // how long the listing will be open for\r\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\r\n   *   // Whether the listing is reserved for a specific set of buyers.\r\n   *   isReservedListing: false\r\n   * }\r\n   *\r\n   * const tx = await contract.directListings.createListing(listing);\r\n   * const receipt = tx.receipt; // the transaction receipt\r\n   * const id = tx.id; // the id of the newly created listing\r\n   * ```\r\n   * @twfeature DirectListings\r\n   */\r\n  createListing = /* @__PURE__ */buildTransactionFunction(async listing => {\r\n    const parsedListing = await DirectListingInputParamsSchema.parseAsync(listing);\r\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\r\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\r\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\r\n    const blockTime = block.timestamp;\r\n    if (parsedListing.startTimestamp.lt(blockTime)) {\r\n      parsedListing.startTimestamp = BigNumber.from(blockTime);\r\n    }\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"createListing\",\r\n      args: [{\r\n        assetContract: parsedListing.assetContractAddress,\r\n        tokenId: parsedListing.tokenId,\r\n        quantity: parsedListing.quantity,\r\n        currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\r\n        pricePerToken: normalizedPricePerToken,\r\n        startTimestamp: parsedListing.startTimestamp,\r\n        endTimestamp: parsedListing.endTimestamp,\r\n        reserved: parsedListing.isReservedListing\r\n      }],\r\n      parse: receipt => {\r\n        const event = this.contractWrapper.parseLogs(\"NewListing\", receipt?.logs);\r\n        return {\r\n          id: event[0].args.listingId,\r\n          receipt\r\n        };\r\n      }\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Create a batch of new listings\r\n   *\r\n   * @remarks Create a batch of new listings on the marketplace\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const listings = [...];\r\n   * const tx = await contract.directListings.createListingsBatch(listings);\r\n   * ```\r\n   */\r\n  createListingsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\r\n    const data = (await Promise.all(listings.map(listing => this.createListing.prepare(listing)))).map(tx => tx.encode());\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"multicall\",\r\n      args: [data],\r\n      parse: receipt => {\r\n        const events = this.contractWrapper.parseLogs(\"NewListing\", receipt?.logs);\r\n        return events.map(event => {\r\n          return {\r\n            id: event.args.listingId,\r\n            receipt\r\n          };\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Update a direct listing\r\n   *\r\n   * @param listing - the new listing information\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Data of the listing you want to update\r\n   *\r\n   * const listingId = 0; // ID of the listing you want to update\r\n   *\r\n   * const listing = {\r\n   *   // address of the contract the asset you want to list is on\r\n   *   assetContractAddress: \"0x...\", // should be same as original listing\r\n   *   // token ID of the asset you want to list\r\n   *   tokenId: \"0\", // should be same as original listing\r\n   *   // how many of the asset you want to list\r\n   *   quantity: 1,\r\n   *   // address of the currency contract that will be used to pay for the listing\r\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\r\n   *   // The price to pay per unit of NFTs listed.\r\n   *   pricePerToken: 1.5,\r\n   *   // when should the listing open up for offers\r\n   *   startTimestamp: new Date(Date.now()), // can't change this if listing already active\r\n   *   // how long the listing will be open for\r\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\r\n   *   // Whether the listing is reserved for a specific set of buyers.\r\n   *   isReservedListing: false\r\n   * }\r\n   *\r\n   * const tx = await contract.directListings.updateListing(listingId, listing);\r\n   * const receipt = tx.receipt; // the transaction receipt\r\n   * const id = tx.id; // the id of the newly created listing\r\n   * ```\r\n   * @twfeature DirectListings\r\n   */\r\n  updateListing = /* @__PURE__ */buildTransactionFunction(async (listingId, listing) => {\r\n    const parsedListing = await DirectListingInputParamsSchema.parseAsync(listing);\r\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\r\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"updateListing\",\r\n      args: [listingId, {\r\n        assetContract: parsedListing.assetContractAddress,\r\n        tokenId: parsedListing.tokenId,\r\n        quantity: parsedListing.quantity,\r\n        currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\r\n        pricePerToken: normalizedPricePerToken,\r\n        startTimestamp: parsedListing.startTimestamp,\r\n        endTimestamp: parsedListing.endTimestamp,\r\n        reserved: parsedListing.isReservedListing\r\n      }],\r\n      parse: receipt => {\r\n        const event = this.contractWrapper.parseLogs(\"UpdatedListing\", receipt?.logs);\r\n        return {\r\n          id: event[0].args.listingId,\r\n          receipt\r\n        };\r\n      }\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Cancel Direct Listing\r\n   *\r\n   * @remarks Cancel a direct listing on the marketplace\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the direct listing you want to cancel\r\n   * const listingId = 0;\r\n   *\r\n   * await contract.directListings.cancelListing(listingId);\r\n   * ```\r\n   * @twfeature DirectListings\r\n   */\r\n  cancelListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"cancelListing\",\r\n      args: [listingId]\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Buy direct listing for a specific wallet\r\n   *\r\n   * @remarks Buy from a specific direct listing from the marketplace.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The ID of the listing you want to buy from\r\n   * const listingId = 0;\r\n   * // Quantity of the asset you want to buy\r\n   * const quantityDesired = 1;\r\n   *\r\n   * await contract.directListings.buyFromListing(listingId, quantityDesired, \"{{wallet_address}}\");\r\n   * ```\r\n   *\r\n   * @param listingId - The listing id to buy\r\n   * @param quantityDesired - the quantity to buy\r\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\r\n   * @twfeature DirectListings\r\n   */\r\n  buyFromListing = /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, receiver) => {\r\n    if (receiver) {\r\n      receiver = await resolveAddress(receiver);\r\n    }\r\n    const listing = await this.validateListing(BigNumber.from(listingId));\r\n    const {\r\n      valid,\r\n      error\r\n    } = await this.isStillValidListing(listing, quantityDesired);\r\n    if (!valid) {\r\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\r\n    }\r\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\r\n    const quantity = BigNumber.from(quantityDesired);\r\n    const value = BigNumber.from(listing.pricePerToken).mul(quantity);\r\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\r\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"buyFromListing\",\r\n      args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],\r\n      overrides\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Approve buyer for a reserved direct listing\r\n   *\r\n   * @remarks Approve a buyer to buy from a reserved listing.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the direct listing you want to approve buyer for\r\n   * const listingId = \"0\";\r\n   *\r\n   * await contract.directListings.approveBuyerForReservedListing(listingId, \"{{wallet_address}}\");\r\n   * ```\r\n   *\r\n   * @param listingId - The listing id to buy\r\n   * @param buyer - Address of buyer being approved\r\n   * @twfeature DirectListings\r\n   */\r\n  approveBuyerForReservedListing = /* @__PURE__ */buildTransactionFunction(async (listingId, buyer) => {\r\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\r\n    if (!isApproved) {\r\n      return Transaction.fromContractWrapper({\r\n        contractWrapper: this.contractWrapper,\r\n        method: \"approveBuyerForListing\",\r\n        args: [listingId, buyer, true]\r\n      });\r\n    } else {\r\n      throw new Error(`Buyer ${buyer} already approved for listing ${listingId}.`);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Revoke approval of a buyer for a reserved direct listing\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the direct listing you want to approve buyer for\r\n   * const listingId = \"0\";\r\n   *\r\n   * await contract.directListings.revokeBuyerApprovalForReservedListing(listingId, \"{{wallet_address}}\");\r\n   * ```\r\n   *\r\n   * @param listingId - The listing id to buy\r\n   * @param buyer - Address of buyer being approved\r\n   */\r\n  revokeBuyerApprovalForReservedListing = /* @__PURE__ */buildTransactionFunction(async (listingId, buyer) => {\r\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\r\n    if (isApproved) {\r\n      return Transaction.fromContractWrapper({\r\n        contractWrapper: this.contractWrapper,\r\n        method: \"approveBuyerForListing\",\r\n        args: [listingId, buyer, false]\r\n      });\r\n    } else {\r\n      throw new Error(`Buyer ${buyer} not approved for listing ${listingId}.`);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Approve a currency for a direct listing\r\n   *\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the direct listing you want to approve currency for\r\n   * const listingId = \"0\";\r\n   *\r\n   * await contract.directListings.approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency);\r\n   * ```\r\n   *\r\n   * @param listingId - The listing id to buy\r\n   * @param currencyContractAddress - Address of currency being approved\r\n   * @param pricePerTokenInCurrency - Price per token in the currency\r\n   * @twfeature DirectListings\r\n   */\r\n  approveCurrencyForListing = /* @__PURE__ */buildTransactionFunction(async (listingId, currencyContractAddress, pricePerTokenInCurrency) => {\r\n    const listing = await this.validateListing(BigNumber.from(listingId));\r\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\r\n    if (resolvedCurrencyAddress === listing.currencyContractAddress) {\r\n      invariant(pricePerTokenInCurrency === listing.pricePerToken, \"Approving listing currency with a different price.\");\r\n    }\r\n    const currencyPrice = await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\r\n    invariant(pricePerTokenInCurrency === currencyPrice, \"Currency already approved with this price.\");\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"approveCurrencyForListing\",\r\n      args: [listingId, resolvedCurrencyAddress, pricePerTokenInCurrency]\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Revoke approval of a currency for a direct listing\r\n   *\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The listing ID of the direct listing you want to revoke currency for\r\n   * const listingId = \"0\";\r\n   *\r\n   * await contract.directListings.revokeCurrencyApprovalForListing(listingId, currencyContractAddress);\r\n   * ```\r\n   *\r\n   * @param listingId - The listing id to buy\r\n   * @param currencyContractAddress - Address of currency\r\n   * @twfeature DirectListings\r\n   */\r\n  revokeCurrencyApprovalForListing = /* @__PURE__ */buildTransactionFunction(async (listingId, currencyContractAddress) => {\r\n    const listing = await this.validateListing(BigNumber.from(listingId));\r\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\r\n    if (resolvedCurrencyAddress === listing.currencyContractAddress) {\r\n      throw new Error(`Can't revoke approval for main listing currency.`);\r\n    }\r\n    const currencyPrice = await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\r\n    invariant(!currencyPrice.isZero(), \"Currency not approved.\");\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"approveCurrencyForListing\",\r\n      args: [listingId, resolvedCurrencyAddress, BigNumber.from(0)]\r\n    });\r\n  });\r\n\r\n  /** ******************************\r\n   * PRIVATE FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Throws error if listing could not be found\r\n   *\r\n   * @param listingId - Listing to check for\r\n   */\r\n  async validateListing(listingId) {\r\n    try {\r\n      return await this.getListing(listingId);\r\n    } catch (err) {\r\n      console.error(`Error getting the listing with id ${listingId}`);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method maps the auction listing to the direct listing interface.\r\n   *\r\n   * @internal\r\n   * @param listing - The listing to map, as returned from the contract.\r\n   * @returns  The mapped interface.\r\n   */\r\n  async mapListing(listing) {\r\n    let status = Status.UNSET;\r\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\r\n    const blockTime = block.timestamp;\r\n    switch (listing.status) {\r\n      case 1:\r\n        status = BigNumber.from(listing.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(listing.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\r\n        break;\r\n      case 2:\r\n        status = Status.Completed;\r\n        break;\r\n      case 3:\r\n        status = Status.Cancelled;\r\n        break;\r\n    }\r\n    return {\r\n      assetContractAddress: listing.assetContract,\r\n      currencyContractAddress: listing.currency,\r\n      pricePerToken: listing.pricePerToken.toString(),\r\n      currencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.pricePerToken),\r\n      id: listing.listingId.toString(),\r\n      tokenId: listing.tokenId.toString(),\r\n      quantity: listing.quantity.toString(),\r\n      startTimeInSeconds: BigNumber.from(listing.startTimestamp).toNumber(),\r\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\r\n      endTimeInSeconds: BigNumber.from(listing.endTimestamp).toNumber(),\r\n      creatorAddress: listing.listingCreator,\r\n      isReservedListing: listing.reserved,\r\n      status: status\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Use this method to check if a direct listing is still valid.\r\n   *\r\n   * Ways a direct listing can become invalid:\r\n   * 1. The asset holder transferred the asset to another wallet\r\n   * 2. The asset holder burned the asset\r\n   * 3. The asset holder removed the approval on the marketplace\r\n   *\r\n   * @internal\r\n   * @param listing - The listing to check.\r\n   * @returns  True if the listing is valid, false otherwise.\r\n   */\r\n  async isStillValidListing(listing, quantity) {\r\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.creatorAddress);\r\n    if (!approved) {\r\n      return {\r\n        valid: false,\r\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\r\n      };\r\n    }\r\n    const provider = this.contractWrapper.getProvider();\r\n    const ERC165Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\r\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\r\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\r\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\r\n    if (isERC721) {\r\n      const ERC721Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721.json')).default;\r\n      const asset = new Contract(listing.assetContractAddress, ERC721Abi, provider);\r\n\r\n      // Handle reverts in case of non-existent tokens\r\n      let owner;\r\n      try {\r\n        owner = await asset.ownerOf(listing.tokenId);\r\n      } catch (e) {}\r\n      const valid = owner?.toLowerCase() === listing.creatorAddress.toLowerCase();\r\n      return {\r\n        valid,\r\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\r\n      };\r\n    } else if (isERC1155) {\r\n      const ERC1155Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155.json')).default;\r\n      const asset = new Contract(listing.assetContractAddress, ERC1155Abi, provider);\r\n      const balance = await asset.balanceOf(listing.creatorAddress, listing.tokenId);\r\n      const valid = balance.gte(quantity || listing.quantity);\r\n      return {\r\n        valid,\r\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\r\n      };\r\n    } else {\r\n      return {\r\n        valid: false,\r\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\r\n      };\r\n    }\r\n  }\r\n  async applyFilter(listings, filter) {\r\n    let rawListings = [...listings];\r\n    if (filter) {\r\n      if (filter.seller) {\r\n        const resolvedSeller = await resolveAddress(filter.seller);\r\n        rawListings = rawListings.filter(seller => seller.listingCreator.toString().toLowerCase() === resolvedSeller?.toString().toLowerCase());\r\n      }\r\n      if (filter.tokenContract) {\r\n        const resolvedToken = await resolveAddress(filter.tokenContract);\r\n        rawListings = rawListings.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());\r\n      }\r\n      if (filter.tokenId !== undefined) {\r\n        rawListings = rawListings.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\r\n      }\r\n    }\r\n    return filter?.count && filter.count < rawListings.length ? rawListings.slice(0, filter.count) : rawListings;\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nconst EnglishAuctionInputParamsSchema = /* @__PURE__ */(() => z.object({\r\n  /**\r\n   * The address of the asset being auctioned.\r\n   */\r\n  assetContractAddress: AddressOrEnsSchema,\r\n  /**\r\n   * The ID of the token to auction.\r\n   */\r\n  tokenId: BigNumberishSchema,\r\n  /**\r\n   * The quantity of tokens to include in the listing.\r\n   *\r\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\r\n   */\r\n  quantity: BigNumberishSchema.default(1),\r\n  /**\r\n   * The address of the currency to accept for the listing.\r\n   */\r\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\r\n  /**\r\n   * The minimum price that a bid must be in order to be accepted.\r\n   */\r\n  minimumBidAmount: AmountSchema,\r\n  /**\r\n   * The buyout price of the auction.\r\n   */\r\n  buyoutBidAmount: AmountSchema,\r\n  /**\r\n   * This is a buffer e.g. x seconds.\r\n   *\r\n   * If a new winning bid is made less than x seconds before expirationTimestamp, the\r\n   * expirationTimestamp is increased by x seconds.\r\n   */\r\n  timeBufferInSeconds: BigNumberishSchema.default(900),\r\n  // 15 minutes by default\r\n\r\n  /**\r\n   * This is a buffer in basis points e.g. x%.\r\n   *\r\n   * To be considered as a new winning bid, a bid must be at least x% greater than\r\n   * the current winning bid.\r\n   */\r\n  bidBufferBps: BigNumberishSchema.default(500),\r\n  // 5% by default\r\n\r\n  /**\r\n   * The start time of the auction.\r\n   */\r\n  startTimestamp: RawDateSchema.default(new Date()),\r\n  /**\r\n   * The end time of the auction.\r\n   */\r\n  endTimestamp: EndDateSchema\r\n}))();\r\n\r\n/**\r\n * @public\r\n */\r\n\r\n/**\r\n * Handles auctions\r\n * @public\r\n */\r\nclass MarketplaceV3EnglishAuctions {\r\n  featureName = FEATURE_ENGLISH_AUCTIONS.name;\r\n\r\n  // utilities\r\n\r\n  constructor(contractWrapper, storage) {\r\n    this.contractWrapper = contractWrapper;\r\n    this.storage = storage;\r\n    this.events = new ContractEvents(this.contractWrapper);\r\n    this.encoder = new ContractEncoder(this.contractWrapper);\r\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\r\n    this.estimator = new GasCostEstimator(this.contractWrapper);\r\n  }\r\n  getAddress() {\r\n    return this.contractWrapper.address;\r\n  }\r\n\r\n  /** ******************************\r\n   * READ FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Get the total number of english auctions\r\n   *\r\n   * @returns Returns the total number of auctions created.\r\n   * @public\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const totalAuctions = await contract.englishAuctions.getTotalCount();\r\n   * ```\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  async getTotalCount() {\r\n    return await this.contractWrapper.read(\"totalAuctions\", []);\r\n  }\r\n\r\n  /**\r\n   * Get all english auctions\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const auctions = await contract.englishAuctions.getAll();\r\n   * ```\r\n   *\r\n   * @param filter - optional filter parameters\r\n   * @returns The Auction object array\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  async getAll(filter) {\r\n    const totalAuctions = await this.getTotalCount();\r\n    const start = BigNumber.from(filter?.start || 0).toNumber();\r\n    const end = totalAuctions.toNumber();\r\n    if (end === 0) {\r\n      throw new Error(`No auctions exist on the contract.`);\r\n    }\r\n    let rawAuctions = [];\r\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllAuctions\", [startId, endId]));\r\n    rawAuctions = batches.flat();\r\n    const filteredAuctions = await this.applyFilter(rawAuctions, filter);\r\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\r\n  }\r\n\r\n  /**\r\n   * Get all valid english auctions\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const auctions = await contract.englishAuctions.getAllValid();\r\n   * ```\r\n   *\r\n   * @param filter - optional filter parameters\r\n   * @returns The Auction object array\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  async getAllValid(filter) {\r\n    const totalAuctions = await this.getTotalCount();\r\n    const start = BigNumber.from(filter?.start || 0).toNumber();\r\n    const end = totalAuctions.toNumber();\r\n    if (end === 0) {\r\n      throw new Error(`No auctions exist on the contract.`);\r\n    }\r\n    let rawAuctions = [];\r\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidAuctions\", [startId, endId]));\r\n    rawAuctions = batches.flat();\r\n    const filteredAuctions = await this.applyFilter(rawAuctions, filter);\r\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\r\n  }\r\n\r\n  /**\r\n   * Get a single english auction\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const auctionId = 0;\r\n   * const auction = await contract.englishAuctions.getAuction(auctionId);\r\n   * ```\r\n   *\r\n   * @param auctionId - the auction Id\r\n   * @returns The Auction object\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  async getAuction(auctionId) {\r\n    const auction = await this.contractWrapper.read(\"getAuction\", [auctionId]);\r\n    return await this.mapAuction(auction);\r\n  }\r\n\r\n  /**\r\n   * Get winning bid of an english auction\r\n   *\r\n   * @remarks Get the current highest bid of an active auction.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The ID of the auction\r\n   * const auctionId = 0;\r\n   * const winningBid = await contract.englishAuctions.getWinningBid(auctionId);\r\n   * ```\r\n   * @param auctionId - the auction Id\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  async getWinningBid(auctionId) {\r\n    await this.validateAuction(BigNumber.from(auctionId));\r\n    const bid = await this.contractWrapper.read(\"getWinningBid\", [auctionId]);\r\n    if (bid._bidder === constants.AddressZero) {\r\n      return undefined;\r\n    }\r\n    return await this.mapBid(auctionId.toString(), bid._bidder, bid._currency, bid._bidAmount.toString());\r\n  }\r\n\r\n  /**\r\n   * Check if a bid is or will be a winning bid\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const auctionId = 0;\r\n   * const bidAmount = 100;\r\n   * const isWinningBid = await contract.englishAuctions.isWinningBid(auctionId, bidAmount);\r\n   * ```\r\n   *\r\n   * @param auctionId - Auction Id\r\n   * @param bidAmount - Amount to bid\r\n   * @returns true if the bid is or will be a winning bid\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  async isWinningBid(auctionId, bidAmount) {\r\n    return await this.contractWrapper.read(\"isNewWinningBid\", [auctionId, bidAmount]);\r\n  }\r\n\r\n  /**\r\n   * Get the winner for a specific english auction\r\n   *\r\n   * @remarks Get the winner of the auction after an auction ends.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The auction ID of a closed english auction\r\n   * const auctionId = 0;\r\n   * const auctionWinner = await contract.englishAuctions.getWinner(auctionId);\r\n   * ```\r\n   * @param auctionId - the auction Id\r\n   * @returns The address of the auction winner\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  async getWinner(auctionId) {\r\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\r\n    const bid = await this.contractWrapper.read(\"getWinningBid\", [auctionId]);\r\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\r\n    const endTime = BigNumber.from(auction.endTimeInSeconds);\r\n\r\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\r\n    if (now.gt(endTime) && bid._bidder !== constants.AddressZero) {\r\n      return bid._bidder;\r\n    }\r\n    // otherwise fall back to query filter things\r\n\r\n    // TODO this should be via indexer or direct contract call\r\n    const contractEvent = new ContractEvents(this.contractWrapper);\r\n    const closedAuctions = await contractEvent.getEvents(\"AuctionClosed\");\r\n    const closed = closedAuctions.find(a => a.data.auctionId.eq(BigNumber.from(auctionId)));\r\n    if (!closed) {\r\n      throw new Error(`Could not find auction with ID ${auctionId} in closed auctions`);\r\n    }\r\n    return closed.data.winningBidder;\r\n  }\r\n\r\n  /** ******************************\r\n   * WRITE FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Create an english auction\r\n   *\r\n   * @remarks Create a new auction where people can bid on an asset.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Data of the auction you want to create\r\n   * const auction = {\r\n   *   // address of the contract of the asset you want to auction\r\n   *   assetContractAddress: \"0x...\",\r\n   *   // token ID of the asset you want to auction\r\n   *   tokenId: \"0\",\r\n   *   // how many of the asset you want to auction\r\n   *   quantity: 1,\r\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\r\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\r\n   *   // the minimum bid that will be accepted for the token\r\n   *   minimumBidAmount: \"1.5\",\r\n   *   // how much people would have to bid to instantly buy the asset\r\n   *   buyoutBidAmount: \"10\",\r\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\r\n   *   timeBufferInSeconds: \"900\", // 15 minutes by default\r\n   *   // A bid must be at least this much bps greater than the current winning bid\r\n   *   bidBufferBps: \"500\", // 5% by default\r\n   *   // when should the auction open up for bidding\r\n   *   startTimestamp: new Date(Date.now()),\r\n   *   // end time of auction\r\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\r\n   * }\r\n   *\r\n   * const tx = await contract.englishAuctions.createAuction(auction);\r\n   * const receipt = tx.receipt; // the transaction receipt\r\n   * const id = tx.id; // the id of the newly created auction\r\n   * ```\r\n   * @param auction - the auction data\r\n   * @returns The transaction hash and the auction id\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  createAuction = /* @__PURE__ */buildTransactionFunction(async auction => {\r\n    const parsedAuction = EnglishAuctionInputParamsSchema.parse(auction);\r\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedAuction.assetContractAddress, parsedAuction.tokenId, await this.contractWrapper.getSignerAddress());\r\n    const normalizedBuyoutAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.buyoutBidAmount, parsedAuction.currencyContractAddress);\r\n    const normalizedMinBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.minimumBidAmount, parsedAuction.currencyContractAddress);\r\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\r\n    const blockTime = block.timestamp;\r\n    if (parsedAuction.startTimestamp.lt(blockTime)) {\r\n      parsedAuction.startTimestamp = BigNumber.from(blockTime);\r\n    }\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"createAuction\",\r\n      args: [{\r\n        assetContract: parsedAuction.assetContractAddress,\r\n        tokenId: parsedAuction.tokenId,\r\n        quantity: parsedAuction.quantity,\r\n        currency: cleanCurrencyAddress(parsedAuction.currencyContractAddress),\r\n        minimumBidAmount: normalizedMinBidAmount,\r\n        buyoutBidAmount: normalizedBuyoutAmount,\r\n        timeBufferInSeconds: parsedAuction.timeBufferInSeconds,\r\n        bidBufferBps: parsedAuction.bidBufferBps,\r\n        startTimestamp: parsedAuction.startTimestamp,\r\n        endTimestamp: parsedAuction.endTimestamp\r\n      }],\r\n      parse: receipt => {\r\n        const event = this.contractWrapper.parseLogs(\"NewAuction\", receipt.logs)[0];\r\n        return {\r\n          id: event.args.auctionId,\r\n          receipt\r\n        };\r\n      }\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Create a batch of new auctions\r\n   *\r\n   * @remarks Create a batch of new auctions on the marketplace\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const auctions = [...];\r\n   * const tx = await contract.englishAuctions.createAuctionsBatch(auctions);\r\n   * ```\r\n   */\r\n  createAuctionsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\r\n    const data = (await Promise.all(listings.map(listing => this.createAuction.prepare(listing)))).map(tx => tx.encode());\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"multicall\",\r\n      args: [data],\r\n      parse: receipt => {\r\n        const events = this.contractWrapper.parseLogs(\"NewAuction\", receipt?.logs);\r\n        return events.map(event => {\r\n          return {\r\n            id: event.args.auctionId,\r\n            receipt\r\n          };\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Buyout an english auction\r\n   *\r\n   * @remarks Buy a specific auction from the marketplace.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The auction ID you want to buy\r\n   * const auctionId = 0;\r\n   *\r\n   * await contract.englishAuctions.buyoutAuction(auctionId);\r\n   * ```\r\n   * @param auctionId - the auction id\r\n   * @returns The transaction result\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  buyoutAuction = /* @__PURE__ */buildTransactionFunction(async auctionId => {\r\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\r\n    const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), auction.currencyContractAddress);\r\n    return this.makeBid.prepare(auctionId, utils.formatUnits(auction.buyoutBidAmount, currencyMetadata.decimals));\r\n  });\r\n\r\n  /**\r\n   * Bid on an english auction\r\n   *\r\n   * @remarks Make a bid on an auction\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The auction ID of the asset you want to bid on\r\n   * const auctionId = 0;\r\n   * // The total amount you are willing to bid for auctioned tokens\r\n   * const bidAmount = 1;\r\n   *\r\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\r\n   * ```\r\n   * @param auctionId - the auction id\r\n   * @param bidAmount - the amount you are willing to bid\r\n   * @returns The transaction result\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  makeBid = /* @__PURE__ */buildTransactionFunction(async (auctionId, bidAmount) => {\r\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\r\n    const normalizedBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), bidAmount, auction.currencyContractAddress);\r\n    if (normalizedBidAmount.eq(BigNumber.from(0))) {\r\n      throw new Error(\"Cannot make a bid with 0 value\");\r\n    }\r\n    if (BigNumber.from(auction.buyoutBidAmount).gt(0) && normalizedBidAmount.gt(auction.buyoutBidAmount)) {\r\n      throw new Error(\"Bid amount must be less than or equal to buyoutBidAmount\");\r\n    }\r\n    const winningBid = await this.getWinningBid(auctionId);\r\n    if (winningBid) {\r\n      const isWinnner = await this.isWinningBid(auctionId, normalizedBidAmount);\r\n      invariant(isWinnner, \"Bid price is too low based on the current winning bid and the bid buffer\");\r\n    } else {\r\n      const tokenPrice = normalizedBidAmount;\r\n      const minimumBidAmount = BigNumber.from(auction.minimumBidAmount);\r\n      invariant(tokenPrice.gte(minimumBidAmount), \"Bid price is too low based on minimum bid amount\");\r\n    }\r\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\r\n    await setErc20Allowance(this.contractWrapper, normalizedBidAmount, auction.currencyContractAddress, overrides);\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"bidInAuction\",\r\n      args: [auctionId, normalizedBidAmount],\r\n      overrides\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Cancel an english auction\r\n   *\r\n   * @remarks Cancel an auction on the marketplace\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The ID of the auction you want to cancel\r\n   * const auctionId = \"0\";\r\n   *\r\n   * await contract.englishAuctions.cancelAuction(auctionId);\r\n   * ```\r\n   * @param auctionId - the auction id\r\n   * @returns The transaction result\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  cancelAuction = /* @__PURE__ */buildTransactionFunction(async auctionId => {\r\n    const winningBid = await this.getWinningBid(auctionId);\r\n    if (winningBid) {\r\n      throw new Error(`Bids already made.`);\r\n    }\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"cancelAuction\",\r\n      args: [auctionId]\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Close the english auction for the bidder\r\n   *\r\n   * @remarks Closes the Auction and executes the sale for the buyer.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The ID of the auction you want to close\r\n   * const auction = \"0\";\r\n   * await contract.englishAuctions.closeAuctionForBidder(auctionId);\r\n   * ```\r\n   *\r\n   * @param auctionId - the auction id to close\r\n   * @param closeFor - optionally pass the winning bid offeror address to close the auction on their behalf\r\n   * @returns The transaction result\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  closeAuctionForBidder = /* @__PURE__ */buildTransactionFunction(async (auctionId, closeFor) => {\r\n    if (!closeFor) {\r\n      closeFor = await this.contractWrapper.getSignerAddress();\r\n    }\r\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\r\n    try {\r\n      return Transaction.fromContractWrapper({\r\n        contractWrapper: this.contractWrapper,\r\n        method: \"collectAuctionTokens\",\r\n        args: [BigNumber.from(auctionId)]\r\n      });\r\n    } catch (err) {\r\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\r\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\r\n      } else {\r\n        throw err;\r\n      }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Close the english auction for the seller\r\n   *\r\n   * @remarks Closes the Auction and executes the sale for the seller.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The ID of the auction you want to close\r\n   * const auctionId = \"0\";\r\n   * await contract.englishAuctions.closeAuctionForSeller(auctionId);\r\n   * ```\r\n   *\r\n   * @param auctionId - the auction id to close\r\n   * @returns The transaction result\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  closeAuctionForSeller = /* @__PURE__ */buildTransactionFunction(async auctionId => {\r\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\r\n    try {\r\n      return Transaction.fromContractWrapper({\r\n        contractWrapper: this.contractWrapper,\r\n        method: \"collectAuctionPayout\",\r\n        args: [BigNumber.from(auctionId)]\r\n      });\r\n    } catch (err) {\r\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\r\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\r\n      } else {\r\n        throw err;\r\n      }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Close the english auction for both the seller and the bidder\r\n   *\r\n   * @remarks Closes the Auction and executes the sale for both parties.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The ID of the auction you want to close\r\n   * const auction = \"0\";\r\n   * await contract.englishAuctions.executeSale(auctionId);\r\n   * ```\r\n   *\r\n   * @param auctionId - the auction to close\r\n   * @returns The transaction result\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  executeSale = /* @__PURE__ */buildTransactionFunction(async auctionId => {\r\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\r\n    try {\r\n      const winningBid = await this.getWinningBid(auctionId);\r\n      invariant(winningBid, \"No winning bid found\");\r\n      const closeForSeller = this.encoder.encode(\"collectAuctionPayout\", [auctionId]);\r\n      const closeForBuyer = this.encoder.encode(\"collectAuctionTokens\", [auctionId]);\r\n      return Transaction.fromContractWrapper({\r\n        contractWrapper: this.contractWrapper,\r\n        method: \"multicall\",\r\n        args: [[closeForSeller, closeForBuyer]]\r\n      });\r\n    } catch (err) {\r\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\r\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\r\n      } else {\r\n        throw err;\r\n      }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get the buffer for an english auction\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The ID of the auction you want to get the buffer for\r\n   * const auctionId = \"0\";\r\n   * const buffer = await contract.englishAuctions.getBidBufferBps(auctionId);\r\n   * ```\r\n   *\r\n   * @param auctionId - id of the auction\r\n   * @returns The buffer in basis points\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  async getBidBufferBps(auctionId) {\r\n    return (await this.getAuction(auctionId)).bidBufferBps;\r\n  }\r\n\r\n  /**\r\n   * Get the minimum next bid for an english auction\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The ID of the auction you want to get the minimum next bid for\r\n   * const auctionId = \"0\";\r\n   * const minimumNextBid = await contract.englishAuctions.getMinimumNextBid(auctionId);\r\n   * ```\r\n   *\r\n   * @returns The minimum bid a user can place to outbid the previous highest bid\r\n   * @param auctionId - id of the auction\r\n   * @twfeature EnglishAuctions\r\n   */\r\n  async getMinimumNextBid(auctionId) {\r\n    // we can fetch all of these at the same time using promise.all\r\n    const [currentBidBufferBps, winningBid, auction] = await Promise.all([this.getBidBufferBps(auctionId), this.getWinningBid(auctionId), this.validateAuction(BigNumber.from(auctionId))]);\r\n    const currentBidOrReservePrice = winningBid ?\r\n    // if there is a winning bid use the value of it\r\n    BigNumber.from(winningBid.bidAmount) :\r\n    // if there is no winning bid use the reserve price\r\n    BigNumber.from(auction.minimumBidAmount);\r\n    const minimumNextBid = currentBidOrReservePrice.add(\r\n    // the addition of the current bid and the buffer\r\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\r\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\r\n\r\n    // it's more useful to return a currency value here\r\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currencyContractAddress, minimumNextBid);\r\n  }\r\n\r\n  /** ******************************\r\n   * PRIVATE FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Throws error if auction could not be found\r\n   *\r\n   * @param auctionId - Auction to check for\r\n   */\r\n  async validateAuction(auctionId) {\r\n    try {\r\n      return await this.getAuction(auctionId);\r\n    } catch (err) {\r\n      console.error(`Error getting the auction with id ${auctionId}`);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method maps the auction to the auction interface.\r\n   *\r\n   * @internal\r\n   * @param auction - The auction to map, as returned from the contract.\r\n   * @returns  The mapped interface.\r\n   */\r\n  async mapAuction(auction) {\r\n    let status = Status.UNSET;\r\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\r\n    const blockTime = block.timestamp;\r\n    switch (auction.status) {\r\n      case 1:\r\n        status = BigNumber.from(auction.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(auction.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\r\n        break;\r\n      case 2:\r\n        status = Status.Completed;\r\n        break;\r\n      case 3:\r\n        status = Status.Cancelled;\r\n        break;\r\n    }\r\n    return {\r\n      id: auction.auctionId.toString(),\r\n      creatorAddress: auction.auctionCreator,\r\n      assetContractAddress: auction.assetContract,\r\n      tokenId: auction.tokenId.toString(),\r\n      quantity: auction.quantity.toString(),\r\n      currencyContractAddress: auction.currency,\r\n      minimumBidAmount: auction.minimumBidAmount.toString(),\r\n      minimumBidCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.minimumBidAmount),\r\n      buyoutBidAmount: auction.buyoutBidAmount.toString(),\r\n      buyoutCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.buyoutBidAmount),\r\n      timeBufferInSeconds: BigNumber.from(auction.timeBufferInSeconds).toNumber(),\r\n      bidBufferBps: BigNumber.from(auction.bidBufferBps).toNumber(),\r\n      startTimeInSeconds: BigNumber.from(auction.startTimestamp).toNumber(),\r\n      endTimeInSeconds: BigNumber.from(auction.endTimestamp).toNumber(),\r\n      asset: await fetchTokenMetadataForContract(auction.assetContract, this.contractWrapper.getProvider(), auction.tokenId, this.storage),\r\n      status: status\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Maps an auction-bid to the strict interface\r\n   *\r\n   * @internal\r\n   * @param bid - The bid to map, as returned from the contract.\r\n   * @returns  A `Bid` object\r\n   */\r\n  async mapBid(auctionId, bidderAddress, currencyContractAddress, bidAmount) {\r\n    const resolvedBidderAddress = await resolveAddress(bidderAddress);\r\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\r\n    return {\r\n      auctionId,\r\n      bidderAddress: resolvedBidderAddress,\r\n      currencyContractAddress: resolvedCurrencyAddress,\r\n      bidAmount,\r\n      bidAmountCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedCurrencyAddress, bidAmount)\r\n    };\r\n  }\r\n  async applyFilter(auctions, filter) {\r\n    let rawAuctions = [...auctions];\r\n    if (filter) {\r\n      if (filter.seller) {\r\n        const resolvedSeller = await resolveAddress(filter.seller);\r\n        rawAuctions = rawAuctions.filter(seller => seller.auctionCreator.toString().toLowerCase() === resolvedSeller?.toString().toLowerCase());\r\n      }\r\n      if (filter.tokenContract) {\r\n        const resolvedToken = await resolveAddress(filter.tokenContract);\r\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());\r\n      }\r\n      if (filter.tokenId !== undefined) {\r\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\r\n      }\r\n    }\r\n    return filter?.count && filter.count < rawAuctions.length ? rawAuctions.slice(0, filter.count) : rawAuctions;\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nconst OfferInputParamsSchema = /* @__PURE__ */(() => z.object({\r\n  /**\r\n   * The address of the asset being sought.\r\n   */\r\n  assetContractAddress: AddressOrEnsSchema,\r\n  /**\r\n   * The ID of the token.\r\n   */\r\n  tokenId: BigNumberishSchema,\r\n  /**\r\n   * The quantity of tokens to buy.\r\n   *\r\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\r\n   */\r\n  quantity: BigNumberishSchema.default(1),\r\n  /**\r\n   * The address of the currency offered for the NFTs.\r\n   */\r\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\r\n  /**\r\n   * The total offer amount for the NFTs.\r\n   */\r\n  totalPrice: AmountSchema,\r\n  /**\r\n   * The end time of the offer.\r\n   */\r\n  endTimestamp: EndDateSchema\r\n}))();\r\n\r\n/**\r\n * @public\r\n */\r\n\r\n/**\r\n * Handles marketplace offers\r\n * @public\r\n */\r\nclass MarketplaceV3Offers {\r\n  featureName = FEATURE_OFFERS.name;\r\n\r\n  // utilities\r\n\r\n  constructor(contractWrapper, storage) {\r\n    this.contractWrapper = contractWrapper;\r\n    this.storage = storage;\r\n    this.events = new ContractEvents(this.contractWrapper);\r\n    this.encoder = new ContractEncoder(this.contractWrapper);\r\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\r\n    this.estimator = new GasCostEstimator(this.contractWrapper);\r\n  }\r\n  getAddress() {\r\n    return this.contractWrapper.address;\r\n  }\r\n\r\n  /** ******************************\r\n   * READ FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Get the total number of offers\r\n   *\r\n   * @returns Returns the total number of offers created.\r\n   * @public\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const totalOffers = await contract.offers.getTotalCount();\r\n   * ```\r\n   * @twfeature Offers\r\n   */\r\n  async getTotalCount() {\r\n    return await this.contractWrapper.read(\"totalOffers\", []);\r\n  }\r\n\r\n  /**\r\n   * Get all offers\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const offers = await contract.offers.getAll();\r\n   * ```\r\n   *\r\n   * @param filter - optional filter parameters\r\n   * @returns The Offer object array\r\n   * @twfeature Offers\r\n   */\r\n  async getAll(filter) {\r\n    const totalOffers = await this.getTotalCount();\r\n    const start = BigNumber.from(filter?.start || 0).toNumber();\r\n    const end = totalOffers.toNumber();\r\n    if (end === 0) {\r\n      throw new Error(`No offers exist on the contract.`);\r\n    }\r\n    let rawOffers = [];\r\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllOffers\", [startId, endId]));\r\n    rawOffers = batches.flat();\r\n    const filteredOffers = await this.applyFilter(rawOffers, filter);\r\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\r\n  }\r\n\r\n  /**\r\n   * Get all valid offers\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const offers = await contract.offers.getAllValid();\r\n   * ```\r\n   *\r\n   * @param filter - optional filter parameters\r\n   * @returns The Offer object array\r\n   * @twfeature Offers\r\n   */\r\n  async getAllValid(filter) {\r\n    const totalOffers = await this.getTotalCount();\r\n    const start = BigNumber.from(filter?.start || 0).toNumber();\r\n    const end = totalOffers.toNumber();\r\n    if (end === 0) {\r\n      throw new Error(`No offers exist on the contract.`);\r\n    }\r\n    let rawOffers = [];\r\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidOffers\", [startId, endId]));\r\n    rawOffers = batches.flat();\r\n    const filteredOffers = await this.applyFilter(rawOffers, filter);\r\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\r\n  }\r\n\r\n  /**\r\n   * Get a single offer\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const offerId = 0;\r\n   * const offer = await contract.offers.getOffer(offerId);\r\n   * ```\r\n   *\r\n   * @param offerId - the listing id\r\n   * @returns The Direct listing object\r\n   * @twfeature Offers\r\n   */\r\n  async getOffer(offerId) {\r\n    const offer = await this.contractWrapper.read(\"getOffer\", [offerId]);\r\n    return await this.mapOffer(offer);\r\n  }\r\n\r\n  /** ******************************\r\n   * WRITE FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Make an offer\r\n   *\r\n   * @remarks Make an offer on the marketplace for an asset.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // Data of the offer you want to make\r\n   * const offer = {\r\n   *   // address of the contract the asset you want to make an offer for\r\n   *   assetContractAddress: \"0x...\",\r\n   *   // token ID of the asset you want to buy\r\n   *   tokenId: \"0\",\r\n   *   // how many of the asset you want to buy\r\n   *   quantity: 1,\r\n   *   // address of the currency contract that you offer to pay in\r\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\r\n   *   // Total price you offer to pay for the mentioned token(s)\r\n   *   totalPrice: \"1.5\",\r\n   *   // Offer valid until\r\n   *   endTimestamp: new Date(),\r\n   * }\r\n   *\r\n   * const tx = await contract.offers.makeOffer(offer);\r\n   * const receipt = tx.receipt; // the transaction receipt\r\n   * const id = tx.id; // the id of the newly created offer\r\n   * ```\r\n   * @param offer - the offer data\r\n   * @returns The transaction receipt and the id of the newly created offer\r\n   * @twfeature Offers\r\n   */\r\n  makeOffer = /* @__PURE__ */buildTransactionFunction(async offer => {\r\n    const parsedOffer = await OfferInputParamsSchema.parseAsync(offer);\r\n    const chainId = await this.contractWrapper.getChainID();\r\n    const currency = isNativeToken(parsedOffer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : parsedOffer.currencyContractAddress;\r\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), parsedOffer.totalPrice, currency);\r\n    const overrides = await this.contractWrapper.getCallOverrides();\r\n    await setErc20Allowance(this.contractWrapper, normalizedTotalPrice, currency, overrides);\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"makeOffer\",\r\n      args: [{\r\n        assetContract: parsedOffer.assetContractAddress,\r\n        tokenId: parsedOffer.tokenId,\r\n        quantity: parsedOffer.quantity,\r\n        currency: currency,\r\n        totalPrice: normalizedTotalPrice,\r\n        expirationTimestamp: parsedOffer.endTimestamp\r\n      }],\r\n      parse: receipt => {\r\n        const event = this.contractWrapper.parseLogs(\"NewOffer\", receipt?.logs);\r\n        return {\r\n          id: event[0].args.offerId,\r\n          receipt\r\n        };\r\n      }\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Cancel an offer\r\n   *\r\n   * @remarks Cancel an offer on the marketplace\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The ID of the offer you want to cancel\r\n   * const offerId = \"0\";\r\n   *\r\n   * await contract.offers.cancelOffer(offerId);\r\n   * ```\r\n   * @param offerId - the offer id\r\n   * @returns The transaction receipt\r\n   * @twfeature Offers\r\n   */\r\n  cancelOffer = /* @__PURE__ */buildTransactionFunction(async offerId => {\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"cancelOffer\",\r\n      args: [offerId]\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Accept an offer\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // The ID of the offer you want to accept\r\n   * const offerId = 0;\r\n   *\r\n   * await contract.offers.acceptOffer(offerId);\r\n   * ```\r\n   *\r\n   * @param offerId - The offer id\r\n   * @returns The transaction receipt\r\n   * @twfeature Offers\r\n   */\r\n  acceptOffer = /* @__PURE__ */buildTransactionFunction(async offerId => {\r\n    const offer = await this.validateOffer(BigNumber.from(offerId));\r\n    const {\r\n      valid,\r\n      error\r\n    } = await this.isStillValidOffer(offer);\r\n    if (!valid) {\r\n      throw new Error(`Offer ${offerId} is no longer valid. ${error}`);\r\n    }\r\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\r\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), offer.assetContractAddress, offer.tokenId, await this.contractWrapper.getSignerAddress());\r\n    return Transaction.fromContractWrapper({\r\n      contractWrapper: this.contractWrapper,\r\n      method: \"acceptOffer\",\r\n      args: [offerId],\r\n      overrides\r\n    });\r\n  });\r\n\r\n  /** ******************************\r\n   * PRIVATE FUNCTIONS\r\n   *******************************/\r\n\r\n  /**\r\n   * Throws error if offer could not be found\r\n   *\r\n   * @param offerId - offer to check for\r\n   */\r\n  async validateOffer(offerId) {\r\n    try {\r\n      return await this.getOffer(offerId);\r\n    } catch (err) {\r\n      console.error(`Error getting the offer with id ${offerId}`);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method maps the offer to the offer interface.\r\n   *\r\n   * @internal\r\n   * @param offer - The offer to map, as returned from the contract.\r\n   * @returns  The mapped interface.\r\n   */\r\n  async mapOffer(offer) {\r\n    let status = Status.UNSET;\r\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\r\n    const blockTime = block.timestamp;\r\n    switch (offer.status) {\r\n      case 1:\r\n        status = BigNumber.from(offer.expirationTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\r\n        break;\r\n      case 2:\r\n        status = Status.Completed;\r\n        break;\r\n      case 3:\r\n        status = Status.Cancelled;\r\n        break;\r\n    }\r\n    return {\r\n      id: offer.offerId.toString(),\r\n      offerorAddress: offer.offeror,\r\n      assetContractAddress: offer.assetContract,\r\n      currencyContractAddress: offer.currency,\r\n      tokenId: offer.tokenId.toString(),\r\n      quantity: offer.quantity.toString(),\r\n      totalPrice: offer.totalPrice.toString(),\r\n      currencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), offer.currency, offer.totalPrice),\r\n      asset: await fetchTokenMetadataForContract(offer.assetContract, this.contractWrapper.getProvider(), offer.tokenId, this.storage),\r\n      endTimeInSeconds: BigNumber.from(offer.expirationTimestamp).toNumber(),\r\n      status: status\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Use this method to check if an offer is still valid.\r\n   *\r\n   * Ways an offer can become invalid:\r\n   * 1. The offer has expired\r\n   * 2. The offeror doesn't have enough balance of currency tokens\r\n   * 3. The offeror removed the approval of currency tokens on the marketplace\r\n   *\r\n   * @internal\r\n   * @param offer - The offer to check.\r\n   * @returns  True if the offer is valid, false otherwise.\r\n   */\r\n  async isStillValidOffer(offer) {\r\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\r\n    if (now.gt(offer.endTimeInSeconds)) {\r\n      return {\r\n        valid: false,\r\n        error: `Offer with ID ${offer.id} has expired`\r\n      };\r\n    }\r\n    const chainId = await this.contractWrapper.getChainID();\r\n    const currency = isNativeToken(offer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : offer.currencyContractAddress;\r\n    const provider = this.contractWrapper.getProvider();\r\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\r\n    const erc20 = new ContractWrapper(provider, currency, ERC20Abi, {}, this.storage);\r\n    const offerorBalance = await erc20.read(\"balanceOf\", [offer.offerorAddress]);\r\n    if (offerorBalance.lt(offer.totalPrice)) {\r\n      return {\r\n        valid: false,\r\n        error: `Offeror ${offer.offerorAddress} doesn't have enough balance of token ${currency}`\r\n      };\r\n    }\r\n    const offerorAllowance = await erc20.read(\"allowance\", [offer.offerorAddress, this.getAddress()]);\r\n    if (offerorAllowance.lt(offer.totalPrice)) {\r\n      return {\r\n        valid: false,\r\n        error: `Offeror ${offer.offerorAddress} hasn't approved enough amount of token ${currency}`\r\n      };\r\n    }\r\n    return {\r\n      valid: true,\r\n      error: \"\"\r\n    };\r\n  }\r\n  async applyFilter(offers, filter) {\r\n    let rawOffers = [...offers];\r\n    if (filter) {\r\n      if (filter.offeror) {\r\n        const resolvedOfferor = await resolveAddress(filter.offeror);\r\n        rawOffers = rawOffers.filter(offeror => offeror.offeror.toString().toLowerCase() === resolvedOfferor?.toString().toLowerCase());\r\n      }\r\n      if (filter.tokenContract) {\r\n        const resolvedToken = await resolveAddress(filter.tokenContract);\r\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());\r\n      }\r\n      if (filter.tokenId !== undefined) {\r\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\r\n      }\r\n    }\r\n    return filter?.count && filter.count < rawOffers.length ? rawOffers.slice(0, filter.count) : rawOffers;\r\n  }\r\n}\r\n\r\nexport { MarketplaceV3DirectListings as M, Status as S, MarketplaceV3EnglishAuctions as a, MarketplaceV3Offers as b };\r\n"],
  "mappings": "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",
  "names": ["Status"]
}
